[
  {
    "file": "AbpAspNetCoreIntegratedTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpAspNetCoreTestBaseModule.cs",
    "methods": []
  },
  {
    "file": "AbpServiceOptionsTestExtensions.cs",
    "methods": []
  },
  {
    "file": "TestOptions.cs",
    "methods": []
  },
  {
    "file": "AbpIntegratedTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpTestBaseModule.cs",
    "methods": []
  },
  {
    "file": "TestAbpSession.cs",
    "methods": []
  },
  {
    "file": "AspectAttribute.cs",
    "methods": []
  },
  {
    "file": "AbpPropertiesDependenciesModelInspector.cs",
    "methods": []
  },
  {
    "file": "AndNotSpecification.cs",
    "methods": []
  },
  {
    "file": "AndSpecification.cs",
    "methods": []
  },
  {
    "file": "AnySpecification.cs",
    "methods": []
  },
  {
    "file": "CompositeSpecification.cs",
    "methods": []
  },
  {
    "file": "ExpressionSpecification.cs",
    "methods": []
  },
  {
    "file": "ICompositeSpecification.cs",
    "methods": []
  },
  {
    "file": "ISpecification.cs",
    "methods": []
  },
  {
    "file": "ISpecificationParser.cs",
    "methods": []
  },
  {
    "file": "NoneSpecification.cs",
    "methods": []
  },
  {
    "file": "NotSpecification.cs",
    "methods": []
  },
  {
    "file": "OrSpecification.cs",
    "methods": []
  },
  {
    "file": "Specification.cs",
    "methods": []
  },
  {
    "file": "SpecificationExtensions.cs",
    "methods": []
  },
  {
    "file": "UnspecifiedClockProvider.cs",
    "methods": []
  },
  {
    "file": "ParameterTestAppService.cs",
    "methods": []
  },
  {
    "file": "ResponseNoCacheTestAppService.cs",
    "methods": []
  },
  {
    "file": "AuthTest2Controller.cs",
    "methods": []
  },
  {
    "file": "AuthTestController.cs",
    "methods": []
  },
  {
    "file": "DontWrapResultTestController.cs",
    "methods": []
  },
  {
    "file": "FluentValidationTestController.cs",
    "methods": []
  },
  {
    "file": "MultiTenancyTestController.cs",
    "methods": []
  },
  {
    "file": "ResponseCacheTestController.cs",
    "methods": []
  },
  {
    "file": "SimpleTestController.cs",
    "methods": []
  },
  {
    "file": "ValidationTestController.cs",
    "methods": []
  },
  {
    "file": "WrapResultTestController.cs",
    "methods": []
  },
  {
    "file": "TestTenantStore.cs",
    "methods": []
  },
  {
    "file": "AbpLocalizationController_Tests.cs",
    "methods": []
  },
  {
    "file": "AppTestBase.cs",
    "methods": []
  },
  {
    "file": "AuditLogTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        _mockAuditingStore.Logs.Count.ShouldBe(0);\n\n        //Act\n\n        await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(\n               GetUrl<SimpleTestController>(\n                   nameof(SimpleTestController.SimpleJsonException),\n                   new\n                   {\n                       message = \"A test message\",\n                       userFriendly = true\n                   }),\n               HttpStatusCode.InternalServerError\n           );\n\n        //Assert\n\n        _mockAuditingStore.Logs.Count.ShouldBe(1);\n        var auditLog = _mockAuditingStore.Logs.ToArray()[0];\n        auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleJsonException));\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IAuditingConfiguration>().SaveReturnValues = true;\n        _mockAuditingStore.Logs.Count.ShouldBe(0);\n\n        //Act\n\n        await GetResponseAsStringAsync(GetUrl<SimpleTestController>(nameof(SimpleTestController.SimpleString)));\n\n        //Assert\n\n        _mockAuditingStore.Logs.Count.ShouldBe(1);\n        var auditLog = _mockAuditingStore.Logs.ToArray()[0];\n        auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleString));\n        auditLog.ReturnValue.ShouldBe(\"\\\"test\\\"\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IAuditingConfiguration>().SaveReturnValues = true;\n        _mockAuditingStore.Logs.Count.ShouldBe(0);\n\n        //Act\n\n        await GetResponseAsStringAsync(GetUrl<SimpleTestController>(nameof(SimpleTestController.SimpleContent)));\n\n        //Assert\n\n        _mockAuditingStore.Logs.Count.ShouldBe(1);\n        var auditLog = _mockAuditingStore.Logs.ToArray()[0];\n        auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleContent));\n        auditLog.ReturnValue.ShouldBe(\"Hello world...\");\n    }"
      }
    ]
  },
  {
    "file": "AuthTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<AuthTestController>(\n                nameof(AuthTestController.NonAuthorizedAction)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"public content\");\n\n        // Act\n        response = await GetResponseAsStringAsync(\n            GetUrl<AuthTest2Controller>(\n                nameof(AuthTest2Controller.NonAuthorizedAction)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"public content 2\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act & Assert\n        await Assert.ThrowsAnyAsync<Exception>(async () =>\n        {\n            await GetResponseAsStringAsync(\n                GetUrl<AuthTestController>(\n                    nameof(AuthTestController.AuthorizedAction)\n                )\n            );\n        });\n\n        // Act & Assert\n        await Assert.ThrowsAnyAsync<Exception>(async () =>\n        {\n            await GetResponseAsStringAsync(\n                GetUrl<AuthTestController>(\n                    nameof(AuthTestController.AbpMvcAuthorizedAction)\n                )\n            );\n        });\n\n        //Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse>(\n                GetUrl<AuthTestController>(\n                    nameof(AuthTestController.AbpMvcAuthorizedActionReturnsObject)\n                ) + \"?X-Requested-With=XMLHttpRequest\",\n                HttpStatusCode.Unauthorized\n            );\n\n        //Assert\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBe(null);\n        response.Error.ShouldNotBeNull();\n        response.Error.Message.ShouldNotBeNull();\n        response.UnAuthorizedRequest.ShouldBeTrue();\n\n        // Act & Assert\n        await Assert.ThrowsAnyAsync<Exception>(async () =>\n        {\n            await GetResponseAsStringAsync(\n                GetUrl<AuthTest2Controller>(\n                    nameof(AuthTest2Controller.AuthorizedAction)\n                )\n            );\n        });\n    }"
      }
    ]
  },
  {
    "file": "DateTimeModelBinder_Tests.cs",
    "methods": []
  },
  {
    "file": "DontWrapResultTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<DontWrapResultTestController>(\n                nameof(DontWrapResultTestController.Get)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<DontWrapResultTestController>(\n                nameof(DontWrapResultTestController.GetBase)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"42\");\n    }"
      }
    ]
  },
  {
    "file": "EntityHistory_Reason_Tests.cs",
    "methods": [
      {
        "name": "HttpRequestEntityChangeSetReasonProvider_Can_Be_Constructor_Injected",
        "body": "{\n        _useCaseMarkedClass.ReasonProvider.ShouldBeOfType<HttpRequestEntityChangeSetReasonProvider>();\n    }"
      },
      {
        "name": "HttpRequestEntityChangeSetReasonProvider_Should_Be_Property_Injected",
        "body": "{\n        _nonUseCaseMarkedClass.ReasonProvider.ShouldBeOfType<HttpRequestEntityChangeSetReasonProvider>();\n    }"
      },
      {
        "name": "Should_Intercept_UseCase_Marked_Classes",
        "body": "{\n        _useCaseMarkedClass.NonUseCaseMarkedMethod();\n    }"
      },
      {
        "name": "Should_Intercept_UseCase_Marked_Methods",
        "body": "{\n        _nonUseCaseMarkedClass.UseCaseMarkedMethod();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        await _nonUseCaseMarkedClass.UseCaseMarkedAsyncMethod();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        await _nonUseCaseMarkedClass.UseCaseMarkedAsyncMethodWithResult();\n    }"
      },
      {
        "name": "Should_Not_Intercept_No_UseCase_Marked_Method",
        "body": "{\n        _nonUseCaseMarkedClass.AnotherMethod();\n    }"
      }
    ]
  },
  {
    "file": "FluentValidation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument1>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetJsonValue),\n                new { value = 42 }\n            )\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Value.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument3>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetNullableJsonValue),\n                new FluentValidationTestController.ValidationTestArgument3 { Value = null }\n            )\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Value.ShouldBe(null);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument3>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetNullableJsonValue2)\n            ),\n            new StringContent(\"{ \\\"value\\\": null }\", Encoding.UTF8, \"application/json\")\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Value.ShouldBe(null);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument2>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetJsonValueWithArray)\n            ),\n            new StringContent(\"{ \\\"array\\\": [ { \\\"value\\\": 1}, { \\\"value\\\": 3}, { \\\"value\\\": 5}] }\", Encoding.UTF8, \"application/json\")\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Array.Length.ShouldBe(3);\n        response.Result.Array[0].Value.ShouldBe(1);\n        response.Result.Array[1].Value.ShouldBe(3);\n        response.Result.Array[2].Value.ShouldBe(5);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument2>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetJsonValueWithArray)\n            ),\n            new StringContent(\"{ \\\"array\\\": [ { \\\"value\\\": 1}, { \\\"value\\\": -3}] }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(2);\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"array\");\n        response.Error.ValidationErrors[0].Message.ShouldBe(\"Array must contain at least three items\");\n        response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument1>>(\n            GetUrl<FluentValidationTestController>(\n                nameof(FluentValidationTestController.GetJsonValue)\n            ),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n    }"
      }
    ]
  },
  {
    "file": "MultiTenancy_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");\n\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(\n            GetUrl<MultiTenancyTestController>(\n                nameof(MultiTenancyTestController.GetTenantId)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        _multiTenancyConfig.TenantIdResolveKey = \"Abp-TenantId\";\n\n        Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");\n\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(\n            GetUrl<MultiTenancyTestController>(\n                nameof(MultiTenancyTestController.GetTenantId)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Client.DefaultRequestHeaders.Add(\"Cookie\", new CookieHeaderValue(_multiTenancyConfig.TenantIdResolveKey, \"42\").ToString());\n\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(\n            GetUrl<MultiTenancyTestController>(\n                nameof(MultiTenancyTestController.GetTenantId)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Client.DefaultRequestHeaders.Add(\"Cookie\", new CookieHeaderValue(_multiTenancyConfig.TenantIdResolveKey, \"43\").ToString());\n        Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");\n\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(\n            GetUrl<MultiTenancyTestController>(\n                nameof(MultiTenancyTestController.GetTenantId)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(42);\n    }"
      }
    ]
  },
  {
    "file": "NameConflict_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(\n            GetUrl<NameConflictController>(\n                nameof(NameConflictController.GetSelfActionUrl)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(\"/NameConflict/GetSelfActionUrl\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(\n            GetUrl<NameConflictController>(\n                nameof(NameConflictController.GetAppServiceActionUrlWithArea)\n            )\n        );\n\n        //Assert\n        response.Result.ShouldBe(\"/api/services/app/NameConflict/GetConstantString\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(\n            \"/api/services/app/NameConflict/GetConstantString\"\n        );\n\n        //Assert\n        response.Result.ShouldBe(\"return-value-from-app-service\");\n    }"
      }
    ]
  },
  {
    "file": "ProxyScripting_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<AbpServiceProxiesController>(\n                nameof(AbpServiceProxiesController.GetAll),\n                new { type = JQueryProxyScriptGenerator.Name }\n            )\n        );\n\n        response.ShouldNotBeNullOrEmpty();\n    }"
      }
    ]
  },
  {
    "file": "ResponseCacheTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsync(\n            GetUrl<ResponseCacheTestController>(\n                nameof(ResponseCacheTestController.Get)\n            )\n        );\n\n        // Assert\n        response.Headers.CacheControl.ShouldBeNull();\n        response.Headers.Pragma.Count.ShouldBe(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsync(\n            GetUrl<ResponseCacheTestController>(\n                nameof(ResponseCacheTestController.GetWithCache)\n            )\n        );\n\n        // Assert\n        response.Headers.CacheControl.ShouldNotBeNull();\n        response.Headers.CacheControl.MaxAge.ShouldBe(TimeSpan.FromSeconds(60));\n        response.Headers.CacheControl.Public.ShouldBeTrue();\n        response.Headers.Pragma.Count.ShouldBe(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsync(\n            GetUrl<ResponseCacheTestController>(\n                nameof(ResponseCacheTestController.GetWithoutCache)\n            )\n        );\n\n        // Assert\n        response.Headers.CacheControl.ShouldNotBeNull();\n        response.Headers.CacheControl.NoCache.ShouldBeTrue();\n        response.Headers.CacheControl.NoStore.ShouldBeTrue();\n        response.Headers.Pragma.Single().Name.ShouldBe(\"no-cache\");\n    }"
      }
    ]
  },
  {
    "file": "ResponseNoCacheTestAppService_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsync(\n            GetUrl<ResponseNoCacheTestAppService>(\n                nameof(ResponseNoCacheTestAppService.Get)\n            )\n        );\n\n        // Assert\n        response.Headers.CacheControl.ShouldNotBeNull();\n        response.Headers.CacheControl.NoCache.ShouldBeTrue();\n        response.Headers.CacheControl.NoStore.ShouldBeTrue();\n        response.Headers.Pragma.Single().Name.ShouldBe(\"no-cache\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsync(\n            GetUrl<ResponseNoCacheTestAppService>(\n                nameof(ResponseNoCacheTestAppService.GetWithCache)\n            )\n        );\n\n        // Assert\n        response.Headers.CacheControl.ShouldNotBeNull();\n        response.Headers.CacheControl.MaxAge.ShouldBe(TimeSpan.FromSeconds(20));\n        response.Headers.CacheControl.Private.ShouldBeTrue();\n        response.Headers.Pragma.Count.ShouldBe(0);\n    }"
      }
    ]
  },
  {
    "file": "SimpleTestControllerTests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Controller",
        "body": "{\n        ServiceProvider.GetService<SimpleTestController>().ShouldNotBeNull();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n                           GetUrl<SimpleTestController>(\n                               nameof(SimpleTestController.SimpleContent)\n                           )\n                       );\n\n        // Assert\n        response.ShouldBe(\"Hello world...\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(\n                           GetUrl<SimpleTestController>(\n                               nameof(SimpleTestController.SimpleJson)\n                           )\n                       );\n\n        //Assert\n        response.Result.StrValue.ShouldBe(\"Forty Two\");\n        response.Result.IntValue.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //Act & Assert\n        await Assert.ThrowsAsync<UserFriendlyException>(async () =>\n        {\n            await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(\n                GetUrl<SimpleTestController>(\n                    nameof(SimpleTestController.SimpleJsonExceptionDownWrap)\n                ));\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<SimpleViewModel>(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.SimpleJsonDontWrap)\n            ));\n\n        //Assert\n        response.StrValue.ShouldBe(\"Forty Two\");\n        response.IntValue.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse>(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.GetVoidTest)\n            ));\n\n        response.Success.ShouldBeTrue();\n        response.Result.ShouldBeNull();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.GetVoidTestDontWrap)\n            ));\n\n        response.ShouldBeNullOrEmpty();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.GetActionResultTest)\n            ));\n\n        //Assert\n        response.ShouldBe(\"GetActionResultTest-Result\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.GetActionResultTest2)\n            ));\n\n        //Assert\n        response.ShouldBe(\"GetActionResultTestAsync-Result\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse>(\n            GetUrl<SimpleTestController>(\n                nameof(SimpleTestController.GetVoidExceptionTest)\n            ), HttpStatusCode.InternalServerError);\n\n        response.Error.ShouldNotBeNull();\n        response.Error.Message.ShouldBe(\"GetVoidExceptionTestAsync-Exception\");\n        response.Result.ShouldBeNull();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        (await Assert.ThrowsAsync<UserFriendlyException>(async () =>\n        {\n            await GetResponseAsStringAsync(\n                GetUrl<SimpleTestController>(\n                    nameof(SimpleTestController.GetActionResultExceptionTest)\n                ), HttpStatusCode.InternalServerError);\n        })).Message.ShouldBe(\"GetActionResultExceptionTestAsync-Exception\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //Arrange\n        Client.DefaultRequestHeaders.Add(CookieRequestCultureProvider.DefaultCookieName, \"c=it|uic=it\");\n\n        var culture = await GetResponseAsStringAsync(\n                GetUrl<SimpleTestController>(\n                    nameof(SimpleTestController.GetCurrentCultureNameTest)\n                ));\n\n        culture.ShouldBe(\"it\");\n    }"
      }
    ]
  },
  {
    "file": "UnitOfWorkMiddleware_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var response = await Client.GetAsync(\"/\");\n        var str = await response.Content.ReadAsStringAsync();\n        str.ShouldBe(\"not-null\");\n    }"
      }
    ]
  },
  {
    "file": "ArrayMacther_Tests.cs",
    "methods": []
  },
  {
    "file": "Validation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetContentValue),\n                new { value = 42 }\n            )\n        );\n\n        response.ShouldBe(\"OK: 42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValue),\n                new { value = 42 }\n            )\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Value.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValue)\n            ),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument2>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithEnum)\n            ),\n            new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n\n        //The JSON value could not be converted to Abp.AspNetCore.App.Controllers.ValidationTestController+ValidationTestEnum.\n        //Path: $ | LineNumber: 0 | BytePositionInLine: 5.\n        //response.Error.ValidationErrors[0].Members[0].ShouldBe(\"$.value\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument3>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithValidatableObject)\n            ),\n            new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be higher than 0\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument4>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithCustomValidate)\n            ),\n            new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be \\\"abp\\\"\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument5>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithCombinedValidators)\n            ),\n            new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(2);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");\n    }"
      }
    ]
  },
  {
    "file": "WrapResultTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<WrapResultTestController>(\n                nameof(WrapResultTestController.Get)\n            )\n        );\n\n        // Assert\n        response.ShouldNotBe(\"42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<WrapResultTestController>(\n                nameof(WrapResultTestController.GetDontWrap)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<WrapResultTestController>(\n                nameof(WrapResultTestController.GetDontWrapByUrl)\n            )\n        );\n\n        // Assert\n        response.ShouldBe(\"42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<WrapResultTestController>(\n                nameof(WrapResultTestController.GetDontWrapByUrlWithException)\n            )\n        ).ShouldThrowAsync<UserFriendlyException>();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<WrapResultTestController>(\n                nameof(WrapResultTestController.GetXml)\n            )\n        );\n\n        // Assert\n        var result = XElement.Parse(response).Elements().FirstOrDefault(x =>\n            string.Equals(x.Name.ToString(), \"result\", StringComparison.InvariantCultureIgnoreCase));\n        result.ShouldNotBeNull();\n        result.Value.ShouldBe(\"42\");\n    }"
      }
    ]
  },
  {
    "file": "AbpAutomapperTestModule.cs",
    "methods": []
  },
  {
    "file": "AutoMapper_Inheritance_Tests.cs",
    "methods": [
      {
        "name": "Should_Map_Derived_To_Target",
        "body": "{\n        var derived = new MyDerivedClass { Value = \"fortytwo\" };\n        var target = _mapper.Map<MyTargetClassToMap>(derived);\n        target.Value.ShouldBe(\"fortytwo\");\n    }"
      },
      {
        "name": "Should_Map_EntityProxy_To_EntityDto_And_To_DrivedEntityDto",
        "body": "{\n        var proxy = new EntityProxy() { Value = \"42\" };\n        var target = _mapper.Map<EntityDto>(proxy);\n        var target2 = _mapper.Map<DerivedEntityDto>(proxy);\n        target.Value.ShouldBe(\"42\");\n        target2.Value.ShouldBe(\"42\");\n    }"
      },
      {
        "name": "AutoMapKey_MapTo_DerivedCollection_Tests",
        "body": "{\n        var list1 = new List<MyAutoMapKeyClass1>\n                        {\n                            new MyAutoMapKeyClass1 { Id = 1, TestProp = \"New test value 1\"},\n                            new MyAutoMapKeyClass1 { Id = 2, TestProp = \"New test value 2\"}\n                        };\n\n        var list2 = new List<MyAutoMapKeyClass2>\n                        {\n                            new MyAutoMapKeyClass2 { Id = 1, TestProp = \"Test value 1\", Value = 5},\n                            new MyAutoMapKeyClass2 { Id = 2, TestProp = \"Test value 2\", Value = 10}\n                        };\n\n        var list3 = new List<MyAutoMapKeyClass3>\n                        {\n                            new MyAutoMapKeyClass3 { Id = 1, TestProp = \"New test value 1\"},\n                            new MyAutoMapKeyClass3 { Id = 2, TestProp = \"New test value 2\"}\n                        };\n\n        var list4 = new List<MyAutoMapKeyClass4>\n                        {\n                            new MyAutoMapKeyClass4 { Id = 1, TestProp = \"Test value 1\", Value = 5},\n                            new MyAutoMapKeyClass4 { Id = 2, TestProp = \"Test value 2\", Value = 10}\n                        };\n\n        var list5 = new List<MyAutoMapKeyClass5>\n                        {\n                            new MyAutoMapKeyClass5 { Id = 1, SecondId = 2, TestProp = \"New test value 1\"},\n                            new MyAutoMapKeyClass5 { Id = 2, SecondId = 3, TestProp = \"New test value 2\"}\n                        };\n\n        var list6 = new List<MyAutoMapKeyClass6>\n                        {\n                            new MyAutoMapKeyClass6 { Id = 1, SecondId = 2,  TestProp = \"Test value 1\", Value = 5},\n                            new MyAutoMapKeyClass6 { Id = 2, SecondId = 3,  TestProp = \"Test value 2\", Value = 10}\n                        };\n\n        var list7 = new List<MyAutoMapKeyClass7>\n                        {\n                            new MyAutoMapKeyClass7 { Id = 1, SecondId = 2,  TestProp = \"New test value 1\"},\n                            new MyAutoMapKeyClass7 { Id = 2, SecondId = 3,  TestProp = \"New test value 2\"}\n                        };\n\n        var list8 = new List<MyAutoMapKeyClass8>\n                        {\n                            new MyAutoMapKeyClass8 { Id = 1, SecondId = 2,  TestProp = \"Test value 1\", Value = 5},\n                            new MyAutoMapKeyClass8 { Id = 2, SecondId = 3,  TestProp = \"Test value 2\", Value = 10}\n                        };\n\n        _mapper.Map(list1, list2);\n        list2.Count.ShouldBe(2);\n        list2[0].TestProp.ShouldBe(\"New test value 1\");\n        list2[0].Value.ShouldBe(5);\n        list2[1].TestProp.ShouldBe(\"New test value 2\");\n        list2[1].Value.ShouldBe(10);\n\n        _mapper.Map(list3, list4);\n        list4.Count.ShouldBe(2);\n        list4[0].TestProp.ShouldBe(\"New test value 1\");\n        list4[0].Value.ShouldBe(5);\n        list4[1].TestProp.ShouldBe(\"New test value 2\");\n        list4[1].Value.ShouldBe(10);\n\n        _mapper.Map(list5, list6);\n        list6.Count.ShouldBe(2);\n        list6[0].TestProp.ShouldBe(\"New test value 1\");\n        list6[0].Value.ShouldBe(5);\n        list6[1].TestProp.ShouldBe(\"New test value 2\");\n        list6[1].Value.ShouldBe(10);\n\n        _mapper.Map(list7, list8);\n        list8.Count.ShouldBe(2);\n        list8[0].TestProp.ShouldBe(\"New test value 1\");\n        list8[0].Value.ShouldBe(5);\n        list8[1].TestProp.ShouldBe(\"New test value 2\");\n        list8[1].Value.ShouldBe(10);\n    }"
      }
    ]
  },
  {
    "file": "AutoMapping_Tests.cs",
    "methods": [
      {
        "name": "Map_Null_Tests",
        "body": "{\n        MyClass1 obj1 = null;\n        var obj2 = _mapper.Map<MyClass2>(obj1);\n        obj2.ShouldBe(null);\n    }"
      },
      {
        "name": "Map_Null_Existing_Object_Tests",
        "body": "{\n        MyClass1 obj1 = null;\n\n        var obj2 = new MyClass2 { TestProp = \"before map\" };\n        _mapper.Map(obj1, obj2);\n        obj2.TestProp.ShouldBe(\"before map\");\n    }"
      },
      {
        "name": "MapTo_Tests",
        "body": "{\n        var obj1 = new MyClass1 { TestProp = \"Test value\" };\n\n        var obj2 = _mapper.Map<MyClass2>(obj1);\n        obj2.TestProp.ShouldBe(\"Test value\");\n\n        var obj3 = _mapper.Map<MyClass3>(obj1);\n        obj3.TestProp.ShouldBe(\"Test value\");\n    }"
      },
      {
        "name": "Should_Map_Two_Way_When_AutoMap_Attribute_Is_Used",
        "body": "{\n        MyClass3 obj2 = new MyClass3\n        {\n            TestProp = \"test\",\n            AnotherValue = 1\n        };\n\n        var obj1 = _mapper.Map<MyClass1>(obj2);\n\n        obj1.TestProp.ShouldBe(\"test\");\n    }"
      },
      {
        "name": "MapTo_Existing_Object_Tests",
        "body": "{\n        var obj1 = new MyClass1 { TestProp = \"Test value\" };\n\n        var obj2 = new MyClass2();\n        _mapper.Map(obj1, obj2);\n        obj2.TestProp.ShouldBe(\"Test value\");\n\n        var obj3 = new MyClass3();\n        _mapper.Map(obj2, obj3);\n        obj3.TestProp.ShouldBe(\"Test value\");\n\n        Assert.ThrowsAny<Exception>(() => // Did not define reverse mapping!\n        {\n            _mapper.Map(obj3, obj2);\n        });\n    }"
      },
      {
        "name": "MapFrom_Tests",
        "body": "{\n        var obj2 = new MyClass2 { TestProp = \"Test value\" };\n\n        var obj1 = _mapper.Map<MyClass1>(obj2);\n        obj1.TestProp.ShouldBe(\"Test value\");\n    }"
      },
      {
        "name": "IgnoreMap_Tests",
        "body": "{\n        var obj2 = new MyClass2 { TestProp = \"Test value\", AnotherValue = 42 };\n        var obj3 = _mapper.Map<MyClass3>(obj2);\n        obj3.TestProp.ShouldBe(\"Test value\");\n        obj3.AnotherValue.ShouldBe(0); //Ignored because of IgnoreMap attribute!\n    }"
      },
      {
        "name": "MapTo_Collection_Tests",
        "body": "{\n        var list1 = new List<MyClass1>\n                        {\n                            new MyClass1 {TestProp = \"Test value 1\"},\n                            new MyClass1 {TestProp = \"Test value 2\"}\n                        };\n\n        var list2 = _mapper.Map<List<MyClass2>>(list1);\n        list2.Count.ShouldBe(2);\n        list2[0].TestProp.ShouldBe(\"Test value 1\");\n        list2[1].TestProp.ShouldBe(\"Test value 2\");\n    }"
      },
      {
        "name": "AutoMapKey_MapTo_Collection_Tests",
        "body": "{\n        var list1 = new List<MyAutoMapKeyClass1>\n                        {\n                            new MyAutoMapKeyClass1 { Id = 1, TestProp = \"New test value 1\"},\n                            new MyAutoMapKeyClass1 { Id = 2, TestProp = \"New test value 2\"}\n                        };\n        var list2 = new List<MyAutoMapKeyClass2>\n                        {\n                            new MyAutoMapKeyClass2 { Id = 1, SecondId = 10, ThirdId = 100, TestProp = \"Test value 1\", Value = 5},\n                            new MyAutoMapKeyClass2 { Id = 2,  SecondId = 20, ThirdId = 200,TestProp = \"Test value 2\", Value = 10}\n                        };\n        var list3 = new List<MyAutoMapKeyClass3>\n                        {\n                            new MyAutoMapKeyClass3 { SecondId = 10, ThirdId = 100, TestProp = \"Test value 1\", SecondValue = 50},\n                            new MyAutoMapKeyClass3 { SecondId = 20, ThirdId = 200, TestProp = \"Test value 2\", SecondValue = 100}\n                        };\n\n        _mapper.Map(list1, list2);\n        list2.Count.ShouldBe(2);\n        list2[0].TestProp.ShouldBe(\"New test value 1\");\n        list2[0].Value.ShouldBe(5);\n        list2[1].TestProp.ShouldBe(\"New test value 2\");\n        list2[1].Value.ShouldBe(10);\n\n        _mapper.Map(list2, list3);\n        list3.Count.ShouldBe(2);\n        list3[0].TestProp.ShouldBe(\"New test value 1\");\n        list3[0].SecondValue.ShouldBe(50);\n        list3[1].TestProp.ShouldBe(\"New test value 2\");\n        list3[1].SecondValue.ShouldBe(100);\n    }"
      },
      {
        "name": "Map_Should_Set_Null_Existing_Object_Tests",
        "body": "{\n        MyClass1 obj1 = new MyClass1 { TestProp = null };\n        var obj2 = new MyClass2 { TestProp = \"before map\" };\n        _mapper.Map(obj1, obj2);\n        obj2.TestProp.ShouldBe(null);\n    }"
      },
      {
        "name": "Should_Map_Nullable_Value_To_Null_If_It_Is_Null_On_Source",
        "body": "{\n        var obj1 = new MyClass1();\n        var obj2 = _mapper.Map<MyClass2>(obj1);\n        obj2.NullableValue.ShouldBe(null);\n    }"
      },
      {
        "name": "Should_Map_Nullable_Value_To__Not_Null_If_It_Is__Not_Null_On_Source",
        "body": "{\n        var obj1 = new MyClass1 { NullableValue = 42 };\n        var obj2 = _mapper.Map<MyClass2>(obj1);\n        obj2.NullableValue.ShouldBe(42);\n    }"
      }
    ]
  },
  {
    "file": "StaticAutoMapper_Tests.cs",
    "methods": [
      {
        "name": "StaticAutoMapper_Test",
        "body": "{\n        AbpEmulateAutoMapper.Mapper.ShouldNotBeNull();\n\n        var a = new ClassA\n        {\n            Id = 1,\n            Name = \"test1\"\n        };\n\n        var b = a.MapTo<ClassB>();\n\n        b.Id.ShouldBe(1);\n        b.Name.ShouldBe(\"test1\");\n\n\n        var c = new ClassB\n        {\n            Id = 2,\n            Name = \"test2\"\n        };\n\n        a.MapTo(c);\n\n        c.Id.ShouldBe(1);\n        c.Name.ShouldBe(\"test1\");\n    }"
      }
    ]
  },
  {
    "file": "AbpBlobStoringAzureTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpBlobStoringAzureTestModule.cs",
    "methods": []
  },
  {
    "file": "AzureBlobContainer_Tests.cs",
    "methods": []
  },
  {
    "file": "AzureBlobNameCalculator_Tests.cs",
    "methods": [
      {
        "name": "Default_Settings",
        "body": "{\n        _calculator.Calculate(\n            GetArgs(\"my-container\", \"my-blob\")\n        ).ShouldBe($\"host{AzureSeparator}my-blob\");\n    }"
      },
      {
        "name": "Default_Settings_With_TenantId",
        "body": "{\n        var tenantId = RandomHelper.GetRandom();\n\n        using (AbpSession.Use(tenantId, null))\n        {\n            _calculator.Calculate(\n                GetArgs(\"my-container\", \"my-blob\")\n            ).ShouldBe($\"tenants{AzureSeparator}{tenantId:D}{AzureSeparator}my-blob\");\n        }\n    }"
      }
    ]
  },
  {
    "file": "DefaultAzureBlobNamingNormalizerProvider_Tests.cs",
    "methods": [
      {
        "name": "NormalizeContainerName_Lowercase",
        "body": "{\n        var filename = \"ThisIsMyContainerName\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"thisismycontainername\");\n    }"
      },
      {
        "name": "NormalizeContainerName_Only_Letters_Numbers_Dash",
        "body": "{\n        var filename = \",./this-i,./s-my-c,./ont,./ai+*/.=!@#$n^&*er-name.+/\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"this-is-my-container-name\");\n    }"
      },
      {
        "name": "NormalizeContainerName_Dash",
        "body": "{\n        var filename = \"-this--is----my-container----name-\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"this-is-my-container-name\");\n    }"
      },
      {
        "name": "NormalizeContainerName_Min_Length",
        "body": "{\n        var filename = \"a\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.Length.ShouldBeGreaterThanOrEqualTo(3);\n    }"
      },
      {
        "name": "NormalizeContainerName_Max_Length",
        "body": "{\n        var filename = \"abpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabp\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.Length.ShouldBeLessThanOrEqualTo(63);\n    }"
      },
      {
        "name": "NormalizeContainerName_Max_Length_Dash",
        "body": "{\n        var filename = \"-this-is-my-container-name-abpabpabpabpabpabpabpabp-a-b-p-a--b-p-\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"this-is-my-container-name-abpabpabpabpabpabpabpabp-a-b-p-a-b\");\n    }"
      }
    ]
  },
  {
    "file": "AbpBlobStoringFileSystemTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpBlobStoringFileSystemTestModule.cs",
    "methods": []
  },
  {
    "file": "BlogFilePathCalculator_Tests.cs",
    "methods": [
      {
        "name": "Default_Settings",
        "body": "{\n        var separator = Path.DirectorySeparatorChar;\n\n        _calculator.Calculate(\n            GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\")\n        ).ShouldBe($\"C:{separator}my-files{separator}host{separator}my-container{separator}my-blob\");\n    }"
      },
      {
        "name": "Default_Settings_With_TenantId",
        "body": "{\n        var separator = Path.DirectorySeparatorChar;\n        var tenantId = RandomHelper.GetRandom();\n\n        using (AbpSession.Use(tenantId, null))\n        {\n            _calculator.Calculate(\n                GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\")\n            ).ShouldBe($\"C:{separator}my-files{separator}tenants{separator}{tenantId:D}{separator}my-container{separator}my-blob\");\n        }\n    }"
      },
      {
        "name": "AppendContainerNameToBasePath_Set_To_False",
        "body": "{\n        var separator = Path.DirectorySeparatorChar;\n\n        _calculator.Calculate(\n            GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\", appendContainerNameToBasePath: false)\n        ).ShouldBe($\"C:{separator}my-files{separator}host{separator}my-blob\");\n    }"
      }
    ]
  },
  {
    "file": "DefaultFileSystemBlobNamingNormalizerProvider_Tests.cs",
    "methods": [
      {
        "name": "NormalizeContainerName",
        "body": "{\n        var filename = \"thisismy:*?\\\"<>|foldername\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"thisismyfoldername\");\n    }"
      },
      {
        "name": "NormalizeBlobName",
        "body": "{\n        var filename = \"thisismy:*?\\\"<>|filename\";\n        filename = _blobNamingNormalizer.NormalizeContainerName(filename);\n        filename.ShouldBe(\"thisismyfilename\");\n    }"
      }
    ]
  },
  {
    "file": "FileSystemBlobContainer_Tests.cs",
    "methods": []
  },
  {
    "file": "AbpBlobStoringOptions_Tests.cs",
    "methods": [
      {
        "name": "Should_Property_Set_And_Get_Options_For_Different_Containers",
        "body": "{\n        var testContainer1Config = _configurationProvider.Get<TestContainer1>();\n        testContainer1Config.ProviderType.ShouldBe(typeof(FakeBlobProvider1));\n        testContainer1Config.GetConfigurationOrDefault<string>(\"TestConfig1\").ShouldBe(\"TestValue1\");\n        testContainer1Config.GetConfigurationOrDefault<string>(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");\n\n        var testContainer2Config = _configurationProvider.Get<TestContainer2>();\n        testContainer2Config.ProviderType.ShouldBe(typeof(FakeBlobProvider2));\n        testContainer2Config.GetConfigurationOrNull(\"TestConfig2\").ShouldBe(\"TestValue2\");\n        testContainer2Config.GetConfigurationOrNull(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");\n    }"
      },
      {
        "name": "Should_Fallback_To_Default_Configuration_If_Not_Specialized",
        "body": "{\n        var config = _configurationProvider.Get<TestContainer3>();\n        config.ProviderType.ShouldBe(typeof(FakeBlobProvider1));\n        config.GetConfigurationOrNull(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");\n    }"
      }
    ]
  },
  {
    "file": "AbpBlobStoringTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpBlobStoringTestModule.cs",
    "methods": []
  },
  {
    "file": "BlobContainerFactory_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // TestContainer1 with FakeBlobProvider1\n\n        await _fakeProviders.Provider1\n            .DidNotReceiveWithAnyArgs()\n            .ExistsAsync(default);\n\n        await _factory\n            .Create<TestContainer1>()\n            .ExistsAsync(\"TestBlob1\");\n\n        await _fakeProviders.Provider1\n            .Received(1)\n            .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(args =>\n                    args.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer1>() &&\n                    args.BlobName == \"TestBlob1\"\n                )\n            );\n\n        // TestContainer2 with FakeBlobProvider2\n\n        await _fakeProviders.Provider2\n            .DidNotReceiveWithAnyArgs()\n            .ExistsAsync(default);\n\n        await _factory\n            .Create<TestContainer2>()\n            .ExistsAsync(\"TestBlob2\");\n\n        await _fakeProviders.Provider2\n            .Received(1)\n            .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(args =>\n                    args.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer2>() &&\n                    args.BlobName == \"TestBlob2\"\n                )\n            );\n\n        // TestContainer3 with FakeBlobProvider1 (default provider)\n\n        _fakeProviders.Provider1.ClearReceivedCalls();\n\n        await _factory\n            .Create<TestContainer3>()\n            .ExistsAsync(\"TestBlob3\");\n\n        await _fakeProviders.Provider1\n            .Received(1)\n            .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(t =>\n                    t.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer3>() &&\n                    t.BlobName == \"TestBlob3\"\n                )\n            );\n    }"
      }
    ]
  },
  {
    "file": "BlobContainerNameAttribute_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Specified_Name",
        "body": "{\n        BlobContainerNameAttribute\n            .GetContainerName<TestContainer2>()\n            .ShouldBe(\"Test2\");\n    }"
      },
      {
        "name": "Should_Get_Full_Class_Name_If_Not_Specified",
        "body": "{\n        BlobContainerNameAttribute\n            .GetContainerName<TestContainer1>()\n            .ShouldBe(typeof(TestContainer1).FullName);\n    }"
      }
    ]
  },
  {
    "file": "BlobContainer_Injection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_DefaultContainer_For_Non_Generic_Interface",
        "body": "{\n        Resolve<IBlobContainer>()\n            .ShouldBeOfType<BlobContainer<DefaultContainer>>();\n    }"
      },
      {
        "name": "Should_Inject_Specified_Container_For_Generic_Interface",
        "body": "{\n        Resolve<IBlobContainer<DefaultContainer>>()\n            .ShouldBeOfType<BlobContainer<DefaultContainer>>();\n\n        Resolve<IBlobContainer<TestContainer1>>()\n            .ShouldBeOfType<BlobContainer<TestContainer1>>();\n\n        Resolve<IBlobContainer<TestContainer2>>()\n            .ShouldBeOfType<BlobContainer<TestContainer2>>();\n\n        Resolve<IBlobContainer<TestContainer3>>()\n            .ShouldBeOfType<BlobContainer<TestContainer3>>();\n    }"
      }
    ]
  },
  {
    "file": "BlobContainer_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var blobName = \"test-blob-1\";\n        var testContent = \"test content\".GetBytes();\n\n        using (AbpSession.Use(RandomHelper.GetRandom(), null))\n        {\n            await Container.SaveAsync(blobName, testContent);\n            (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();\n        }\n\n        using (AbpSession.Use(RandomHelper.GetRandom(), null))\n        {\n            await Container.SaveAsync(blobName, testContent);\n            (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();\n\n            using (AbpSession.Use(null, null))\n            {\n                // Could not found the requested BLOB...\n                await Assert.ThrowsAsync<AbpException>(async () =>\n                    await Container.GetAllBytesAsync(blobName)\n                );\n            }\n        }\n\n        using (AbpSession.Use(null, null))\n        {\n            await Container.SaveAsync(blobName, testContent);\n            (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var blobName = \"test-blob-1\";\n\n        var testContent = \"test content\".GetBytes();\n        await Container.SaveAsync(blobName, testContent);\n\n        var testContentOverwritten = \"test content overwritten\".GetBytes();\n        await Container.SaveAsync(blobName, testContentOverwritten, true);\n\n        var result = await Container.GetAllBytesAsync(blobName);\n        result.SequenceEqual(testContentOverwritten).ShouldBeTrue();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var blobName = \"test-blob-1\";\n\n        var testContent = \"test content\".GetBytes();\n        await Container.SaveAsync(blobName, testContent);\n\n        var testContentOverwritten = \"test content overwritten\".GetBytes();\n        await Assert.ThrowsAsync<BlobAlreadyExistsException>(() =>\n            Container.SaveAsync(blobName, testContentOverwritten)\n        );\n    }"
      }
    ]
  },
  {
    "file": "BlobProviderSelector_Tests.cs",
    "methods": [
      {
        "name": "Should_Select_Default_Provider_If_Not_Configured",
        "body": "{\n        _selector.Get<TestContainer3>().ShouldBeAssignableTo<FakeBlobProvider1>();\n    }"
      },
      {
        "name": "Should_Select_Configured_Provider",
        "body": "{\n        _selector.Get<TestContainer1>().ShouldBeAssignableTo<FakeBlobProvider1>();\n        _selector.Get<TestContainer2>().ShouldBeAssignableTo<FakeBlobProvider2>();\n    }"
      }
    ]
  },
  {
    "file": "TestContainer1.cs",
    "methods": []
  },
  {
    "file": "TestContainer2.cs",
    "methods": []
  },
  {
    "file": "TestContainer3.cs",
    "methods": []
  },
  {
    "file": "Castle_Log4Net_Tests.cs",
    "methods": [
      {
        "name": "Should_Write_Logs_To_Text_File",
        "body": "{\n            //Arrange\n            var logFilePath = Path.Combine(Directory.GetCurrentDirectory(), \"AbpCastleLog4NetTests-Logs.txt\");\n            FileHelper.DeleteIfExists(logFilePath); //Clean old file\n\n            //Act\n            var container = new WindsorContainer();\n            container.AddFacility<LoggingFacility>(facility =>\n            {\n                facility.UseAbpLog4Net().WithConfig(\"log4net.config\");\n            });\n\n            var logger = container.Resolve<ILoggerFactory>().Create(typeof(Castle_Log4Net_Tests));\n            logger.Info(\"Should_Write_Logs_To_Text_File works!\");\n\n            //Assert\n            File.Exists(logFilePath).ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "AbpDapperTestModule.cs",
    "methods": []
  },
  {
    "file": "DapperApplicationTestBase.cs",
    "methods": []
  },
  {
    "file": "DapperRepository_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())\n            {\n                //---Insert operation should work and tenant, creation audit properties must be set---------------------\n                await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));\n                Product insertedProduct = await _productDapperRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");\n\n                insertedProduct.ShouldNotBeNull();\n                insertedProduct.TenantId.ShouldBe(AbpSession.TenantId);\n                ((DateTime?) insertedProduct.CreationTime).ShouldNotBe(null);\n                insertedProduct.CreatorUserId.ShouldBe(AbpSession.UserId);\n\n                //----Update operation should work and Modification Audits should be set---------------------------\n                await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));\n                Product productToUpdate = await _productDapperRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");\n                productToUpdate.Name = \"Pants\";\n                await _productDapperRepository.UpdateAsync(productToUpdate);\n\n                productToUpdate.ShouldNotBeNull();\n                productToUpdate.TenantId.ShouldBe(AbpSession.TenantId);\n                ((DateTime?) productToUpdate.CreationTime).ShouldNotBe(null);\n                productToUpdate.LastModifierUserId.ShouldBe(AbpSession.UserId);\n\n                //---Get method should return single-------------------------------------------------------------------\n                await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));\n                Action getAction = () => _productDapperRepository.Single(x => x.Name == \"TShirt\");\n\n                getAction.ShouldThrow<InvalidOperationException>(\"Sequence contains more than one element\");\n\n                //----Select * from syntax should work---------------------------------\n                var queryResult = await _productDapperRepository.QueryAsync(\"select * from Products\");\n\n                IEnumerable<Product> products = queryResult;\n\n                products.Count().ShouldBeGreaterThan(0);\n\n                //------------Ef and Dapper should work under same transaction---------------------\n                Product productFromEf = await _productRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");\n                Product productFromDapper = await _productDapperRepository.SingleAsync(productFromEf.Id);\n\n                productFromDapper.Name.ShouldBe(productFromEf.Name);\n                productFromDapper.TenantId.ShouldBe(productFromEf.TenantId);\n\n                //------Soft Delete should work for Dapper--------------\n                await _productDapperRepository.InsertAsync(new Product(\"SoftDeletableProduct\"));\n\n                Product toSoftDeleteProduct = await _productDapperRepository\n                    .SingleAsync(x => x.Name == \"SoftDeletableProduct\");\n\n                await _productDapperRepository.DeleteAsync(toSoftDeleteProduct);\n\n                toSoftDeleteProduct.IsDeleted.ShouldBe(true);\n                toSoftDeleteProduct.DeleterUserId.ShouldBe(AbpSession.UserId);\n                toSoftDeleteProduct.TenantId.ShouldBe(AbpSession.TenantId);\n\n                Product softDeletedProduct = await _productRepository\n                    .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");\n\n                softDeletedProduct.ShouldBeNull();\n\n                Product softDeletedProductFromDapper = await _productDapperRepository\n                    .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");\n\n                softDeletedProductFromDapper.ShouldBeNull();\n\n                using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))\n                {\n                    Product softDeletedProductWhenFilterDisabled = await _productRepository\n                        .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");\n\n                    softDeletedProductWhenFilterDisabled.ShouldNotBeNull();\n\n                    Product softDeletedProductFromDapperWhenFilterDisabled = await _productDapperRepository\n                        .SingleAsync(x => x.Name == \"SoftDeletableProduct\");\n\n                    softDeletedProductFromDapperWhenFilterDisabled.ShouldNotBeNull();\n                }\n\n                using (AbpSession.Use(2, 266))\n                {\n                    int productWithTenant2Id = await _productDapperRepository\n                        .InsertAndGetIdAsync(new Product(\"ProductWithTenant2\"));\n\n                    var productWithTenant2 = await _productRepository.GetAsync(productWithTenant2Id);\n\n                    productWithTenant2.TenantId\n                        .ShouldBe(1); // Not sure about that?,Because we changed TenantId to 2 in this scope !!! Abp-TenantId = 2 now NOT 1 !!!\n                }\n\n                using (_unitOfWorkManager.Current.SetTenantId(3))\n                {\n                    int productWithTenant3Id = await _productDapperRepository\n                        .InsertAndGetIdAsync(new Product(\"ProductWithTenant3\"));\n\n                    Product productWithTenant3 = await _productRepository.GetAsync(productWithTenant3Id);\n\n                    productWithTenant3.TenantId.ShouldBe(3);\n                }\n\n                Product productWithTenantId3FromDapper = await _productDapperRepository\n                    .FirstOrDefaultAsync(x => x.Name == \"ProductWithTenant3\");\n\n                productWithTenantId3FromDapper.ShouldBeNull();\n\n                Product p = await _productDapperRepository.FirstOrDefaultAsync(x => x.Status == Status.Active);\n                p.ShouldNotBeNull();\n\n                using (_unitOfWorkManager.Current.SetTenantId(3))\n                {\n                    Product productWithTenantId3FromDapperInsideTenantScope = await _productDapperRepository\n                        .FirstOrDefaultAsync(x => x.Name == \"ProductWithTenant3\");\n\n                    productWithTenantId3FromDapperInsideTenantScope.ShouldNotBeNull();\n                }\n\n                //About issue-#2091\n                using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))\n                {\n                    int productWithTenantId40 = await _productDapperRepository\n                        .InsertAndGetIdAsync(new Product(\"ProductWithTenantId40\"));\n\n                    Product productWithTenant40 = await _productRepository.GetAsync(productWithTenantId40);\n\n                    productWithTenant40.TenantId.ShouldBe(AbpSession.TenantId);\n                    productWithTenant40.CreatorUserId.ShouldBe(AbpSession.UserId);\n                }\n\n                //Second DbContext tests\n                var productDetailId = await _productDetailRepository\n                    .InsertAndGetIdAsync(new ProductDetail(\"Woman\"));\n\n                (await _productDetailDapperRepository.GetAsync(productDetailId)).ShouldNotBeNull();\n\n                await uow.CompleteAsync();\n            }\n        }"
      },
      {
        "name": "Should_Insert_Only_Have_IMustHaveTenant",
        "body": "{\n            using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())\n            {\n                using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))\n                {\n                    int personWithTenantId40 =\n                        _personDapperRepository.InsertAndGetId(new Person(\"PersonWithTenantId40\"));\n\n                    Person personWithTenant40 = _personRepository.Get(personWithTenantId40);\n\n                    personWithTenant40.TenantId.ShouldBe(AbpSession.TenantId.Value);\n                }\n            }\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())\n            {\n                using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))\n                {\n                    await _goodDapperRepository.InsertAsync(new Good {Name = \"AbpTest\"});\n                    await _unitOfWorkManager.Current.SaveChangesAsync();\n\n                    int? id = 1;\n\n                    var dapperCount = await _goodDapperRepository.CountAsync(a => a.Id != id && a.Name == \"AbpTest\");\n                    dapperCount.ShouldBe(0);\n                }\n\n                await uow.CompleteAsync();\n            }\n        }"
      }
    ]
  },
  {
    "file": "AbpEfCoreDapperTestApplicationBase.cs",
    "methods": []
  },
  {
    "file": "AbpEfCoreDapperTestModule.cs",
    "methods": []
  },
  {
    "file": "DomainEvents_Tests.cs",
    "methods": [
      {
        "name": "Should_Trigger_Domain_Events_For_Aggregate_Root",
        "body": "{\n        //Arrange\n\n        var isTriggered = false;\n\n        _eventBus.Register<BlogUrlChangedEventData>(data =>\n        {\n            data.OldUrl.ShouldBe(\"http://testblog1.myblogs.com\");\n            isTriggered = true;\n        });\n\n        //Act\n\n        Blog blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");\n        blog1.ChangeUrl(\"http://testblog1-changed.myblogs.com\");\n        _blogRepository.Update(blog1);\n\n\n        //Assert\n        _blogDapperRepository.Get(blog1.Id).ShouldNotBeNull();\n        isTriggered.ShouldBeTrue();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var triggerCount = 0;\n\n        Resolve<IEventBus>().Register<EntityCreatedEventData<Blog>>(\n            eventData =>\n            {\n                eventData.Entity.Name.ShouldBe(\"OnSoftware\");\n                eventData.Entity.IsTransient().ShouldBe(false);\n                triggerCount++;\n            });\n\n        await _blogDapperRepository.InsertAsync(new Blog(\"OnSoftware\", \"www.aspnetboilerplate.com\"));\n\n        triggerCount.ShouldBe(1);\n    }"
      }
    ]
  },
  {
    "file": "Repository_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Initial_Blogs",
        "body": "{\n        //Act\n        List<Blog> blogs = _blogRepository.GetAllList();\n        IEnumerable<Blog> blogsFromDapper = _blogDapperRepository.GetAll();\n\n        //Assert\n        blogs.Count.ShouldBeGreaterThan(0);\n        blogsFromDapper.Count().ShouldBeGreaterThan(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        int blog1Id;\n        int blog2Id;\n\n        //Act\n\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.SingleAsync(b => b.Name == \"test-blog-1\");\n            blog1Id = blog1.Id;\n\n            blog1.Name = \"test-blog-1-updated\";\n\n            await _blogDapperRepository.InsertAsync(new Blog(\"test-blog-2\", \"www\"));\n\n            Blog blog2 = await _blogRepository.SingleAsync(x => x.Name == \"test-blog-2\");\n            blog2Id = blog2.Id;\n\n            blog2.Name = \"test-blog-2-updated\";\n\n            await _blogDapperRepository.UpdateAsync(blog2);\n\n            await uow.CompleteAsync();\n        }\n\n        //Assert\n\n        await UsingDbContextAsync(async context =>\n        {\n            Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);\n            blog1.Name.ShouldBe(\"test-blog-1-updated\");\n\n            Blog blog2 = await context.Blogs.SingleAsync(b => b.Id == blog2Id);\n            blog2.Name.ShouldBe(\"test-blog-2-updated\");\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        int blog1Id;\n\n        //Act\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogDapperRepository.SingleAsync(b => b.Name == \"test-blog-1\");\n            blog1Id = blog1.Id;\n\n            blog1.Name = \"test-blog-1-updated\";\n            await _blogDapperRepository.UpdateAsync(blog1);\n\n            await uow.CompleteAsync();\n        }\n\n        //Assert\n\n        await UsingDbContextAsync(async context =>\n        {\n            Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);\n            blog1.Name.ShouldBe(\"test-blog-1-updated\");\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //EF Core does not support lazy loading yet, so navigation properties will not be loaded if not included\n\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Post post = await _postRepository.GetAll().FirstAsync();\n\n            post.Blog.ShouldBeNull();\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Post post = await _postRepository.GetAllIncluding(p => p.Blog).FirstAsync();\n\n            post.Blog.ShouldNotBeNull();\n            post.Blog.Name.ShouldBe(\"test-blog-1\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            var blog = new Blog(\"blog2\", \"http://myblog2.com\");\n            blog.IsTransient().ShouldBeTrue();\n            await _blogRepository.InsertAsync(blog);\n            await uow.CompleteAsync();\n            blog.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            var blog = new Blog(\"blog2\", \"http://myblog2.com\");\n            blog.IsTransient().ShouldBeTrue();\n            await _blogDapperRepository.InsertAsync(blog);\n            await uow.CompleteAsync();\n            blog.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.GetAsync(1);\n            var post = new Post(blog1, \"a test title\", \"a test body\");\n            post.IsTransient().ShouldBeTrue();\n            await _postRepository.InsertAsync(post);\n            await uow.CompleteAsync();\n            post.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.GetAsync(1);\n            var post = new Post(blog1.Id, \"a test title\", \"a test body\");\n            post.IsTransient().ShouldBeTrue();\n            await _postDapperRepository.InsertAsync(post);\n            await uow.CompleteAsync();\n            post.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            int blogId = _blogDapperRepository.InsertAndGetId(new Blog(\"Oguzhan_Same_Uow\", \"www\"));\n\n            Blog blog = _blogRepository.Get(blogId);\n\n            blog.ShouldNotBeNull();\n\n            uow.Complete();\n        }\n    }"
      },
      {
        "name": "querying_with_TEntity_TPrimaryKey_should_work_on_dapper_repositories",
        "body": "{\n        _commentRepository.Insert(new Comment(\"hey!\"));\n\n        List<Comment> comments = _commentDapperRepository.Query(\"select * from Comments\").ToList();\n        List<Comment> comments2 = _commentDapperRepository.Query<Comment>(\"select * from Comments\").ToList();\n\n        comments2.Count.ShouldBe(1);\n        comments.Count.ShouldBe(1);\n    }"
      }
    ]
  },
  {
    "file": "Transaction_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        const string exceptionMessage = \"This is a test exception!\";\n\n        string blogName = Guid.NewGuid().ToString(\"N\");\n\n        try\n        {\n            using (_uowManager.Begin())\n            {\n                await _blogRepository.InsertAsync(\n                    new Blog(blogName, $\"http://{blogName}.com/\")\n                );\n\n                throw new Exception(exceptionMessage);\n            }\n        }\n        catch (Exception ex) when (ex.Message == exceptionMessage)\n        {\n        }\n\n        var blog = await _blogRepository.FirstOrDefaultAsync(x => x.Name == blogName);\n        blog.ShouldBeNull();\n    }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork_and_when_any_exception_appears_then_rollback_should_be_consistent_for_two_orm",
        "body": "{\n        Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(\n            eventData =>\n            {\n                eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");\n\n                throw new Exception(\"Uow Rollback\");\n            });\n\n        try\n        {\n            using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())\n            {\n                var blogId = _blogDapperRepository.InsertAndGetId(\n                    new Blog(\"Oguzhan_Same_Uow\", \"www.oguzhansoykan.com\")\n                );\n\n                Blog person = _blogRepository.Get(blogId);\n\n                person.ShouldNotBeNull();\n\n                uow.Complete();\n            }\n        }\n        catch (Exception)\n        {\n            //no handling.\n        }\n\n        _blogDapperRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();\n        _blogRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(eventData =>\n        {\n            eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");\n        });\n\n        var blogId = 0;\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            blogId = await _blogDapperRepository.InsertAndGetIdAsync(\n                new Blog(\"Oguzhan_Same_Uow\", \"www.aspnetboilerplate.com\")\n            );\n\n            var person = await _blogRepository.GetAsync(blogId);\n\n            person.ShouldNotBeNull();\n\n            await uow.CompleteAsync();\n        }\n\n        try\n        {\n            using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>()\n                .Begin(new UnitOfWorkOptions { IsTransactional = true }))\n            {\n                await _blogDapperRepository.ExecuteAsync(\n                    \"Update Blogs Set Name = @name where Id =@id\",\n                    new\n                    {\n                        id = blogId,\n                        name = \"Oguzhan_New_Blog\"\n                    }\n                );\n\n                throw new Exception(\"uow rollback\");\n\n                // Unreachable code.\n                // await uow.CompleteAsync();\n            }\n        }\n        catch (Exception)\n        {\n            //no handling.\n        }\n\n        (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();\n        (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();\n\n        (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();\n        (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();\n    }"
      }
    ]
  },
  {
    "file": "EntityFrameworkCoreModuleTestBase.cs",
    "methods": []
  },
  {
    "file": "EntityFrameworkCoreTestModule.cs",
    "methods": []
  },
  {
    "file": "DateTimeKind_Normalization_Tests.cs",
    "methods": [
      {
        "name": "DateTime_Kind_Should_Be_Normalized_To_UTC_Test",
        "body": "{\n        // Clock.Provider is set to 'ClockProviders.Utc' \n        // in the constructor of EntityFrameworkCoreModuleTestBase\n        Clock.Kind.ShouldBe(DateTimeKind.Utc);\n\n        //Act\n\n        var blogs = _blogRepository.GetAllList();\n\n        //Assert\n\n        blogs.Count.ShouldBeGreaterThan(0);\n\n        foreach (var blog in blogs)\n        {\n            blog.CreationTime.Kind.ShouldBe(DateTimeKind.Utc);\n            blog.DeletionTime.ShouldNotBe(null);\n            blog.DeletionTime.Value.Kind.ShouldBe(DateTimeKind.Utc);\n            blog.DeletionTime.Value.ToString(\"yyy-MM-dd HH:mm:ss\").ShouldBe(\"2019-01-01 00:00:00\");\n            blog.BlogTime.LastAccessTime.Kind.ShouldBe(DateTimeKind.Utc);\n            blog.BlogTime.LatestPosTime.Kind.ShouldNotBe(DateTimeKind.Utc);\n        }\n    }"
      },
      {
        "name": "DateTime_Kind_Should_Not_Be_Normalized_Test",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            var category = _blogCategoryRepository.GetAllList().FirstOrDefault();\n            _blogCategoryRepository.EnsureCollectionLoaded(category, c => c.SubCategories);\n\n            //Assert\n\n            category.ShouldNotBeNull();\n            category.CreationTime.Kind.ShouldBe(DateTimeKind.Unspecified);\n\n            foreach (var subCategory in category.SubCategories)\n            {\n                subCategory.CreationTime.Kind.ShouldBe(DateTimeKind.Unspecified);\n            }\n\n            uow.Complete();\n        }\n    }"
      }
    ]
  },
  {
    "file": "DbQuery_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var blogViewRepository = Resolve<IRepository<BlogView>>();\n\n        var blogViews = await blogViewRepository.GetAllListAsync();\n\n        blogViews.ShouldNotBeNull();\n        blogViews.ShouldContain(x => x.Name == \"test-blog-1\" && x.Url == \"http://testblog1.myblogs.com\");\n    }"
      }
    ]
  },
  {
    "file": "DomainEvents_Tests.cs",
    "methods": [
      {
        "name": "Should_Trigger_Domain_Events_For_Aggregate_Root",
        "body": "{\n        //Arrange\n\n        var isTriggered = false;\n\n        _eventBus.Register<BlogUrlChangedEventData>(data =>\n        {\n            data.OldUrl.ShouldBe(\"http://testblog1.myblogs.com\");\n            isTriggered = true;\n        });\n\n        //Act\n\n        Blog blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");\n        blog1.ChangeUrl(\"http://testblog1-changed.myblogs.com\");\n        _blogRepository.Update(blog1);\n\n\n        //Assert\n        _blogDapperRepository.Get(blog1.Id).ShouldNotBeNull();\n        isTriggered.ShouldBeTrue();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var triggerCount = 0;\n\n        Resolve<IEventBus>().Register<EntityCreatedEventData<Blog>>(\n            eventData =>\n            {\n                eventData.Entity.Name.ShouldBe(\"OnSoftware\");\n                eventData.Entity.IsTransient().ShouldBe(false);\n                triggerCount++;\n            });\n\n        await _blogDapperRepository.InsertAsync(new Blog(\"OnSoftware\", \"www.aspnetboilerplate.com\"));\n\n        triggerCount.ShouldBe(1);\n    }"
      }
    ]
  },
  {
    "file": "EntityChangeEvents_Tests.cs",
    "methods": [
      {
        "name": "Complex_Event_Test",
        "body": "{\n        var blogName = Guid.NewGuid().ToString(\"N\");\n\n        var creatingEventTriggered = false;\n        var createdEventTriggered = false;\n        var updatingEventTriggered = false;\n        var updatedEventTriggered = false;\n        var blogUrlChangedEventTriggered = false;\n\n        _eventBus.Register<EntityCreatingEventData<Blog>>(data =>\n        {\n            creatingEventTriggered.ShouldBeFalse();\n            createdEventTriggered.ShouldBeFalse();\n            updatingEventTriggered.ShouldBeFalse();\n            updatedEventTriggered.ShouldBeFalse();\n            blogUrlChangedEventTriggered.ShouldBeFalse();\n\n            creatingEventTriggered = true;\n\n            ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);\n            data.Entity.Name.ShouldBe(blogName);\n\n            /* Want to change url from http:// to https:// (ensure to save https url always)\n             * Expect to trigger EntityUpdatingEventData, EntityUpdatedEventData and BlogUrlChangedEventData events */\n            data.Entity.Url.ShouldStartWith(\"http://\");\n            data.Entity.ChangeUrl(data.Entity.Url.Replace(\"http://\", \"https://\"));\n        });\n\n        _eventBus.Register<EntityCreatedEventData<Blog>>(data =>\n        {\n            creatingEventTriggered.ShouldBeTrue();\n            createdEventTriggered.ShouldBeFalse();\n            updatingEventTriggered.ShouldBeTrue();\n            updatedEventTriggered.ShouldBeFalse();\n            blogUrlChangedEventTriggered.ShouldBeTrue();\n\n            createdEventTriggered = true;\n\n            ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);\n            data.Entity.Name.ShouldBe(blogName);\n        });\n\n        _eventBus.Register<EntityUpdatingEventData<Blog>>(data =>\n        {\n            creatingEventTriggered.ShouldBeTrue();\n            createdEventTriggered.ShouldBeFalse();\n            updatingEventTriggered.ShouldBeFalse();\n            updatedEventTriggered.ShouldBeFalse();\n            blogUrlChangedEventTriggered.ShouldBeFalse();\n\n            updatingEventTriggered = true;\n\n            ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);\n            data.Entity.Name.ShouldBe(blogName);\n            data.Entity.Url.ShouldStartWith(\"https://\");\n        });\n\n        _eventBus.Register<EntityUpdatedEventData<Blog>>(data =>\n        {\n            creatingEventTriggered.ShouldBeTrue();\n            createdEventTriggered.ShouldBeTrue();\n            updatingEventTriggered.ShouldBeTrue();\n            updatedEventTriggered.ShouldBeFalse();\n            blogUrlChangedEventTriggered.ShouldBeTrue();\n\n            updatedEventTriggered = true;\n\n            ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);\n            data.Entity.Name.ShouldBe(blogName);\n            data.Entity.Url.ShouldStartWith(\"https://\");\n        });\n\n        _eventBus.Register<BlogUrlChangedEventData>(data =>\n        {\n            creatingEventTriggered.ShouldBeTrue();\n            createdEventTriggered.ShouldBeFalse();\n            updatingEventTriggered.ShouldBeTrue();\n            updatedEventTriggered.ShouldBeFalse();\n            blogUrlChangedEventTriggered.ShouldBeFalse();\n\n            blogUrlChangedEventTriggered = true;\n\n            ((bool?)data.Blog.IsTransient()).ShouldNotBe(null);\n            data.Blog.Name.ShouldBe(blogName);\n            data.Blog.Url.ShouldStartWith(\"https://\");\n        });\n\n        _blogRepository.Insert(new Blog(blogName, \"http://aspnetboilerplate.com\"));\n    }"
      }
    ]
  },
  {
    "file": "ExplicitLoading_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var uowManager = Resolve<IUnitOfWorkManager>();\n        using (var uow = uowManager.Begin())\n        {\n            var blog = await _blogRepository.FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");\n            blog.ShouldNotBeNull();\n            blog.Posts.ShouldBeNull(); //Because EF core does not have lazy loading yet!\n\n            await _blogRepository.EnsureCollectionLoadedAsync(blog, b => b.Posts);\n            blog.Posts.ShouldNotBeNull(); //Now loaded it!\n            blog.Posts.Count.ShouldBeGreaterThan(0);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var post = await _postRepository.FirstOrDefaultAsync(b => b.Title == \"test-post-1-title\");\n            post.ShouldNotBeNull();\n            post.Blog.ShouldBeNull(); //Because EF core does not have lazy loading yet!\n\n            await _postRepository.EnsurePropertyLoadedAsync(post, p => p.Blog);\n            post.Blog.ShouldNotBeNull(); //Now loaded it!\n            post.Blog.Name.ShouldBe(\"test-blog-1\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "Parallel_Querying_Tests.cs",
    "methods": []
  },
  {
    "file": "QueryableExtensions_Tests.cs",
    "methods": [
      {
        "name": "Ef_Core_IncludeIf_Extension_With_Query_Test",
        "body": "{\n        UsingDbContext(context =>\n        {\n            var blog = context.Blogs.Where(b => b.Name == \"test-blog-1\")\n                              .IncludeIf(true, e => e.Include(b => b.Posts).ThenInclude(p => p.Comments))\n                              .FirstOrDefault();\n\n            blog.ShouldNotBeNull();\n            blog.Name.ShouldBe(\"test-blog-1\");\n\n            var post = blog.Posts.FirstOrDefault(p => p.Title == \"test-post-1-title\");\n\n            post.ShouldNotBeNull();\n            post.Comments.Count.ShouldBe(1);\n        });\n    }"
      },
      {
        "name": "Ef_Core_IncludeIf_Extension_With_Path_Test",
        "body": "{\n        UsingDbContext(context =>\n        {\n            var blog = context.Blogs.Where(b => b.Name == \"test-blog-1\")\n                .IncludeIf(true, \"Posts\")\n                .IncludeIf(true, \"Posts.Comments\")\n                .FirstOrDefault();\n\n            blog.ShouldNotBeNull();\n            blog.Name.ShouldBe(\"test-blog-1\");\n\n            var post = blog.Posts.FirstOrDefault(p => p.Title == \"test-post-1-title\");\n\n            post.ShouldNotBeNull();\n            post.Comments.Count.ShouldBe(1);\n        });\n    }"
      }
    ]
  },
  {
    "file": "Repository_Extension_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using var uow = _uowManager.Begin();\n        var blog1 = new Blog(\"blog1\", \"http://myblog1.com\");\n        var blog2 = new Blog(\"blog2\", \"http://myblog2.com\");\n        var blog3 = new Blog(\"blog3\", \"http://myblog3.com\");\n        var blog4 = new Blog(\"blog4\", \"http://myblog4.com\");\n\n        blog1.IsTransient().ShouldBeTrue();\n        blog2.IsTransient().ShouldBeTrue();\n        blog3.IsTransient().ShouldBeTrue();\n        blog4.IsTransient().ShouldBeTrue();\n\n        _blogRepository.InsertRange(blog1, blog2);\n        _blogRepository.InsertRange(new List<Blog> { blog3, blog4 });\n\n        await uow.CompleteAsync();\n\n        blog1.IsTransient().ShouldBeFalse();\n        blog2.IsTransient().ShouldBeFalse();\n        blog3.IsTransient().ShouldBeFalse();\n        blog4.IsTransient().ShouldBeFalse();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using var uow = _uowManager.Begin();\n        var blog1 = new Blog(\"blog1\", \"http://myblog1.com\");\n        var blog2 = new Blog(\"blog2\", \"http://myblog2.com\");\n        var blog3 = new Blog(\"blog3\", \"http://myblog3.com\");\n        var blog4 = new Blog(\"blog4\", \"http://myblog4.com\");\n\n        blog1.IsTransient().ShouldBeTrue();\n        blog2.IsTransient().ShouldBeTrue();\n        blog3.IsTransient().ShouldBeTrue();\n        blog4.IsTransient().ShouldBeTrue();\n\n        await _blogRepository.InsertRangeAsync(blog1, blog2);\n        await _blogRepository.InsertRangeAsync(new List<Blog> { blog3, blog4 });\n\n        await uow.CompleteAsync();\n\n        blog1.IsTransient().ShouldBeFalse();\n        blog2.IsTransient().ShouldBeFalse();\n        blog3.IsTransient().ShouldBeFalse();\n        blog4.IsTransient().ShouldBeFalse();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var count = await _blogRepository.CountAsync();\n\n        var blogs = new List<Blog>\n            {\n                new(\"blog1\", \"http://myblog1.com\"),\n                new(\"blog2\", \"http://myblog2.com\"),\n                new(\"blog3\", \"http://myblog3.com\"),\n                new(\"blog4\", \"http://myblog4.com\")\n            };\n\n        using (var uow = _uowManager.Begin())\n        {\n            await _blogRepository.InsertRangeAsync(blogs);\n\n            await uow.CompleteAsync();\n\n            var afterCount = await _blogRepository.CountAsync();\n            afterCount.ShouldBe(count + 4);\n        }\n\n        using (var uow = _uowManager.Begin())\n        {\n            _blogRepository.RemoveRange(blogs[0], blogs[1]);\n            _blogRepository.RemoveRange(new List<Blog> { blogs[2], blogs[3] });\n\n            await uow.CompleteAsync();\n\n            var afterCount = await _blogRepository.CountAsync();\n            afterCount.ShouldBe(count);\n        }\n\n    }"
      }
    ]
  },
  {
    "file": "Repository_Filtering_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var posts = await _postRepository.GetAllListAsync();\n        posts.All(p => !p.IsDeleted).ShouldBeTrue();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))\n            {\n                var posts = await _postRepository.GetAllListAsync();\n                posts.Any(p => p.IsDeleted).ShouldBeTrue();\n            }\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var postsDefault = await _postRepository.GetAllListAsync();\n        postsDefault.Any(p => p.TenantId == null).ShouldBeTrue();\n\n        //Switch to tenant 42\n        AbpSession.TenantId = 42;\n\n        var posts1 = await _postRepository.GetAllListAsync();\n        posts1.All(p => p.TenantId == 42).ShouldBeTrue();\n\n        //Switch to host\n        AbpSession.TenantId = null;\n\n        var posts2 = await _postRepository.GetAllListAsync();\n        posts2.Any(p => p.TenantId == 42).ShouldBeFalse();\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            //Switch to tenant 42\n            using (_unitOfWorkManager.Current.SetTenantId(42))\n            {\n                var posts3 = await _postRepository.GetAllListAsync(p => p.Title != null);\n                posts3.All(p => p.TenantId == 42).ShouldBeTrue();\n            }\n\n            var posts4 = await _postRepository.GetAllListAsync();\n            posts4.Any(p => p.TenantId == 42).ShouldBeFalse();\n            posts4.Any(p => p.TenantId == null).ShouldBeTrue();\n\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))\n            {\n                var posts5 = await _postRepository.GetAllListAsync();\n                posts5.Any(p => p.TenantId == 42).ShouldBeTrue();\n                posts5.Any(p => p.TenantId == null).ShouldBeTrue();\n            }\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //Should get all entities for the host\n        var ticketsDefault = await _ticketRepository.GetAllListAsync();\n        ticketsDefault.Any(t => t.TenantId == 1).ShouldBeTrue();\n        ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();\n\n        //Switch to tenant 42\n        AbpSession.TenantId = 42;\n        ticketsDefault = await _ticketRepository.GetAllListAsync();\n        ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();\n        ticketsDefault.Any(t => t.TenantId != 42).ShouldBeFalse();\n\n        //TODO: Create unit test\n        //TODO: Change filter\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //Should get all entities for the host\n        var ticketsDefault = await _ticketListItemRepository.GetAllListAsync();\n        ticketsDefault.Any(t => t.TenantId == 1).ShouldBeTrue();\n        ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();\n\n        //Switch to tenant 42\n        AbpSession.TenantId = 42;\n        ticketsDefault = await _ticketListItemRepository.GetAllListAsync();\n        ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();\n        ticketsDefault.Any(t => t.TenantId != 42).ShouldBeFalse();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        await WithUnitOfWorkAsync(async () =>\n        {\n            var blog = await _blogRepository.GetAll().Include(x => x.Posts).FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");\n            blog.Posts.ShouldNotBeEmpty();\n\n            blog.Posts.Clear();\n            await _blogRepository.UpdateAsync(blog);\n        });\n\n        await WithUnitOfWorkAsync(async () =>\n        {\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))\n            {\n                var blog = await _blogRepository.GetAll().Include(x => x.Posts).FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");\n                blog.Posts.ShouldNotBeEmpty();\n                blog.Posts.ShouldAllBe(x => x.IsDeleted);\n            }\n        });\n    }"
      }
    ]
  },
  {
    "file": "Repository_Resolve_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Custom_Repository_If_Registered",
        "body": "{\n        var postRepository = Resolve<IRepository<Post, Guid>>();\n\n        postRepository.GetAllList().Any().ShouldBeTrue();\n\n        Assert.Throws<Exception>(\n            () => postRepository.Count()\n        ).Message.ShouldBe(\"can not get count of posts\");\n\n        //Should also resolve by custom interface and implementation\n        Resolve<IPostRepository>();\n        Resolve<PostRepository>();\n    }"
      },
      {
        "name": "Should_Resolve_Default_Repositories_For_Second_DbContext",
        "body": "{\n        var repo1 = Resolve<IRepository<Ticket>>();\n        var repo2 = Resolve<IRepository<Ticket, int>>();\n\n        Assert.Throws<Exception>(\n            () => repo1.Count()\n        ).Message.ShouldBe(\"can not get count!\");\n\n        Assert.Throws<Exception>(\n            () => repo2.Count()\n        ).Message.ShouldBe(\"can not get count!\");\n    }"
      },
      {
        "name": "Should_Resolve_Custom_Repositories_For_Second_DbContext",
        "body": "{\n        var repo1 = Resolve<ISupportRepository<Ticket>>();\n        var repo2 = Resolve<ISupportRepository<Ticket, int>>();\n\n        typeof(ISupportRepository<Ticket>).GetTypeInfo().IsInstanceOfType(repo1).ShouldBeTrue();\n        typeof(ISupportRepository<Ticket, int>).GetTypeInfo().IsInstanceOfType(repo1).ShouldBeTrue();\n        typeof(ISupportRepository<Ticket, int>).GetTypeInfo().IsInstanceOfType(repo2).ShouldBeTrue();\n\n        Assert.Throws<Exception>(\n            () => repo1.Count()\n        ).Message.ShouldBe(\"can not get count!\");\n\n        Assert.Throws<Exception>(\n            () => repo2.Count()\n        ).Message.ShouldBe(\"can not get count!\");\n\n        var activeTickets = repo1.GetActiveList();\n        activeTickets.Count.ShouldBeGreaterThan(0);\n        activeTickets.All(t => t.IsActive).ShouldBeTrue();\n\n        activeTickets = repo2.GetActiveList();\n        activeTickets.Count.ShouldBeGreaterThan(0);\n        activeTickets.All(t => t.IsActive).ShouldBeTrue();\n    }"
      },
      {
        "name": "Should_Get_DbContext",
        "body": "{\n        Resolve<IPostRepository>().GetDbContext().ShouldBeOfType<BloggingDbContext>();\n    }"
      },
      {
        "name": "Should_Get_DbContext_2",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            Resolve<IRepository<Blog>>().GetDbContext().ShouldBeOfType<BloggingDbContext>();\n\n            uow.Complete();\n        }\n    }"
      },
      {
        "name": "Should_Get_DbContext_From_Second_DbContext",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            Resolve<IRepository<Ticket>>().GetDbContext().ShouldBeOfType<SupportDbContext>();\n\n            uow.Complete();\n        }\n    }"
      },
      {
        "name": "Should_Get_DbContext_From_Second_DbContext_With_Custom_Repository",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            Resolve<ISupportRepository<Ticket>>().GetDbContext().ShouldBeOfType<SupportDbContext>();\n\n            uow.Complete();\n        }\n    }"
      }
    ]
  },
  {
    "file": "Repository_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Initial_Blogs",
        "body": "{\n        //Act\n        List<Blog> blogs = _blogRepository.GetAllList();\n        IEnumerable<Blog> blogsFromDapper = _blogDapperRepository.GetAll();\n\n        //Assert\n        blogs.Count.ShouldBeGreaterThan(0);\n        blogsFromDapper.Count().ShouldBeGreaterThan(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        int blog1Id;\n        int blog2Id;\n\n        //Act\n\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.SingleAsync(b => b.Name == \"test-blog-1\");\n            blog1Id = blog1.Id;\n\n            blog1.Name = \"test-blog-1-updated\";\n\n            await _blogDapperRepository.InsertAsync(new Blog(\"test-blog-2\", \"www\"));\n\n            Blog blog2 = await _blogRepository.SingleAsync(x => x.Name == \"test-blog-2\");\n            blog2Id = blog2.Id;\n\n            blog2.Name = \"test-blog-2-updated\";\n\n            await _blogDapperRepository.UpdateAsync(blog2);\n\n            await uow.CompleteAsync();\n        }\n\n        //Assert\n\n        await UsingDbContextAsync(async context =>\n        {\n            Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);\n            blog1.Name.ShouldBe(\"test-blog-1-updated\");\n\n            Blog blog2 = await context.Blogs.SingleAsync(b => b.Id == blog2Id);\n            blog2.Name.ShouldBe(\"test-blog-2-updated\");\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        int blog1Id;\n\n        //Act\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogDapperRepository.SingleAsync(b => b.Name == \"test-blog-1\");\n            blog1Id = blog1.Id;\n\n            blog1.Name = \"test-blog-1-updated\";\n            await _blogDapperRepository.UpdateAsync(blog1);\n\n            await uow.CompleteAsync();\n        }\n\n        //Assert\n\n        await UsingDbContextAsync(async context =>\n        {\n            Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);\n            blog1.Name.ShouldBe(\"test-blog-1-updated\");\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //EF Core does not support lazy loading yet, so navigation properties will not be loaded if not included\n\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Post post = await _postRepository.GetAll().FirstAsync();\n\n            post.Blog.ShouldBeNull();\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Post post = await _postRepository.GetAllIncluding(p => p.Blog).FirstAsync();\n\n            post.Blog.ShouldNotBeNull();\n            post.Blog.Name.ShouldBe(\"test-blog-1\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            var blog = new Blog(\"blog2\", \"http://myblog2.com\");\n            blog.IsTransient().ShouldBeTrue();\n            await _blogRepository.InsertAsync(blog);\n            await uow.CompleteAsync();\n            blog.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            var blog = new Blog(\"blog2\", \"http://myblog2.com\");\n            blog.IsTransient().ShouldBeTrue();\n            await _blogDapperRepository.InsertAsync(blog);\n            await uow.CompleteAsync();\n            blog.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.GetAsync(1);\n            var post = new Post(blog1, \"a test title\", \"a test body\");\n            post.IsTransient().ShouldBeTrue();\n            await _postRepository.InsertAsync(post);\n            await uow.CompleteAsync();\n            post.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())\n        {\n            Blog blog1 = await _blogRepository.GetAsync(1);\n            var post = new Post(blog1.Id, \"a test title\", \"a test body\");\n            post.IsTransient().ShouldBeTrue();\n            await _postDapperRepository.InsertAsync(post);\n            await uow.CompleteAsync();\n            post.IsTransient().ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork",
        "body": "{\n        using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            int blogId = _blogDapperRepository.InsertAndGetId(new Blog(\"Oguzhan_Same_Uow\", \"www\"));\n\n            Blog blog = _blogRepository.Get(blogId);\n\n            blog.ShouldNotBeNull();\n\n            uow.Complete();\n        }\n    }"
      },
      {
        "name": "querying_with_TEntity_TPrimaryKey_should_work_on_dapper_repositories",
        "body": "{\n        _commentRepository.Insert(new Comment(\"hey!\"));\n\n        List<Comment> comments = _commentDapperRepository.Query(\"select * from Comments\").ToList();\n        List<Comment> comments2 = _commentDapperRepository.Query<Comment>(\"select * from Comments\").ToList();\n\n        comments2.Count.ShouldBe(1);\n        comments.Count.ShouldBe(1);\n    }"
      }
    ]
  },
  {
    "file": "Transaction_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        const string exceptionMessage = \"This is a test exception!\";\n\n        string blogName = Guid.NewGuid().ToString(\"N\");\n\n        try\n        {\n            using (_uowManager.Begin())\n            {\n                await _blogRepository.InsertAsync(\n                    new Blog(blogName, $\"http://{blogName}.com/\")\n                );\n\n                throw new Exception(exceptionMessage);\n            }\n        }\n        catch (Exception ex) when (ex.Message == exceptionMessage)\n        {\n        }\n\n        var blog = await _blogRepository.FirstOrDefaultAsync(x => x.Name == blogName);\n        blog.ShouldBeNull();\n    }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork_and_when_any_exception_appears_then_rollback_should_be_consistent_for_two_orm",
        "body": "{\n        Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(\n            eventData =>\n            {\n                eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");\n\n                throw new Exception(\"Uow Rollback\");\n            });\n\n        try\n        {\n            using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())\n            {\n                var blogId = _blogDapperRepository.InsertAndGetId(\n                    new Blog(\"Oguzhan_Same_Uow\", \"www.oguzhansoykan.com\")\n                );\n\n                Blog person = _blogRepository.Get(blogId);\n\n                person.ShouldNotBeNull();\n\n                uow.Complete();\n            }\n        }\n        catch (Exception)\n        {\n            //no handling.\n        }\n\n        _blogDapperRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();\n        _blogRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(eventData =>\n        {\n            eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");\n        });\n\n        var blogId = 0;\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            blogId = await _blogDapperRepository.InsertAndGetIdAsync(\n                new Blog(\"Oguzhan_Same_Uow\", \"www.aspnetboilerplate.com\")\n            );\n\n            var person = await _blogRepository.GetAsync(blogId);\n\n            person.ShouldNotBeNull();\n\n            await uow.CompleteAsync();\n        }\n\n        try\n        {\n            using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>()\n                .Begin(new UnitOfWorkOptions { IsTransactional = true }))\n            {\n                await _blogDapperRepository.ExecuteAsync(\n                    \"Update Blogs Set Name = @name where Id =@id\",\n                    new\n                    {\n                        id = blogId,\n                        name = \"Oguzhan_New_Blog\"\n                    }\n                );\n\n                throw new Exception(\"uow rollback\");\n\n                // Unreachable code.\n                // await uow.CompleteAsync();\n            }\n        }\n        catch (Exception)\n        {\n            //no handling.\n        }\n\n        (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();\n        (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();\n\n        (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();\n        (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();\n    }"
      }
    ]
  },
  {
    "file": "MailKitEmailSender_Tests.cs",
    "methods": []
  },
  {
    "file": "MemoryRepository_Simple_Tests.cs",
    "methods": [
      {
        "name": "Count_Test",
        "body": "{\n            _repository.Count().ShouldBe(2);\n        }"
      },
      {
        "name": "Delete_Test",
        "body": "{\n            var test1 = _repository.FirstOrDefault(e => e.Name == \"test-1\");\n            test1.ShouldNotBe(null);\n\n            _repository.Delete(test1);\n            \n            test1 = _repository.FirstOrDefault(e => e.Name == \"test-1\");\n            test1.ShouldBe(null);\n        }"
      }
    ]
  },
  {
    "file": "AbpQuartzTestModule.cs",
    "methods": []
  },
  {
    "file": "QuartzTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            // There should be only one test case in this project, or the unit test may fail in AppVeyor\n            await ScheduleJobs();\n\n            var helloDependency = LocalIocManager.Resolve<IHelloDependency>();\n            var goodByeDependency = LocalIocManager.Resolve<IGoodByeDependency>();\n\n            _abpQuartzConfiguration.Scheduler.ShouldNotBeNull();\n            _abpQuartzConfiguration.Scheduler.IsStarted.ShouldBe(true);\n            (await _abpQuartzConfiguration.Scheduler.CheckExists(JobKey.Create(\"HelloJobKey\"))).ShouldBe(true);\n            (await _abpQuartzConfiguration.Scheduler.CheckExists(JobKey.Create(\"GoodByeJobKey\"))).ShouldBe(true);\n\n            //Wait for execution!\n            await Task.Delay(TimeSpan.FromSeconds(5));\n\n            helloDependency.ExecutionCount.ShouldBeGreaterThan(0);\n            goodByeDependency.ExecutionCount.ShouldBeGreaterThan(0);\n\n            await RescheduleJob();\n            (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"HelloJobTrigger\"))).ShouldBe(false);\n            (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"HelloJobRescheduleTrigger\"))).ShouldBe(true);\n\n            await UnscheduleJob();\n            (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"GoodByeJobTrigger\"))).ShouldBe(false);\n        }"
      }
    ]
  },
  {
    "file": "DefaultRedisCacheSerializer_Tests.cs",
    "methods": [
      {
        "name": "Serialize_List_Test",
        "body": "{\n            List<string> source = new List<string>\n            {\n                \"Stranger Things\",\n                \"The OA\",\n                \"Lost in Space\"\n            };\n\n            var result = _redisCacheSerializer.Serialize(source, typeof(List<string>));\n            result.ToString().ShouldStartWith(\"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String,\");\n        }"
      },
      {
        "name": "Serialize_Class_Test",
        "body": "{\n            var source = new MyTestClass\n            {\n                Field1 = 42,\n                Field2 = \"Stranger Things\"\n            };\n\n            var result = _redisCacheSerializer.Serialize(source, typeof(MyTestClass));\n            result.ToString().ShouldBe(\"{\\\"Payload\\\":\\\"{\\\\\\\"Field1\\\\\\\":42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.RedisCache.Tests.DefaultRedisCacheSerializer_Tests+MyTestClass, Abp.RedisCache.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\");\n        }"
      },
      {
        "name": "Deserialize_List_Test",
        "body": "{\n            var json = \"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String]]\\\"}\";\n            var cacheData = _redisCacheSerializer.Deserialize(json);\n\n            var typedCacheData = cacheData as List<string>;\n            typedCacheData.ShouldNotBeNull();\n            typedCacheData.Count.ShouldBe(3);\n            typedCacheData.First().ShouldBe(\"Stranger Things\");\n        }"
      },
      {
        "name": "Deserialize_Class_Test",
        "body": "{\n            var json = \"{\\\"Payload\\\": \\\"{\\\\\\\"Field1\\\\\\\": 42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.RedisCache.Tests.DefaultRedisCacheSerializer_Tests+MyTestClass, Abp.RedisCache.Tests\\\"}\";\n\n            var cacheData = _redisCacheSerializer.Deserialize(json);\n\n            var typedCacheData = cacheData as MyTestClass;\n            typedCacheData.ShouldNotBeNull();\n            typedCacheData.Field1.ShouldBe(42);\n            typedCacheData.Field2.ShouldBe(\"Stranger Things\");\n        }"
      }
    ]
  },
  {
    "file": "ProtoBufRedisCacheSerializer_Test.cs",
    "methods": [
      {
        "name": "Simple_Serialize_Deserialize_Test",
        "body": "{\n            //Arrange\n            var protoBufSerializer = new ProtoBufRedisCacheSerializer();\n            var objectToSerialize = new ClassToSerialize {Age = 10, Name = \"John\"};\n\n            //Act\n            string classSerializedString = protoBufSerializer.Serialize(\n                objectToSerialize,\n                typeof(ClassToSerialize)\n            );\n\n            object classUnSerialized = protoBufSerializer.Deserialize(classSerializedString);\n\n            //Assert\n            classUnSerialized.ShouldBeOfType<ClassToSerialize>();\n            ClassToSerialize classUnSerializedTyped = (ClassToSerialize) classUnSerialized;\n            classUnSerializedTyped.Age.ShouldBe(10);\n            classUnSerializedTyped.Name.ShouldBe(\"John\");\n        }"
      }
    ]
  },
  {
    "file": "RedisCacheManager_Test.cs",
    "methods": [
      {
        "name": "Cache_Options_Configuration_Test",
        "body": "{\n            _cache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(24));\n        }"
      }
    ]
  },
  {
    "file": "ApplicationWithoutDb_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{\n            var output = _myAppService.MyMethod(new MyMethodInput {MyStringValue = \"test\"});\n            output.Result.ShouldBe(42);\n        }"
      }
    ]
  },
  {
    "file": "ServiceWithDifferentInputs_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var result = await _appService.GetsExpressionReturnsGenericAsync<MyEmptyDto>(t => t != null);\n            result.ShouldBeOfType(typeof(MyEmptyDto));\n        }"
      }
    ]
  },
  {
    "file": "Validation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsStringAsync(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetContentValue),\n                new { value = 42 }\n            )\n        );\n\n        response.ShouldBe(\"OK: 42\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValue),\n                new { value = 42 }\n            )\n        );\n\n        response.Success.ShouldBeTrue();\n        response.Result.Value.ShouldBe(42);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValue)\n            ),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument2>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithEnum)\n            ),\n            new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n\n        //The JSON value could not be converted to Abp.AspNetCore.App.Controllers.ValidationTestController+ValidationTestEnum.\n        //Path: $ | LineNumber: 0 | BytePositionInLine: 5.\n        //response.Error.ValidationErrors[0].Members[0].ShouldBe(\"$.value\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument3>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithValidatableObject)\n            ),\n            new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be higher than 0\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument4>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithCustomValidate)\n            ),\n            new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(1);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be \\\"abp\\\"\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Act\n        var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument5>>(\n            GetUrl<ValidationTestController>(\n                nameof(ValidationTestController.GetJsonValueWithCombinedValidators)\n            ),\n            new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),\n            HttpStatusCode.BadRequest\n        );\n\n        response.Success.ShouldBeFalse();\n        response.Result.ShouldBeNull();\n        response.Error.ShouldNotBeNull();\n        response.Error.ValidationErrors.Length.ShouldBe(2);\n        response.Error.ValidationErrors.ShouldNotBeNull();\n        response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");\n        response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);\n        response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");\n    }"
      }
    ]
  },
  {
    "file": "SessionTests.cs",
    "methods": [
      {
        "name": "Should_Be_Default_On_Startup",
        "body": "{\n            Resolve<IMultiTenancyConfig>().IsEnabled = false;\n\n            AbpSession.UserId.ShouldBe(null);\n            AbpSession.TenantId.ShouldBe(1);\n\n            Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n            AbpSession.UserId.ShouldBe(null);\n            AbpSession.TenantId.ShouldBe(null);\n        }"
      },
      {
        "name": "Can_Change_Session_Variables",
        "body": "{\n            Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n            AbpSession.UserId = 1;\n            AbpSession.TenantId = 42;\n\n            var resolvedAbpSession = LocalIocManager.Resolve<IAbpSession>();\n\n            resolvedAbpSession.UserId.ShouldBe(1);\n            resolvedAbpSession.TenantId.ShouldBe(42);\n\n            Resolve<IMultiTenancyConfig>().IsEnabled = false;\n\n            AbpSession.UserId.ShouldBe(1);\n            AbpSession.TenantId.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "Menu_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var testCase = new NavigationTestCase();\n\n            //Check created menu definitions\n            var mainMenuDefinition = testCase.NavigationManager.MainMenu;\n            mainMenuDefinition.Items.Count.ShouldBe(1);\n\n            var adminMenuItemDefinition = mainMenuDefinition.GetItemByNameOrNull(\"Abp.Zero.Administration\");\n            adminMenuItemDefinition.ShouldNotBe(null);\n            adminMenuItemDefinition.Items.Count.ShouldBe(3);\n            \n            //Check user menus\n            var userMenu = await testCase.UserNavigationManager.GetMenuAsync(mainMenuDefinition.Name, new UserIdentifier(1, 1));\n            userMenu.Items.Count.ShouldBe(1);\n\n            var userAdminMenu = userMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration\");\n            userAdminMenu.ShouldNotBe(null);\n\n            userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.User\").ShouldNotBe(null);\n            userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.Role\").ShouldBe(null);\n            userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.Setting\").ShouldNotBe(null);\n\n            mainMenuDefinition.RemoveItem(mainMenuDefinition.Items.FirstOrDefault()?.Name);\n            mainMenuDefinition.Items.Count.ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "NavigationTestCase.cs",
    "methods": []
  },
  {
    "file": "AuditingHelper_Tests.cs",
    "methods": [
      {
        "name": "Ignored_Properties_Should_Not_Be_Serialized",
        "body": "{\n            var json = new JsonNetAuditSerializer(new AuditingConfiguration {IgnoredTypes = { typeof(Exception) }})\n                .Serialize(new AuditingHelperTestPersonDto\n                {\n                    FullName = \"John Doe\",\n                    Age = 18,\n                    School = new AuditingHelperTestSchoolDto\n                    {\n                        Name = \"Crosswell Secondary\",\n                        Address = \"Broadway Ave, West Bend\"\n                    },\n                    Exception = new Exception(\"this should be ignored!\")\n                });\n\n            json.ShouldBe(\"{\\\"fullName\\\":\\\"John Doe\\\",\\\"school\\\":{\\\"name\\\":\\\"Crosswell Secondary\\\"}}\");\n        }"
      }
    ]
  },
  {
    "file": "AuthorizationHelper_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _authorizeHelper.AuthorizeAsync(\n                typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_NotAuthorized)),\n                typeof(MyNonAuthorizedClass)\n                );\n\n            await _authorizeHelper.AuthorizeAsync(\n                typeof(MyAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyAuthorizedClass.Test_NotAuthorized)),\n                typeof(MyAuthorizedClass)\n            );\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await Assert.ThrowsAsync<AbpAuthorizationException>(async () =>\n            {\n                await _authorizeHelper.AuthorizeAsync(\n                    typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_Authorized)),\n                    typeof(MyNonAuthorizedClass)\n                );\n            });\n\n            await Assert.ThrowsAsync<AbpAuthorizationException>(async () =>\n            {\n                await _authorizeHelper.AuthorizeAsync(\n                    typeof(MyAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyAuthorizedClass.Test_Authorized)),\n                    typeof(MyAuthorizedClass)\n                );\n            });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var authorizeHelper = GetAuthorizationHelper(true, false);\n\n            await authorizeHelper.AuthorizeAsync(\n                typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_FeatureDependent)),\n                typeof(MyNonAuthorizedClass)\n            );\n        }"
      }
    ]
  },
  {
    "file": "AuthorizationInterceptor_Tests.cs",
    "methods": [
      {
        "name": "Test_Authorization_Sync",
        "body": "{\n            //Authorized methods\n\n            _syncObj.MethodWithoutPermission();\n            _syncObj.Called_MethodWithoutPermission.ShouldBe(true);\n\n            _syncObj.MethodWithPermission1().ShouldBe(42);\n            _syncObj.Called_MethodWithPermission1.ShouldBe(true);\n\n            _syncObj.MethodWithPermission1AndPermission2();\n            _syncObj.Called_MethodWithPermission1AndPermission2.ShouldBe(true);\n\n            _syncObj.MethodWithPermission1AndPermission3();\n            _syncObj.Called_MethodWithPermission1AndPermission3.ShouldBe(true);\n\n            //Non authorized methods\n\n            Assert.Throws<AbpAuthorizationException>(() => _syncObj.MethodWithPermission3());\n            _syncObj.Called_MethodWithPermission3.ShouldBe(false);\n\n            Assert.Throws<AbpAuthorizationException>(() => _syncObj.MethodWithPermission1AndPermission3WithRequireAll());\n            _syncObj.Called_MethodWithPermission1AndPermission3WithRequireAll.ShouldBe(false);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            //Authorized methods\n\n            await _asyncObj.MethodWithoutPermission();\n            _asyncObj.Called_MethodWithoutPermission.ShouldBe(true);\n\n            (await _asyncObj.MethodWithPermission1Async()).ShouldBe(42);\n            _asyncObj.Called_MethodWithPermission1.ShouldBe(true);\n\n            await _asyncObj.MethodWithPermission1AndPermission2Async();\n            _asyncObj.Called_MethodWithPermission1AndPermission2.ShouldBe(true);\n\n            await _asyncObj.MethodWithPermission1AndPermission3Async();\n            _asyncObj.Called_MethodWithPermission1AndPermission3.ShouldBe(true);\n\n            await _asyncObj.MethodWithoutPermission();\n            _asyncObj.Called_MethodWithoutPermission.ShouldBe(true);\n\n            //Non authorized methods\n\n            await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObj.MethodWithPermission3Async());\n            _asyncObj.Called_MethodWithPermission3.ShouldBe(false);\n\n            await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObj.MethodWithPermission1AndPermission3WithRequireAllAsync());\n            _asyncObj.Called_MethodWithPermission1AndPermission3WithRequireAll.ShouldBe(false);\n        }"
      },
      {
        "name": "Test_Authorization_For_Protected_Sync",
        "body": "{\n            EmptySession();\n\n            _syncObjForProtectedMethod.MethodWithoutForProtectedPermission();\n            _syncObjForProtectedMethod.Called_AnonymousProtectedMethod.ShouldBe(true);\n\n            //Non authorized methods\n\n            Assert.Throws<AbpAuthorizationException>(() => _syncObjForProtectedMethod.MethodWithPermissionForProtected());\n            _syncObjForProtectedMethod.Called_AuthorizedProtectedMethod.ShouldBe(false);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            EmptySession();\n\n            await _asyncObjForProtectedMethod.MethodWithoutPermissionForProtectedAsync();\n            _asyncObjForProtectedMethod.Called_AnonymousProtectedMethod.ShouldBe(true);\n\n            //Non authorized methods\n\n            await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObjForProtectedMethod.MethodWithPermissionForProtectedAsync());\n            _asyncObjForProtectedMethod.Called_AuthorizedProtectedMethod.ShouldBe(false);\n        }"
      }
    ]
  },
  {
    "file": "PermissionDefinitionTests.cs",
    "methods": [
      {
        "name": "Test_PermissionManager",
        "body": "{\n            var authorizationConfiguration = new AuthorizationConfiguration();\n            authorizationConfiguration.Providers.Add<MyAuthorizationProvider1>();\n            authorizationConfiguration.Providers.Add<MyAuthorizationProvider2>();\n\n            LocalIocManager.IocContainer.Register(\n                Component.For<IFeatureDependencyContext, FeatureDependencyContext>().UsingFactoryMethod(() =>\n                    new FeatureDependencyContext(LocalIocManager, Substitute.For<IFeatureChecker>())),\n                Component.For<MyAuthorizationProvider1>().LifestyleTransient(),\n                Component.For<MyAuthorizationProvider2>().LifestyleTransient(),\n                Component.For<IUnitOfWorkManager, UnitOfWorkManager>().LifestyleTransient(),\n                Component.For<ICurrentUnitOfWorkProvider, AsyncLocalCurrentUnitOfWorkProvider>().LifestyleTransient(),\n                Component.For<IUnitOfWorkDefaultOptions, UnitOfWorkDefaultOptions>().LifestyleTransient(),\n                Component.For<IMultiTenancyConfig, MultiTenancyConfig>().LifestyleTransient()\n            );\n\n            var permissionManager = new PermissionManager(LocalIocManager, authorizationConfiguration,\n                LocalIocManager.Resolve<IUnitOfWorkManager>(), LocalIocManager.Resolve<IMultiTenancyConfig>());\n            permissionManager.Initialize();\n\n            permissionManager.GetAllPermissions().Count.ShouldBe(5);\n\n            var userManagement = permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration.UserManagement\");\n            userManagement.ShouldNotBe(null);\n            userManagement.Children.Count.ShouldBe(1);\n\n            var changePermissions =\n                permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration.UserManagement.ChangePermissions\");\n            changePermissions.ShouldNotBe(null);\n            changePermissions.Parent.ShouldBeSameAs(userManagement);\n\n            permissionManager.GetPermissionOrNull(\"NonExistingPermissionName\").ShouldBe(null);\n\n            userManagement.RemoveChildPermission(userManagement.Children.FirstOrDefault()?.Name);\n            userManagement.Children.Count.ShouldBe(0);\n\n            permissionManager.RemovePermission(\"Abp.Zero.Administration\");\n            permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration\").ShouldBe(null);\n        }"
      },
      {
        "name": "Should_Manage_Permission_With_Custom_Properties",
        "body": "{\n            var authorizationConfiguration = new AuthorizationConfiguration();\n            authorizationConfiguration.Providers.Add<MyAuthorizationProviderWithCustomProperties>();\n\n            LocalIocManager.IocContainer.Register(\n                Component.For<IFeatureDependencyContext, FeatureDependencyContext>()\n                    .UsingFactoryMethod(() =>\n                        new FeatureDependencyContext(LocalIocManager, Substitute.For<IFeatureChecker>())),\n                Component.For<MyAuthorizationProviderWithCustomProperties>().LifestyleTransient(),\n                Component.For<IUnitOfWorkManager, UnitOfWorkManager>().LifestyleTransient(),\n                Component.For<ICurrentUnitOfWorkProvider, AsyncLocalCurrentUnitOfWorkProvider>().LifestyleTransient(),\n                Component.For<IUnitOfWorkDefaultOptions, UnitOfWorkDefaultOptions>().LifestyleTransient(),\n                Component.For<IMultiTenancyConfig, MultiTenancyConfig>().LifestyleTransient()\n            );\n\n            var permissionManager = new PermissionManager(LocalIocManager, authorizationConfiguration,\n                LocalIocManager.Resolve<IUnitOfWorkManager>(), LocalIocManager.Resolve<IMultiTenancyConfig>());\n            permissionManager.Initialize();\n\n            permissionManager.GetAllPermissions().Count.ShouldBe(4);\n\n            var customPermission = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission\");\n            customPermission.ShouldNotBe(null);\n            customPermission.Children.Count.ShouldBe(2);\n\n            customPermission.Properties.Count.ShouldBe(2);\n            customPermission[\"MyProp1\"].ShouldBe(\"Test\");\n            ((MyAuthorizationProviderWithCustomProperties.MyTestPropertyClass) customPermission[\"MyProp2\"]).Prop1\n                .ShouldBe(\"Test\");\n\n            //its not exist\n            customPermission[\"MyProp3\"].ShouldBeNull();\n\n            customPermission.Children[0][\"MyProp1\"].ShouldBeNull();\n            customPermission.Children[1][\"MyProp1\"].ShouldBe(\"TestChild\");\n\n\n            var customPermission2 = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission2\");\n            customPermission2.ShouldNotBe(null);\n            customPermission2.Children.Count.ShouldBe(0);\n\n            customPermission2.Properties.Count.ShouldBe(0);\n            customPermission2[\"MyProp1\"].ShouldBeNull();\n\n            customPermission2[\"MyProp1\"] = \"Test\";\n\n            var customPermission21 = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission2\");\n            customPermission2.ShouldBeSameAs(customPermission21);\n\n            customPermission21[\"MyProp1\"].ShouldBe(\"Test\");\n        }"
      }
    ]
  },
  {
    "file": "InMemoryBackgroundJobStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var jobInfo = new BackgroundJobInfo\n            {\n                JobType = \"TestType\",\n                JobArgs = \"{}\",\n                NextTryTime = Clock.Now.AddMinutes(-1) // to be sure NextTryTime will not be same when _store.InsertAsync and _store.GetWaitingJobsAsync are executed.\n            };\n            \n            await _store.InsertAsync(jobInfo);\n            (await _store.GetWaitingJobsAsync(BackgroundJobConfiguration.DefaultMaxWaitingJobToProcessPerPeriod)).Count.ShouldBe(1);\n\n            var jobInfoFromStore = await _store.GetAsync(1);\n            jobInfoFromStore.ShouldNotBeNull();\n            jobInfoFromStore.JobType.ShouldBeSameAs(jobInfo.JobType);\n            jobInfoFromStore.JobArgs.ShouldBeSameAs(jobInfo.JobArgs);\n\n            await _store.DeleteAsync(jobInfo);\n            (await _store.GetWaitingJobsAsync(BackgroundJobConfiguration.DefaultMaxWaitingJobToProcessPerPeriod)).Count.ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "Castle_Interception_Test.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _handler.HandleEvent(new MyEventData());\n            await _asyncHandler.HandleEventAsync(new MyEventData());\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            typeof(IEventHandler<MyEventData>)\n                .GetMethod(\"HandleEvent\", BindingFlags.Instance | BindingFlags.Public)\n                .Invoke(_handler, new object[] {new MyEventData()});\n\n            await (Task) typeof(IAsyncEventHandler<MyEventData>)\n                .GetMethod(\"HandleEventAsync\", BindingFlags.Instance | BindingFlags.Public)\n                .Invoke(_asyncHandler, new object[] {new MyEventData()});\n        }"
      }
    ]
  },
  {
    "file": "ListExtensions_Tests.cs",
    "methods": [
      {
        "name": "Should_SortByDependencies",
        "body": "{\n            var a = new DependedObject(\"A\");\n            var b = new DependedObject(\"B\");\n            var c = new DependedObject(\"C\");\n            var d = new DependedObject(\"D\");\n\n            b.Dependencies.Add(a);\n            c.Dependencies.Add(a);\n            c.Dependencies.Add(d);\n            d.Dependencies.Add(b);\n\n            ShouldSortedCorrectly(new List<DependedObject> { a, b, c, d });\n            ShouldSortedCorrectly(new List<DependedObject> { d, c, b, a });\n            ShouldSortedCorrectly(new List<DependedObject> { a, c, d, b });\n            ShouldSortedCorrectly(new List<DependedObject> { c, a, d, b });\n        }"
      }
    ]
  },
  {
    "file": "TypeList_Test.cs",
    "methods": [
      {
        "name": "Should_Only_Add_True_Types",
        "body": "{\n            var list = new TypeList<IMyInterface>();\n            list.Add<MyClass1>();\n            list.Add(typeof(MyClass2));\n            Assert.Throws<ArgumentException>(() => list.Add(typeof(MyClass3)));\n        }"
      }
    ]
  },
  {
    "file": "DictionaryBasedConfig_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Value",
        "body": "{\n            var testObject = new TestClass {Value = 42};\n\n            _config[\"IntValue\"] = 42;\n            _config[\"StringValue\"] = \"Test string\";\n            _config[\"ObjectValue\"] = testObject;\n\n            _config[\"IntValue\"].ShouldBe(42);\n            _config.Get<int>(\"IntValue\").ShouldBe(42);\n\n            _config[\"StringValue\"].ShouldBe(\"Test string\");\n            _config.Get<string>(\"StringValue\").ShouldBe(\"Test string\");\n\n            _config[\"ObjectValue\"].ShouldBeSameAs(testObject);\n            _config.Get<TestClass>(\"ObjectValue\").ShouldBeSameAs(testObject);\n            _config.Get<TestClass>(\"ObjectValue\").Value.ShouldBe(42);\n        }"
      },
      {
        "name": "Should_Get_Default_If_No_Value",
        "body": "{\n            _config[\"MyUndefinedName\"].ShouldBe(null);\n            _config.Get<string>(\"MyUndefinedName\").ShouldBe(null);\n            _config.Get<MyConfig>(\"MyUndefinedName\").ShouldBe(null);\n            _config.Get<int>(\"MyUndefinedName\").ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "SettingManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var settingManager = CreateSettingManager();\n\n            (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(42);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level default value\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n\n            (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(48);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level stored value\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            session.TenantId = 1;\n\n            //Inherited setting\n\n            session.UserId = 1;\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 stored value\");\n\n            session.UserId = 2;\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 2 stored value\");\n\n            session.UserId = 3;\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting))\n                .ShouldBe(\"tenant 1 stored value\"); //Because no user value in the store\n\n            session.TenantId = 3;\n            session.UserId = 3;\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting))\n                .ShouldBe(\"application level stored value\"); //Because no user and tenant value in the store\n\n            //Not inherited setting\n\n            session.TenantId = 1;\n            session.UserId = 1;\n\n            (await settingManager.GetSettingValueForApplicationAsync(MyNotInheritedSetting)).ShouldBe(\n                \"application value\");\n            (await settingManager.GetSettingValueForTenantAsync(MyNotInheritedSetting, session.TenantId.Value))\n                .ShouldBe(\"default-value\");\n            (await settingManager.GetSettingValueAsync(MyNotInheritedSetting)).ShouldBe(\"default-value\");\n\n            (await settingManager.GetSettingValueAsync<MyEnumSettingType>(MyEnumTypeSetting)).ShouldBe(MyEnumSettingType\n                .Setting1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n\n            (await settingManager.GetAllSettingValuesAsync()).Count.ShouldBe(5);\n\n            (await settingManager.GetAllSettingValuesForApplicationAsync()).Count.ShouldBe(4);\n\n            (await settingManager.GetAllSettingValuesForTenantAsync(1)).Count.ShouldBe(2);\n            (await settingManager.GetAllSettingValuesForTenantAsync(1)).Count.ShouldBe(2);\n            (await settingManager.GetAllSettingValuesForTenantAsync(2)).Count.ShouldBe(0);\n            (await settingManager.GetAllSettingValuesForTenantAsync(3)).Count.ShouldBe(0);\n\n            (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 1))).Count.ShouldBe(1);\n            (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 2))).Count.ShouldBe(2);\n            (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 3))).Count.ShouldBe(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            //Application level changes\n\n            await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"53\");\n            await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"54\");\n            await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting,\n                \"application level changed value\");\n\n            (await settingManager.SettingStore.GetSettingOrNullAsync(null, null, MyAppLevelSetting)).Value\n                .ShouldBe(\"54\");\n\n            (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(54);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level changed value\");\n\n            //Tenant level changes\n\n            session.TenantId = 1;\n            await settingManager.ChangeSettingForTenantAsync(1, MyAllLevelsSetting, \"tenant 1 changed value\");\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"tenant 1 changed value\");\n\n            //User level changes\n\n            session.UserId = 1;\n            await settingManager.ChangeSettingForUserAsync(1, MyAllLevelsSetting, \"user 1 changed value\");\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 changed value\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n            var store = new MemorySettingStore();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = store;\n            settingManager.AbpSession = session;\n\n            session.TenantId = 1;\n            session.UserId = 1;\n\n            //We can get user's personal stored value\n            (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldNotBe(null);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 stored value\");\n\n            //This will delete setting for the user since it's same as tenant's setting value\n            await settingManager.ChangeSettingForUserAsync(1, MyAllLevelsSetting, \"tenant 1 stored value\");\n            (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldBe(null);\n\n            //We can get tenant's setting value\n            (await store.GetSettingOrNullAsync(1, null, MyAllLevelsSetting)).ShouldNotBe(null);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"tenant 1 stored value\");\n\n            //This will delete setting for tenant since it's same as application's setting value\n            await settingManager.ChangeSettingForTenantAsync(1, MyAllLevelsSetting, \"application level stored value\");\n            (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldBe(null);\n\n            //We can get application's value\n            (await store.GetSettingOrNullAsync(null, null, MyAllLevelsSetting)).ShouldNotBe(null);\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level stored value\");\n\n            //This will delete setting for application since it's same as the default value of the setting\n            await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting,\n                \"application level default value\");\n            (await store.GetSettingOrNullAsync(null, null, MyAllLevelsSetting)).ShouldBe(null);\n\n            //Now, there is no setting value, default value should return\n            (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level default value\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // Arrange\n            var session = CreateTestAbpSession(multiTenancyIsEnabled: false);\n\n            var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            // Act\n            await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting, \"53\");\n\n            // Assert\n            var value = await settingManager.GetSettingValueAsync(MyAllLevelsSetting);\n            value.ShouldBe(\"53\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // Arrange\n            var session = CreateTestAbpSession(multiTenancyIsEnabled: false);\n\n            var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            // Act\n            await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting, \"53\");\n\n            // Assert\n            var value = await settingManager.GetSettingValueForApplicationAsync(MyAllLevelsSetting);\n            value.ShouldBe(\"53\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // Arrange\n            var session = CreateTestAbpSession(multiTenancyIsEnabled: false);\n\n            var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            //change setting value with \"B\"\n            await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"B\");\n\n            // it's ok\n            (await settingManager.GetSettingValueForApplicationAsync(MyAppLevelSetting)).ShouldBe(\"B\");\n\n            //change setting with same value \"B\" again,\n            await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"B\");\n\n            //but was \"A\" ,that's wrong\n            (await settingManager.GetSettingValueForApplicationAsync(MyAppLevelSetting)).ShouldBe(\"B\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            session.TenantId = 1;\n\n            // User setting\n            session.UserId = 2;\n            (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"user_setting\");\n\n            // Tenant setting\n            session.UserId = null;\n            (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"tenant_setting\");\n\n            // App setting\n            session.TenantId = null;\n            (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"app_setting\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            session.TenantId = 1;\n\n            // User setting\n            session.UserId = 2;\n            await settingManager.ChangeSettingForUserAsync(session.ToUserIdentifier(), MyEncryptedSetting,\n                \"user_123qwe\");\n\n            var settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(\n                session.TenantId,\n                session.UserId,\n                MyEncryptedSetting\n            );\n\n            settingValue.Value.ShouldBe(\"oKPqQDCAHhz+AEnl/r0fsw==\");\n\n            // Tenant setting\n            session.UserId = null;\n            await settingManager.ChangeSettingForTenantAsync(session.GetTenantId(), MyEncryptedSetting,\n                \"tenant_123qwe\");\n\n            settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(\n                session.TenantId,\n                session.UserId,\n                MyEncryptedSetting\n            );\n\n            settingValue.Value.ShouldBe(\"YX+MTwbuOwXgL7tnKw+oxw==\");\n\n            // App setting\n            session.TenantId = null;\n            await settingManager.ChangeSettingForApplicationAsync(MyEncryptedSetting, \"app_123qwe\");\n\n            settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(\n                session.TenantId,\n                session.UserId,\n                MyEncryptedSetting\n            );\n\n            settingValue.Value.ShouldBe(\"EOi2wcQt1pi1K4qYycBBbg==\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var session = CreateTestAbpSession();\n\n            var settingManager = CreateSettingManager();\n            settingManager.SettingStore = new MemorySettingStore();\n            settingManager.AbpSession = session;\n\n            session.TenantId = 1;\n\n            // User setting\n            session.UserId = 2;\n\n            await settingManager.ChangeSettingForUserAsync(\n                session.ToUserIdentifier(),\n                MyEncryptedSetting,\n                \"new_user_setting\"\n            );\n\n            var settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);\n            settingValue.ShouldBe(\"new_user_setting\");\n\n            // Tenant Setting\n            session.UserId = null;\n\n            await settingManager.ChangeSettingForTenantAsync(\n                session.GetTenantId(),\n                MyEncryptedSetting,\n                \"new_tenant_setting\"\n            );\n\n            settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);\n            settingValue.ShouldBe(\"new_tenant_setting\");\n\n            // App Setting\n            session.TenantId = null;\n\n            await settingManager.ChangeSettingForApplicationAsync(\n                MyEncryptedSetting,\n                \"new_app_setting\"\n            );\n\n            settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);\n            settingValue.ShouldBe(\"new_app_setting\");\n        }"
      }
    ]
  },
  {
    "file": "Circular_Constructor_Dependency_Tests.cs",
    "methods": [
      {
        "name": "Should_Fail_Circular_Constructor_Dependency",
        "body": "{\n            LocalIocManager.Register<MyClass1>();\n            LocalIocManager.Register<MyClass2>();\n            LocalIocManager.Register<MyClass3>();\n\n            Assert.Throws<CircularDependencyException>(() => LocalIocManager.Resolve<MyClass1>());\n        }"
      }
    ]
  },
  {
    "file": "Circular_Property_Dependency_Tests.cs",
    "methods": [
      {
        "name": "Should_Success_Circular_Property_Injection_Transient",
        "body": "{\n            Initialize_Test(DependencyLifeStyle.Transient);\n\n            var obj1 = LocalIocManager.Resolve<MyClass1>();\n            obj1.Obj2.ShouldNotBe(null);\n            obj1.Obj3.ShouldNotBe(null);\n            obj1.Obj2.Obj3.ShouldNotBe(null);\n\n            var obj2 = LocalIocManager.Resolve<MyClass2>();\n            obj2.Obj1.ShouldNotBe(null);\n            obj2.Obj3.ShouldNotBe(null);\n            obj2.Obj1.Obj3.ShouldNotBe(null);\n\n            MyClass1.CreateCount.ShouldBe(2);\n            MyClass2.CreateCount.ShouldBe(2);\n            MyClass3.CreateCount.ShouldBe(4);\n        }"
      },
      {
        "name": "Should_Success_Circular_Property_Injection_Singleton",
        "body": "{\n            Initialize_Test(DependencyLifeStyle.Singleton);\n\n            var obj1 = LocalIocManager.Resolve<MyClass1>();\n            obj1.Obj2.ShouldNotBe(null);\n            obj1.Obj3.ShouldNotBe(null);\n            obj1.Obj2.Obj3.ShouldNotBe(null);\n\n            var obj2 = LocalIocManager.Resolve<MyClass2>();\n            obj2.Obj1.ShouldBe(null); //!!!Notice: It's null\n            obj2.Obj3.ShouldNotBe(null);\n\n            MyClass1.CreateCount.ShouldBe(1);\n            MyClass2.CreateCount.ShouldBe(1);\n            MyClass3.CreateCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "DisposableDependencyObjectWrapper_Tests.cs",
    "methods": [
      {
        "name": "ResolveAsDisposable_Should_Work",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            SimpleDisposableObject simpleObj;\n\n            using (var wrapper = LocalIocManager.ResolveAsDisposable<SimpleDisposableObject>())\n            {\n                wrapper.Object.ShouldNotBe(null);\n                simpleObj = wrapper.Object;\n            }\n\n            simpleObj.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "ResolveAsDisposable_With_Constructor_Args_Should_Work",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            using (var wrapper = LocalIocManager.ResolveAsDisposable<SimpleDisposableObject>(new { myData = 42 }))\n            {\n                wrapper.Object.MyData.ShouldBe(42);\n            }\n        }"
      },
      {
        "name": "Using_Test",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n            LocalIocManager.Using<SimpleDisposableObject>(obj => obj.MyData.ShouldBe(0));\n        }"
      }
    ]
  },
  {
    "file": "GenericInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Generic_Types",
        "body": "{\n            LocalIocManager.IocContainer.Register(\n                Component.For<MyClass>(),\n                Component.For(typeof (IEmpty<>)).ImplementedBy(typeof (EmptyImplOne<>))\n                );\n\n            var genericObj = LocalIocManager.Resolve<IEmpty<MyClass>>();\n            genericObj.GenericArg.GetType().ShouldBe(typeof(MyClass));\n        }"
      }
    ]
  },
  {
    "file": "IocManager_LifeStyle_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Dispose_Of_Transient_Dependency_When_Object_Is_Released",
        "body": "{\n            LocalIocManager.IocContainer.Register(\n                Component.For<SimpleDisposableObject>().LifestyleTransient()\n                );\n\n            var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();\n\n            LocalIocManager.IocContainer.Release(obj);\n\n            obj.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "Should_Call_Dispose_Of_Transient_Dependency_When_IocManager_Is_Disposed",
        "body": "{\n            LocalIocManager.IocContainer.Register(\n                Component.For<SimpleDisposableObject>().LifestyleTransient()\n                );\n\n            var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();\n\n            LocalIocManager.Dispose();\n\n            obj.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "Should_Call_Dispose_Of_Singleton_Dependency_When_IocManager_Is_Disposed",
        "body": "{\n            LocalIocManager.IocContainer.Register(\n                Component.For<SimpleDisposableObject>().LifestyleSingleton()\n                );\n\n            var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();\n\n            LocalIocManager.Dispose();\n\n            obj.DisposeCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "IocManager_Override_Tests.cs",
    "methods": [
      {
        "name": "Should_Not_Override_As_Default",
        "body": "{\n            //Arrange\n            LocalIocManager.Register<IMyService, MyImpl1>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<IMyService, MyImpl2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<IMyService, MyImpl3>(DependencyLifeStyle.Transient);\n\n            //Act\n            var service = LocalIocManager.Resolve<IMyService>();\n            var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();\n\n            //Assert\n            service.ShouldBeOfType<MyImpl1>();\n            allServices.Length.ShouldBe(3);\n            allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();\n        }"
      },
      {
        "name": "Should_Override_When_Using_IsDefault",
        "body": "{\n            //Arrange\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());\n\n            //Act\n            var service = LocalIocManager.Resolve<IMyService>();\n            var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();\n\n            //Assert\n            service.ShouldBeOfType<MyImpl2>();\n            allServices.Length.ShouldBe(2);\n            allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();\n        }"
      },
      {
        "name": "Should_Override_When_Using_IsDefault_Twice",
        "body": "{\n            //Arrange\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl3>().LifestyleTransient().IsDefault());\n\n            //Act\n            var service = LocalIocManager.Resolve<IMyService>();\n            var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();\n\n            //Assert\n            service.ShouldBeOfType<MyImpl3>();\n            allServices.Length.ShouldBe(3);\n            allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();\n        }"
      },
      {
        "name": "Should_Get_Default_Service",
        "body": "{\n            //Arrange\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());\n            LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl3>().LifestyleTransient());\n\n            //Act\n            var service = LocalIocManager.Resolve<IMyService>();\n            var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();\n\n            //Assert\n            service.ShouldBeOfType<MyImpl2>();\n            allServices.Length.ShouldBe(3);\n            allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();\n            allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "IocManager_Self_Register_Tests.cs",
    "methods": [
      {
        "name": "Should_Self_Register_With_All_Interfaces",
        "body": "{\n            var registrar = LocalIocManager.Resolve<IIocRegistrar>();\n            var resolver = LocalIocManager.Resolve<IIocResolver>();\n            var managerByInterface = LocalIocManager.Resolve<IIocManager>();\n            var managerByClass = LocalIocManager.Resolve<IocManager>();\n\n            managerByClass.ShouldBeSameAs(registrar);\n            managerByClass.ShouldBeSameAs(resolver);\n            managerByClass.ShouldBeSameAs(managerByInterface);\n        }"
      }
    ]
  },
  {
    "file": "IocManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_First_Registered_Class_If_Registered_Multiple_Class_For_Same_Interface",
        "body": "{\n            LocalIocManager.Resolve<IEmpty>().GetType().ShouldBe(typeof (EmptyImplOne));\n        }"
      },
      {
        "name": "ResolveAll_Test",
        "body": "{\n            var instances = LocalIocManager.ResolveAll<IEmpty>();\n            instances.Length.ShouldBe(2);\n            instances.Any(i => i.GetType() == typeof(EmptyImplOne)).ShouldBeTrue();\n            instances.Any(i => i.GetType() == typeof(EmptyImplTwo)).ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "PropertyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_Session_For_ApplicationService",
        "body": "{\n            var session = Substitute.For<IAbpSession>();\n            session.TenantId.Returns(1);\n            session.UserId.Returns(42);\n\n            LocalIocManager.Register<MyApplicationService>();\n            LocalIocManager.IocContainer.Register(\n                Component.For<IAbpSession>().Instance(session)\n                );\n\n            var myAppService = LocalIocManager.Resolve<MyApplicationService>();\n            myAppService.TestSession();\n        }"
      }
    ]
  },
  {
    "file": "Registrar_And_Resolver_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Self_Registered_Types",
        "body": "{\n            _registrar.Register<MyClass>();\n            _resolver.Resolve<MyClass>();\n        }"
      },
      {
        "name": "Should_Resolve_Registered_By_Interface_Types",
        "body": "{\n            _registrar.Register<IMyInterface, MyClass>();\n            _resolver.Resolve<IMyInterface>();\n\n            try\n            {\n                _resolver.Resolve<MyClass>();\n                Assert.Fail(\"Should not resolve by class that is registered by interface\");\n            }\n            catch { }\n        }"
      },
      {
        "name": "Should_Get_Different_Objects_For_Transients",
        "body": "{\n            _registrar.Register<MyClass>(DependencyLifeStyle.Transient);\n            \n            var obj1 = _resolver.Resolve<MyClass>();\n            var obj2 = _resolver.Resolve<MyClass>();\n\n            obj1.ShouldNotBeSameAs(obj2);\n        }"
      },
      {
        "name": "Should_Get_Same_Object_For_Singleton",
        "body": "{\n            _registrar.Register<MyClass>(DependencyLifeStyle.Singleton);\n\n            var obj1 = _resolver.Resolve<MyClass>();\n            var obj2 = _resolver.Resolve<MyClass>();\n\n            obj1.ShouldBeSameAs(obj2);\n        }"
      }
    ]
  },
  {
    "file": "ScopedIocResolver_Inject_Tests.cs",
    "methods": [
      {
        "name": "Should_Automatically_Release_Resolved_Dependencies_When_Injected_Class_Released",
        "body": "{\n            //Arrange\n            LocalIocManager.Register<IScopedIocResolver, ScopedIocResolver>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<MyDependency>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<MyMainClass>(DependencyLifeStyle.Transient);\n\n            //Act\n            var mainClass = LocalIocManager.Resolve<MyMainClass>();\n            var dependency = mainClass.CreateDependency();\n            dependency.IsDisposed.ShouldBeFalse();\n            LocalIocManager.Release(mainClass);\n\n            //Assert\n            dependency.IsDisposed.ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "ScopedIocResolver_Tests.cs",
    "methods": [
      {
        "name": "UsingScope_Test_ShouldWork",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            SimpleDisposableObject simpleObj = null;\n\n            LocalIocManager.UsingScope(scope => { simpleObj = scope.Resolve<SimpleDisposableObject>(); });\n\n            simpleObj.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "UsingScope_Test_With_Constructor_ShouldWork",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            SimpleDisposableObject simpleObj = null;\n\n            LocalIocManager.UsingScope(scope => { simpleObj = scope.Resolve<SimpleDisposableObject>(new { myData = 40 }); });\n\n            simpleObj.MyData.ShouldBe(40);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_ShouldWork",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject3>(DependencyLifeStyle.Transient);\n\n            SimpleDisposableObject simpleObj;\n            SimpleDisposableObject2 simpleObj2;\n            SimpleDisposableObject3 simpleObj3;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleObj = scope.Resolve<SimpleDisposableObject>();\n                simpleObj2 = scope.Resolve<SimpleDisposableObject2>();\n                simpleObj3 = scope.Resolve<SimpleDisposableObject3>();\n            }\n\n            simpleObj.DisposeCount.ShouldBe(1);\n            simpleObj2.DisposeCount.ShouldBe(1);\n            simpleObj3.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_With_ConstructorArgs_ShouldWork",
        "body": "{\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject3>(DependencyLifeStyle.Transient);\n\n            SimpleDisposableObject simpleObj;\n            SimpleDisposableObject2 simpleObj2;\n            SimpleDisposableObject3 simpleObj3;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleObj = scope.Resolve<SimpleDisposableObject>(new { myData = 40 });\n                simpleObj2 = scope.Resolve<SimpleDisposableObject2>(new { myData = 4040 });\n                simpleObj3 = scope.Resolve<SimpleDisposableObject3>(new { myData = 404040 });\n            }\n\n            simpleObj.MyData.ShouldBe(40);\n            simpleObj2.MyData.ShouldBe(4040);\n            simpleObj3.MyData.ShouldBe(404040);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_DisposeAll_Registrants",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);\n\n            IEnumerable<ISimpleDependency> simpleDependendcies;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleDependendcies = scope.ResolveAll<ISimpleDependency>();\n            }\n\n            simpleDependendcies.ShouldAllBe(d => d.DisposeCount == 1);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_WithConstructor",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);\n\n            IEnumerable<ISimpleDependency> simpleDependendcies;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleDependendcies = scope.ResolveAll<ISimpleDependency>(new { myData = 40 });\n            }\n\n            simpleDependendcies.ShouldAllBe(x => x.MyData == 40);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_With_OtherResolvings",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            IEnumerable<ISimpleDependency> simpleDependendcies;\n            SimpleDisposableObject simpleObject;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleDependendcies = scope.ResolveAll<ISimpleDependency>();\n                simpleObject = scope.Resolve<SimpleDisposableObject>();\n            }\n\n            simpleDependendcies.ShouldAllBe(x => x.DisposeCount == 1);\n            simpleObject.DisposeCount.ShouldBe(1);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_With_OtherResolvings_ConstructorArguments",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);\n            LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);\n\n            IEnumerable<ISimpleDependency> simpleDependendcies;\n            SimpleDisposableObject simpleObject;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleDependendcies = scope.ResolveAll<ISimpleDependency>(new { myData = 40 });\n                simpleObject = scope.Resolve<SimpleDisposableObject>(new { myData = 40 });\n            }\n\n            simpleDependendcies.ShouldAllBe(x => x.MyData == 40);\n            simpleObject.MyData.ShouldBe(40);\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_IsRegistered_ShouldWork",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                scope.IsRegistered<ISimpleDependency>().ShouldBe(true);\n                scope.IsRegistered(typeof(ISimpleDependency)).ShouldBe(true);\n            }\n        }"
      },
      {
        "name": "IIocScopedResolver_Test_Custom_Release_ShouldWork",
        "body": "{\n            LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);\n\n            ISimpleDependency simpleDependency;\n\n            using (var scope = LocalIocManager.CreateScope())\n            {\n                simpleDependency = scope.Resolve<ISimpleDependency>();\n                scope.Release(simpleDependency);\n            }\n\n            simpleDependency.DisposeCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "ShouldInitialize_Simple_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Initialize",
        "body": "{\n            LocalIocManager.Register<MyService>(DependencyLifeStyle.Transient);\n            var myService = LocalIocManager.Resolve<MyService>();\n            myService.InitializeCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "Unicode_Naming_Tests.cs",
    "methods": [
      {
        "name": "Castle_Should_Support_Unicode_Class_Names",
        "body": "{\n            var container = new WindsorContainer();\n\n            container.Register(\n                Component.For<Iお知らせAppService>().ImplementedBy<お知らせAppService>().LifestyleTransient()\n            );\n\n            container.Resolve<Iお知らせAppService>().ShouldBeOfType<お知らせAppService>();\n        }"
      },
      {
        "name": "Castle_Should_Register_Unicode_Names_In_Conventions",
        "body": "{\n            var container = new WindsorContainer();\n\n            container.Register(\n                Classes\n                    .FromAssemblyContaining(typeof(Unicode_Naming_Tests))\n                    .Where(c => c == typeof(お知らせAppService))\n                    .WithServiceDefaultInterfaces()\n                    .WithServiceSelf()\n                    .LifestyleTransient()\n            );\n\n            container.Resolve<お知らせAppService>().ShouldBeOfType<お知らせAppService>();\n            container.Resolve<Iお知らせAppService>().ShouldBeOfType<お知らせAppService>();\n        }"
      }
    ]
  },
  {
    "file": "DisposeAction_Test.cs",
    "methods": [
      {
        "name": "Should_Call_Action_When_Disposed",
        "body": "{\n            var actionIsCalled = false;\n            \n            using (new DisposeAction(() => actionIsCalled = true))\n            {\n                \n            }\n\n            actionIsCalled.ShouldBe(true);\n        }"
      }
    ]
  },
  {
    "file": "EntityHelper_Tests.cs",
    "methods": [
      {
        "name": "GetPrimaryKeyType_Tests",
        "body": "{\n            EntityHelper.GetPrimaryKeyType<Manager>().ShouldBe(typeof(int));\n            EntityHelper.GetPrimaryKeyType(typeof(Manager)).ShouldBe(typeof(int));\n            EntityHelper.GetPrimaryKeyType(typeof(TestEntityWithGuidPk)).ShouldBe(typeof(Guid));\n        }"
      }
    ]
  },
  {
    "file": "ExtendableObject_Tests.cs",
    "methods": [
      {
        "name": "Should_Set_And_Get_Primitive_Values",
        "body": "{\n            var entity = new MyEntity();\n\n            entity.SetData(\"Name\", \"John\");\n            entity.GetData<string>(\"Name\").ShouldBe(\"John\");\n\n            entity.SetData(\"Length\", 42424242);\n            entity.GetData<int>(\"Length\").ShouldBe(42424242);\n\n            entity.SetData(\"Age\", 42);\n            Assert.Equal(42, entity.GetData<byte>(\"Age\"));\n\n            entity.SetData(\"BirthDate\", new DateTime(2015, 05, 25, 13, 24, 00, DateTimeKind.Utc));\n            Assert.Equal(new DateTime(2015, 05, 25, 13, 24, 00, DateTimeKind.Utc), entity.GetData<DateTime>(\"BirthDate\"));\n\n            entity.SetData(\"EnumVal\", MyEnum.Value2);\n            entity.GetData<MyEnum>(\"EnumVal\").ShouldBe(MyEnum.Value2);\n            \n            entity.GetData<string>(\"NonExistingValue\").ShouldBe(null);\n        }"
      },
      {
        "name": "Should_Set_And_Get_Complex_Values",
        "body": "{\n            var entity = new MyEntity();\n\n            var obj = new MyComplexType\n            {\n                Name = \"John\",\n                Age = 42,\n                Inner = new List<MyComplexTypeInner>\n                {\n                    new MyComplexTypeInner {Value1 = \"A\", Value2 = 2},\n                    new MyComplexTypeInner {Value1 = \"B\", Value2 = null},\n                    new MyComplexTypeInner {Value1 = null, Value2 = null},\n                    null\n                }\n            };\n\n            entity.SetData(\"ComplexData\", obj);\n            var obj2 = entity.GetData<MyComplexType>(\"ComplexData\");\n\n            obj.ToJsonString().ShouldBe(obj2.ToJsonString());\n\n            entity.SetData(\"ComplexData\", (MyComplexType)null);\n            entity.GetData<MyComplexType>(\"ComplexData\").ShouldBe(null);\n        }"
      },
      {
        "name": "Should_Set_ExtensionData_To_Null_If_No_Properties_Remain_With_Setting_Properties_To_Default",
        "body": "{\n            var entity = new MyEntity();\n\n            entity.ExtensionData.ShouldBeNull(); //It's null at the beginning\n\n            entity.SetData(\"Name\", \"Douglas\");\n            entity.SetData(\"Age\", 42);\n            entity.ExtensionData.ShouldNotBeNull();\n\n            entity.SetData<string>(\"Name\", null); //setting to default removes data\n            entity.ExtensionData.ShouldNotBeNull(); //but there is an \"Age\" property.\n            entity.SetData(\"Age\", 0); //setting to default removes data, no data remains\n            entity.ExtensionData.ShouldBeNull(); //Now, it's null\n        }"
      },
      {
        "name": "Should_Set_ExtensionData_To_Null_If_No_Properties_Remain_With_Removing_Properties",
        "body": "{\n            var entity = new MyEntity();\n\n            entity.ExtensionData.ShouldBeNull(); //It's null at the beginning\n\n            entity.SetData(\"Name\", \"Douglas\");\n            entity.SetData(\"Age\", 42);\n            entity.ExtensionData.ShouldNotBeNull();\n\n            entity.RemoveData(\"Name\");\n            entity.ExtensionData.ShouldNotBeNull();\n            entity.RemoveData(\"Age\");\n            entity.ExtensionData.ShouldBeNull(); //Now, it's null\n        }"
      },
      {
        "name": "Should_Get_Default_If_Not_Present",
        "body": "{\n            var entity = new MyEntity();\n            entity.GetData<string>(\"Name\").ShouldBe(null);\n            entity.GetData<int>(\"Length\").ShouldBe(0);\n            entity.GetData<int?>(\"Length\").ShouldBe(null);\n            entity.GetData<DateTime>(\"BirthDate\").ShouldBe(new DateTime());\n            entity.GetData<DateTime?>(\"BirthDate\").ShouldBe(null);\n            Assert.Equal(0, entity.GetData<byte>(\"Age\"));\n            Assert.Null(entity.GetData<byte?>(\"Age\"));\n            entity.GetData<MyComplexType>(\"ComplexData\").ShouldBe(null);\n        }"
      },
      {
        "name": "Should_Support_Inheritance_Of_Complex_Objects",
        "body": "{\n            var entity = new MyEntity();\n            entity.SetData<IAnimal>(\"MyCat\", new Tiger(), true);\n            var tiger = entity.GetData<IAnimal>(\"MyCat\", true) as Tiger;\n            tiger.ShouldNotBeNull();\n        }"
      },
      {
        "name": "Should_Support_Inheritance_Of_Complex_Objects_Inside_Array",
        "body": "{\n            var entity = new MyEntity();\n\n            var animals = new AnimalBase[]\n            {\n                new Cat {Friend = new Lion()},\n                new Lion(),\n                new Tiger()\n            };\n\n            entity.SetData(\"MyAnimals\", animals, true);\n            var animals2 = entity.GetData<AnimalBase[]>(\"MyAnimals\", true);\n\n            animals2.Length.ShouldBe(3);\n            animals2[0].ShouldBeOfType<Cat>();\n            animals2[0].As<Cat>().Friend.ShouldBeOfType<Lion>();\n            animals2[1].ShouldBeOfType<Lion>();\n            animals2[2].ShouldBeOfType<Tiger>();\n        }"
      }
    ]
  },
  {
    "file": "Test_Entities.cs",
    "methods": [
      {
        "name": "Equality_Operator_Works",
        "body": "{\n            var w1 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };\n            var w2 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };\n\n            Assert.True(w1.EntityEquals(w2), \"Same class with same Id must be equal\");\n            Assert.True(w2.EntityEquals(w1), \"Same class with same Id must be equal\");\n\n            Worker w3 = null;\n            Worker w4 = null;\n\n            Assert.True(w3 == w4, \"Null objects in same class must be equal\");\n\n            var m1 = new Manager { Id = 5, Name = \"Halil ibrahim Kalkan\", Title = \"Software Architect\" };\n\n            Assert.True(m1.EntityEquals(w1), \"Derived classes must be equal if their Ids are equal\");\n\n            var d1 = new Department { Id = 5, Name = \"IVR\" };\n\n            Assert.False(m1.EntityEquals(d1), \"Different classes must not be considered as equal even if their Ids are equal!\");\n\n            var w5 = w1;\n            w5.Id = 6;\n\n            Assert.True(w5.EntityEquals(w1), \"Same object instance must be equal.\");\n        }"
      },
      {
        "name": "IsTransient_Works",
        "body": "{\n            var w1 = new Worker { Name = \"Halil ibrahim Kalkan\" };\n            var w2 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };\n\n            Assert.True(w1.IsTransient());\n            Assert.False(w2.IsTransient());\n        }"
      },
      {
        "name": "GetHashCode_ReferenceIdNull",
        "body": "{\n            var e1 = new StringEntity();\n            var dic = new Dictionary<StringEntity, string>\n            {\n                {e1, string.Empty}\n            };\n            \n            var a = dic[e1];\n            Assert.Equal(a, string.Empty);\n        }"
      }
    ]
  },
  {
    "file": "InnerUnitOfWorkCompleteHandle_Test.cs",
    "methods": [
      {
        "name": "Should_Not_Throw_Exception_If_Complete_Called",
        "body": "{\n            using (var uow = new InnerUnitOfWorkCompleteHandle())\n            {\n                uow.Complete();\n            }\n        }"
      },
      {
        "name": "Should_Throw_Exception_If_Complete_Did_Not_Called",
        "body": "{\n            Assert.Throws<AbpException>(() =>\n            {\n                using (var uow = new InnerUnitOfWorkCompleteHandle())\n                {\n\n                }\n            }).Message.ShouldBe(InnerUnitOfWorkCompleteHandle.DidNotCallCompleteMethodExceptionMessage);\n        }"
      },
      {
        "name": "Should_Not_Override_Exception_If_Exception_Is_Thrown_By_User",
        "body": "{\n            Assert.Throws<Exception>(\n                new Action(() =>\n                           {\n                               using (var uow = new InnerUnitOfWorkCompleteHandle())\n                               {\n                                   throw new Exception(\"My inner exception!\");\n                               }\n                           })).Message.ShouldBe(\"My inner exception!\");\n        }"
      }
    ]
  },
  {
    "file": "UnitOfWorkManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Uow_Methods",
        "body": "{\n            var fakeUow = Substitute.For<IUnitOfWork>();\n\n            LocalIocManager.IocContainer.Register(\n                Component.For<IUnitOfWorkDefaultOptions>().ImplementedBy<UnitOfWorkDefaultOptions>().LifestyleSingleton(),\n                Component.For<IUnitOfWorkManager>().ImplementedBy<UnitOfWorkManager>().LifestyleSingleton(),\n                Component.For<IUnitOfWork>().Instance(fakeUow).LifestyleSingleton(),\n                Component.For<ICurrentUnitOfWorkProvider>().ImplementedBy<AsyncLocalCurrentUnitOfWorkProvider>().LifestyleSingleton()\n                );\n\n            var uowManager = LocalIocManager.Resolve<IUnitOfWorkManager>();\n\n            //Starting the first uow\n            using (var uow1 = uowManager.Begin())\n            {\n                //so, begin will be called\n                fakeUow.Received(1).Begin(Arg.Any<UnitOfWorkOptions>());\n\n                //trying to begin a uow (not starting a new one, using the outer)\n                using (var uow2 = uowManager.Begin())\n                {\n                    //Since there is a current uow, begin is not called\n                    fakeUow.Received(1).Begin(Arg.Any<UnitOfWorkOptions>());\n\n                    uow2.Complete();\n\n                    //complete has no effect since outer uow should complete it\n                    fakeUow.DidNotReceive().Complete();\n                }\n\n                //trying to begin a uow (forcing to start a NEW one)\n                using (var uow2 = uowManager.Begin(TransactionScopeOption.RequiresNew))\n                {\n                    //So, begin is called again to create an inner uow\n                    fakeUow.Received(2).Begin(Arg.Any<UnitOfWorkOptions>());\n\n                    uow2.Complete();\n\n                    //And the inner uow should be completed\n                    fakeUow.Received(1).Complete();\n                }\n\n                //complete the outer uow\n                uow1.Complete();\n            }\n\n            fakeUow.Received(2).Complete();\n            fakeUow.Received(2).Dispose();\n        }"
      }
    ]
  },
  {
    "file": "ValueObject_Simple_Tests.cs",
    "methods": [
      {
        "name": "Value_Objects_Should_Be_Same_If_Contains_Same_Data",
        "body": "{\n            var address1 = new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);\n            var address2 = new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);\n\n            Assert.True(address1.ValueEquals(address2));\n            Assert.True(address2.ValueEquals(address1));\n        }"
      },
      {
        "name": "Value_Objects_Should_Not_Be_Same_If_Contains_Different_Data",
        "body": "{\n            Assert.False(\n                new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(\n                    new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5A0\"), \"Baris Manco Street\", 42))\n            );\n\n            Assert.False(\n                new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Streettt\", 42).ValueEquals(\n                new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42))\n            );\n\n            Assert.False(\n                new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(\n                    new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 45))\n            );\n        }"
      },
      {
        "name": "Value_Objects_Should_Not_Be_Same_If_One_Of_Them_Is_Null",
        "body": "{\n            Assert.False(new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(null));\n        }"
      },
      {
        "name": "Value_Object_Nullable_Guid_Property_Test",
        "body": "{\n            var anAddress = new Address2(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);\n            var anotherAddress = new Address2(null, \"Another street\", 42);\n\n            Assert.False(anAddress.ValueEquals(anotherAddress));\n            Assert.False(anotherAddress.ValueEquals(anAddress));\n        }"
      },
      {
        "name": "Value_Object_Should_Be_Same_If_Ignored_Property_Diff",
        "body": "{\n            var address1 = new Address3(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);\n            var address2 = new Address3(null, \"Baris Manco Street\", 42);\n\n            Assert.True(address1.ValueEquals(address2));\n            Assert.True(address2.ValueEquals(address1));\n        }"
      },
      {
        "name": "Value_Object_Should__Not_Be_Same_If_NotIgnored_Property_Diff",
        "body": "{\n            var address1 = new Address3(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);\n            var address2 = new Address3(null, \"Another street\", 42);\n\n            Assert.False(address1.ValueEquals(address2));\n            Assert.False(address2.ValueEquals(address1));\n        }"
      }
    ]
  },
  {
    "file": "ActionBasedEventHandlerTest.cs",
    "methods": [
      {
        "name": "Should_Call_Action_On_Event_With_Correct_Source",
        "body": "{\n            var totalData = 0;\n\n            EventBus.Register<MySimpleEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                    Assert.Equal(this, eventData.EventSource);\n                });\n\n            EventBus.Trigger(this, new MySimpleEventData(1));\n            EventBus.Trigger(this, new MySimpleEventData(2));\n            EventBus.Trigger(this, new MySimpleEventData(3));\n            EventBus.Trigger(this, new MySimpleEventData(4));\n\n            Assert.Equal(10, totalData);\n        }"
      },
      {
        "name": "Should_Call_Handler_With_Non_Generic_Trigger",
        "body": "{\n            var totalData = 0;\n\n            EventBus.Register<MySimpleEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                    Assert.Equal(this, eventData.EventSource);\n                });\n\n            EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(1));\n            EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(2));\n            EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(3));\n            EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(4));\n\n            Assert.Equal(10, totalData);\n        }"
      },
      {
        "name": "Should_Not_Call_Action_After_Unregister_1",
        "body": "{\n            var totalData = 0;\n\n            var registerDisposer = EventBus.Register<MySimpleEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                });\n\n            EventBus.Trigger(this, new MySimpleEventData(1));\n            EventBus.Trigger(this, new MySimpleEventData(2));\n            EventBus.Trigger(this, new MySimpleEventData(3));\n\n            registerDisposer.Dispose();\n\n            EventBus.Trigger(this, new MySimpleEventData(4));\n\n            Assert.Equal(6, totalData);\n        }"
      },
      {
        "name": "Should_Not_Call_Action_After_Unregister_2",
        "body": "{\n            var totalData = 0;\n\n            var action = new Action<MySimpleEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                });\n\n            EventBus.Register(action);\n\n            EventBus.Trigger(this, new MySimpleEventData(1));\n            EventBus.Trigger(this, new MySimpleEventData(2));\n            EventBus.Trigger(this, new MySimpleEventData(3));\n\n            EventBus.Unregister(action);\n\n            EventBus.Trigger(this, new MySimpleEventData(4));\n\n            Assert.Equal(6, totalData);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            int totalData = 0;\n\n            EventBus.AsyncRegister<MySimpleEventData>(\n                async eventData =>\n                {\n                    await Task.Delay(20);\n                    Interlocked.Add(ref totalData, eventData.Value);\n                    await Task.Delay(20);\n                    Assert.Equal(this, eventData.EventSource);\n                });\n\n            await EventBus.TriggerAsync(this, new MySimpleEventData(1));\n            await EventBus.TriggerAsync(this, new MySimpleEventData(2));\n            await EventBus.TriggerAsync(this, new MySimpleEventData(3));\n            await EventBus.TriggerAsync(this, new MySimpleEventData(4));\n\n            Assert.Equal(10, totalData);\n        }"
      }
    ]
  },
  {
    "file": "EventBusTestBase.cs",
    "methods": []
  },
  {
    "file": "EventBus_Exception_Test.cs",
    "methods": [
      {
        "name": "Should_Throw_Single_Exception_If_Only_One_Of_Handlers_Fails",
        "body": "{\n            EventBus.Register<MySimpleEventData>(\n                eventData => throw new Exception(\"This exception is intentionally thrown!\")\n            );\n\n            var appException = Assert.Throws<Exception>(() =>\n            {\n                EventBus.Trigger<MySimpleEventData>(null, new MySimpleEventData(1));\n            });\n\n            appException.Message.ShouldBe(\"This exception is intentionally thrown!\");\n        }"
      },
      {
        "name": "Should_Throw_Aggregate_Exception_If_More_Than_One_Of_Handlers_Fail",
        "body": "{\n            EventBus.Register<MySimpleEventData>(\n                eventData => throw new Exception(\"This exception is intentionally thrown #1!\")\n            );\n\n            EventBus.Register<MySimpleEventData>(\n                eventData => throw new Exception(\"This exception is intentionally thrown #2!\")\n            );\n\n            var aggrException = Assert.Throws<AggregateException>(() =>\n            {\n                EventBus.Trigger<MySimpleEventData>(null, new MySimpleEventData(1));\n            });\n\n            aggrException.InnerExceptions.Count.ShouldBe(2);\n            aggrException.InnerExceptions[0].Message.ShouldBe(\"This exception is intentionally thrown #1!\");\n            aggrException.InnerExceptions[1].Message.ShouldBe(\"This exception is intentionally thrown #2!\");\n        }"
      }
    ]
  },
  {
    "file": "EventBus_MultipleHandle_Test.cs",
    "methods": [
      {
        "name": "Should_Call_Created_And_Changed_Once",
        "body": "{\n            var handler = new MyEventHandler();\n\n            EventBus.Register<EntityChangedEventData<MyEntity>>(handler);\n            EventBus.Register<EntityCreatedEventData<MyEntity>>(handler);\n\n            var asyncHandler = new MyAsyncEventHandler();\n\n            EventBus.AsyncRegister<EntityChangedEventData<MyEntity>>(asyncHandler);\n            EventBus.AsyncRegister<EntityCreatedEventData<MyEntity>>(asyncHandler);\n\n            EventBus.Trigger(new EntityCreatedEventData<MyEntity>(new MyEntity()));\n\n            handler.EntityCreatedEventCount.ShouldBe(1);\n            handler.EntityChangedEventCount.ShouldBe(1);\n\n            asyncHandler.EntityCreatedEventCount.ShouldBe(1);\n            asyncHandler.EntityChangedEventCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "EventRegisterUnregisterTest.cs",
    "methods": [
      {
        "name": "EventBustTest_UnregisterWhileHandlingEvent_ShouldNotThrow",
        "body": "{\n            // Arrange\n            Func<MyEvent, Task> eventHandler = async (axel) => await axel.Semaphore.WaitAsync();\n            eventBus.AsyncRegister(eventHandler);\n            var myEvent = new MyEvent();\n\n            // Act\n            var triggerTask = eventBus.TriggerAsync(myEvent);\n            eventBus.AsyncUnregister(eventHandler);\n            myEvent.Semaphore.Release();\n\n            // Assert\n            Should.NotThrow(async () => await triggerTask);\n        }"
      }
    ]
  },
  {
    "file": "GenericInheritanceTest.cs",
    "methods": [
      {
        "name": "Should_Trigger_For_Inherited_Generic_1",
        "body": "{\n            var triggeredEvent = false;\n\n            EventBus.Register<EntityChangedEventData<Person>>(\n                eventData =>\n                {\n                    eventData.Entity.Id.ShouldBe(42);\n                    triggeredEvent = true;\n                });\n\n            EventBus.Trigger(new EntityUpdatedEventData<Person>(new Person { Id = 42 }));\n\n            triggeredEvent.ShouldBe(true);\n        }"
      },
      {
        "name": "Should_Trigger_For_Inherited_Generic_2",
        "body": "{\n            var triggeredEvent = false;\n\n            EventBus.Register<EntityChangedEventData<Person>>(\n                eventData =>\n                {\n                    eventData.Entity.Id.ShouldBe(42);\n                    triggeredEvent = true;\n                });\n\n            EventBus.Trigger(new EntityChangedEventData<Student>(new Student { Id = 42 }));\n\n            triggeredEvent.ShouldBe(true);\n        }"
      }
    ]
  },
  {
    "file": "InheritanceTest.cs",
    "methods": [
      {
        "name": "Should_Handle_Events_For_Derived_Classes",
        "body": "{\n            var totalData = 0;\n\n            EventBus.Register<MySimpleEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                    Assert.Equal(this, eventData.EventSource);\n                });\n\n            EventBus.Trigger(this, new MySimpleEventData(1)); //Should handle directly registered class\n            EventBus.Trigger(this, new MySimpleEventData(2)); //Should handle directly registered class\n            EventBus.Trigger(this, new MyDerivedEventData(3)); //Should handle derived class too\n            EventBus.Trigger(this, new MyDerivedEventData(4)); //Should handle derived class too\n\n            Assert.Equal(10, totalData);\n        }"
      },
      {
        "name": "Should_Not_Handle_Events_For_Base_Classes",
        "body": "{\n            var totalData = 0;\n\n            EventBus.Register<MyDerivedEventData>(\n                eventData =>\n                {\n                    totalData += eventData.Value;\n                    Assert.Equal(this, eventData.EventSource);\n                });\n\n            EventBus.Trigger(this, new MySimpleEventData(1)); //Should not handle\n            EventBus.Trigger(this, new MySimpleEventData(2)); //Should not handle\n            EventBus.Trigger(this, new MyDerivedEventData(3)); //Should handle\n            EventBus.Trigger(this, new MyDerivedEventData(4)); //Should handle\n\n            Assert.Equal(7, totalData);\n        }"
      }
    ]
  },
  {
    "file": "TransientDisposableEventHandlerTest.cs",
    "methods": [
      {
        "name": "Should_Call_Handler_AndDispose",
        "body": "{\n            EventBus.Register<MySimpleEventData, MySimpleTransientEventHandler>();\n            EventBus.Register<MySimpleEventData, MySimpleTransientAsyncEventHandler>();\n\n            EventBus.Trigger(new MySimpleEventData(1));\n            EventBus.Trigger(new MySimpleEventData(2));\n            EventBus.Trigger(new MySimpleEventData(3));\n\n            Assert.Equal(3, MySimpleTransientEventHandler.HandleCount);\n            Assert.Equal(3, MySimpleTransientEventHandler.DisposeCount);\n\n            Assert.Equal(3, MySimpleTransientAsyncEventHandler.HandleCount);\n            Assert.Equal(3, MySimpleTransientAsyncEventHandler.DisposeCount);\n        }"
      }
    ]
  },
  {
    "file": "GenericMethodCallTests.cs",
    "methods": [
      {
        "name": "Test_Method_BaseEvent_BaseArg",
        "body": "{\n            Method_BaseEvent_BaseArg(new EntityEventData<Person>(new Person())); //TODO: <Student>\n            Method_BaseEvent_BaseArg(new EntityEventData<Person>(new Student())); //TODO: <Student>\n            Method_BaseEvent_BaseArg(new EntityUpdatedEventData<Person>(new Person())); //TODO: <Student>\n            Method_BaseEvent_BaseArg(new EntityUpdatedEventData<Person>(new Student())); //TODO: <Student>\n        }"
      },
      {
        "name": "Test_Method_BaseEvent_DerivedArg",
        "body": "{\n            Method_BaseEvent_DerivedArg(new EntityEventData<Student>(new Student()));\n            Method_BaseEvent_DerivedArg(new EntityUpdatedEventData<Student>(new Student()));\n        }"
      },
      {
        "name": "Test_Method_DerivedEvent_BaseArg",
        "body": "{\n            Method_DerivedEvent_BaseArg(new EntityUpdatedEventData<Person>(new Person()));\n            Method_DerivedEvent_BaseArg(new EntityUpdatedEventData<Person>(new Student()));\n        }"
      },
      {
        "name": "Test_Method_DerivedEvent_DerivedArg",
        "body": "{\n            Method_DerivedEvent_DerivedArg(new EntityUpdatedEventData<Student>(new Student()));\n        }"
      }
    ]
  },
  {
    "file": "ComparableExtensions_Tests.cs",
    "methods": [
      {
        "name": "IsBetween_Test",
        "body": "{\n            //Number\n            var number = 5;\n            number.IsBetween(1, 10).ShouldBe(true);\n            number.IsBetween(1, 5).ShouldBe(true);\n            number.IsBetween(5, 10).ShouldBe(true);\n            number.IsBetween(10, 20).ShouldBe(false);\n\n            //DateTime\n            var dateTimeValue = new DateTime(2014, 10, 4, 18, 20, 42, 0);\n            dateTimeValue.IsBetween(new DateTime(2014, 1, 1), new DateTime(2015, 1, 1)).ShouldBe(true);\n            dateTimeValue.IsBetween(new DateTime(2015, 1, 1), new DateTime(2016, 1, 1)).ShouldBe(false);\n        }"
      }
    ]
  },
  {
    "file": "DateTimeExtensions_Tests.cs",
    "methods": [
      {
        "name": "ToUnixTimestamp_Test",
        "body": "{\n            var timestamp = new DateTime(1980, 11, 20).ToUnixTimestamp();\n            timestamp.ShouldBe(343526400);\n        }"
      },
      {
        "name": "FromUnixTimestamp_Test",
        "body": "{\n            var date = 343526400d.FromUnixTimestamp();\n            date.ShouldBe(new DateTime(1980, 11, 20));\n        }"
      },
      {
        "name": "ToDayEnd_Test",
        "body": "{\n            var now = Clock.Now;\n\n            var dateEnd = now.ToDayEnd();\n\n            dateEnd.ShouldBe(now.Date.AddDays(1).AddMilliseconds(-1));\n        }"
      },
      {
        "name": "StartOfWeek_Test",
        "body": "{\n            var startOfWeekSunday = new DateTime(1980, 11, 20).StartOfWeek(DayOfWeek.Sunday);\n\n            startOfWeekSunday.ShouldBe(new DateTime(1980, 11, 16));\n\n            var startOfWeekMonday = new DateTime(1980, 11, 20).StartOfWeek(DayOfWeek.Monday);\n\n            startOfWeekMonday.ShouldBe(new DateTime(1980, 11, 17));\n        }"
      },
      {
        "name": "DaysOfMonth_Test",
        "body": "{\n            var days = DateTimeExtensions.DaysOfMonth(2018, 1);\n\n            days.ShouldNotBeNull();\n\n            days.Count().ShouldBe(31);\n\n        }"
      },
      {
        "name": "WeekDayInstanceOfMonth_Test",
        "body": "{\n            var instance = new DateTime(2011, 11, 29).WeekDayInstanceOfMonth();\n\n            instance.ShouldBe(5);\n        }"
      },
      {
        "name": "TotalDaysInMonth_Test",
        "body": "{\n            var totalDays = new DateTime(2018, 1, 15).TotalDaysInMonth();\n            totalDays.ShouldBe(31);\n        }"
      },
      {
        "name": "ToDateTimeUnspecified_Test",
        "body": "{\n            var localTime = Clock.Now;\n\n            var unspecified = localTime.ToDateTimeUnspecified();\n\n            unspecified.Kind.ShouldBe(DateTimeKind.Unspecified);\n\n        }"
      },
      {
        "name": "TrimMilliseconds_Test",
        "body": "{\n            var now = Clock.Now;\n\n            var trimmed = now.TrimMilliseconds();\n\n            trimmed.Millisecond.ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "DateTimeRange_Tests.cs",
    "methods": [
      {
        "name": "StaticRanges_Test",
        "body": "{\n            DateTimeRange.Today.StartTime.ShouldBeGreaterThan(DateTimeRange.Yesterday.EndTime);\n            DateTimeRange.Today.EndTime.ShouldBeLessThan(DateTimeRange.Tomorrow.StartTime);\n\n            DateTimeRange.ThisMonth.StartTime.Day.ShouldBe(1);\n            DateTimeRange.LastMonth.StartTime.Day.ShouldBe(1);\n            DateTimeRange.NextMonth.StartTime.Day.ShouldBe(1);\n\n            DateTimeRange.ThisMonth.StartTime.ShouldBeGreaterThan(DateTimeRange.LastMonth.EndTime);\n            DateTimeRange.ThisMonth.EndTime.ShouldBeLessThan(DateTimeRange.NextMonth.EndTime);\n\n            DateTimeRange.ThisYear.StartTime.Month.ShouldBe(1);\n            DateTimeRange.ThisYear.StartTime.Day.ShouldBe(1);\n            \n            DateTimeRange.ThisYear.StartTime.ShouldBeGreaterThan(DateTimeRange.LastYear.EndTime);\n            DateTimeRange.ThisYear.EndTime.ShouldBeLessThan(DateTimeRange.NextYear.StartTime);\n\n            DateTimeRange.Last7DaysExceptToday.EndTime.ShouldBeLessThan(DateTimeRange.Today.StartTime);\n            DateTimeRange.Last30DaysExceptToday.EndTime.ShouldBeLessThan(DateTimeRange.Today.StartTime);\n        }"
      },
      {
        "name": "DaysInRange_Test",
        "body": "{\n            var now = Clock.Now;\n            var dateTimeRange = new DateTimeRange(now.Date, now.Date.AddDays(1));\n\n            var days = dateTimeRange.DaysInRange();\n\n            days.ShouldNotBeNull();\n            days.Count().ShouldBe(1);\n            days.Single().ShouldBe(now.Date);\n\n            var year = new DateTime(2018,1,1);\n            var yearRange = new DateTimeRange(year, year.AddYears(1));\n\n            var yearDays = yearRange.DaysInRange();\n            yearDays.ShouldNotBeNull();\n            yearDays.Count().ShouldBe(365);\n            yearDays.FirstOrDefault().ShouldBe(year);\n        }"
      }
    ]
  },
  {
    "file": "DayOfWeekExtensions_Tests.cs",
    "methods": [
      {
        "name": "Weekend_Weekday_Test",
        "body": "{\n            DayOfWeek.Monday.IsWeekday().ShouldBe(true);\n            DayOfWeek.Monday.IsWeekend().ShouldBe(false);\n\n            DayOfWeek.Saturday.IsWeekend().ShouldBe(true);\n            DayOfWeek.Saturday.IsWeekday().ShouldBe(false);\n\n            var datetime1 = new DateTime(2014, 10, 5, 16, 37, 25); //Sunday\n            var datetime2 = new DateTime(2014, 10, 7, 16, 37, 25); //Tuesday\n\n            datetime1.DayOfWeek.IsWeekend().ShouldBe(true);\n            datetime2.DayOfWeek.IsWeekend().ShouldBe(false);\n\n            datetime1.DayOfWeek.IsWeekday().ShouldBe(false);\n            datetime2.DayOfWeek.IsWeekday().ShouldBe(true);\n        }"
      },
      {
        "name": "FindNthWeekDayOfMonth_Test",
        "body": "{\n            var firstMondayOfJan2018 = DayOfWeek.Monday.FindNthWeekDayOfMonth(2018, 1, 1);\n            firstMondayOfJan2018.ShouldBe(new DateTime(2018, 1, 1));\n\n            var secondFridayOfJan2018 = DayOfWeek.Friday.FindNthWeekDayOfMonth(2018, 1, 2);\n\n            secondFridayOfJan2018.ShouldBe(new DateTime(2018, 1, 12));\n\n            var lastSundayOfJan2018 = DayOfWeek.Sunday.FindNthWeekDayOfMonth(2018, 1, 5);\n\n            lastSundayOfJan2018.ShouldBe(new DateTime(2018, 1, 28));\n\n            var lastWednesdayOfJan2018 = DayOfWeek.Wednesday.FindNthWeekDayOfMonth(2018, 1, 5);\n\n            lastWednesdayOfJan2018.ShouldBe(new DateTime(2018, 1, 31));\n        }"
      },
      {
        "name": "TotalInstancesInMonth_Test",
        "body": "{\n            var totalSundaysInJan2018 = DayOfWeek.Sunday.TotalInstancesInMonth(2018, 1);\n\n            totalSundaysInJan2018.ShouldBe(4);\n\n            var totalWednesdaysInJan2018 = DayOfWeek.Wednesday.TotalInstancesInMonth(2018, 1);\n\n            totalWednesdaysInJan2018.ShouldBe(5);\n        }"
      }
    ]
  },
  {
    "file": "ObjectExtension_Test.cs",
    "methods": [
      {
        "name": "As_Test",
        "body": "{\n            var obj = (object)new ObjectExtensions_Tests();\n            obj.As<ObjectExtensions_Tests>().ShouldNotBe(null);\n\n            obj = null;\n            obj.As<ObjectExtensions_Tests>().ShouldBe(null);\n        }"
      },
      {
        "name": "To_Tests",
        "body": "{\n            \"42\".To<int>().ShouldBeOfType<int>().ShouldBe(42);\n            \"42\".To<Int32>().ShouldBeOfType<Int32>().ShouldBe(42);\n\n            \"28173829281734\".To<long>().ShouldBeOfType<long>().ShouldBe(28173829281734);\n            \"28173829281734\".To<Int64>().ShouldBeOfType<Int64>().ShouldBe(28173829281734);\n\n            \"2.0\".To<double>().ShouldBe(2.0);\n            \"0.2\".To<double>().ShouldBe(0.2);\n            (2.0).To<int>().ShouldBe(2);\n\n            \"false\".To<bool>().ShouldBeOfType<bool>().ShouldBe(false);\n            \"True\".To<bool>().ShouldBeOfType<bool>().ShouldBe(true);\n\n            \"2260afec-bbfd-42d4-a91a-dcb11e09b17f\".To<Guid>().ShouldBeOfType<Guid>().ShouldBe(new Guid(\"2260afec-bbfd-42d4-a91a-dcb11e09b17f\"));\n\n            \"ABC\".To<TestEnum>().ShouldBe(TestEnum.ABC);\n            \"BDE\".To<TestEnum>().ShouldBe(TestEnum.BDE);\n            \"08:00:00\".To<TimeSpan>().ShouldBe(TimeSpan.FromHours(8));\n            \"1\".To<TimeSpan>().ShouldBe(TimeSpan.FromDays(1));\n            \"1:0\".To<TimeSpan>().ShouldBe(TimeSpan.FromHours(1));\n            \"0:0:1\".To<TimeSpan>().ShouldBe(TimeSpan.FromSeconds(1));\n            \"0:0:0.5\".To<TimeSpan>().ShouldBe(TimeSpan.FromMilliseconds(500));\n\n            Assert.Throws<FormatException>(() => \"test\".To<bool>());\n            Assert.Throws<FormatException>(() => \"test\".To<int>());\n            Assert.Throws<FormatException>(() => \"a\".To<TimeSpan>());\n            Assert.Throws<ArgumentException>(() => \"0\".To<TestEnum>());\n            Assert.Throws<ArgumentException>(() => \"abc\".To<TestEnum>());\n        }"
      },
      {
        "name": "IsIn_Test",
        "body": "{\n            5.IsIn(1, 3, 5, 7).ShouldBe(true);\n            6.IsIn(1, 3, 5, 7).ShouldBe(false);\n\n            int? number = null;\n            number.IsIn(2, 3, 5).ShouldBe(false);\n\n            var str = \"a\";\n            str.IsIn(\"a\", \"b\", \"c\").ShouldBe(true);\n\n            str = null;\n            str.IsIn(\"a\", \"b\", \"c\").ShouldBe(false);\n        }"
      }
    ]
  },
  {
    "file": "StringExtensions_Tests.cs",
    "methods": [
      {
        "name": "EnsureEndsWith_Test",
        "body": "{\n            //Expected use-cases\n            \"Test\".EnsureEndsWith('!').ShouldBe(\"Test!\");\n            \"Test!\".EnsureEndsWith('!').ShouldBe(\"Test!\");\n            @\"C:\\test\\folderName\".EnsureEndsWith('\\\\').ShouldBe(@\"C:\\test\\folderName\\\");\n            @\"C:\\test\\folderName\\\".EnsureEndsWith('\\\\').ShouldBe(@\"C:\\test\\folderName\\\");\n\n            //Case differences\n            \"TurkeY\".EnsureEndsWith('y').ShouldBe(\"TurkeYy\");\n            \"TurkeY\".EnsureEndsWith('y', StringComparison.OrdinalIgnoreCase).ShouldBe(\"TurkeY\");\n\n            //Edge cases for Turkish 'i'.\n            \"TAKSİ\".EnsureEndsWith('i', true, new CultureInfo(\"tr-TR\")).ShouldBe(\"TAKSİ\");\n            \"TAKSİ\".EnsureEndsWith('i', false, new CultureInfo(\"tr-TR\")).ShouldBe(\"TAKSİi\");\n        }"
      },
      {
        "name": "EnsureStartsWith_Test",
        "body": "{\n            //Expected use-cases\n            \"Test\".EnsureStartsWith('~').ShouldBe(\"~Test\");\n            \"~Test\".EnsureStartsWith('~').ShouldBe(\"~Test\");\n\n            //Case differences\n            \"Turkey\".EnsureStartsWith('t').ShouldBe(\"tTurkey\");\n            \"Turkey\".EnsureStartsWith('t', StringComparison.OrdinalIgnoreCase).ShouldBe(\"Turkey\");\n\n            //Edge cases for Turkish 'i'.\n            \"İstanbul\".EnsureStartsWith('i', true, new CultureInfo(\"tr-TR\")).ShouldBe(\"İstanbul\");\n            \"İstanbul\".EnsureStartsWith('i', false, new CultureInfo(\"tr-TR\")).ShouldBe(\"iİstanbul\");\n        }"
      },
      {
        "name": "ToPascalCase_Test",
        "body": "{\n            (null as string).ToPascalCase().ShouldBe(null);\n            \"helloWorld\".ToPascalCase().ShouldBe(\"HelloWorld\");\n            \"istanbul\".ToPascalCase().ShouldBe(\"Istanbul\");\n            \"istanbul\".ToPascalCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"İstanbul\");\n        }"
      },
      {
        "name": "ToCamelCase_Test",
        "body": "{\n            (null as string).ToCamelCase().ShouldBe(null);\n            \"HelloWorld\".ToCamelCase().ShouldBe(\"helloWorld\");\n            \"Istanbul\".ToCamelCase().ShouldBe(\"istanbul\");\n            \"Istanbul\".ToCamelCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"ıstanbul\");\n            \"İstanbul\".ToCamelCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"istanbul\");\n        }"
      },
      {
        "name": "ToSentenceCase_Test",
        "body": "{\n            (null as string).ToSentenceCase().ShouldBe(null);\n            \"HelloWorld\".ToSentenceCase().ShouldBe(\"Hello world\");\n\n            using (CultureInfoHelper.Use(\"en-US\"))\n            {\n                \"HelloIsparta\".ToSentenceCase().ShouldBe(\"Hello isparta\");\n            }\n\n            \"HelloIsparta\".ToSentenceCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"Hello ısparta\");\n        }"
      },
      {
        "name": "Right_Test",
        "body": "{\n            const string str = \"This is a test string\";\n\n            str.Right(3).ShouldBe(\"ing\");\n            str.Right(0).ShouldBe(\"\");\n            str.Right(str.Length).ShouldBe(str);\n        }"
      },
      {
        "name": "Left_Test",
        "body": "{\n            const string str = \"This is a test string\";\n\n            str.Left(3).ShouldBe(\"Thi\");\n            str.Left(0).ShouldBe(\"\");\n            str.Left(str.Length).ShouldBe(str);\n        }"
      },
      {
        "name": "NormalizeLineEndings_Test",
        "body": "{\n            const string str = \"This\\r\\n is a\\r test \\n string\";\n            var normalized = str.NormalizeLineEndings();\n            var lines = normalized.SplitToLines();\n            lines.Length.ShouldBe(4);\n        }"
      },
      {
        "name": "NthIndexOf_Test",
        "body": "{\n            const string str = \"This is a test string\";\n\n            str.NthIndexOf('i', 0).ShouldBe(-1);\n            str.NthIndexOf('i', 1).ShouldBe(2);\n            str.NthIndexOf('i', 2).ShouldBe(5);\n            str.NthIndexOf('i', 3).ShouldBe(18);\n            str.NthIndexOf('i', 4).ShouldBe(-1);\n        }"
      },
      {
        "name": "Truncate_Test",
        "body": "{\n            const string str = \"This is a test string\";\n            const string nullValue = null;\n\n            str.Truncate(7).ShouldBe(\"This is\");\n            str.Truncate(0).ShouldBe(\"\");\n            str.Truncate(100).ShouldBe(str);\n\n            nullValue.Truncate(5).ShouldBe(null);\n        }"
      },
      {
        "name": "TruncateWithPostFix_Test",
        "body": "{\n            const string str = \"This is a test string\";\n            const string nullValue = null;\n\n            str.TruncateWithPostfix(3).ShouldBe(\"...\");\n            str.TruncateWithPostfix(12).ShouldBe(\"This is a...\");\n            str.TruncateWithPostfix(0).ShouldBe(\"\");\n            str.TruncateWithPostfix(100).ShouldBe(str);\n\n            nullValue.Truncate(5).ShouldBe(null);\n\n            str.TruncateWithPostfix(3, \"~\").ShouldBe(\"Th~\");\n            str.TruncateWithPostfix(12, \"~\").ShouldBe(\"This is a t~\");\n            str.TruncateWithPostfix(0, \"~\").ShouldBe(\"\");\n            str.TruncateWithPostfix(100, \"~\").ShouldBe(str);\n\n            nullValue.TruncateWithPostfix(5, \"~\").ShouldBe(null);\n        }"
      },
      {
        "name": "RemovePostFix_Tests",
        "body": "{\n            //null case\n            (null as string).RemovePreFix(\"Test\").ShouldBeNull();\n\n            //Simple case\n            \"MyTestAppService\".RemovePostFix(\"AppService\").ShouldBe(\"MyTest\");\n            \"MyTestAppService\".RemovePostFix(\"Service\").ShouldBe(\"MyTestApp\");\n\n            //Multiple postfix (orders of postfixes are important)\n            \"MyTestAppService\".RemovePostFix(\"AppService\", \"Service\").ShouldBe(\"MyTest\");\n            \"MyTestAppService\".RemovePostFix(\"Service\", \"AppService\").ShouldBe(\"MyTestApp\");\n\n            //Unmatched case\n            \"MyTestAppService\".RemovePostFix(\"Unmatched\").ShouldBe(\"MyTestAppService\");\n        }"
      },
      {
        "name": "RemovePreFix_Tests",
        "body": "{\n            \"Home.Index\".RemovePreFix(\"NotMatchedPostfix\").ShouldBe(\"Home.Index\");\n            \"Home.About\".RemovePreFix(\"Home.\").ShouldBe(\"About\");\n        }"
      },
      {
        "name": "ToEnum_Test",
        "body": "{\n            \"MyValue1\".ToEnum<MyEnum>().ShouldBe(MyEnum.MyValue1);\n            \"MyValue2\".ToEnum<MyEnum>().ShouldBe(MyEnum.MyValue2);\n        }"
      }
    ]
  },
  {
    "file": "EntityDtoSerialization_Tests.cs",
    "methods": [
      {
        "name": "Should_Serialize_Types_Derived_From_EntityDto",
        "body": "{\n            var obj = new MyClass1\n            {\n                Id = 42,\n                Value = new MyClass2\n                {\n                    Id = 42\n                }\n            };\n\n            obj.ToJsonString().ShouldNotBeNull();\n        }"
      }
    ]
  },
  {
    "file": "JsonExtensions_Tests.cs",
    "methods": [
      {
        "name": "ToJsonString_Test",
        "body": "{\n            42.ToJsonString().ShouldBe(\"42\");\n        }"
      },
      {
        "name": "ToJsonString_Not_Normalize_DateTime_Test",
        "body": "{\n            Clock.Provider = ClockProviders.Utc;\n\n            var model1 = new MyClass1\n            {\n                Date = new DateTime(2016, 03, 16, 14, 0, 0, DateTimeKind.Local)\n            };\n\n            var model1AsString = model1.ToJsonString();\n            var date1 = model1AsString.Replace(\"{\\\"Date\\\":\", \"\").Replace(\"\\\"}\", \"\").Replace(\"\\\"\", \"\");\n            date1.ShouldNotEndWith(\"00Z\");\n\n            var model2 = new MyClass2\n            {\n                Date = new DateTime(2016, 03, 16, 14, 0, 0, DateTimeKind.Local)\n            };\n\n            var model2AsString = model2.ToJsonString();\n            var date2 = model2AsString.Replace(\"{\\\"Date\\\":\", \"\").Replace(\"\\\"}\", \"\").Replace(\"\\\"\", \"\");\n            date2.ShouldNotEndWith(\"00Z\");\n        }"
      }
    ]
  },
  {
    "file": "JsonSerializationHelper_Tests.cs",
    "methods": [
      {
        "name": "Should_Simply_Serialize_And_Deserialize",
        "body": "{\n            var str = JsonSerializationHelper.SerializeWithType(new LocalizableString(\"Foo\", \"Bar\"));\n            var result = (LocalizableString)JsonSerializationHelper.DeserializeWithType(str);\n            result.ShouldNotBeNull();\n            result.Name.ShouldBe(\"Foo\");\n            result.SourceName.ShouldBe(\"Bar\");\n        }"
      },
      {
        "name": "Should_Deserialize_With_Different_Assembly_Version",
        "body": "{\n            var str = \"Abp.Localization.LocalizableString, Abp, Version=1.5.1.0, Culture=neutral, PublicKeyToken=null|{\\\"SourceName\\\":\\\"Bar\\\",\\\"Name\\\":\\\"Foo\\\"}\";\n            var result = (LocalizableString)JsonSerializationHelper.DeserializeWithType(str);\n            result.ShouldNotBeNull();\n            result.Name.ShouldBe(\"Foo\");\n            result.SourceName.ShouldBe(\"Bar\");\n        }"
      },
      {
        "name": "Should_Deserialize_With_DateTime",
        "body": "{\n            Clock.Provider = ClockProviders.Utc;\n\n            var str = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass2, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";\n            var result = (MyClass2)JsonSerializationHelper.DeserializeWithType(str);\n            result.ShouldNotBeNull();\n            result.Date.ShouldBe(new DateTime(2016, 04, 13, 08, 58, 10, 526, Clock.Kind));\n            result.Date.Kind.ShouldBe(Clock.Kind);\n        }"
      },
      {
        "name": "Should_Deserialize_Without_DateTime_Normalization",
        "body": "{\n            Clock.Provider = ClockProviders.Utc;\n\n            var str1 = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass3, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";\n            var result1 = (MyClass3)JsonSerializationHelper.DeserializeWithType(str1);\n            result1.ShouldNotBeNull();\n            result1.Date.Kind.ShouldBe(DateTimeKind.Local);\n\n            var str2 = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass4, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";\n            var result2 = (MyClass4)JsonSerializationHelper.DeserializeWithType(str2);\n            result2.ShouldNotBeNull();\n            result2.Date.Kind.ShouldBe(DateTimeKind.Local);\n        }"
      }
    ]
  },
  {
    "file": "AbpNullableFromEmptyStringConverterFactory_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpNullableFromEmptyStringConverterFactory()\n                }\n            };\n\n            var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Prop1\\\": \\\"\\\", \\\"Prop2\\\": \\\"\\\", \\\"Prop3\\\": \\\"\\\", \\\"Prop4\\\": \\\"\\\", \\\"Prop5\\\": \\\"\\\"}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Prop1.ShouldBeNull();\n            testClass.Prop2.ShouldBeNull();\n            testClass.Prop3.ShouldBeNull();\n            testClass.Prop4.ShouldBeNull();\n            testClass.Prop5.ShouldBe(\"\");\n        }"
      },
      {
        "name": "Test_Write",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToBooleanConverter()\n                }\n            };\n\n            var testClassJson = JsonSerializer.Serialize(new TestClass()\n            {\n                Prop1 = null,\n                Prop2 = null,\n                Prop3 = null,\n                Prop4 = null,\n                Prop5 = \"\"\n            }, options);\n\n            testClassJson.ShouldBe(\"{\\\"Prop1\\\":null,\\\"Prop2\\\":null,\\\"Prop3\\\":null,\\\"Prop4\\\":null,\\\"Prop5\\\":\\\"\\\"}\");\n        }"
      }
    ]
  },
  {
    "file": "AbpStringToBoolean_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToBooleanConverter()\n                }\n            };\n\n            var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Enabled\\\": \\\"TrUe\\\"}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Enabled.ShouldBe(true);\n\n            testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Enabled\\\": true}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Enabled.ShouldBe(true);\n        }"
      },
      {
        "name": "Test_Write",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToBooleanConverter()\n                }\n            };\n\n            var testClassJson = JsonSerializer.Serialize(new TestClass()\n            {\n                Enabled = true\n            });\n\n            testClassJson.ShouldBe(\"{\\\"Enabled\\\":true}\");\n        }"
      }
    ]
  },
  {
    "file": "AbpStringToEnum_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToEnumFactory()\n                }\n            };\n\n            var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Day\\\": \\\"Monday\\\"}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Day.ShouldBe(DayOfWeek.Monday);\n\n            testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Day\\\": 1}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Day.ShouldBe(DayOfWeek.Monday);\n\n            var dictionary = JsonSerializer.Deserialize<Dictionary<DayOfWeek, string>>(\"{\\\"Monday\\\":\\\"Mo\\\"}\", options);\n            dictionary.ShouldNotBeNull();\n            dictionary.Keys.ShouldContain(DayOfWeek.Monday);\n            dictionary.Values.ShouldContain(\"Mo\");\n\n            dictionary = JsonSerializer.Deserialize<Dictionary<DayOfWeek, string>>(\"{\\\"1\\\":\\\"Mo\\\"}\", options);\n            dictionary.ShouldNotBeNull();\n            dictionary.Keys.ShouldContain(DayOfWeek.Monday);\n            dictionary.Values.ShouldContain(\"Mo\");\n        }"
      },
      {
        "name": "Test_Write",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToEnumFactory()\n                }\n            };\n\n            var testClassJson = JsonSerializer.Serialize(new TestClass()\n            {\n                Day = DayOfWeek.Monday\n            });\n\n            testClassJson.ShouldBe(\"{\\\"Day\\\":1}\");\n\n            testClassJson = JsonSerializer.Serialize(new Dictionary<DayOfWeek, string>\n            {\n                {DayOfWeek.Monday, \"Mo\"}\n            }, options);\n\n            testClassJson.ShouldBe(\"{\\\"Monday\\\":\\\"Mo\\\"}\");\n        }"
      }
    ]
  },
  {
    "file": "AbpStringToGuid_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToGuidConverter(),\n                    new AbpNullableStringToGuidConverter()\n                }\n            };\n\n            var guid = Guid.Parse(\"762DDB84-5225-4853-A566-FF0B3AF57585\");\n            var testClass = JsonSerializer.Deserialize<TestClass>(\"{\" +\n                                                                  $\"\\\"Id\\\": \\\"{guid:N}\\\", \" +\n                                                                  $\"\\\"NullableId\\\": \\\"{guid:D}\\\", \" +\n                                                                  $\"\\\"NullableId2\\\": \\\"{guid:B}\\\", \" +\n                                                                  $\"\\\"NullableId3\\\": \\\"{guid:P}\\\", \" +\n                                                                  $\"\\\"NullableId4\\\": \\\"{guid:X}\\\", \" +\n                                                                  \"\\\"NullableId5\\\": \\\"\\\", \" +\n                                                                  \"\\\"NullableId6\\\": null}\", options);\n            testClass.ShouldNotBeNull();\n            testClass.Id.ShouldBe(guid);\n            testClass.NullableId.ShouldBe(guid);\n            testClass.NullableId2.ShouldBe(guid);\n            testClass.NullableId3.ShouldBe(guid);\n            testClass.NullableId4.ShouldBe(guid);\n            testClass.NullableId5.ShouldBeNull();\n            testClass.NullableId6.ShouldBeNull();\n        }"
      },
      {
        "name": "Test_Write",
        "body": "{\n            var options = new JsonSerializerOptions()\n            {\n                Converters =\n                {\n                    new AbpStringToGuidConverter(),\n                    new AbpNullableStringToGuidConverter()\n                }\n            };\n\n            var guid = Guid.Parse(\"762DDB84-5225-4853-A566-FF0B3AF57585\");\n            var json = JsonSerializer.Serialize(new TestClass()\n            {\n                Id = guid,\n                NullableId = null,\n                NullableId2 = guid,\n                NullableId3 = null,\n                NullableId4 = guid,\n                NullableId5 = null,\n                NullableId6 = guid\n            }, options);\n\n            json.ShouldBe($\"{{\\\"Id\\\":\\\"{guid:D}\\\",\\\"NullableId\\\":null,\\\"NullableId2\\\":\\\"{guid:D}\\\",\\\"NullableId3\\\":null,\\\"NullableId4\\\":\\\"{guid:D}\\\",\\\"NullableId5\\\":null,\\\"NullableId6\\\":\\\"{guid:D}\\\"}}\");\n        }"
      }
    ]
  },
  {
    "file": "AbpSystemTextJsonExtensions_Tests.cs",
    "methods": [
      {
        "name": "Serialize_Deserialize_With_Boolean",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":\\\"fAlSe\\\"}\";\n            var file = json.FromJsonString<FileWithBoolean>();\n            file.Name.ShouldBe(\"abp\");\n            file.IsDeleted.ShouldBeFalse();\n\n            file.IsDeleted = false;\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":false}\");\n        }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Boolean",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":null}\";\n            var file = json.FromJsonString<FileWithNullableBoolean>();\n            file.Name.ShouldBe(\"abp\");\n            file.IsDeleted.ShouldBeNull();\n\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":null}\");\n\n            json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":\\\"true\\\"}\";\n            file = json.FromJsonString<FileWithNullableBoolean>();\n            file.IsDeleted.ShouldNotBeNull();\n            file.IsDeleted.Value.ShouldBeTrue();\n\n            newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":true}\");\n        }"
      },
      {
        "name": "Serialize_Deserialize_With_Enum",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":\\\"Exe\\\"}\";\n            var file = json.FromJsonString<FileWithEnum>();\n            file.Name.ShouldBe(\"abp\");\n            file.Type.ShouldBe(FileType.Exe);\n\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":2}\");\n        }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Enum",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":null}\";\n            var file = json.FromJsonString<FileWithNullableEnum>();\n            file.Name.ShouldBe(\"abp\");\n            file.Type.ShouldBeNull();\n\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":null}\");\n\n            json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":\\\"Exe\\\"}\";\n            file = json.FromJsonString<FileWithNullableEnum>();\n            file.Type.ShouldNotBeNull();\n            file.Type.ShouldBe(FileType.Exe);\n\n            newJson = file.ToJsonString();\n            newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":2}\");\n        }"
      },
      {
        "name": "Serialize_Deserialize_With_Datetime",
        "body": "{\n            Clock.Provider = ClockProviders.Unspecified;\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";\n            var file = json.FromJsonString<FileWithDatetime>();\n            file.CreationTime.Year.ShouldBe(2020);\n            file.CreationTime.Month.ShouldBe(11);\n            file.CreationTime.Day.ShouldBe(20);\n\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(json);\n        }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Datetime",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":null}\";\n            var file = json.FromJsonString<FileWithNullableDatetime>();\n            file.CreationTime.ShouldBeNull();\n\n            json = \"{\\\"Name\\\":\\\"abp\\\"}\";\n            file = json.FromJsonString<FileWithNullableDatetime>();\n            file.CreationTime.ShouldBeNull();\n\n            json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";\n            file = json.FromJsonString<FileWithNullableDatetime>();\n            file.CreationTime.ShouldNotBeNull();\n\n            file.CreationTime.Value.Year.ShouldBe(2020);\n            file.CreationTime.Value.Month.ShouldBe(11);\n            file.CreationTime.Value.Day.ShouldBe(20);\n\n            var newJson = file.ToJsonString();\n            newJson.ShouldBe(json);\n        }"
      },
      {
        "name": "Serialize_Deserialize",
        "body": "{\n            var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";\n            var file = json.FromJsonString<AbpSystemTextJsonExtensionsTests.FileWithDatetime>();\n            file.CreationTime.Kind.ShouldBe(Kind);\n        }"
      }
    ]
  },
  {
    "file": "PredicateBuilder_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{\n            var args = new TestArgs();\n            var predicate = PredicateBuilder.New<TestObj>();\n\n            predicate = predicate.And(t => args.Value == t.Value);\n\n            var func = predicate.Compile();\n\n            args.Value = true;\n            var r2 = func(new TestObj { Value = true });\n            r2.ShouldBeTrue();\n\n            args.Value = false;\n            var r1 = func(new TestObj { Value = false });\n            r1.ShouldBeTrue();\n\n            args = new TestArgs {Value = true};\n            var r3 = func(new TestObj { Value = false });\n            r3.ShouldBeFalse();\n\n            args = new TestArgs { Value = false };\n            var r4 = func(new TestObj { Value = false });\n            r4.ShouldBeTrue();\n        }"
      },
      {
        "name": "Test2",
        "body": "{\n            var args = new TestArgs();\n            var predicate = PredicateBuilder.New<TestObj>();\n\n            predicate = predicate.And(t => !args.Value);\n\n            var func = predicate.Compile();\n\n            args.Value = true;\n            var r2 = func(new TestObj { Value = true });\n            r2.ShouldBeFalse();\n\n            args.Value = false;\n            var r1 = func(new TestObj { Value = false });\n            r1.ShouldBeTrue();\n\n            args = new TestArgs { Value = true };\n            var r3 = func(new TestObj { Value = false });\n            r3.ShouldBeFalse();\n\n            args = new TestArgs { Value = false };\n            var r4 = func(new TestObj { Value = false });\n            r4.ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "DefaultLanguageProvider_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Languages",
        "body": "{\n            var languageProvider = LocalIocManager.Resolve<ILanguageProvider>();\n\n            var allLanguages = languageProvider.GetLanguages();\n            allLanguages.Count.ShouldBe(2);\n        }"
      },
      {
        "name": "Should_Get_Active_Languages",
        "body": "{\n            var languageProvider = LocalIocManager.Resolve<ILanguageProvider>();\n\n            var activeLanguages = languageProvider.GetActiveLanguages();\n            activeLanguages.Count.ShouldBe(1);\n            activeLanguages.Single().Name.ShouldBe(\"en\");\n        }"
      }
    ]
  },
  {
    "file": "HumanizerOfUndefinedLocalizationSource_Tests.cs",
    "methods": [
      {
        "name": "Undefined_Localization_Source_Should_Be_Humanized",
        "body": "{\n            // Fallback to the same text as It's already in sentence case\n            _resourceFileLocalizationSource\n                .GetString(\"Lorem ipsum dolor sit amet\", new CultureInfo(\"en-US\"))\n            .ShouldBe(\"Lorem ipsum dolor sit amet\");\n\n            // Text in PascalCase should be converted properly\n            _resourceFileLocalizationSource\n                .GetString(\"LoremIpsumDolorSitAmet\", new CultureInfo(\"en-US\"))\n                .ShouldBe(\"Lorem ipsum dolor sit amet\");\n\n            // Text with mixed cases should be converted properly\n            _resourceFileLocalizationSource\n                .GetString(\"LoremIpsum dolor sit amet\", new CultureInfo(\"en-US\"))\n                .ShouldBe(\"Lorem ipsum dolor sit amet\");\n        }"
      }
    ]
  },
  {
    "file": "JsonAndXmlSourceMixing_Tests.cs",
    "methods": [
      {
        "name": "Test_Xml_Json",
        "body": "{\n            var mananger = LocalIocManager.Resolve<LocalizationManager>();\n\n            using (CultureInfoHelper.Use(\"en\"))\n            {\n                var source = mananger.GetSource(\"Lang\");\n\n                source.GetString(\"Apple\").ShouldBe(\"Apple\");\n                source.GetString(\"Banana\").ShouldBe(\"Banana\");\n                source.GetString(\"ThisIsATest\").ShouldBe(\"This is a test.\");\n                source.GetString(\"HowAreYou\").ShouldBe(\"How are you?\");\n            }\n\n            using (CultureInfoHelper.Use(\"zh-Hans\"))\n            {\n                var source = mananger.GetSource(\"Lang\");\n\n                source.GetString(\"Apple\").ShouldBe(\"苹果\");\n                source.GetString(\"Banana\").ShouldBe(\"香蕉\");\n                source.GetString(\"ThisIsATest\").ShouldBe(\"这是一个测试.\");\n                source.GetString(\"HowAreYou\").ShouldBe(\"你好吗?\");\n            }\n        }"
      }
    ]
  },
  {
    "file": "JsonEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{\n            var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();\n\n            dictionaries.Count.ShouldBe(2);\n\n            var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");\n            enDict.ShouldNotBe(null);\n            enDict[\"Apple\"].ShouldBe(\"Apple\");\n            enDict[\"Banana\"].ShouldBe(\"Banana\");\n\n            var zhHansDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"zh-Hans\");\n            zhHansDict.ShouldNotBe(null);\n            zhHansDict[\"Apple\"].ShouldBe(\"苹果\");\n            zhHansDict[\"Banana\"].ShouldBe(\"香蕉\");\n        }"
      }
    ]
  },
  {
    "file": "ResourceFileLocalizationSource_Tests.cs",
    "methods": [
      {
        "name": "Test_GetString",
        "body": "{\n            //Defined in English\n            _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");\n\n            //en-US and en-GB fallbacks to en\n            _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"Hello!\");\n            _resourceFileLocalizationSource.GetString(\"World\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"World!\");\n            _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en-GB\")).ShouldBe(\"Hello!\");\n\n            //Defined in Turkish\n            _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"tr\")).ShouldBe(\"Merhaba!\");\n\n            //tr-TR fallbacks to tr\n            _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"Merhaba!\");\n\n            //Undefined for Turkish, fallbacks to default language\n            _resourceFileLocalizationSource.GetString(\"World\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"World!\");\n\n            //Undefined at all, fallback to given text\n            _resourceFileLocalizationSource.GetString(\"Apple\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"[Apple]\");\n        }"
      },
      {
        "name": "Test_GetStringOrNull",
        "body": "{\n            //Defined in English\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");\n\n            //en-US and en-GB fallbacks to en\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"Hello!\");\n            _resourceFileLocalizationSource.GetStringOrNull(\"World\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"World!\");\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en-GB\")).ShouldBe(\"Hello!\");\n\n            //Defined in Turkish\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"tr\")).ShouldBe(\"Merhaba!\");\n\n            //tr-TR fallbacks to tr\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"Merhaba!\");\n\n            //Undefined for Turkish, fallbacks to default language\n            _resourceFileLocalizationSource.GetStringOrNull(\"World\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"World!\");\n\n            //Undefined at all, returns null\n            _resourceFileLocalizationSource.GetStringOrNull(\"Apple\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBeNull();\n        }"
      },
      {
        "name": "Test_GetStrings",
        "body": "{\n            //Defined in English\n            var enStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en\"));\n            enStrings.ShouldContain(x => x == \"Hello!\");\n            enStrings.ShouldContain(x => x == \"World!\");\n\n            //en-US and en-GB fallbacks to en\n            var enUsStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-US\"));\n            enUsStrings.ShouldContain(x => x == \"Hello!\");\n            enUsStrings.ShouldContain(x => x == \"World!\");\n\n            var enGBStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-GB\"));\n            enGBStrings.ShouldContain(x => x == \"Hello!\");\n            enGBStrings.ShouldContain(x => x == \"World!\");\n\n            //Defined in Turkish\n            _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr\")).ShouldContain(x => x == \"Merhaba!\");\n\n            //tr-TR fallbacks to tr\n            _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"Merhaba!\");\n\n            //Undefined for Turkish, fallbacks to default language\n            _resourceFileLocalizationSource.GetStrings(new List<string>{\"World\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"World!\");\n\n            //Undefined at all, fallback to given text\n            _resourceFileLocalizationSource.GetStrings(new List<string>{\"Apple\"}, CultureInfo.GetCultureInfo(\"en-US\")).ShouldContain(x => x == \"[Apple]\");\n        }"
      },
      {
        "name": "Test_GetStringsOrNull",
        "body": "{\n            //Defined in English\n            _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");\n\n            //en-US and en-GB fallbacks to en\n            var enUsStrings = _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-US\"));\n            enUsStrings.ShouldContain(x => x == \"Hello!\");\n            enUsStrings.ShouldContain(x => x == \"World!\");\n\n            _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"},  CultureInfo.GetCultureInfo(\"en-GB\")).ShouldContain(x => x == \"Hello!\");\n\n            //Defined in Turkish\n            _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr\")).ShouldContain(x => x == \"Merhaba!\");\n\n            //tr-TR fallbacks to tr\n            _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"},  CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"Merhaba!\");\n\n            //Undefined for Turkish, fallbacks to default language\n            _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"World\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"World!\");\n\n            //Undefined at all, returns null\n            _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Apple\"}, CultureInfo.GetCultureInfo(\"en-US\")).ShouldContain(x => x == null);\n        }"
      },
      {
        "name": "Test_GetStringsOrNull_When_Name_Not_Exist",
        "body": "{\n            var enStrings = _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\", \"World\", \"NotExist\"}, CultureInfo.GetCultureInfo(\"en\"));\n            enStrings.ShouldContain(x => x == \"Hello!\");\n            enStrings.ShouldContain(x => x == \"World!\");\n            enStrings.ShouldContain(x => x == null);\n            enStrings[2].ShouldBeNull(); //NotExist\n        }"
      },
      {
        "name": "Should_Get_Correct_Localization_Key",
        "body": "{\n            _resourceFileLocalizationSource.FindKeyOrNull(\"Hello!\", new CultureInfo(\"en\")).ShouldBe(\"Hello\");\n            _resourceFileLocalizationSource.FindKeyOrNull(\"Merhaba!\", new CultureInfo(\"tr\")).ShouldBe(\"Hello\");\n        }"
      },
      {
        "name": "Test_GetAllStrings",
        "body": "{\n            var allStrings = _resourceFileLocalizationSource.GetAllStrings(CultureInfo.GetCultureInfo(\"en\"));\n            allStrings.Count.ShouldBe(2);\n            allStrings.Any(s => s.Name == \"Hello\" && s.Value == \"Hello!\").ShouldBeTrue();\n            allStrings.Any(s => s.Name == \"World\" && s.Value == \"World!\").ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "MyTestResource.Designer.cs",
    "methods": []
  },
  {
    "file": "Test_DictionaryBasedLocalizationSource.cs",
    "methods": [
      {
        "name": "Should_Get_Correct_String_On_Exact_Culture",
        "body": "{\n            Assert.Equal(\"Yeryüzü\", _localizationSource.GetString(\"world\", new CultureInfo(\"tr-TR\")));\n        }"
      },
      {
        "name": "Should_Get_Most_Close_String_On_Base_Culture",
        "body": "{\n            Assert.Equal(\"Merhaba\", _localizationSource.GetString(\"hello\", new CultureInfo(\"tr-TR\")));\n        }"
      },
      {
        "name": "Should_Get_Default_If_Not_Exists_On_Given_Culture",
        "body": "{\n            Assert.Equal(\"Fourty Two (42)\", _localizationSource.GetString(\"fourtyTwo\", new CultureInfo(\"tr\")));\n            Assert.Equal(\"Fourty Two (42)\", _localizationSource.GetString(\"fourtyTwo\", new CultureInfo(\"tr-TR\")));\n        }"
      },
      {
        "name": "Should_Get_All_Strings",
        "body": "{\n            var localizedStrings = _localizationSource.GetAllStrings(new CultureInfo(\"tr-TR\")).OrderBy(ls => ls.Name).ToList();\n            Assert.Equal(3, localizedStrings.Count);\n            Assert.Equal(\"Fourty Two (42)\", localizedStrings[0].Value);\n            Assert.Equal(\"Merhaba\", localizedStrings[1].Value);\n            Assert.Equal(\"Yeryüzü\", localizedStrings[2].Value);\n        }"
      },
      {
        "name": "Should_Extend_LocalizationSource_Overriding",
        "body": "{\n            _localizationSource.Extend(\n                new LocalizationDictionaryWithAddMethod(new CultureInfo(\"tr\"))\n                {\n                    {\"hello\", \"Selam\"},\n                });\n\n            _localizationSource.GetString(\"hello\", new CultureInfo(\"tr-TR\")).ShouldBe(\"Selam\");\n        }"
      },
      {
        "name": "Should_Extend_LocalizationSource_With_New_Language",
        "body": "{\n            _localizationSource.Extend(\n                new LocalizationDictionaryWithAddMethod(new CultureInfo(\"fr\"))\n                {\n                    {\"hello\", \"Bonjour\"},\n                });\n\n            _localizationSource.GetString(\"hello\", new CultureInfo(\"fr\")).ShouldBe(\"Bonjour\");\n            _localizationSource.GetString(\"world\", new CultureInfo(\"fr\")).ShouldBe(\"World\"); //not localed into french\n        }"
      },
      {
        "name": "Should_Return_Given_Text_If_Not_Found",
        "body": "{\n            _localizationSource.GetString(\"An undefined text\").ShouldBe(\"[An undefined text]\");\n        }"
      },
      {
        "name": "Should_Get_Correct_Localization_Key",
        "body": "{\n            _localizationSource.FindKeyOrNull(\"Yeryüzü\", new CultureInfo(\"tr-TR\")).ShouldBe(\"world\");\n            _localizationSource.FindKeyOrNull(\"Fourty Two (42)\", new CultureInfo(\"fr-FR\")).ShouldBe(\"fourtyTwo\");\n        }"
      }
    ]
  },
  {
    "file": "Test_XmlLocalizationDictionaryBuilder.cs",
    "methods": [
      {
        "name": "Can_Build_LocalizationDictionary_From_Xml_String",
        "body": "{\n            var xmlString = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<localizationDictionary culture=\"\"tr\"\">\n  <texts>\n    <text name=\"\"hello\"\" value=\"\"Merhaba\"\" />\n    <text name=\"\"world\"\">D�nya</text>\n  </texts>\n</localizationDictionary>\";\n\n            var dictionary = XmlLocalizationDictionary.BuildFomXmlString(xmlString);\n\n            dictionary.CultureInfo.Name.ShouldBe(\"tr\");\n            dictionary[\"hello\"].ShouldBe(\"Merhaba\");\n            dictionary[\"world\"].ShouldBe(\"D�nya\");\n        }"
      },
      {
        "name": "Should_Throw_Exception_For_Duplicate_Name",
        "body": "{\n            var xmlString = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>\n<localizationDictionary culture=\"\"tr\"\">\n  <texts>\n    <text name=\"\"hello\"\" value=\"\"Merhaba\"\" />\n    <text name=\"\"hello\"\" value=\"\"Merhabalar\"\"></text>\n  </texts>\n</localizationDictionary>\";\n\n            Assert.Throws<AbpException>(() => XmlLocalizationDictionary.BuildFomXmlString(xmlString));\n        }"
      }
    ]
  },
  {
    "file": "XmlEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{\n            var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();\n            \n            dictionaries.Count.ShouldBe(2);\n\n            var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");\n            enDict.ShouldNotBe(null);\n            enDict.ShouldBe(_dictionaryProvider.DefaultDictionary);\n            enDict[\"hello\"].ShouldBe(\"Hello\");\n            \n            var trDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"tr\");\n            trDict.ShouldNotBe(null);\n            trDict[\"hello\"].ShouldBe(\"Merhaba\");\n        }"
      }
    ]
  },
  {
    "file": "LogSeverity_Tests.cs",
    "methods": [
      {
        "name": "AuthorizationException_Default_Log_Severity_Test",
        "body": "{\n            // change log severity ...\n            AbpAuthorizationException.DefaultLogSeverity = LogSeverity.Warn;\n            \n            var exception = new AbpAuthorizationException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Warn);\n        }"
      },
      {
        "name": "AuthorizationException_Default_Log_Severity_Change_Test",
        "body": "{\n            // change log severity ...\n            AbpAuthorizationException.DefaultLogSeverity = LogSeverity.Error;\n            \n            var exception = new AbpAuthorizationException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Error);\n        }"
      },
      {
        "name": "ValidationException_Default_Log_Severity_Test",
        "body": "{\n            // change log severity ...\n            AbpValidationException.DefaultLogSeverity = LogSeverity.Warn;\n            \n            var exception = new AbpValidationException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Warn);\n        }"
      },
      {
        "name": "ValidationException_Default_Log_Severity_Change_Test",
        "body": "{\n            // change log severity ...\n            AbpValidationException.DefaultLogSeverity = LogSeverity.Error;\n            \n            var exception = new AbpValidationException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Error);\n        }"
      },
      {
        "name": "UserFriendlyException_Default_Log_Severity_Test",
        "body": "{\n            // change log severity ...\n            UserFriendlyException.DefaultLogSeverity = LogSeverity.Warn;\n            \n            var exception = new UserFriendlyException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Warn);\n        }"
      },
      {
        "name": "UserFriendlyException_Default_Log_Severity_Change_Test",
        "body": "{\n            // change log severity ...\n            UserFriendlyException.DefaultLogSeverity = LogSeverity.Error;\n            \n            var exception = new UserFriendlyException(\"Test exception !\");\n            exception.Severity.ShouldBe(LogSeverity.Error);\n        }"
      }
    ]
  },
  {
    "file": "MimeTypeMap_Tests.cs",
    "methods": [
      {
        "name": "Try_Get_Mime_Type_Common_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetMimeType(\"\", out _); });\n\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetMimeType(null, out _); });\n\n            _mimeTypeMap.TryGetMimeType(\"test\", out _).ShouldBeFalse(); //not found\n        }"
      },
      {
        "name": "Get_Mime_Type_Common_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetMimeType(\"\"); });\n\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetMimeType(null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.GetMimeType(\"test\"); }); //not found exception\n            _mimeTypeMap.GetMimeType(\"test\", throwErrorIfNotFound: false).ShouldBe(string.Empty);\n        }"
      },
      {
        "name": "Try_Get_Extension_Common_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetExtension(\"\", out _); });\n\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetExtension(null, out _); });\n\n            _mimeTypeMap.TryGetExtension(\"test\", out _).ShouldBeFalse(); //not found\n        }"
      },
      {
        "name": "Get_Extension_Common_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetExtension(\"\"); });\n\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetExtension(null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.GetExtension(\"test\"); }); //not found exception\n            _mimeTypeMap.GetExtension(\"test\", throwErrorIfNotFound: false).ShouldBe(string.Empty);\n        }"
      },
      {
        "name": "Add_Mime_Type_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"\", \"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(null, null); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"\", \".test\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(null, \".test\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"test\", \"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"test\", null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\".test\", \".test\"); }); //MIME type should not start with dot exception\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\"test\", \"test\"); }); //Extension should start with dot exception\n\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\"application/zip\", \".zip\"); }); //An item with the same mimeType has already been added exception\n\n            var testMimeType = \"test/test\";\n            var testExtension = \".test\";\n            _mimeTypeMap.GetExtension(testMimeType, false).ShouldBeNullOrEmpty();\n            _mimeTypeMap.AddMimeType(testMimeType, testExtension);\n            _mimeTypeMap.GetExtension(testMimeType).ShouldBe(testExtension);\n        }"
      },
      {
        "name": "Remove_Mime_Type_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveMimeType(\"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveMimeType(null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.RemoveMimeType(\".test\"); }); //MIME type should not start with dot exception\n\n            var testMimeType = \"application/zip\";\n            _mimeTypeMap.GetExtension(testMimeType, false).ShouldNotBeNullOrEmpty();\n            _mimeTypeMap.RemoveMimeType(testMimeType);\n            _mimeTypeMap.GetExtension(testMimeType, false).ShouldBeNullOrEmpty();\n        }"
      },
      {
        "name": "Add_Extension_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"\", \"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(null, null); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"\", \".test\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(null, \".test\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"test\", \"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"test\", null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\".test\", \".test\"); }); //MIME type should not start with dot exception\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\"test\", \"test\"); }); //Extension should start with dot exception\n\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\".zip\", \"application/zip\"); }); //An item with the same extension has already been added exception\n\n            var testMimeType = \"test/test\";\n            var testExtension = \".test\";\n            _mimeTypeMap.GetMimeType(testExtension, false).ShouldBeNullOrEmpty();\n            _mimeTypeMap.AddExtension(testExtension, testMimeType);\n            _mimeTypeMap.GetMimeType(testExtension).ShouldBe(testMimeType);\n        }"
      },
      {
        "name": "Remove_Extension_Tests",
        "body": "{\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveExtension(\"\"); });\n            Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveExtension(null); });\n\n            Should.Throw<ArgumentException>(() => { _mimeTypeMap.RemoveExtension(\"test\"); }); //Extension should start with dot exception\n\n            var testExtension = \".zip\";\n            _mimeTypeMap.GetMimeType(testExtension, false).ShouldNotBeNullOrEmpty();\n            _mimeTypeMap.RemoveExtension(testExtension);\n            _mimeTypeMap.GetMimeType(testExtension, false).ShouldBeNullOrEmpty();\n        }"
      }
    ]
  },
  {
    "file": "AbpAssemblyFinder_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Module_And_Additional_Assemblies",
        "body": "{\n            //Arrange\n            var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>\n            {\n                options.IocManager = LocalIocManager;\n            });\n\n            bootstrapper.Initialize();\n\n            //Act\n            var assemblies = bootstrapper.IocManager.Resolve<AbpAssemblyFinder>().GetAllAssemblies();\n\n            //Assert\n            assemblies.Count.ShouldBe(3);\n\n            assemblies.Any(a => a == typeof(MyStartupModule).GetAssembly()).ShouldBeTrue();\n            assemblies.Any(a => a == typeof(AbpKernelModule).GetAssembly()).ShouldBeTrue();\n            assemblies.Any(a => a == typeof(FactAttribute).GetAssembly()).ShouldBeTrue();\n        }"
      }
    ]
  },
  {
    "file": "PlugInModuleLoading_Tests.cs",
    "methods": [
      {
        "name": "Should_Load_All_Modules",
        "body": "{\n            //Arrange\n            var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>\n            {\n                options.IocManager = LocalIocManager;\n            });\n\n            bootstrapper.PlugInSources.AddTypeList(typeof(MyPlugInModule));\n\n            bootstrapper.Initialize();\n\n            //Act\n            var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;\n\n            //Assert\n            modules.Count.ShouldBe(6);\n\n            modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyPlugInModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyPlugInDependedModule)).ShouldBeTrue();\n\n            modules.Any(m => m.Type == typeof(MyNotDependedModule)).ShouldBeFalse();\n        }"
      }
    ]
  },
  {
    "file": "StartupModuleToBeLast_Tests.cs",
    "methods": [
      {
        "name": "StartupModule_ShouldBe_LastModule",
        "body": "{\n            //Arrange\n            var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>\n            {\n                options.IocManager = LocalIocManager;\n            });\n            bootstrapper.Initialize();\n\n            //Act\n            var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;\n\n            //Assert\n            modules.Count.ShouldBe(4);\n\n            modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();\n\n            var startupModule = modules.Last();\n\n            startupModule.Type.ShouldBe(typeof(MyStartupModule));\n        }"
      },
      {
        "name": "PluginModule_ShouldNotBeLast",
        "body": "{\n            var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>\n            {\n                options.IocManager = LocalIocManager;\n            });\n\n            bootstrapper.PlugInSources.AddTypeList(typeof(MyPlugInModule));\n\n            bootstrapper.Initialize();\n\n            var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;\n\n            //Assert\n            modules.Count.ShouldBe(6);\n\n            modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyPlugInModule)).ShouldBeTrue();\n            modules.Any(m => m.Type == typeof(MyPlugInDependedModule)).ShouldBeTrue();\n\n            modules.Last().Type.ShouldBe(typeof(MyStartupModule));\n        }"
      }
    ]
  },
  {
    "file": "TestTenantStore.cs",
    "methods": []
  },
  {
    "file": "SmtpEmailSender_Tests.cs",
    "methods": []
  },
  {
    "file": "NotificationData_Serialization_Tests.cs",
    "methods": [
      {
        "name": "Should_Deserialize_And_Serialize_MessageNotificationData",
        "body": "{\n            var data = JsonConvert\n                .DeserializeObject(\n                    new MessageNotificationData(\"Hello World!\").ToJsonString(),\n                    typeof(MessageNotificationData)\n                ) as MessageNotificationData;\n\n            Assert.NotNull(data);\n            data.Message.ShouldBe(\"Hello World!\");\n        }"
      },
      {
        "name": "Should_Deserialize_And_Serialize_LocalizableMessageNotificationData",
        "body": "{\n            var serialized = new LocalizableMessageNotificationData(new LocalizableString(\"Hello\", \"MySource\")).ToJsonString();\n\n            var data = JsonConvert\n                .DeserializeObject(\n                    serialized,\n                    typeof(LocalizableMessageNotificationData)\n                ) as LocalizableMessageNotificationData;\n\n            Assert.NotNull(data);\n            Assert.NotNull(data.Message);\n            data.Message.Name.ShouldBe(\"Hello\");\n            data.Message.SourceName.ShouldBe(\"MySource\");\n        }"
      },
      {
        "name": "MessageNotificationData_Backward_Compatibility_Test",
        "body": "{\n            const string serialized = \"{\\\"Message\\\":\\\"a test message\\\",\\\"Type\\\":\\\"Abp.Notifications.MessageNotificationData\\\",\\\"Properties\\\":{}}\";\n\n            var data = JsonConvert\n                .DeserializeObject(\n                    serialized,\n                    typeof(MessageNotificationData)\n                ) as MessageNotificationData;\n\n            Assert.NotNull(data);\n            data.Message.ShouldBe(\"a test message\");\n            data.Properties[\"Message\"].ShouldBe(\"a test message\");\n        }"
      }
    ]
  },
  {
    "file": "NotificationPublisher_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            //Arrange\n            var notificationData = CreateNotificationData();\n\n            //Act\n            await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success);\n\n            //Assert\n            await _store.Received()\n                .InsertNotificationAsync(\n                    Arg.Is<NotificationInfo>(\n                        n => n.NotificationName == \"TestNotification\" &&\n                             n.Severity == NotificationSeverity.Success &&\n                             n.DataTypeName == notificationData.GetType().AssemblyQualifiedName &&\n                             n.Data.Contains(\"42\")\n                        )\n                );\n\n            await _backgroundJobManager.Received()\n                .EnqueueAsync<NotificationDistributionJob, NotificationDistributionJobArgs>(\n                    Arg.Any<NotificationDistributionJobArgs>()\n                );\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // Act\n            await _publisher.PublishAsync(\"TestNotification\", tenantIds: new int?[] { null });\n\n            // Assert\n            await _store.Received()\n                .InsertNotificationAsync(\n                    Arg.Is<NotificationInfo>(n => n.TenantIds == \"null\")\n                );\n        }"
      }
    ]
  },
  {
    "file": "BooleanComparators_Tests.cs",
    "methods": []
  },
  {
    "file": "DateTimeObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "IntObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "LongObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "NullableBooleanComparators_Tests.cs",
    "methods": []
  },
  {
    "file": "NullableDateTimeObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "NullableIntObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "NullableLongObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "ObjectComparatorManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_All_Compare_Types_By_Type",
        "body": "{\n            var compareTypesForString = _objectComparatorManager.GetAllCompareTypes<string>();\n            compareTypesForString.ShouldContain(MyTestStringObjectComparator.EqualsCompareType);\n            compareTypesForString.ShouldContain(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType);\n\n            var compareTypesForClass = _objectComparatorManager.GetAllCompareTypes<ObjectComparatorTestClass>();\n            compareTypesForClass.SequenceEqual(Enum.GetNames(typeof(ObjectComparatorTestClassCompareTypes))).ShouldBeTrue();\n        }"
      },
      {
        "name": "Should_Get_All_Compare_Types",
        "body": "{\n            var compareTypes = _objectComparatorManager.GetAllCompareTypes();\n\n            compareTypes.ContainsKey(typeof(ObjectComparatorTestClass)).ShouldBeTrue();\n            var compareTypesForTestClass = compareTypes[typeof(ObjectComparatorTestClass)];\n            compareTypesForTestClass.SequenceEqual(Enum.GetNames(typeof(ObjectComparatorTestClassCompareTypes))).ShouldBeTrue();\n\n            compareTypes.ContainsKey(typeof(string)).ShouldBeTrue();\n            var compareTypesForString = compareTypes[typeof(string)];\n            compareTypesForString.ShouldContain(MyTestStringObjectComparator.EqualsCompareType);\n            compareTypesForString.ShouldContain(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType);\n        }"
      },
      {
        "name": "Should_Find_Comparator",
        "body": "{\n            _objectComparatorManager.HasComparator<string>().ShouldBeTrue();\n            _objectComparatorManager.HasComparator<ObjectComparatorTestClass>().ShouldBeTrue();\n            _objectComparatorManager.HasComparator<bool>().ShouldBeFalse();\n        }"
      },
      {
        "name": "Can_Comparator_Tests",
        "body": "{\n            _objectComparatorManager.CanCompare<string>(MyTestStringObjectComparator.EqualsCompareType).ShouldBeTrue();\n            _objectComparatorManager.CanCompare<string>(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType).ShouldBeTrue();\n            _objectComparatorManager.CanCompare<string>(\"NonExistCompareType\").ShouldBeFalse();\n\n            _objectComparatorManager\n                .CanCompare<ObjectComparatorTestClass, ObjectComparatorTestClassCompareTypes>(ObjectComparatorTestClassCompareTypes.Equals)\n                .ShouldBeTrue();\n            _objectComparatorManager\n                .CanCompare<ObjectComparatorTestClass, ObjectComparatorTestClassCompareTypes>(ObjectComparatorTestClassCompareTypes.FirstProp1BiggerThanSecondProp2AsInt)\n                .ShouldBeTrue();\n            _objectComparatorManager.CanCompare<ObjectComparatorTestClass>(\"test\").ShouldBeFalse();\n        }"
      }
    ]
  },
  {
    "file": "ObjectComparatorTestBase.cs",
    "methods": [
      {
        "name": "Should_Get_All_Compare_Types",
        "body": "{\n            var compareTypes = ObjectComparatorManager.GetAllCompareTypes<TObjectType>();\n            compareTypes.ToList().SequenceEqual(Enum.GetNames(typeof(TEnumCompareTypes))).ShouldBeTrue();\n        }"
      },
      {
        "name": "Should_Find_Comparator",
        "body": "{\n            ObjectComparatorManager.HasComparator<TObjectType>().ShouldBeTrue();\n        }"
      },
      {
        "name": "Can_Comparator_Tests",
        "body": "{\n            foreach (var compareType in Enum.GetNames(typeof(TEnumCompareTypes)))\n            {\n                ObjectComparatorManager.CanCompare<TObjectType>(compareType).ShouldBeTrue();\n            }\n\n            ObjectComparatorManager.CanCompare<TObjectType>(\"test\").ShouldBeFalse();\n        }"
      }
    ]
  },
  {
    "file": "StringObjectComparator_Tests.cs",
    "methods": []
  },
  {
    "file": "InMemoryOnlineClientManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            int tenantId = 1;\n\n            Dictionary<string, int> connections = new Dictionary<string, int>();\n\n            for (int i = 0; i < 100; i++)\n            {\n                connections.Add(MakeNewConnectionId(), i + 1);\n            }\n\n            foreach (var pair in connections)\n            {\n                await _clientManager.AddAsync(new OnlineClient(pair.Key, \"127.0.0.1\", tenantId, pair.Value));\n            }\n\n            var testId = connections.Keys.ToList()[5];\n\n            (await _clientManager.GetAllClientsAsync()).Count.ShouldBe(connections.Count);\n            (await _clientManager.GetAllByUserIdAsync(new UserIdentifier(tenantId, connections[testId]))).Count.ShouldBe(1);\n            (await _clientManager.GetByConnectionIdOrNullAsync(testId)).ShouldNotBeNull();\n            (await _clientManager.RemoveAsync(testId)).ShouldBeTrue();\n            (await _clientManager.GetAllClientsAsync()).Count.ShouldBe(connections.Count - 1);\n            (await _clientManager.GetByConnectionIdOrNullAsync(testId)).ShouldBeNull();\n            (await _clientManager.GetAllByUserIdAsync(new UserIdentifier(tenantId, connections[testId]))).Count.ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "InMemoryOnlineClientStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var connectionId = Guid.NewGuid().ToString(\"N\");\n\n            await _store.AddAsync(new OnlineClient(connectionId, \"127.0.0.1\", 1, 2));\n            (await _store.TryGetAsync(connectionId, value => _ = value)).ShouldBeTrue();\n\n            (await _store.ContainsAsync(connectionId)).ShouldBeTrue();\n            (await _store.GetAllAsync()).Count.ShouldBe(1);\n            (await _store.RemoveAsync(connectionId)).ShouldBeTrue();\n            (await _store.GetAllAsync()).Count.ShouldBe(0);\n        }"
      }
    ]
  },
  {
    "file": "MemberInfoExtensions_Tests.cs",
    "methods": []
  },
  {
    "file": "ReflectionHelper_Tests.cs",
    "methods": [
      {
        "name": "Should_Find_GenericType",
        "body": "{\n            ReflectionHelper.IsAssignableToGenericType(typeof(List<string>), typeof(List<>)).ShouldBe(true);\n            ReflectionHelper.IsAssignableToGenericType(new List<string>().GetType(), typeof(List<>)).ShouldBe(true);\n            \n            ReflectionHelper.IsAssignableToGenericType(typeof(MyList), typeof(List<>)).ShouldBe(true);\n            ReflectionHelper.IsAssignableToGenericType(new MyList().GetType(), typeof(List<>)).ShouldBe(true);\n        }"
      },
      {
        "name": "Should_Find_Attributes",
        "body": "{\n            var attributes = ReflectionHelper.GetAttributesOfMemberAndDeclaringType<MyAttribute>(typeof(MyDerivedList).GetTypeInfo().GetMethod(\"DoIt\"));\n            attributes.Count.ShouldBe(2); //TODO: Why not find MyList's attribute?\n            attributes[0].Number.ShouldBe(1);\n            attributes[1].Number.ShouldBe(2);\n            //attributes[2].Number.ShouldBe(3);\n        }"
      },
      {
        "name": "GetSingleAttributeOfMemberOrDeclaringTypeOrDefault_Test",
        "body": "{\n            var attr1 = ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault<IMyAttribute>(\n                typeof(MyDerivedList).GetTypeInfo().GetMethod(\"DoIt\")\n            );\n\n            attr1.ShouldNotBeNull();\n            attr1.Number.ShouldBe(1);\n\n            var attr2 = ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault<IMyAttribute>(\n                typeof(MyDerivedList2).GetTypeInfo().GetMethod(\"DoIt\")\n            );\n\n            attr2.ShouldNotBeNull();\n            attr2.Number.ShouldBe(2);\n        }"
      },
      {
        "name": "Should_Find_Property_Using_Path",
        "body": "{\n            var model = new MyParentObject\n            {\n              Child  = new MyChildObject\n              {\n                  InnerChild = new MyInnerChildObject\n                  {\n                      Age = 42\n                  }\n              }\n            };\n\n            var property = ReflectionHelper.GetPropertyByPath(model, typeof(MyParentObject), \"Child.InnerChild.Age\");\n            var propertyInfo = property as PropertyInfo;\n\n            propertyInfo.ShouldNotBeNull();\n            propertyInfo.Name.ShouldBe(\"Age\");\n            propertyInfo.PropertyType.ShouldBe(typeof(Int32));\n        }"
      },
      {
        "name": "Should_Find_Property_Value_Using_Path",
        "body": "{\n            var model = new MyParentObject\n            {\n                Child = new MyChildObject\n                {\n                    InnerChild = new MyInnerChildObject\n                    {\n                        Age = 42\n                    }\n                }\n            };\n\n            var value = ReflectionHelper.GetValueByPath(model, typeof(MyParentObject), \"Child.InnerChild.Age\");\n            value.ShouldBe(42);\n        }"
      }
    ]
  },
  {
    "file": "TypeHelper_Tests.cs",
    "methods": [
      {
        "name": "Test_IsFunc",
        "body": "{\n            TypeHelper.IsFunc(new Func<object>(() => 42)).ShouldBe(true);\n            TypeHelper.IsFunc(new Func<int>(() => 42)).ShouldBe(true);\n            TypeHelper.IsFunc(new Func<string>(() => \"42\")).ShouldBe(true);\n\n            TypeHelper.IsFunc(\"42\").ShouldBe(false);\n        }"
      },
      {
        "name": "Test_IsFuncOfTReturn",
        "body": "{\n            TypeHelper.IsFunc<object>(new Func<object>(() => 42)).ShouldBe(true);\n            TypeHelper.IsFunc<object>(new Func<int>(() => 42)).ShouldBe(false);\n            TypeHelper.IsFunc<string>(new Func<string>(() => \"42\")).ShouldBe(true);\n\n            TypeHelper.IsFunc(\"42\").ShouldBe(false);\n        }"
      },
      {
        "name": "Test_IsPrimitiveExtendedIncludingNullable",
        "body": "{\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(int)).ShouldBe(true);\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(int?)).ShouldBe(true);\n\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(Guid)).ShouldBe(true);\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(Guid?)).ShouldBe(true);\n\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(string)).ShouldBe(true);\n\n            TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(TypeHelper_Tests)).ShouldBe(false);\n        }"
      }
    ]
  },
  {
    "file": "EmbeddedResourceTests.cs",
    "methods": [
      {
        "name": "Should_Define_And_Get_Embedded_Resources",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js/MyScriptFile1.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Dash_In_Name",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js/MyScriptFile-2.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Two_Dots_In_Name",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js/MyScriptFile3.min.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Underscore_In_Name",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js/MyScriptFile_4.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resources_With_Dash_In_folder",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js-dash/MyScriptFile.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Underscore_In_Folder",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js_underscore/MyScriptFile.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Begin_Digit_In_Folder",
        "body": "{\n            var filepath = \"/MyApp/MyResources/0.9/MyScriptFile.0.9.js\";\n            var resource = _embeddedResourceManager.GetResource(filepath);\n            var filename = System.IO.Path.GetFileName(filepath);\n            var extension = System.IO.Path.GetExtension(filepath);\n\n            resource.ShouldNotBeNull();\n            Assert.True(resource.Assembly == GetType().GetAssembly());\n            Assert.True(resource.Content.Length > 0);\n            Assert.EndsWith(filename, resource.FileName);\n            Assert.True(resource.FileExtension == extension.Substring(1)); // without dot\n        }"
      },
      {
        "name": "Should_Get_Embedded_Resources",
        "body": "{\n            var filepath = \"/MyApp/MyResources/js/\";\n            var resources = _embeddedResourceManager.GetResources(filepath);\n\n            resources.ShouldNotBeNull();\n            Assert.True(resources.Count() == 4);\n        }"
      }
    ]
  },
  {
    "file": "AbpCacheBase_Tests.cs",
    "methods": [
      {
        "name": "Single_Key_Get_Test",
        "body": "{\n            var cache1 = new MyCache1(\"cache 1\");\n            var cacheValue1 = cache1.GetOrDefault(\"A\");\n            cacheValue1.ShouldBe(0);\n\n            cacheValue1 = cache1.Get(\"A\", (key) => 1);\n            cacheValue1.ShouldBe(1);\n\n            var cache2 = new MyCache2(\"cache 2\");\n            var cacheValue2 = cache2.GetOrDefault(\"B\");\n            cacheValue2.ShouldBeNull();\n\n            cacheValue2 = cache2.Get(\"B\", (key) => 2);\n            cacheValue2.ShouldBe(2);\n        }"
      },
      {
        "name": "Multi_Keys_Get_Test",
        "body": "{\n            var cache1 = new MyCache1(\"cache 1\");\n            var cacheValues1 = cache1.GetOrDefault(new[] { \"A\", \"B\" });\n            cacheValues1.ShouldNotBeNull();\n            cacheValues1.Length.ShouldBe(2);\n            cacheValues1[0].ShouldBe(0);\n            cacheValues1[1].ShouldBe(0);\n\n            cacheValues1 = cache1.Get(new[] { \"A\", \"B\" }, (key) => 11);\n            cacheValues1.ShouldNotBeNull();\n            cacheValues1.Length.ShouldBe(2);\n            cacheValues1[0].ShouldBe(11);\n            cacheValues1[1].ShouldBe(11);\n\n            var cache2 = new MyCache2(\"cache 2\");\n            var cacheValues2 = cache2.GetOrDefault(new[] { \"C\", \"D\" });\n            cacheValues2.ShouldNotBeNull();\n            cacheValues2.Length.ShouldBe(2);\n            cacheValues2[0].ShouldBeNull();\n            cacheValues2[1].ShouldBeNull();\n\n            cacheValues2 = cache2.Get(new[] { \"C\", \"D\" }, (key) => 22);\n            cacheValues2.ShouldNotBeNull();\n            cacheValues2.Length.ShouldBe(2);\n            cacheValues2[0].ShouldBe(22);\n            cacheValues2[1].ShouldBe(22);\n        }"
      }
    ]
  },
  {
    "file": "AbpCacheData_Tests.cs",
    "methods": [
      {
        "name": "Serialize_List_Test",
        "body": "{\n            List<string> source = new List<string>\n            {\n                \"Stranger Things\",\n                \"The OA\",\n                \"Lost in Space\"\n            };\n\n            var result = AbpCacheData.Serialize(source);\n            result.Type.ShouldStartWith(\"System.Collections.Generic.List`1[[System.String,\");\n            result.Payload.ShouldBe(\"[\\\"Stranger Things\\\",\\\"The OA\\\",\\\"Lost in Space\\\"]\");\n        }"
      },
      {
        "name": "Serialize_Class_Test",
        "body": "{\n            var source = new MyTestClass\n            {\n                Field1 = 42,\n                Field2 = \"Stranger Things\"\n            };\n\n            var result = AbpCacheData.Serialize(source);\n            result.Type.ShouldBe(\n                \"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClass, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");\n            result.Payload.ShouldBe(\"{\\\"Field1\\\":42,\\\"Field2\\\":\\\"Stranger Things\\\"}\");\n        }"
      },
      {
        "name": "Deserialize_List_Test",
        "body": "{\n            var json =\n                \"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String]]\\\"}\";\n            var cacheData = AbpCacheData.Deserialize(json);\n\n            cacheData.ShouldNotBeNull();\n        }"
      },
      {
        "name": "Deserialize_Class_Test",
        "body": "{\n            var json =\n                \"{\\\"Payload\\\": \\\"{\\\\\\\"Field1\\\\\\\": 42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClass, Abp.Tests\\\"}\";\n\n            var cacheData = AbpCacheData.Deserialize(json);\n\n            cacheData.ShouldNotBeNull();\n        }"
      },
      {
        "name": "Serialize_Class_With_Type_Field_Test",
        "body": "{\n            var source = new MyTestClassWithType\n            {\n                Name = \"MyTestClassWithType\",\n                ObjectType = typeof(MyTestClassWithType)\n            };\n\n            var result = AbpCacheData.Serialize(source);\n            result.Type.ShouldBe(\n                \"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");\n            result.Payload.ShouldBe(\n                \"{\\\"Name\\\":\\\"MyTestClassWithType\\\",\\\"ObjectType\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\");\n        }"
      },
      {
        "name": "Deserialize_Class_With_Type_Field_Test",
        "body": "{\n            var json =\n                \"{\\\"Payload\\\": \\\"{\\\\\\\"Name\\\\\\\":\\\\\\\"MyTestClassWithType\\\\\\\",\\\\\\\"ObjectType\\\\\\\":\\\\\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\";\n\n            var cacheData = AbpCacheData.Deserialize(json);\n            cacheData.ShouldNotBeNull();\n        }"
      },
      {
        "name": "Deserialize_Class_With_Type_Field_Test_2",
        "body": "{\n            var json =\n                \"{\\\"Payload\\\": \\\"{\\\\\\\"Name\\\\\\\":\\\\\\\"MyTestClassWithType\\\\\\\",\\\\\\\"ObjectType\\\\\\\":\\\\\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\";\n\n            var cacheData = AbpCacheData.Deserialize(json);\n            cacheData.ShouldNotBeNull();\n            \n            var cachedObject = cacheData.Payload.FromJsonString<MyTestClassWithType>();\n            cachedObject.Name.ShouldBe(\"MyTestClassWithType\");\n            cachedObject.ObjectType.ShouldBe(typeof(MyTestClassWithType));\n        }"
      }
    ]
  },
  {
    "file": "AbpMemoryCache_Tests.cs",
    "methods": [
      {
        "name": "Single_Key_Get_Test",
        "body": "{\n            var cacheValue = _memoryCache.GetOrDefault(\"A\");\n            cacheValue.ShouldBeNull();\n\n            cacheValue = _memoryCache.Get(\"A\", (key) => \"test\");\n            cacheValue.ShouldBe(\"test\");\n        }"
      },
      {
        "name": "Multi_Keys_Get_Test",
        "body": "{\n            var cacheValues = _memoryCache.GetOrDefault(new[] { \"A\", \"B\" });\n            cacheValues.ShouldNotBeNull();\n            cacheValues.Length.ShouldBe(2);\n            cacheValues[0].ShouldBeNull();\n            cacheValues[1].ShouldBeNull();\n\n            cacheValues = _memoryCache.Get(new[] { \"A\", \"B\" }, (key) => \"test \" + key);\n            cacheValues.ShouldNotBeNull();\n            cacheValues.Length.ShouldBe(2);\n            cacheValues[0].ShouldBe(\"test A\");\n            cacheValues[1].ShouldBe(\"test B\");\n        }"
      }
    ]
  },
  {
    "file": "MemoryCacheManager_Tests.cs",
    "methods": [
      {
        "name": "Simple_Get_Set_Test",
        "body": "{\n            _cache.GetOrDefault(\"A\").ShouldBe(null);\n\n            _cache.Set(\"A\", new MyCacheItem { Value = 42 });\n\n            _cache.GetOrDefault(\"A\").ShouldNotBe(null);\n            _cache.GetOrDefault(\"A\").Value.ShouldBe(42);\n\n            _cache.Get(\"B\", () => new MyCacheItem { Value = 43 }).Value.ShouldBe(43);\n            _cache.Get(\"B\", () => new MyCacheItem { Value = 44 }).Value.ShouldBe(43); //Does not call factory, so value is not changed\n\n            var items1 = _cache.GetOrDefault(new string[] { \"B\", \"C\" });\n            items1[0].Value.ShouldBe(43);\n            items1[1].ShouldBeNull();\n\n            var items2 = _cache.GetOrDefault(new string[] { \"C\", \"D\" });\n            items2[0].ShouldBeNull();\n            items2[1].ShouldBeNull();\n\n            _cache.Set(new KeyValuePair<string, MyCacheItem>[] {\n                new KeyValuePair<string, MyCacheItem>(\"C\", new MyCacheItem{ Value = 44}),\n                new KeyValuePair<string, MyCacheItem>(\"D\", new MyCacheItem{ Value = 45})\n            });\n\n            var items3 = _cache.GetOrDefault(new string[] { \"C\", \"D\" });\n            items3[0].Value.ShouldBe(44);\n            items3[1].Value.ShouldBe(45);\n\n            var items4 = _cache.Get(new string[] { \"D\", \"E\" }, (key) => new MyCacheItem { Value = key == \"D\" ? 46 : 47 });\n            items4[0].Value.ShouldBe(45); //Does not call factory, so value is not changed\n            items4[1].Value.ShouldBe(47);\n        }"
      },
      {
        "name": "MultiThreading_Test",
        "body": "{\n            Parallel.For(\n                0,\n                2048,\n                new ParallelOptions { MaxDegreeOfParallelism = 16 },\n                i =>\n                {\n                    var randomKey = RandomHelper.GetRandomOf(\"A\", \"B\", \"C\", \"D\");\n                    var randomValue = RandomHelper.GetRandom(0, 32);\n                    switch (RandomHelper.GetRandom(0, 4))\n                    {\n                        case 0:\n                            _cache.Get(randomKey, () => new MyCacheItem(randomValue));\n                            _cache.GetOrDefault(randomKey);\n                            break;\n                        case 1:\n                            _cache.GetOrDefault(randomKey);\n                            _cache.Set(randomKey, new MyCacheItem(RandomHelper.GetRandom(0, 16)));\n                            _cache.GetOrDefault(randomKey);\n                            break;\n                        case 2:\n                            _cache.GetOrDefault(randomKey);\n                            break;\n                        case 3:\n                            var randomKeys = new string[] { randomKey, randomKey + randomKey };\n                            _cache.GetOrDefault(randomKeys);\n                            var pairs = new KeyValuePair<string, MyCacheItem>[]\n                            {\n                                new KeyValuePair<string, MyCacheItem>(randomKeys[0], new MyCacheItem{ Value= RandomHelper.GetRandom(0, 16) }),\n                                new KeyValuePair<string, MyCacheItem>(randomKeys[1], new MyCacheItem{ Value= RandomHelper.GetRandom(0, 16) })\n                            };\n                            _cache.Set(pairs);\n                            _cache.GetOrDefault(randomKeys);\n                            break;\n                    }\n                });\n        }"
      },
      {
        "name": "Property_Injected_CacheManager_Should_Work",
        "body": "{\n            LocalIocManager.Using<MyClientPropertyInjects>(client =>\n            {\n                client.SetGetValue(42).ShouldBe(42); //Not in cache, getting from factory\n            });\n\n            LocalIocManager.Using<MyClientPropertyInjects>(client =>\n            {\n                client.SetGetValue(43).ShouldBe(42); //Retrieving from the cache\n            });\n        }"
      },
      {
        "name": "DefaultAbsoluteExpireTimeFactory_Test",
        "body": "{\n            var cache = _cacheManager.GetCache<string, MyCacheItem>(\"MyCacheItems\");\n\n            cache.DefaultAbsoluteExpireTimeFactory = _ => DateTimeOffset.Now + TimeSpan.FromMilliseconds(800);\n\n            var absoluteExpireTimeChangedCount = 0;\n            for (var i = 0; i < 10; i++)\n            {\n                cache.Get(\"A\", () =>\n                {\n                    absoluteExpireTimeChangedCount++;\n                    return new MyCacheItem();\n                });\n            }\n            absoluteExpireTimeChangedCount.ShouldBe(1);\n\n            Thread.Sleep(1 * 1000);\n\n            for (var i = 0; i < 10; i++)\n            {\n                cache.Get(\"A\", () =>\n                {\n                    absoluteExpireTimeChangedCount++;\n                    return new MyCacheItem();\n                });\n            }\n            absoluteExpireTimeChangedCount.ShouldBe(2);\n\n            Thread.Sleep(1 * 1000);\n\n            for (var i = 0; i < 10; i++)\n            {\n                cache.Get(\"A\", () =>\n                {\n                    absoluteExpireTimeChangedCount++;\n                    return new MyCacheItem();\n                });\n            }\n            absoluteExpireTimeChangedCount.ShouldBe(3);\n        }"
      }
    ]
  },
  {
    "file": "DataContextAmbientScopeProvider_Tests.cs",
    "methods": [
      {
        "name": "Test_Sync",
        "body": "{\n            var scopeAccessor = new DataContextAmbientScopeProvider<TestData>(\n                new AsyncLocalAmbientDataContext()\n            );\n\n            scopeAccessor.GetValue(ContextKey).ShouldBeNull();\n\n            using (scopeAccessor.BeginScope(ContextKey, new TestData(42)))\n            {\n                scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);\n\n                using (scopeAccessor.BeginScope(ContextKey, new TestData(24)))\n                {\n                    scopeAccessor.GetValue(ContextKey).Number.ShouldBe(24);\n                }\n\n                scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);\n            }\n\n            scopeAccessor.GetValue(ContextKey).ShouldBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var scopeAccessor = new DataContextAmbientScopeProvider<TestData>(\n                new AsyncLocalAmbientDataContext()\n            );\n\n            scopeAccessor.GetValue(ContextKey).ShouldBeNull();\n\n            await Task.Delay(1);\n\n            using (scopeAccessor.BeginScope(ContextKey, new TestData(42)))\n            {\n                await Task.Delay(1);\n\n                scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);\n\n                using (scopeAccessor.BeginScope(ContextKey, new TestData(24)))\n                {\n                    await Task.Delay(1);\n\n                    scopeAccessor.GetValue(ContextKey).Number.ShouldBe(24);\n                }\n\n                await Task.Delay(1);\n\n                scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);\n            }\n\n            await Task.Delay(1);\n\n            scopeAccessor.GetValue(ContextKey).ShouldBeNull();\n        }"
      }
    ]
  },
  {
    "file": "SimpleStringCipher_Tests.cs",
    "methods": [
      {
        "name": "Should_Be_Able_To_Change_InitVector_And_Key",
        "body": "{\n            const string initVectorString = \"1234BCHF9876skd*\";\n            const string myKey = \"84ncpaKMC_!TuAna\";\n            const string plainText = \"This is a plain text!\";\n\n            var cipher = new SimpleStringCipher\n            {\n                InitVectorBytes = Encoding.ASCII.GetBytes(initVectorString)\n            };\n\n            var enryptedText = cipher.Encrypt(plainText, myKey);\n            cipher.Decrypt(enryptedText, myKey).ShouldBe(plainText);\n        }"
      }
    ]
  },
  {
    "file": "Specification_Tests.cs",
    "methods": [
      {
        "name": "Any_Should_Return_All",
        "body": "{\n            _customers\n                .Where(new AnySpecification<Customer>()) //Implicitly converted to Expression!\n                .Count()\n                .ShouldBe(_customers.Count());\n        }"
      },
      {
        "name": "None_Should_Return_Empty",
        "body": "{\n            _customers\n                .Where(new NoneSpecification<Customer>().ToExpression())\n                .Count()\n                .ShouldBe(0);\n        }"
      },
      {
        "name": "Not_Should_Return_Reverse_Result",
        "body": "{\n            _customers\n                .Where(new EuropeanCustomerSpecification().Not().ToExpression())\n                .Count()\n                .ShouldBe(3);\n        }"
      },
      {
        "name": "Should_Support_Native_Expressions_And_Combinations",
        "body": "{\n            _customers\n                .Where(new ExpressionSpecification<Customer>(c => c.Age >= 18).ToExpression())\n                .Count()\n                .ShouldBe(6);\n\n            _customers\n                .Where(new EuropeanCustomerSpecification().And(new ExpressionSpecification<Customer>(c => c.Age >= 18)).ToExpression())\n                .Count()\n                .ShouldBe(4);\n        }"
      },
      {
        "name": "CustomSpecification_Test",
        "body": "{\n            _customers\n                .Where(new EuropeanCustomerSpecification().ToExpression())\n                .Count()\n                .ShouldBe(7);\n\n            _customers\n                .Where(new Age18PlusCustomerSpecification().ToExpression())\n                .Count()\n                .ShouldBe(6);\n\n            _customers\n                .Where(new BalanceCustomerSpecification(10000, 30000).ToExpression())\n                .Count()\n                .ShouldBe(2);\n\n            _customers\n                .Where(new PremiumCustomerSpecification().ToExpression())\n                .Count()\n                .ShouldBe(3);\n        }"
      },
      {
        "name": "IsSatisfiedBy_Tests",
        "body": "{\n            new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 49, 55000, \"USA\")).ShouldBeTrue();\n\n            new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 49, 200, \"USA\")).ShouldBeFalse();\n            new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 12, 55000, \"USA\")).ShouldBeFalse();\n        }"
      },
      {
        "name": "CustomSpecification_Composite_Tests",
        "body": "{\n            _customers\n                .Where(new EuropeanCustomerSpecification().And(new Age18PlusCustomerSpecification()).ToExpression())\n                .Count()\n                .ShouldBe(4);\n\n            _customers\n               .Where(new EuropeanCustomerSpecification().Not().And(new Age18PlusCustomerSpecification()).ToExpression())\n               .Count()\n               .ShouldBe(2);\n\n            _customers\n                .Where(new Age18PlusCustomerSpecification().AndNot(new EuropeanCustomerSpecification()).ToExpression())\n                .Count()\n                .ShouldBe(2);\n        }"
      }
    ]
  },
  {
    "file": "AbpBootstraper_Tester.cs",
    "methods": [
      {
        "name": "Should_Initialize_Bootstrapper",
        "body": "{\n            _bootstrapper.Initialize();\n        }"
      },
      {
        "name": "Should_Call_Module_Events_Once",
        "body": "{\n            _bootstrapper.Initialize();\n            _bootstrapper.Dispose();\n\n            var testModule = LocalIocManager.Resolve<MyTestModule>();\n            var otherModule = LocalIocManager.Resolve<MyOtherModule>();\n            var anotherModule = LocalIocManager.Resolve<MyAnotherModule>();\n\n            testModule.PreInitializeCount.ShouldBe(1);\n            testModule.InitializeCount.ShouldBe(1);\n            testModule.PostInitializeCount.ShouldBe(1);\n            testModule.ShutdownCount.ShouldBe(1);\n\n            otherModule.PreInitializeCount.ShouldBe(1);\n            otherModule.InitializeCount.ShouldBe(1);\n            otherModule.PostInitializeCount.ShouldBe(1);\n            otherModule.ShutdownCount.ShouldBe(1);\n            otherModule.CallMeOnStartupCount.ShouldBe(1);\n\n            anotherModule.PreInitializeCount.ShouldBe(1);\n            anotherModule.InitializeCount.ShouldBe(1);\n            anotherModule.PostInitializeCount.ShouldBe(1);\n            anotherModule.ShutdownCount.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "TestBaseWithLocalIocManager.cs",
    "methods": []
  },
  {
    "file": "FormattedStringTokenizer_Test.cs",
    "methods": [
      {
        "name": "Should_Throw_FormatException_For_Invalid_Format",
        "body": "{\n            Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"a sample { wrong format\"));\n            Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"a sample {0{1}} wrong format\"));\n            Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"} wrong format\"));\n            Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"wrong {} format\"));\n        }"
      },
      {
        "name": "Should_Tokenize_For_Valid_Format",
        "body": "{\n            TokenizeTest(\"\");\n            TokenizeTest(\"a sample {0} value\", \"a sample \", \"{0}\", \" value\");\n            TokenizeTest(\"{0} is {name} at this {1}.\", \"{0}\", \" is \", \"{name}\", \" at this \", \"{1}\", \".\");\n        }"
      }
    ]
  },
  {
    "file": "FormattedStringValueExtracter_Tests.cs",
    "methods": [
      {
        "name": "Test_Matched",
        "body": "{\n            Test_Matched_Internal(\n                \"My name is Neo.\",\n                \"My name is {0}.\",\n                new NameValue(\"0\", \"Neo\")\n                );\n\n            Test_Matched_Internal(\n                \"User halil does not exist.\",\n                \"User {0} does not exist.\",\n                new NameValue(\"0\", \"halil\")\n                );\n        }"
      },
      {
        "name": "Test_Not_Matched",
        "body": "{\n            Test_Not_Matched_Internal(\n                \"My name is Neo.\",\n                \"My name is Marry.\"\n                );\n\n            Test_Not_Matched_Internal(\n                \"Role {0} does not exist.\",\n                \"User name {0} is invalid, can only contain letters or digits.\"\n                );\n\n            Test_Not_Matched_Internal(\n                \"{0} cannot be null or empty.\",\n                \"Incorrect password.\"\n                );\n\n            Test_Not_Matched_Internal(\n                \"Incorrect password.\",\n                \"{0} cannot be null or empty.\"\n                );\n        }"
      },
      {
        "name": "IsMatch_Test",
        "body": "{\n            string[] values;\n            FormattedStringValueExtracter.IsMatch(\"User halil does not exist.\", \"User {0} does not exist.\", out values).ShouldBe(true);\n            values[0].ShouldBe(\"halil\");\n        }"
      }
    ]
  },
  {
    "file": "AsyncHelper_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{\n            AsyncHelper.RunSync(AsyncMethod1);\n            AsyncHelper.RunSync(() => AsyncMethod2(21)).ShouldBe(42);\n        }"
      }
    ]
  },
  {
    "file": "LockExtensions_Tests.cs",
    "methods": [
      {
        "name": "Test_Locking",
        "body": "{\n            //Just sample usages:\n            _list.Locking(() => { });\n            _list.Locking(list => { });\n            _list.Locking(() => 42).ShouldBe(42);\n            _list.Locking(list => 42).ShouldBe(42);\n        }"
      }
    ]
  },
  {
    "file": "OneTimeRunner_Tests.cs",
    "methods": [
      {
        "name": "OneTimeRunner_Should_Run_Once",
        "body": "{\n            var oneTimeRunner = new OneTimeRunner();\n            var count = 0;\n            for (int i = 0; i < 10; i++)\n            {\n                oneTimeRunner.Run(() =>\n                {\n                    count++;\n                });\n            }\n            \n            count.ShouldBe(1);\n        }"
      }
    ]
  },
  {
    "file": "TimezoneHelper_Tests.cs",
    "methods": [
      {
        "name": "All_Windows_Timezones_Should_Be_Convertable_To_Iana",
        "body": "{\n            var allTimezones = TimezoneHelper.GetWindowsTimeZoneIds();\n\n            Should.NotThrow(() =>\n            {\n                var exceptions = new List<string>();\n\n                foreach (var timezone in allTimezones)\n                {\n                    try\n                    {\n                        TimezoneHelper.WindowsToIana(timezone);\n                    }\n                    catch (Exception ex)\n                    {\n                        exceptions.Add(ex.Message);\n                    }\n                }\n\n                if (exceptions.Any())\n                {\n                    throw new Exception(exceptions.JoinAsString(Environment.NewLine));\n                }\n            });\n        }"
      },
      {
        "name": "Should_Throw_Exception_For_Unknown_Windows_Timezone_Id",
        "body": "{\n            Should.Throw<Exception>(() =>\n            {\n                TimezoneHelper.WindowsToIana(\"abc\");\n            });\n        }"
      },
      {
        "name": "Should_Throw_Exception_For_Unknown_Iana_Timezone_Id",
        "body": "{\n            Should.Throw<Exception>(() =>\n            {\n                TimezoneHelper.IanaToWindows(\"cba\");\n            });\n        }"
      },
      {
        "name": "Convert_By_Iana_Timezone_Should_Be_Convert_By_Windows_Timezone",
        "body": "{\n            var now = DateTime.UtcNow;\n            TimezoneHelper.ConvertTimeFromUtcByIanaTimeZoneId(now, \"Asia/Shanghai\")\n                .ShouldBe(TimezoneHelper.ConvertFromUtc(now, \"China Standard Time\"));\n        }"
      },
      {
        "name": "ConvertToDateTimeOffset_Date_With_America_NewYork_TimeZone_Should_Return_Correct_DateTimeOffset",
        "body": "{\n            var testDate = new DateTime(1980,11,20);\n            var timeSpan = new TimeSpan(-5,0,0);\n\n            DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/New_York\");\n\n            dateTimeOffset.ShouldNotBe(null);\n            dateTimeOffset.Value.Offset.ShouldBe(timeSpan);\n            dateTimeOffset.Value.DateTime.ShouldBe(testDate);\n        }"
      },
      {
        "name": "ConvertToDateTimeOffset_Date_With_America_NewYork_TimeZone_Should_Return_Correct_DateTimeOffset_With_DaylightSavings",
        "body": "{\n            var testDate = new DateTime(1980, 5, 20);\n            var timeSpan = new TimeSpan(-4, 0, 0);\n\n            DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/New_York\");\n\n            dateTimeOffset.ShouldNotBe(null);\n            dateTimeOffset.Value.Offset.ShouldBe(timeSpan);\n            dateTimeOffset.Value.DateTime.ShouldBe(testDate);\n        }"
      },
      {
        "name": "ConvertToDateTimeOffset_Dates_With_America_Phoenix_TimeZone_Should_Return_Correct_DateTimeOffsests_With_No_DaylightSavings",
        "body": "{\n            var testDate = new DateTime(1980, 5, 20);\n            var timeSpan = new TimeSpan(-7, 0, 0);\n\n            DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/Phoenix\");\n\n            dateTimeOffset.ShouldNotBe(null);\n            dateTimeOffset.Value.Offset.ShouldBe(timeSpan);\n            dateTimeOffset.Value.DateTime.ShouldBe(testDate);\n\n            var testDate2 = new DateTime(1980, 11, 20);\n\n            DateTimeOffset? dateTimeOffset2 = TimezoneHelper.ConvertToDateTimeOffset(testDate2, \"America/Phoenix\");\n\n            dateTimeOffset2.ShouldNotBe(null);\n            dateTimeOffset2.Value.Offset.ShouldBe(timeSpan); // should be the same timespan as previous date\n            dateTimeOffset2.Value.DateTime.ShouldBe(testDate2);\n        }"
      }
    ]
  },
  {
    "file": "UserIdentifier_Tests.cs",
    "methods": [
      {
        "name": "GetHashCode_Test",
        "body": "{\n            UserIdentifier.Parse(\"5@4\").GetHashCode().ShouldBe(UserIdentifier.Parse(\"5@4\").GetHashCode());\n\n            UserIdentifier.Parse(\"1@1\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"2@2\").GetHashCode());\n\n            UserIdentifier.Parse(\"1@0\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"0@1\").GetHashCode());\n\n            UserIdentifier.Parse(\"1@2\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"2@1\").GetHashCode());\n        }"
      }
    ]
  },
  {
    "file": "UrlHelper_Tests.cs",
    "methods": []
  },
  {
    "file": "AbpWebCommonTestModule.cs",
    "methods": []
  },
  {
    "file": "AbpWebCommonTestModuleAuthProvider.cs",
    "methods": []
  },
  {
    "file": "AbpWebCommonTestModuleSettingProvider.cs",
    "methods": []
  },
  {
    "file": "AbpUserConfigurationBuilder_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var userConfiguration = await _abpUserConfigurationBuilder.GetAll();\n            userConfiguration.ShouldNotBe(null);\n\n            userConfiguration.MultiTenancy.ShouldNotBe(null);\n            userConfiguration.Session.ShouldNotBe(null);\n            userConfiguration.Localization.ShouldNotBe(null);\n            userConfiguration.Features.ShouldNotBe(null);\n            userConfiguration.Auth.ShouldNotBe(null);\n            userConfiguration.Nav.ShouldNotBe(null);\n            userConfiguration.Setting.ShouldNotBe(null);\n            userConfiguration.Clock.ShouldNotBe(null);\n            userConfiguration.Timing.ShouldNotBe(null);\n            userConfiguration.Security.ShouldNotBe(null);\n            userConfiguration.Custom.ShouldNotBe(null);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var userConfiguration = await _abpUserConfigurationBuilder.GetAll();\n            userConfiguration.Setting.Values.ShouldNotContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var userConfiguration = await _abpUserConfigurationBuilder.GetAll();\n            userConfiguration.Setting.Values.ShouldNotContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting2\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            LoginAsDefaultTenantAdmin();\n\n            var userConfiguration = await _abpUserConfigurationBuilder.GetAll();\n            userConfiguration.Setting.Values.ShouldContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            LoginAsDefaultTenantAdmin();\n\n            var userConfiguration = await _abpUserConfigurationBuilder.GetAll();\n            userConfiguration.Setting.Values.ShouldContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting2\");\n        }"
      }
    ]
  },
  {
    "file": "CustomConfigScriptManager_Tests.cs",
    "methods": [
      {
        "name": "CustomConfigScriptManager_Should_Build_Custom_Configuration",
        "body": "{\n            _abpStartupConfiguration.CustomConfigProviders.Add(new TestCustomConfigProvider());\n\n            var script = _customConfigScriptManager.GetScript();\n            script.ShouldNotBeNullOrEmpty();\n            script.ShouldContain(\"EntityHistory\");\n        }"
      },
      {
        "name": "CustomConfigScriptManager_Should_Build_Empty_Custom_Configuration_When_CustomConfigProviders_Empty",
        "body": "{\n            _abpStartupConfiguration.CustomConfigProviders.Clear();\n\n            var script = _customConfigScriptManager.GetScript();\n            script.ShouldNotBeNullOrEmpty();\n        }"
      }
    ]
  },
  {
    "file": "SettingScriptManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var scripts = await _settingScriptManager.GetScriptAsync();\n            scripts.ShouldNotContain(\"AbpWebCommonTestModule.Test.Setting1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var scripts = await _settingScriptManager.GetScriptAsync();\n            scripts.ShouldNotContain(\"AbpWebCommonTestModule.Test.Setting2\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            LoginAsDefaultTenantAdmin();\n\n            var scripts = await _settingScriptManager.GetScriptAsync();\n            scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            LoginAsDefaultTenantAdmin();\n\n            var scripts = await _settingScriptManager.GetScriptAsync();\n            scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting2\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            LoginAsDefaultTenantAdmin();\n\n            var scripts = await _settingScriptManager.GetScriptAsync();\n            scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting3\");\n            scripts.ShouldContain(\"Test \\\\u003e Value3\");\n        }"
      }
    ]
  },
  {
    "file": "DefaultErrorInfoConverter_Tests.cs",
    "methods": [
      {
        "name": "DefaultErrorInfoConverter_Should_Work_For_EntityNotFoundException_Overload_Methods",
        "body": "{\n            var message = \"Test message\";\n            var errorInfo = _defaultErrorInfoConverter.Convert(new EntityNotFoundException(message));\n\n            Assert.Equal(errorInfo.Message, message);\n\n            var exceptionWithoutMessage = new EntityNotFoundException();\n            errorInfo = _defaultErrorInfoConverter.Convert(exceptionWithoutMessage);\n\n            Assert.Equal(errorInfo.Message, exceptionWithoutMessage.Message);\n        }"
      }
    ]
  },
  {
    "file": "AbpWebCommonLocalization_Tests.cs",
    "methods": [
      {
        "name": "Should_Localize_AbpWebCommon_Text",
        "body": "{\n            using (CultureInfoHelper.Use(\"en\"))\n            {\n                _localizationManager\n                    .GetSource(AbpWebConsts.LocalizationSourceName)\n                    .GetString(\"ValidationError\")\n                    .ShouldBe(\"Your request is not valid!\");\n            }\n        }"
      },
      {
        "name": "Should_Localize_AbpWebCommon_Texts",
        "body": "{\n            using (CultureInfoHelper.Use(\"en\"))\n            {\n                var texts = _localizationManager\n                    .GetSource(AbpWebConsts.LocalizationSourceName)\n                    .GetStrings(new List<string> {\"ValidationError\", \"InternalServerError\"});\n\n                texts.ShouldContain(x => x == \"Your request is not valid!\");\n                texts.ShouldContain(x => x == \"An internal error occurred during your request!\");\n\n            }\n        }"
      }
    ]
  },
  {
    "file": "AbpZeroIdentityServerTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpZeroIdentityServerTestModule.cs",
    "methods": []
  },
  {
    "file": "DependencyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_AbpPersistedGrantStore",
        "body": "{\n        Resolve<AbpPersistedGrantStore>();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n        AbpSession.TenantId = 1;\n\n        var repository = Resolve<IRepository<User, long>>();\n\n        var userToAdd = User.CreateTenantAdminUser(AbpSession.TenantId.Value, \"admin@test.com\");\n        userToAdd.Password = \"123qwe\";\n        var userId = await repository.InsertAndGetIdAsync(userToAdd);\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            //Arrange\n            var user = await repository.FirstOrDefaultAsync(userId);\n            user.ShouldNotBeNull();\n\n            var principalFactory = Resolve<IUserClaimsPrincipalFactory<User>>();\n\n            //Act\n            var identity = (await principalFactory.CreateAsync(user)).Identity;\n\n            //Assert\n            identity.GetTenantId().ShouldBe(AbpSession.TenantId);\n            identity.GetUserId().ShouldBe(user.Id);\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "TestCustomConfigProvider.cs",
    "methods": []
  },
  {
    "file": "UserTestEntity.cs",
    "methods": []
  },
  {
    "file": "AbpZeroTestBase.cs",
    "methods": []
  },
  {
    "file": "AbpZeroTestModule.cs",
    "methods": []
  },
  {
    "file": "BackgroundJobManagerEventTriggerExtensions_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        for (int i = 0; i < 5; i++)\n        {\n            await _backgroundJobManager.EnqueueEventAsync(new MySimpleEventData(i));\n        }\n\n        var eventCount = await _backgroundJobStore.GetWaitingJobsAsync(5);\n        eventCount.Count.ShouldBe(5);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var id = await _backgroundJobManager.EnqueueAsync<TestJob, TestJobArgs>(new TestJobArgs());\n        Convert.ToInt64(id).ShouldBeGreaterThan(0);\n    }"
      }
    ]
  },
  {
    "file": "AbpStartupConfiguration_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Custom_Config_Providers",
        "body": "{\n        var providers = _startupConfiguration.CustomConfigProviders;\n\n        providers.Count.ShouldBeGreaterThan(0);\n    }"
      },
      {
        "name": "Should_Get_Custom_Config_Providers_Values",
        "body": "{\n        _startupConfiguration.GetCustomConfig().Count.ShouldBeGreaterThan(0);\n    }"
      }
    ]
  },
  {
    "file": "DependencyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_AbpPersistedGrantStore",
        "body": "{\n        Resolve<AbpPersistedGrantStore>();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n        AbpSession.TenantId = 1;\n\n        var repository = Resolve<IRepository<User, long>>();\n\n        var userToAdd = User.CreateTenantAdminUser(AbpSession.TenantId.Value, \"admin@test.com\");\n        userToAdd.Password = \"123qwe\";\n        var userId = await repository.InsertAndGetIdAsync(userToAdd);\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            //Arrange\n            var user = await repository.FirstOrDefaultAsync(userId);\n            user.ShouldNotBeNull();\n\n            var principalFactory = Resolve<IUserClaimsPrincipalFactory<User>>();\n\n            //Act\n            var identity = (await principalFactory.CreateAsync(user)).Identity;\n\n            //Assert\n            identity.GetTenantId().ShouldBe(AbpSession.TenantId);\n            identity.GetUserId().ShouldBe(user.Id);\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "EntityChange_Test.cs",
    "methods": [
      {
        "name": "Entity_Change_Should_Check_OwnedEntity",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");\n\n            //blog1.More is Owned Entity\n            blog1.More.BloggerName = \"test-blog-2\";\n\n            _blogRepository.GetDbContext().Entry(blog1).State.ShouldBe(EntityState.Unchanged);\n            _blogRepository.GetDbContext().Entry(blog1.More).State.ShouldBe(EntityState.Modified);\n            _blogRepository.GetDbContext().Entry(blog1).CheckOwnedEntityChange().ShouldBeTrue();\n\n            uow.Complete();\n        }\n\n    }"
      }
    ]
  },
  {
    "file": "EntitySnapshotManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var id = CreateUserAndGetId();\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var snapshot = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity, int>(id, DateTime.Now);\n            snapshot.ChangedPropertiesSnapshots.Count.ShouldBe(0);\n            snapshot.PropertyChangesStackTree.Count.ShouldBe(0);\n\n            await uow.CompleteAsync();\n        }\n\n        Thread.Sleep(3 * 1000);\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = await _userRepository.GetAsync(id);\n            user.Name = \"test-user-name-updated\";\n            user.Surname = \"test-user-surname-updated\";\n\n            await uow.CompleteAsync();\n        }\n\n        Thread.Sleep(3 * 1000);\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = await _userRepository.GetAsync(id);\n            user.Name = \"test-user-name-updated-2\";\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            //undo last update\n            var snapshot = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity, int>(id, DateTime.Now.AddSeconds(-2));\n\n            snapshot.ChangedPropertiesSnapshots.Count.ShouldBe(1);\n            snapshot.PropertyChangesStackTree.Count.ShouldBe(1);\n\n            snapshot[\"Name\"].ShouldBe(\"\\\"test-user-name-updated\\\"\");\n            snapshot.PropertyChangesStackTree[\"Name\"].ShouldBe(\"\\\"test-user-name-updated\\\" -> \\\"test-user-name-updated-2\\\"\");\n\n            //undo all changes\n            var snapshot2 = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity>(id, DateTime.Now.AddDays(-1));\n\n            snapshot2.ChangedPropertiesSnapshots.Count.ShouldBe(2);\n            snapshot2.PropertyChangesStackTree.Count.ShouldBe(2);\n\n            snapshot2[\"Name\"].ShouldBe(\"\\\"test-user-name-start\\\"\");\n            snapshot2[\"Surname\"].ShouldBe(\"\\\"test-user-surname-start\\\"\");\n            snapshot2.PropertyChangesStackTree[\"Name\"].ShouldBe(\"\\\"test-user-name-start\\\" -> \\\"test-user-name-updated\\\" -> \\\"test-user-name-updated-2\\\"\");\n            snapshot2.PropertyChangesStackTree[\"Surname\"].ShouldBe(\"\\\"test-user-surname-start\\\" -> \\\"test-user-surname-updated\\\"\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "JsonEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{\n            var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();\n\n            dictionaries.Count.ShouldBe(2);\n\n            var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");\n            enDict.ShouldNotBe(null);\n            enDict[\"Apple\"].ShouldBe(\"Apple\");\n            enDict[\"Banana\"].ShouldBe(\"Banana\");\n\n            var zhHansDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"zh-Hans\");\n            zhHansDict.ShouldNotBe(null);\n            zhHansDict[\"Apple\"].ShouldBe(\"苹果\");\n            zhHansDict[\"Banana\"].ShouldBe(\"香蕉\");\n        }"
      }
    ]
  },
  {
    "file": "SimpleLocalization_Tests.cs",
    "methods": []
  },
  {
    "file": "XmlEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{\n            var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();\n            \n            dictionaries.Count.ShouldBe(2);\n\n            var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");\n            enDict.ShouldNotBe(null);\n            enDict.ShouldBe(_dictionaryProvider.DefaultDictionary);\n            enDict[\"hello\"].ShouldBe(\"Hello\");\n            \n            var trDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"tr\");\n            trDict.ShouldNotBe(null);\n            trDict[\"hello\"].ShouldBe(\"Merhaba\");\n        }"
      }
    ]
  },
  {
    "file": "MultiLingual_Entity_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        await _productAppService.CreateProduct(new ProductCreateDto\n        {\n            Price = 99,\n            Stock = 1000,\n            Translations = new List<ProductTranslationDto>\n                {\n                    new ProductTranslationDto\n                    {\n                        Language = \"en\",\n                        Name = \"Mobile Phone\"\n                    }\n                }\n        });\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            var products = await _productRepository.GetAllIncluding(p => p.Translations).ToListAsync();\n            products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Mobile Phone\" && pt.Language == \"en\").ShouldBe(1);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        await _productAppService.CreateProduct(new ProductCreateDto\n        {\n            Price = 99,\n            Stock = 1000,\n            Translations = new List<ProductTranslationDto>\n                {\n                    new ProductTranslationDto\n                    {\n                        Language = \"en\",\n                        Name = \"Mobile Phone\"\n                    },\n                    new ProductTranslationDto\n                    {\n                        Language = \"tr\",\n                        Name = \"Cep telefonu\"\n                    }\n                }\n        });\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            var products = await _productRepository.GetAllIncluding(p => p.Translations).ToListAsync();\n\n            products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Mobile Phone\" && pt.Language == \"en\").ShouldBe(1);\n            products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Cep telefonu\" && pt.Language == \"tr\").ShouldBe(1);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var product = await GetProduct(\"it\", \"Giornale\");\n\n        product.ShouldNotBeNull();\n        product.Translations.Count.ShouldBe(1);\n\n        await _productAppService.UpdateProduct(new ProductUpdateDto\n        {\n            Id = product.Id,\n            Price = product.Price,\n            Stock = product.Stock,\n            Translations = new List<ProductTranslationDto>\n                {\n                    new ProductTranslationDto\n                    {\n                        Name = \"Newspaper\",\n                        Language = \"en\"\n                    }\n                }\n        });\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            // Old Translation\n            product = await GetProduct(\"it\", \"Giornale\");\n\n            product.ShouldBe(null);\n\n            product = await GetProduct(\"en\", \"Newspaper\");\n\n            product.ShouldNotBe(null);\n            product.Translations.Count.ShouldBe(1);\n\n            var translation = product.Translations.First();\n            translation.Language.ShouldBe(\"en\");\n            translation.Name.ShouldBe(\"Newspaper\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var product = await GetProduct(\"en\", \"Bike\");\n\n        product.ShouldNotBeNull();\n        product.Translations.Count.ShouldBe(2);\n\n        await _productAppService.UpdateProduct(new ProductUpdateDto\n        {\n            Id = product.Id,\n            Price = product.Price,\n            Stock = product.Stock,\n            Translations = new List<ProductTranslationDto>\n                {\n                    new ProductTranslationDto\n                    {\n                        Name = \"Bicycle\",\n                        Language = \"en\"\n                    },\n                    new ProductTranslationDto\n                    {\n                        Name = \"Bicicleta\",\n                        Language = \"es\"\n                    }\n                }\n        });\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            // Old Translation\n            product = await GetProduct(\"en\", \"Bike\");\n\n            product.ShouldBe(null);\n\n            product = await GetProduct(\"en\", \"Bicycle\");\n\n            product.ShouldNotBe(null);\n            product.Translations.Count.ShouldBe(2);\n\n            product.Translations.Count(pt => pt.Language == \"fr\").ShouldBe(0);\n            product.Translations.Count(pt => pt.Language == \"es\" && pt.Name == \"Bicicleta\").ShouldBe(1);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var product = await GetProduct(\"it\", \"Giornale\");\n\n        await _productAppService.Translate(product.Id, new ProductTranslationDto\n        {\n            Name = \"Bicycle\",\n            Language = \"en\"\n        });\n\n        product = await GetProduct(\"en\", \"Bicycle\");\n        product.ShouldNotBeNull();\n        product.Translations.Count.ShouldBe(2);\n        product.Translations.Count(pt => pt.Language == \"en\" && pt.Name == \"Bicycle\").ShouldBeGreaterThan(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var product = await GetProduct(\"it\", \"Giornale\");\n\n        await _productAppService.Translate(product.Id, new ProductTranslationDto\n        {\n            Name = \"il Giornale\",\n            Language = \"it\"\n        });\n\n        product = await GetProduct(\"it\", \"il Giornale\");\n        product.ShouldNotBeNull();\n        product.Translations.Count.ShouldBe(1);\n    }"
      }
    ]
  },
  {
    "file": "MultiLingual_Mapping_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");\n\n        var products = await _productAppService.GetProducts();\n        products.ShouldNotBeNull();\n\n        products.Items.Count.ShouldBe(3);\n        var product1 = products.Items[0];\n        var product2 = products.Items[1];\n        var product3 = products.Items[2];\n\n        product1.Language.ShouldBe(\"tr\");\n        product1.Name.ShouldBe(\"Saat\");\n\n        product2.Language.ShouldBe(\"en\");\n        product2.Name.ShouldBe(\"Bike\");\n\n        product3.Language.ShouldBe(\"it\");\n        product3.Name.ShouldBe(\"Giornale\");\n\n        CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");\n\n        products = await _productAppService.GetProducts();\n        products.ShouldNotBeNull();\n\n        products.Items.Count.ShouldBe(3);\n        product1 = products.Items[0];\n        product2 = products.Items[1];\n        product3 = products.Items[2];\n\n        product1.Language.ShouldBe(\"en\");\n        product1.Name.ShouldBe(\"Watch\");\n\n        product2.Language.ShouldBe(\"fr\");\n        product2.Name.ShouldBe(\"Bicyclette\");\n\n        product3.Language.ShouldBe(\"it\");\n        product3.Name.ShouldBe(\"Giornale\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        CultureInfo.CurrentUICulture = new CultureInfo(\"en-GB\");\n\n        var products = await _productAppService.GetProducts();\n        products.ShouldNotBeNull();\n\n        products.Items.Count.ShouldBe(3);\n        var product1 = products.Items[0];\n        var product2 = products.Items[1];\n        var product3 = products.Items[2];\n\n        product1.Language.ShouldBe(\"en\");\n        product1.Name.ShouldBe(\"Watch\");\n\n        product2.Language.ShouldBe(\"en\");\n        product2.Name.ShouldBe(\"Bike\");\n\n        product3.Language.ShouldBe(\"it\");\n        product3.Name.ShouldBe(\"Giornale\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        /*\n         *  When no translation is available, it should still map the\n         */\n\n        UsingDbContext(context =>\n        {\n            context.ProductTranslations.RemoveRange(context.ProductTranslations.ToList());\n        });\n\n        CultureInfo.CurrentUICulture = new CultureInfo(\"en-GB\");\n\n        var products = await _productAppService.GetProducts();\n        products.ShouldNotBeNull();\n\n        products.Items.Count.ShouldBe(3);\n        var product1 = products.Items[0];\n        var product2 = products.Items[1];\n        var product3 = products.Items[2];\n\n        product1.Language.ShouldBe(null);\n        product1.Name.ShouldBe(null);\n        product1.Price.ShouldBe(10);\n\n        product2.Language.ShouldBe(null);\n        product2.Name.ShouldBe(null);\n        product2.Price.ShouldBe(99);\n\n        product3.Language.ShouldBe(null);\n        product3.Name.ShouldBe(null);\n        product3.Price.ShouldBe(15);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");\n\n        var products = await _productAppService.GetProducts();\n        products.ShouldNotBeNull();\n\n        var product1 = products.Items[0];\n\n        product1.Language.ShouldBe(\"tr\");\n        product1.Name.ShouldBe(\"Saat\");\n        product1.Id.ShouldBe(1);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");\n\n        var orders = await _orderAppService.GetOrders();\n\n        orders.Items.Count.ShouldBe(1);\n\n        var testOrder = orders.Items.First();\n\n        testOrder.Price.ShouldBe(100);\n        testOrder.Language.ShouldBe(\"fr\");\n        testOrder.Name.ShouldBe(\"Tester\");\n        testOrder.ProductCount.ShouldBe(3);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");\n\n        var offices = await _officeAppService.GetOffices();\n        offices.ShouldNotBeNull();\n\n        offices.Items.Count.ShouldBe(1);\n        var volosoftOffice = offices.Items[0];\n\n\n        volosoftOffice.Language.ShouldBe(\"tr\");\n        volosoftOffice.Name.ShouldBe(\"Volosoft Ofisi\");\n\n        CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");\n\n        offices = await _officeAppService.GetOffices();\n        offices.ShouldNotBeNull();\n\n        offices.Items.Count.ShouldBe(1);\n        volosoftOffice = offices.Items[0];\n\n        volosoftOffice.Language.ShouldBe(\"en\");\n        volosoftOffice.Name.ShouldBe(\"Volosoft Office\");\n    }"
      }
    ]
  },
  {
    "file": "NotificationDistributer_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        //Arrange\n        var notificationData = new NotificationData();\n\n        //Act\n        await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });\n\n        //Assert\n        _fakeNotificationDistributer.IsDistributeCalled.ShouldBeTrue();\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        //Arrange\n        var notificationData = new NotificationData();\n\n        //Act\n        await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });\n\n        //Assert\n        _fakeNotificationDistributer.IsDistributeCalled.ShouldBeTrue();\n    }"
      }
    ]
  },
  {
    "file": "NotificationStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var userIdentifier = AbpSession.ToUserIdentifier();\n\n        await _notificationPublisher.PublishAsync(\"Test\", userIds: new[] { userIdentifier });\n\n        var allNotifications = await\n            _notificationStore.GetUserNotificationsWithNotificationsAsync(userIdentifier);\n\n        allNotifications.Count.ShouldBe(1);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var userIdentifier = AbpSession.ToUserIdentifier();\n\n        var now = DateTime.Now;\n        await _notificationPublisher.PublishAsync(\"TestNotification\", userIds: new[] { userIdentifier });\n\n        Thread.Sleep(TimeSpan.FromSeconds(5));\n\n        //this notification's creation time will be more than now+5sec\n        await _notificationPublisher.PublishAsync(\"TestNotification2\", userIds: new[] { userIdentifier });\n\n        Thread.Sleep(TimeSpan.FromSeconds(5));\n\n        //this notification's creation time will be more than now+10sec\n        await _notificationPublisher.PublishAsync(\"TestNotification3\", userIds: new[] { userIdentifier });\n\n        //this should get second added notification\n        var notifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now.AddSeconds(5),\n            endDate: now.AddSeconds(10)\n        );\n\n        notifications.Count.ShouldBe(1);\n\n        //this should get all added notification\n        var allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now,\n            endDate: now.AddSeconds(30)\n        );\n\n        allNotifications.Count.ShouldBe(3);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var now = DateTime.Now;\n\n        var userIdentifier = AbpSession.ToUserIdentifier();\n        await _notificationPublisher.PublishAsync(\"TestNotification\", userIds: new[] { userIdentifier });\n\n        Thread.Sleep(TimeSpan.FromSeconds(5));\n\n        //this notification's creation time will be more than now+5sec\n        await _notificationPublisher.PublishAsync(\"TestNotification2\", userIds: new[] { userIdentifier });\n\n        Thread.Sleep(TimeSpan.FromSeconds(5));\n\n        //this notification's creation time will be more than now+10sec\n        await _notificationPublisher.PublishAsync(\"TestNotification3\", userIds: new[] { userIdentifier });\n\n        var allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now,\n            endDate: now.AddSeconds(30)\n        );\n\n        allNotifications.Count.ShouldBe(3);\n\n        //delete second added notification\n        await _notificationStore.DeleteAllUserNotificationsAsync(\n            userIdentifier,\n            state: null,\n            startDate: now.AddSeconds(5),\n            endDate: now.AddSeconds(10)\n        );\n\n        //check\n        var notifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now.AddSeconds(5),\n            endDate: now.AddSeconds(10)\n        );\n\n        notifications.Count.ShouldBe(0);\n\n        allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now,\n            endDate: now.AddSeconds(30)\n        );\n\n        allNotifications.Count.ShouldBe(2);\n\n        //delete all added notification\n        await _notificationStore.DeleteAllUserNotificationsAsync(\n            userIdentifier,\n            state: null,\n            startDate: now,\n            endDate: now.AddSeconds(30)\n        );\n\n        //check\n        allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(\n            userIdentifier,\n            startDate: now,\n            endDate: now.AddSeconds(30)\n        );\n\n        allNotifications.Count.ShouldBe(0);\n    }"
      }
    ]
  },
  {
    "file": "NotificationSubscription_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var notificationName = \"CustomNotification\";\n\n        // Arrange -> subscribe to CustomNotification with _realTimeNotifier\n        await _notificationSubscriptionManager.SubscribeAsync(\n            AbpSession.ToUserIdentifier(),\n            notificationName,\n            null,\n            _realTimeNotifier1.GetType().FullName\n        );\n\n        // Act\n        var subscriptions = await _notificationSubscriptionManager.GetSubscriptionsAsync(\n            AbpSession.TenantId,\n            notificationName,\n            null,\n            _realTimeNotifier2.GetType().FullName\n        );\n\n        // Assert\n        subscriptions.Count.ShouldBe(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var notificationName = \"TestNotification\";\n\n        // Arrange -> subscribe to CustomNotification with _realTimeNotifier\n        await _notificationSubscriptionManager.SubscribeAsync(\n            AbpSession.ToUserIdentifier(),\n            notificationName,\n            null,\n            _realTimeNotifier1.GetType().FullName\n        );\n\n        var notificationData = new NotificationData();\n\n        //Act\n        await _publisher.PublishAsync(\n            \"TestNotification\",\n            notificationData,\n            severity: NotificationSeverity.Success,\n            userIds: new[] { AbpSession.ToUserIdentifier() }\n        );\n\n        //Assert\n        _realTimeNotifier1.IsSendNotificationCalled.ShouldBeTrue();\n        _realTimeNotifier2.IsSendNotificationCalled.ShouldBeFalse();\n    }"
      }
    ]
  },
  {
    "file": "RealTimeNotifier_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        //Arrange\n        var notificationData = new NotificationData();\n\n        //Act\n        var before = Clock.Now;\n        await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });\n        var after = Clock.Now;\n\n        //Assert\n        Predicate<UserNotification[]> predicate = userNotifications =>\n        {\n            userNotifications.Length.ShouldBe(1);\n\n            var userNotification = userNotifications[0];\n            userNotification.State.ShouldBe(UserNotificationState.Unread);\n            userNotification.TenantId.ShouldBe(AbpSession.TenantId);\n            userNotification.UserId.ShouldBe(AbpSession.UserId.Value);\n\n            var notification = userNotification.Notification;\n            notification.CreationTime.ShouldBeInRange(before, after);\n            notification.Data.ToString().ShouldBe(notificationData.ToString());\n            notification.EntityId.ShouldBe(null);\n            notification.EntityTypeName.ShouldBe(null);\n            notification.NotificationName.ShouldBe(\"TestNotification\");\n            notification.Severity.ShouldBe(NotificationSeverity.Success);\n            notification.TenantId.ShouldBe(AbpSession.TenantId);\n\n            return true;\n        };\n\n        await _realTimeNotifier1.Received().SendNotificationsAsync(Arg.Is<UserNotification[]>(uns => predicate(uns)));\n        await _realTimeNotifier2.Received().SendNotificationsAsync(Arg.Is<UserNotification[]>(uns => predicate(uns)));\n    }"
      }
    ]
  },
  {
    "file": "RealtimeNotification_TargetNotification_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        var notificationData = new NotificationData();\n\n        await _publisher.PublishAsync(\"TestNotification\",\n            notificationData,\n            severity: NotificationSeverity.Success,\n            userIds: new[] { AbpSession.ToUserIdentifier() }\n        );\n\n        Assert.True(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.True(_realTimeNotifier2.IsSendNotificationCalled);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        var notificationData = new NotificationData();\n\n        await _publisher.PublishAsync(\"TestNotification\",\n            notificationData,\n            severity: NotificationSeverity.Success,\n            userIds: new[] { AbpSession.ToUserIdentifier() },\n            targetNotifiers: new[] { _realTimeNotifier1.GetType(), _realTimeNotifier2.GetType() }\n        );\n\n        Assert.True(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.True(_realTimeNotifier2.IsSendNotificationCalled);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        var notificationData = new NotificationData();\n\n        await _publisher.PublishAsync(\"TestNotification\",\n            notificationData,\n            severity: NotificationSeverity.Success,\n            userIds: new[] { AbpSession.ToUserIdentifier() },\n            targetNotifiers: new[] { _realTimeNotifier2.GetType() }\n        );\n\n        Assert.False(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.True(_realTimeNotifier2.IsSendNotificationCalled);\n\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        await _publisher.PublishAsync(\"TestNotification\",\n            notificationData,\n            severity: NotificationSeverity.Success,\n            userIds: new[] { AbpSession.ToUserIdentifier() },\n            targetNotifiers: new[] { _realTimeNotifier1.GetType() }\n        );\n\n        Assert.True(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.False(_realTimeNotifier2.IsSendNotificationCalled);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var notificationData = new NotificationData();\n\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        await Should.ThrowAsync<Exception>(async () =>\n        {\n            await _publisher.PublishAsync(\"TestNotification\",\n                notificationData,\n                severity: NotificationSeverity.Success,\n                userIds: new[] { AbpSession.ToUserIdentifier() },\n                targetNotifiers: new[] { typeof(NotificationData) }\n            );\n        });\n\n        Assert.False(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.False(_realTimeNotifier2.IsSendNotificationCalled);\n\n        var notifierSubstitute = Substitute.For<IRealTimeNotifier>();\n        _realTimeNotifier1.IsSendNotificationCalled = false;\n        _realTimeNotifier2.IsSendNotificationCalled = false;\n\n        await Should.ThrowAsync<Exception>(async () =>\n        {\n            await _publisher.PublishAsync(\"TestNotification\",\n                notificationData,\n                severity: NotificationSeverity.Success,\n                userIds: new[] { AbpSession.ToUserIdentifier() },\n                targetNotifiers: new[] { notifierSubstitute.GetType() }\n            );\n        });\n\n        Assert.False(_realTimeNotifier1.IsSendNotificationCalled);\n        Assert.False(_realTimeNotifier2.IsSendNotificationCalled);\n    }"
      }
    ]
  },
  {
    "file": "PrimaryKey_Guid_Generation_Tests.cs",
    "methods": [
      {
        "name": "Guid_Id_ShouldBe_Generated_By_GuidGenerator_When_DatabaseGeneratedOption_None_Is_Used",
        "body": "{\n        var guid = Guid.NewGuid();\n\n        UsingDbContext(context =>\n        {\n            var testGuidGenerator = new TestGuidGenerator(guid);\n            context.GuidGenerator = testGuidGenerator;\n\n            var book = new Book\n            {\n                Name = \"Hitchhiker's Guide to the Galaxy\"\n            };\n\n            context.Set<Book>().Add(book);\n            context.SaveChanges();\n\n            testGuidGenerator.CreateCalled.ShouldBeTrue();\n            guid.ShouldBe(book.Id);\n        });\n\n    }"
      },
      {
        "name": "Guid_Id_ShouldBe_Generated_By_GuidGenerator_When_DatabaseGenerated_None_Attribute_Is_Used",
        "body": "{\n        var guid = Guid.NewGuid();\n\n        UsingDbContext(context =>\n        {\n            var testGuidGenerator = new TestGuidGenerator(guid);\n            context.GuidGenerator = testGuidGenerator;\n\n            var author = new Author\n            {\n                Name = \"Douglas Adams\"\n            };\n\n            context.Set<Author>().Add(author);\n\n            context.SaveChanges();\n\n            testGuidGenerator.CreateCalled.ShouldBeTrue();\n            guid.ShouldBe(author.Id);\n        });\n\n    }"
      },
      {
        "name": "Guid_Id_Should_Be_Generated_By_GuidGenerator_When_Id_Field_Has_Different_Name",
        "body": "{\n        var guid = Guid.NewGuid();\n\n        UsingDbContext(context =>\n        {\n            var testGuidGenerator = new TestGuidGenerator(guid);\n            context.GuidGenerator = testGuidGenerator;\n\n            var store = new Store\n            {\n                Name = \"Tesk book store\"\n            };\n\n            context.Set<Store>().Add(store);\n\n            context.SaveChanges();\n\n            testGuidGenerator.CreateCalled.ShouldBeTrue();\n            guid.ShouldBe(store.Id);\n        });\n\n    }"
      }
    ]
  },
  {
    "file": "AbpPerRequestRedisCacheReplacement_Tests.cs",
    "methods": [
      {
        "name": "Should_Request_Once_For_Same_Context",
        "body": "{\n        ChangeHttpContext();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        TestCacheItem GetCacheValue()\n        {\n            counter++;\n            return new TestCacheItem { Value = cacheValue };\n        }\n\n        var item1 = _typedCache.Get(cacheKey, GetCacheValue);\n        var item2 = _typedCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());\n\n        var cachedObject =\n            RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(1);\n\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Should_Request_Again_For_Same_Context",
        "body": "{\n        ChangeHttpContext();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        TestCacheItem GetCacheValue()\n        {\n            counter++;\n            return new TestCacheItem { Value = cacheValue };\n        }\n\n        var item1 = _typedCache.Get(cacheKey, GetCacheValue);\n\n        ChangeHttpContext();\n        var item2 = _typedCache.Get(cacheKey, GetCacheValue);\n\n        RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());\n\n        var cachedObject =\n            RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n        RedisDatabase.Received(2).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(2);\n\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Should_Not_Request_Again_For_Same_Context",
        "body": "{\n        var context1 = GetNewContextSubstitute();\n        var context2 = GetNewContextSubstitute();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        TestCacheItem GetCacheValue()\n        {\n            counter++;\n            return new TestCacheItem { Value = cacheValue };\n        }\n\n        CurrentHttpContext = context1;\n        var item1 = _typedCache.Get(cacheKey, GetCacheValue); //First request\n\n        CurrentHttpContext = context2;\n        var item2 = _typedCache.Get(cacheKey, GetCacheValue); //Second request\n\n        CurrentHttpContext = context1;\n        var item3 = _typedCache.Get(cacheKey, GetCacheValue); //First request again\n\n        CurrentHttpContext = context2;\n        var item4 = _typedCache.Get(cacheKey, GetCacheValue); //Second request again\n\n        RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());\n\n        var cachedObject = RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n        RedisDatabase.Received(2).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(2);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n\n        item3.ShouldNotBe(null);\n        item3.Value.ShouldBe(cacheValue);\n\n        item4.ShouldNotBe(null);\n        item4.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        ChangeHttpContext();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        Task<TestCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new TestCacheItem { Value = cacheValue });\n        }\n\n        var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue);\n        var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());\n\n        var cachedObject =\n            RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(1);\n\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        ChangeHttpContext();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        Task<TestCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new TestCacheItem { Value = cacheValue });\n        }\n\n        var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue);\n\n        ChangeHttpContext();\n        var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue);\n\n        await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());\n\n        var cachedObject =\n            RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n        await RedisDatabase.Received(2).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(2);\n\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var context1 = GetNewContextSubstitute();\n        var context2 = GetNewContextSubstitute();\n\n        string cacheKey = Guid.NewGuid().ToString();\n        int counter = 0;\n        int cacheValue = 1;\n\n        Task<TestCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new TestCacheItem { Value = cacheValue });\n        }\n\n        CurrentHttpContext = context1;\n        var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //First request\n\n        CurrentHttpContext = context2;\n        var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //Second request\n\n        CurrentHttpContext = context1;\n        var item3 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //First request again\n\n        CurrentHttpContext = context2;\n        var item4 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //Second request again\n\n        await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());\n\n        var cachedObject =\n            RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));\n\n        await RedisDatabase.Received(2).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);\n\n        counter.ShouldBe(2);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n\n        item3.ShouldNotBe(null);\n        item3.Value.ShouldBe(cacheValue);\n\n        item4.ShouldNotBe(null);\n        item4.Value.ShouldBe(cacheValue);\n    }"
      }
    ]
  },
  {
    "file": "AbpPerRequestRedisCacheTestModule.cs",
    "methods": []
  },
  {
    "file": "AbpPerRequestRedisCache_Test.cs",
    "methods": [
      {
        "name": "Cache_Options_Configuration_Test",
        "body": "{\n        _normalRedisCache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(12));\n        _perRequestRedisCache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(24));\n    }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetUserPermissionCache",
        "body": "{\n        var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();\n        var rolePermissionCache = cacheManager.GetUserPermissionCache();\n        rolePermissionCache.Name.ShouldBe(UserPermissionCacheItem.CacheStoreName);\n    }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetRolePermissionCache",
        "body": "{\n        var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();\n        var rolePermissionCache = cacheManager.GetRolePermissionCache();\n        rolePermissionCache.Name.ShouldBe(RolePermissionCacheItem.CacheStoreName);\n    }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetTenantFeatureCache",
        "body": "{\n        var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();\n        var rolePermissionCache = cacheManager.GetTenantFeatureCache();\n        rolePermissionCache.Name.ShouldBe(TenantFeatureCacheItem.CacheStoreName);\n    }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetEditionFeatureCache",
        "body": "{\n        var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();\n        var rolePermissionCache = cacheManager.GetEditionFeatureCache();\n        rolePermissionCache.Name.ShouldBe(EditionfeatureCacheItem.CacheStoreName);\n    }"
      },
      {
        "name": "Should_Not_Change_Normal_Redis_Cache",
        "body": "{\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        MyCacheItem GetCacheValue()\n        {\n            counter++;\n            return new MyCacheItem { Value = cacheValue };\n        }\n\n        RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n\n        var item = _normalRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>()); //redis cache tries to get value two times if value not exists see AbpCacheBase<TKey, TValue>.Get(TKey key, Func<TKey, TValue> factory)\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);\n\n        var item1 = _normalRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>());\n\n        var item2 = _normalRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(4).StringGet(Arg.Any<RedisKey>());\n\n        // Should still be one received calls\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n\n        _normalRedisCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Should_Request_Once_For_Same_Context",
        "body": "{\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        MyCacheItem GetCacheValue()\n        {\n            counter++;\n            return new MyCacheItem { Value = cacheValue };\n        }\n\n        var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n\n        RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        _perRequestRedisCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Should_Request_Again_For_Different_Contexts",
        "body": "{\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        MyCacheItem GetCacheValue()\n        {\n            counter++;\n            return new MyCacheItem { Value = cacheValue };\n        }\n\n        RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n\n        ChangeHttpContext();\n\n        var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);\n\n        ChangeHttpContext();\n        var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());\n\n        ChangeHttpContext();\n        var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>());\n\n        // Should still be one received calls\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Should_Work_With_Null_Contexts",
        "body": "{\n        CurrentHttpContext = null;\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        MyCacheItem GetCacheValue()\n        {\n            counter++;\n            return new MyCacheItem { Value = cacheValue };\n        }\n\n        RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n\n        var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);\n\n        var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);\n        RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>()); //since _currentHttpContext is null it should go to the redisdb again\n\n        var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue); //since _currentHttpContext is null it should go to the redisdb again\n        RedisDatabase.Received(4).StringGet(Arg.Any<RedisKey>());\n\n        // Should still be one received calls\n        RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        Task<MyCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new MyCacheItem { Value = cacheValue });\n        }\n\n        var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n\n        await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        (await _perRequestRedisCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        Task<MyCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new MyCacheItem { Value = cacheValue });\n        }\n\n        RedisDatabase.StringSetAsync(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n\n        ChangeHttpContext();\n\n        var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        RedisDatabase.StringGetAsync(Arg.Any<RedisKey>()).Returns(Task.FromResult(cachedObject));\n\n        ChangeHttpContext();\n        var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());\n\n        ChangeHttpContext();\n        var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(3).StringGetAsync(Arg.Any<RedisKey>());\n\n        // Should still be one received calls\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        CurrentHttpContext = null;\n        RedisDatabase.ClearReceivedCalls();\n\n        string cacheKey = \"Test\";\n        int cacheValue = 1;\n\n        int counter = 0;\n\n        Task<MyCacheItem> GetCacheValue()\n        {\n            counter++;\n            return Task.FromResult(new MyCacheItem { Value = cacheValue });\n        }\n\n        RedisDatabase.StringSetAsync(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);\n\n        var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));\n\n        var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        RedisDatabase.StringGetAsync(Arg.Any<RedisKey>()).Returns(Task.FromResult(cachedObject));\n\n        var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);\n        await RedisDatabase.Received(3).StringGetAsync(Arg.Any<RedisKey>()); //since _currentHttpContext is null it should go to the redisdb again\n\n        var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue); //since _currentHttpContext is null it should go to the redisdb again\n        await RedisDatabase.Received(4).StringGetAsync(Arg.Any<RedisKey>());\n\n        // Should still be one received calls\n        await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());\n\n        counter.ShouldBe(1);\n        item.ShouldNotBe(null);\n        item.Value.ShouldBe(cacheValue);\n        item1.ShouldNotBe(null);\n        item1.Value.ShouldBe(cacheValue);\n        item2.ShouldNotBe(null);\n        item2.Value.ShouldBe(cacheValue);\n    }"
      }
    ]
  },
  {
    "file": "PerRequestRedisCacheTestsBase.cs",
    "methods": []
  },
  {
    "file": "AbpEntityFrameworkCoreEfPlusExtensions_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            // Act\n            await _roleRepository.BatchDeleteAsync(r => r.Id > 0);\n\n            // Assert\n            var roleCount = await _roleRepository.CountAsync();\n            roleCount.ShouldBe(0);\n\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                // Assert\n                roleCount = await _roleRepository.CountAsync();\n                roleCount.ShouldBe(1);\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _roleRepository.BatchDeleteAsync(e => e.Name != \"ADMIN\");\n\n            var roleCount = await _roleRepository.CountAsync();\n            roleCount.ShouldBe(1);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _roleRepository.BatchDeleteAsync(r => r.Id > 0);\n\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                var admin = await _roleRepository.FirstOrDefaultAsync(r => r.Name == \"Admin\");\n                admin.ShouldNotBeNull();\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))\n            {\n                await _roleRepository.BatchDeleteAsync(r => r.Id > 0);\n\n                var roleCount = await _roleRepository.CountAsync();\n                roleCount.ShouldBe(0);\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            // Act\n            await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);\n\n            // Assert\n            var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");\n            roleCount.ShouldBe(4);\n\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                // Assert\n                roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");\n                roleCount.ShouldBe(0);\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            // Act\n            await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), e => e.Name != \"ADMIN\");\n\n            // Assert\n            var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");\n            roleCount.ShouldBe(3);\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);\n\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                var admin = await _roleRepository.FirstOrDefaultAsync(r => r.DisplayName == \"Admin\");\n                admin.ShouldNotBeNull();\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))\n            {\n                await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);\n\n                var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");\n                roleCount.ShouldBe(5);\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "Repository_Dynamic_Entity_Registration_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var items = await _customEntityRepository.GetAllListAsync();\n        items.Count.ShouldBe(0);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var items = await _customEntityWithGuidRepository.GetAllListAsync();\n        items.Count.ShouldBe(0);\n    }"
      }
    ]
  },
  {
    "file": "Repository_Hard_Delete_Test.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        LoginAsDefaultTenantAdmin();\n\n        var uowManager = Resolve<IUnitOfWorkManager>();\n\n        // Soft-Delete admin\n        using (var uow = uowManager.Begin())\n        {\n            var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");\n            await _roleRepository.DeleteAsync(admin);\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = uowManager.Begin())\n        {\n            var roles = await _roleRepository.GetAllListAsync();\n\n            foreach (var role in roles)\n            {\n                await _roleRepository.HardDeleteAsync(role);\n            }\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = uowManager.Begin())\n        {\n            using (uowManager.Current.DisableFilter(AbpDataFilters.SoftDelete))\n            {\n                var roles = await _roleRepository.GetAllListAsync();\n                roles.Count.ShouldBe(1);\n                roles.First().NormalizedName.ShouldBe(\"ADMIN\");\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        LoginAsDefaultTenantAdmin();\n\n        var uowManager = Resolve<IUnitOfWorkManager>();\n\n        // Soft-Delete admin\n        using (var uow = uowManager.Begin())\n        {\n            var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");\n            await _roleRepository.DeleteAsync(admin);\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = uowManager.Begin())\n        {\n            await _roleRepository.HardDeleteAsync(r => r.Id > 0);\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = uowManager.Begin())\n        {\n            using (uowManager.Current.DisableFilter(AbpDataFilters.SoftDelete))\n            {\n                var roles = await _roleRepository.GetAllListAsync();\n                roles.Count.ShouldBe(1);\n                roles.First().NormalizedName.ShouldBe(\"ADMIN\");\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");\n\n        Assert.Throws<AbpException>(() => _roleRepository.HardDelete(admin));\n        Assert.Throws<AbpException>(() => _roleRepository.HardDelete(u => u.Id > 0));\n\n        await Assert.ThrowsAsync<AbpException>(async () => await _roleRepository.HardDeleteAsync(admin));\n        await Assert.ThrowsAsync<AbpException>(async () => await _roleRepository.HardDeleteAsync(u => u.Id > 0));\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        LoginAsDefaultTenantAdmin();\n\n        var uowManager = Resolve<IUnitOfWorkManager>();\n\n        UsingDbContext(context =>\n        {\n            context.Categories.Add(new Category\n            {\n                Id = 42,\n                DisplayName = \"Soft Drinks\"\n            });\n        });\n\n        using (var uow = uowManager.Begin())\n        {\n            await _roleRepository.HardDeleteAsync(r => r.Id > 0);\n\n            UsingDbContext(context =>\n            {\n                var category = context.Categories.Single(e => e.Id == 42);\n                context.Categories.Remove(category);\n            });\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "RoleManager_StaticRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        LocalIocManager.Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        await CreateTestStaticRoles();\n\n        var tenant = await GetTenantAsync(\"Tenant1\");\n        AbpSession.TenantId = tenant.Id;\n\n        var adminRole = await _roleManager.GetRoleByNameAsync(\"admin\");\n\n        //Default granted permissions\n        (await _roleManager.IsGrantedAsync(adminRole.Id, \"Permission1\")).ShouldBe(false);\n        (await _roleManager.IsGrantedAsync(adminRole.Id, \"Permission2\")).ShouldBe(false);\n    }"
      }
    ]
  },
  {
    "file": "RoleStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var role = await _roleStore.FindByNameAsync(\"ADMIN\");\n            role.ShouldNotBeNull();\n\n            var claims = await _roleStore.GetClaimsAsync(role);\n\n            claims.ShouldNotBeNull();\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "Session_Override_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        await _userStore.CreateAsync(new User\n        {\n            Name = \"john\",\n            Surname = \"nash\",\n            UserName = \"john\",\n            NormalizedUserName = \"JOHN\",\n            EmailAddress = \"john.nash@acme.com\",\n            NormalizedEmailAddress = \"JOHN.NASH@ACME.COM\",\n            Password = \"123qwe\"\n        });\n\n        // Arrange\n        using (var uowManager = LocalIocManager.ResolveAsDisposable<IUnitOfWorkManager>())\n        {\n            using (var uow = uowManager.Object.Begin(new UnitOfWorkOptions()))\n            {\n                using (AbpSession.Use(1, 3))\n                {\n                    await _restaurantRepository.InsertAsync(new Restaurant\n                    {\n                        Name = \"Carluccio's\",\n                        Cuisine = \"Italian\"\n                    });\n\n                    await uow.CompleteAsync();\n                }\n            }\n        }\n\n        // Assert\n        await WithUnitOfWorkAsync(async () =>\n        {\n            var restaurant = await _restaurantRepository.FirstOrDefaultAsync(r => r.Name == \"Carluccio's\");\n            restaurant.ShouldNotBeNull();\n            restaurant.TenantId.ShouldBe(1);\n            restaurant.CreatorUserId.ShouldBe(3);\n        });\n    }"
      }
    ]
  },
  {
    "file": "FeatureValueStoreTests.cs",
    "methods": [
      {
        "name": "GetTenantFeatureCacheItem_ShouldEnableFilterMayHaveTenant_Test",
        "body": "{\n        // Arrange\n        var tenant = new Tenant(\"TestTenant\", \"TestTenant\");\n        _tenantRepository.Insert(tenant);\n\n        var tenant2 = new Tenant(\"TestTenant2\", \"TestTenant2\");\n        _tenantRepository.Insert(tenant2);\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            _tenantFeatureRepository.Insert(new TenantFeatureSetting(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\"));\n            _unitOfWorkManager.Current.SaveChanges();\n\n            // Assert (before disable filter)\n            _featureValueStore.GetValueOrNull(tenant.Id, AppFeatures.SimpleBooleanFeature).ShouldBe(\"true\");\n            _featureValueStore.GetValueOrNull(tenant2.Id, AppFeatures.SimpleBooleanFeature).ShouldBeNull();\n\n            // Act (clear cache and disable filter)\n            _cacheManager.GetTenantFeatureCache().Clear();\n\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))\n            {\n                // Assert (after disable filter)\n                _featureValueStore.GetValueOrNull(tenant.Id, AppFeatures.SimpleBooleanFeature).ShouldBe(\"true\");\n                _featureValueStore.GetValueOrNull(tenant2.Id, AppFeatures.SimpleBooleanFeature).ShouldBeNull();\n            }\n\n            uow.Complete();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var tenant = new Tenant(\"TestTenant\", \"TestTenant\");\n        await _tenantRepository.InsertAsync(tenant);\n\n        var tenant2 = new Tenant(\"TestTenant2\", \"TestTenant2\");\n        await _tenantRepository.InsertAsync(tenant2);\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _tenantFeatureRepository.InsertAsync(new TenantFeatureSetting(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\"));\n            await _unitOfWorkManager.Current.SaveChangesAsync();\n\n            // Assert (before disable filter)\n            (await _featureValueStore.GetValueOrNullAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBe(\"true\");\n            (await _featureValueStore.GetValueOrNullAsync(tenant2.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeNull();\n\n            // Act (clear cache and disable filter)\n            await _cacheManager.GetTenantFeatureCache().ClearAsync();\n\n            using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))\n            {\n                // Assert (after disable filter)\n                (await _featureValueStore.GetValueOrNullAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBe(\"true\");\n                (await _featureValueStore.GetValueOrNullAsync(tenant2.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeNull();\n            }\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "TenantManagerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        const int tenantId = 1;\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);\n        });\n\n        await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"1\");\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);\n        });\n\n        await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"2\");\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);\n        });\n\n        await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"0\");\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        const int tenantId = 1;\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);\n        });\n\n        await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"1\");\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);\n        });\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                await _tenantManager.ResetAllFeaturesAsync(tenantId);\n            }\n\n            await uow.CompleteAsync();\n        }\n\n        UsingDbContext(tenantId, context =>\n        {\n            context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var tenant = new Tenant(\"TestTenant\", \"TestTenant\");\n        await _tenantManager.CreateAsync(tenant);\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _tenantManager.SetFeatureValueAsync(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\");\n            await _unitOfWorkManager.Current.SaveChangesAsync();\n\n            (await _featureChecker.IsEnabledAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeTrue();\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "TestDataBuilder.cs",
    "methods": []
  },
  {
    "file": "TestOrganizationUnitsBuilder.cs",
    "methods": []
  },
  {
    "file": "TestRolesBuilder.cs",
    "methods": []
  },
  {
    "file": "TestServiceCollectionRegistrar.cs",
    "methods": []
  },
  {
    "file": "SecurityStampValidator_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_AbpSecurityStampValidator",
        "body": "{\n        (Resolve<ISecurityStampValidator>() is AbpSecurityStampValidator<Tenant, Role, User>).ShouldBeTrue();\n        (Resolve<SecurityStampValidator<User>>() is AbpSecurityStampValidator<Tenant, Role, User>).ShouldBeTrue();\n    }"
      }
    ]
  },
  {
    "file": "UserAppService_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var users = await _userAppService.GetAllAsync(new PagedAndSortedResultRequestDto());\n        users.TotalCount.ShouldBeGreaterThan(0);\n        users.Items.Count.ShouldBeGreaterThan(0);\n    }"
      }
    ]
  },
  {
    "file": "UserLogin_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = false;\n        AbpSession.TenantId = 1;\n\n        var loginResult = await _logInManager.LoginAsync(\"user1\", \"123qwe\");\n        loginResult.Result.ShouldBe(AbpLoginResultType.Success);\n        loginResult.User.Name.ShouldBe(\"User\");\n        loginResult.Identity.ShouldNotBe(null);\n\n        UsingDbContext(context =>\n        {\n            context.UserLoginAttempts.Count().ShouldBe(1);\n            context.UserLoginAttempts.FirstOrDefault(a =>\n                a.TenantId == AbpSession.TenantId &&\n                a.UserId == loginResult.User.Id &&\n                a.UserNameOrEmailAddress == \"user1\" &&\n                a.Result == AbpLoginResultType.Success\n                ).ShouldNotBeNull();\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = false;\n\n        var loginResult = await _logInManager.LoginAsync(\"wrongUserName\", \"asdfgh\");\n        loginResult.Result.ShouldBe(AbpLoginResultType.InvalidUserNameOrEmailAddress);\n        loginResult.User.ShouldBe(null);\n        loginResult.Identity.ShouldBe(null);\n\n        UsingDbContext(context =>\n        {\n            context.UserLoginAttempts.Count().ShouldBe(1);\n            context.UserLoginAttempts.FirstOrDefault(a =>\n                a.UserNameOrEmailAddress == \"wrongUserName\" &&\n                a.Result == AbpLoginResultType.InvalidUserNameOrEmailAddress\n                ).ShouldNotBeNull();\n        });\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n        AbpSession.TenantId = 1;\n\n        var loginResult = await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName);\n        loginResult.Result.ShouldBe(AbpLoginResultType.Success);\n        loginResult.User.Name.ShouldBe(\"User\");\n        loginResult.Identity.ShouldNotBe(null);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        //Set session\n        AbpSession.TenantId = 1;\n        AbpSession.UserId = 1;\n\n        //Email confirmation is disabled as default\n        (await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName)).Result.ShouldBe(AbpLoginResultType.Success);\n\n        //Change configuration\n        await Resolve<ISettingManager>().ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin, \"true\");\n\n        //Email confirmation is enabled now\n        (await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName)).Result.ShouldBe(AbpLoginResultType.UserEmailIsNotConfirmed);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        //Set session\n        AbpSession.TenantId = 1;\n        AbpSession.UserId = 1;\n\n        var loginResult = await _logInManager.LoginAsync(\"userOwner\", \"123qwe\", Tenant.DefaultTenantName);\n        loginResult.Result.ShouldBe(AbpLoginResultType.Success);\n        loginResult.User.Name.ShouldBe(\"Owner\");\n        loginResult.Identity.ShouldNotBe(null);\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        //Set session\n        AbpSession.TenantId = 1;\n        AbpSession.UserId = 1;\n\n        var loginResult = await _logInManager.LoginAsync(\"forbidden-user\", \"123qwe\", Tenant.DefaultTenantName);\n        loginResult.Result.ShouldBe(AbpLoginResultType.FailedForOtherReason);\n\n        var localizationContext = LocalIocManager.IocContainer.Resolve<ILocalizationContext>();\n        loginResult.GetFailReason(localizationContext).ShouldBe(\"[Forbidden user]\");\n\n        UsingDbContext(context =>\n        {\n            var count = context.UserLoginAttempts.Count(e => e.FailReason == \"[Forbidden user]\");\n            count.ShouldBeEquivalentTo(1);\n        });\n    }"
      }
    ]
  },
  {
    "file": "UserManager_AddToRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = new User\n            {\n                TenantId = AbpSession.TenantId,\n                UserName = \"user1\",\n                Name = \"John\",\n                Surname = \"Doe\",\n                EmailAddress = \"user1@aspnetboilerplate.com\",\n                IsEmailConfirmed = true,\n                Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe\n                                                                                                   // IsLockoutEnabled = isLockoutEnabled\n            };\n\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            await userManager.CreateAsync(user);\n            await userManager.AddToRoleAsync(user, \"ADMIN\");\n\n            user.Roles.Count.ShouldBe(1);\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "UserManager_DeleteUser_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var user = new User\n        {\n            TenantId = AbpSession.TenantId,\n            UserName = \"user1\",\n            Name = \"John\",\n            Surname = \"Doe\",\n            EmailAddress = \"user1@aspnetboilerplate.com\",\n            IsEmailConfirmed = true,\n            Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe\n        };\n\n        await WithUnitOfWorkAsync(async () =>\n        {\n            //Add user\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            await userManager.CreateAsync(user);\n            await userManager.AddToRoleAsync(user, \"ADMIN\");\n            user.Roles.Count.ShouldBe(1);\n\n            //Add user login\n            var userLoginRepository = Resolve<IRepository<UserLogin, long>>();\n            await userLoginRepository.InsertAsync(\n                new UserLogin(\n                    user.TenantId,\n                    user.Id,\n                    \"TestLoginProvider\",\n                    \"TestLoginProviderKey\"\n                )\n            );\n        });\n\n        await WithUnitOfWorkAsync(async () =>\n        {\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            var userLoginRepository = Resolve<IRepository<UserLogin, long>>();\n\n            var isLoginInserted = await userLoginRepository.GetAll().AnyAsync(userLogin =>\n                userLogin.UserId == user.Id &&\n                userLogin.TenantId == user.TenantId\n            );\n            isLoginInserted.ShouldBeTrue();\n\n            //delete user\n            await userManager.DeleteAsync(user);\n        });\n\n        await WithUnitOfWorkAsync(async () =>\n        {\n            var userLoginRepository = Resolve<IRepository<UserLogin, long>>();\n\n            //user login should be deleted\n            var isUserLoginExists = await userLoginRepository.GetAll().AnyAsync(userLogin =>\n                userLogin.UserId == user.Id &&\n                userLogin.TenantId == user.TenantId\n            );\n            isUserLoginExists.ShouldBeFalse();\n        });\n    }"
      }
    ]
  },
  {
    "file": "UserManager_Lockout_Tests.cs",
    "methods": []
  },
  {
    "file": "UserManager_Options_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        var userManager = LocalIocManager.Resolve<UserManager>();\n        userManager.Options.Tokens.ProviderMap.Count.ShouldBeGreaterThan(0);\n\n        await userManager.InitializeOptionsAsync(1);\n        userManager.Options.Tokens.ProviderMap.Count.ShouldBeGreaterThan(0);\n    }"
      }
    ]
  },
  {
    "file": "UserManager_Permission_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        var defaultTenantId = 1;\n        var user = UsingDbContext(defaultTenantId, context =>\n        {\n            return context.Users.Single(f => f.TenantId == defaultTenantId && f.UserName == AbpUserBase.AdminUserName);\n        });\n\n        await _userManager.GrantPermissionAsync(user, _permissionManager.GetPermission(AppPermissions.TestPermission));\n\n        var isGranted = await _permissionChecker.IsGrantedAsync(user.ToUserIdentifier(), AppPermissions.TestPermission);\n        isGranted.ShouldBe(true);\n\n        // Simulate background jobs\n        LoginAsHostAdmin();\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.SetTenantId(user.TenantId))\n            {\n                isGranted = await _permissionChecker.IsGrantedAsync(user.ToUserIdentifier(), AppPermissions.TestPermission);\n                isGranted.ShouldBe(true);\n            }\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        Resolve<IMultiTenancyConfig>().IsEnabled = true;\n\n        // Arrange\n        var defaultTenantId = 1;\n        var organizationUnit = UsingDbContext(defaultTenantId, context =>\n        {\n            return context.OrganizationUnits.Single(ou => ou.TenantId == defaultTenantId && ou.DisplayName == \"OU1\");\n        });\n        var permission = _permissionManager.GetPermission(AppPermissions.TestPermission);\n\n        LoginAsDefaultTenantAdmin();\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            var role = await _roleManager.GetRoleByNameAsync(\"MANAGER\");\n            await _roleManager.GrantPermissionAsync(role, permission);\n            await _roleManager.AddToOrganizationUnitAsync(role, organizationUnit);\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            var newUser = new User\n            {\n                TenantId = AbpSession.TenantId,\n                UserName = \"user1\",\n                Name = \"John\",\n                Surname = \"Doe\",\n                EmailAddress = \"user1@aspnetboilerplate.com\",\n                IsEmailConfirmed = true,\n                Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe\n            };\n\n            await _userManager.CreateAsync(newUser);\n\n            await uow.CompleteAsync();\n        }\n\n        //Actual\n        var user = UsingDbContext(defaultTenantId, context =>\n        {\n            return context.Users.Single(u => u.TenantId == defaultTenantId && u.UserName == \"user1\");\n        });\n\n        (await _userManager.IsInRoleAsync(user, \"MANAGER\")).ShouldBeFalse();\n        (await _userManager.IsInOrganizationUnitAsync(user, organizationUnit)).ShouldBeFalse();\n        (await _userManager.IsGrantedAsync(user, permission)).ShouldBeFalse();\n\n        using (var uow = _unitOfWorkManager.Begin())\n        {\n            await _userManager.AddToOrganizationUnitAsync(user, organizationUnit);\n\n            await uow.CompleteAsync();\n        }\n\n        //Assert\n        (await _userManager.IsInRoleAsync(user, \"MANAGER\")).ShouldBeTrue();\n        (await _userManager.IsInOrganizationUnitAsync(user, organizationUnit)).ShouldBeTrue();\n        (await _userManager.IsGrantedAsync(user, permission)).ShouldBeTrue();\n    }"
      }
    ]
  },
  {
    "file": "UserManager_RemoveFromRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            var roleManager = LocalIocManager.Resolve<RoleManager>();\n\n            var adminUser = await userManager.FindByNameAsync(\"admin\");\n            var managerRole = await roleManager.FindByNameAsync(\"MANAGER\");\n\n            await userManager.SetRolesAsync(adminUser, new[] { managerRole.Name });\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var userManager = LocalIocManager.Resolve<UserManager>();\n\n            var adminUser = await userManager.FindByNameAsync(\"admin\");\n\n            await userManager.RemoveFromRolesAsync(adminUser, new[] { \"MANAGER\" });\n\n            var adminRoles = await userManager.GetRolesAsync(adminUser);\n            adminRoles.Count.ShouldBe(0);\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "UserManager_SetRoles_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            var roleManager = LocalIocManager.Resolve<RoleManager>();\n\n            var adminUser = await userManager.FindByNameAsync(\"admin\");\n            var managerRole = await roleManager.FindByNameAsync(\"MANAGER\");\n\n            await userManager.SetRolesAsync(adminUser, new[] { managerRole.Name });\n            await roleManager.DeleteAsync(managerRole);\n\n            await uow.CompleteAsync();\n        }\n\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var userManager = LocalIocManager.Resolve<UserManager>();\n            var roleManager = LocalIocManager.Resolve<RoleManager>();\n\n            var adminUser = await userManager.FindByNameAsync(\"admin\");\n            var useRole = await roleManager.FindByNameAsync(\"user\");\n\n            await userManager.SetRolesAsync(adminUser, new[] { useRole.Name });\n\n            var adminRoles = await userManager.GetRolesAsync(adminUser);\n\n            adminRoles.Count.ShouldBe(1);\n            adminRoles.ShouldContain(x => x == \"User\");\n\n            await uow.CompleteAsync();\n        }\n    }"
      }
    ]
  },
  {
    "file": "UserManager_Tokens_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n            var tokenValidityKey = Guid.NewGuid().ToString();\n            await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow.AddDays(1));\n            var isTokenValidityKeyValid =\n                await _abpUserManager.IsTokenValidityKeyValidAsync(user, tokenValidityKey);\n\n            isTokenValidityKeyValid.ShouldBeTrue();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n            var tokenValidityKey = Guid.NewGuid().ToString();\n            await _abpUserManager.AddTokenValidityKeyAsync(user.ToUserIdentifier(), tokenValidityKey, DateTime.UtcNow.AddDays(1));\n            var isTokenValidityKeyValid = await _abpUserManager.IsTokenValidityKeyValidAsync(\n                user,\n                tokenValidityKey\n            );\n\n            isTokenValidityKeyValid.ShouldBeTrue();\n            await uow.CompleteAsync();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        using (var uow = Resolve<IUnitOfWorkManager>().Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n            var tokenValidityKey = Guid.NewGuid().ToString();\n            await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow);\n            var isTokenValidityKeyValid =\n                await _abpUserManager.IsTokenValidityKeyValidAsync(user, tokenValidityKey);\n\n            isTokenValidityKeyValid.ShouldBeFalse();\n        }\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        var tokenValidityKey = Guid.NewGuid().ToString();\n\n        using (_unitOfWorkManager.Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n\n            await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow.AddDays(1));\n            await _unitOfWorkManager.Current.SaveChangesAsync();\n\n            var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n            allTokens.Count.ShouldBe(1);\n        }\n\n        using (_unitOfWorkManager.Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n\n            await _abpUserManager.RemoveTokenValidityKeyAsync(user, tokenValidityKey);\n            await _unitOfWorkManager.Current.SaveChangesAsync();\n\n            var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n            allTokens.Count.ShouldBe(0);\n        }\n    }"
      }
    ]
  },
  {
    "file": "UserTokenExpirationWorker_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        //Arrange\n        using (_unitOfWorkManager.Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n\n            await _abpUserManager.AddTokenValidityKeyAsync(\n                user,\n                Guid.NewGuid().ToString(),\n                DateTime.UtcNow\n            );\n\n            await _abpUserManager.AddTokenValidityKeyAsync(\n                user,\n                Guid.NewGuid().ToString(),\n                DateTime.UtcNow.AddDays(1)\n            );\n\n            await _abpUserManager.AddTokenValidityKeyAsync(\n                user,\n                Guid.NewGuid().ToString(),\n                DateTime.UtcNow.AddDays(1)\n            );\n\n            await _unitOfWorkManager.Current.SaveChangesAsync();\n\n            var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n            allTokens.Count.ShouldBe(3);\n        }\n\n        using (_unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                var user = await _abpUserManager.FindByNameOrEmailAsync(AbpUserBase.AdminUserName);\n\n                await _abpUserManager.AddTokenValidityKeyAsync(\n                    user,\n                    Guid.NewGuid().ToString(),\n                    DateTime.UtcNow\n                );\n\n                await _abpUserManager.AddTokenValidityKeyAsync(\n                    user,\n                    Guid.NewGuid().ToString(),\n                    DateTime.UtcNow.AddDays(1)\n                );\n\n                await _abpUserManager.AddTokenValidityKeyAsync(\n                    user,\n                    Guid.NewGuid().ToString(),\n                    DateTime.UtcNow.AddDays(1)\n                );\n\n                await _unitOfWorkManager.Current.SaveChangesAsync();\n\n                var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n                allTokens.Count.ShouldBe(3);\n            }\n        }\n\n        //Act\n        _userTokenExpirationWorker.Start();\n\n        //Assert\n        using (_unitOfWorkManager.Begin())\n        {\n            var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());\n            var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n            allTokens.Count.ShouldBe(2);\n        }\n\n        using (_unitOfWorkManager.Begin())\n        {\n            using (_unitOfWorkManager.Current.SetTenantId(null))\n            {\n                var user = await _abpUserManager.FindByNameOrEmailAsync(AbpUserBase.AdminUserName);\n                var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);\n                allTokens.Count.ShouldBe(2);\n            }\n        }\n    }"
      }
    ]
  },
  {
    "file": "TestAppService.cs",
    "methods": []
  },
  {
    "file": "AbpODataDtoControllerPermissionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/ProductsDto\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(\n            Arg.Is<string>(permissionNames => permissionNames == \"GetAllProductsPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/ProductsDto(1)\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(\n            Arg.Is<string>(permissionNames => permissionNames == \"GetProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));\n        var response = await client.PostAsync(\"/odata/ProductsDto\",\n            new StringContent(content, Encoding.UTF8, \"application/json\"));\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"CreateProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));\n        var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/ProductsDto(1)\")\n        {\n            Content = new StringContent(content, Encoding.UTF8, \"application/json\")\n        });\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"UpdateProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.DeleteAsync(\"/odata/ProductsDto(1)\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"DeleteProductPermission\")\n        );\n    }"
      }
    ]
  },
  {
    "file": "AbpODataDtoControllerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/ProductsDto\");\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.OK);\n        var responseBody = await response.Content.ReadAsStringAsync();\n        responseBody.ShouldBe(\"[{\\\"name\\\":\\\"Test product\\\",\\\"price\\\":100,\\\"id\\\":1}]\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/ProductsDto(1)\");\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.OK);\n        var responseBody = await response.Content.ReadAsStringAsync();\n        responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product\\\",\\\"price\\\":100,\\\"id\\\":1}\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));\n        var response = await client.PostAsync(\"/odata/ProductsDto\",\n            new StringContent(content, Encoding.UTF8, \"application/json\"));\n\n        // Assert\n        var responseBody2 = await response.Content.ReadAsStringAsync();\n        response.StatusCode.ShouldBe(HttpStatusCode.Created);\n\n        var createResponse = await client.GetAsync(\"/odata/ProductsDto(2)\");\n        createResponse.StatusCode.ShouldBe(HttpStatusCode.OK);\n        var responseBody = await createResponse.Content.ReadAsStringAsync();\n        responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product2\\\",\\\"price\\\":0,\\\"id\\\":2}\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new ProductCreateInput\n        {\n            Name = \"Test product2\",\n            Price = 150\n        });\n\n        var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/ProductsDto(1)\")\n        {\n            Content = new StringContent(content, Encoding.UTF8, \"application/json\")\n        });\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.NoContent);\n\n        var createResponse = await client.GetAsync(\"/odata/ProductsDto(1)\");\n        createResponse.StatusCode.ShouldBe(HttpStatusCode.OK);\n        var responseBody = await createResponse.Content.ReadAsStringAsync();\n        responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product2\\\",\\\"price\\\":150,\\\"id\\\":1}\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var deleteResponse = await client.DeleteAsync(\"/odata/ProductsDto(1)\");\n\n        // Assert\n        deleteResponse.StatusCode.ShouldBe(HttpStatusCode.NoContent);\n\n        var response = await client.GetAsync(\"/odata/ProductsDto\");\n        response.StatusCode.ShouldBe(HttpStatusCode.OK);\n        var responseBody = await response.Content.ReadAsStringAsync();\n        responseBody.ShouldBe(\"[]\");\n\n    }"
      }
    ]
  },
  {
    "file": "AbpODataEntityControllerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata\");\n        var response2 = await client.GetAsync(\"/odata/$metadata\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"200\"));\n        (await response.Content.ReadAsStringAsync()).ShouldNotContain(\"__abp\");\n\n        response2.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"200\"));\n        (await response2.Content.ReadAsStringAsync()).ShouldNotContain(\"__abp\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/Products\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(\n            Arg.Is<string>(permissionNames => permissionNames == \"GetAllProductsPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/odata/Products(1)\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(\n            Arg.Is<string>(permissionNames => permissionNames == \"GetProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));\n        var response = await client.PostAsync(\"/odata/Products\",\n            new StringContent(content, Encoding.UTF8, \"application/json\"));\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"CreateProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));\n        var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/Products(1)\")\n        {\n            Content = new StringContent(content, Encoding.UTF8, \"application/json\")\n        });\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"UpdateProductPermission\")\n        );\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.DeleteAsync(\"/odata/Products(1)\");\n\n        // Assert\n        response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));\n\n        _permissionChecker.Received().IsGranted(Arg.Is<string>(\n            permissionNames => permissionNames == \"DeleteProductPermission\")\n        );\n    }"
      }
    ]
  },
  {
    "file": "DateTimeFormatterControllerTests.cs",
    "methods": []
  },
  {
    "file": "InputAndOutputDateTimeFormat_Tests.cs",
    "methods": [
      {
        "name": "InputAndOutputDateTimeFormat_Test",
        "body": "{\n        Clock.Provider = ClockProviders.Utc;\n        var resultDate = new DateTime(2016, 04, 13, 08, 58, 10, DateTimeKind.Utc);\n\n        var inputDatetimeFormat = new List<string>()\n            {\n                \"yyyy*MM*dd\",\n                \"yyyy-MM-dd HH:mm:ss\"\n            };\n        var outputDatetimeFormat = \"yyyy*MM-dd HH:mm:ss\";\n\n        var options = new JsonSerializerOptions();\n        options.Converters.Add(new AbpDateTimeConverter(inputDatetimeFormat, outputDatetimeFormat));\n        options.Converters.Add(new AbpNullableDateTimeConverter(inputDatetimeFormat, outputDatetimeFormat));\n\n        var json = JsonSerializer.Serialize(new DateTimeDto()\n        {\n            DateTime1 = resultDate,\n            DateTime2 = resultDate\n        }, options);\n        json.ShouldContain(\"\\\"DateTime1\\\":\\\"2016*04-13 08:58:10\\\"\");\n        json.ShouldContain(\"\\\"DateTime2\\\":\\\"2016*04-13 08:58:10\\\"\");\n\n        json = JsonConvert.SerializeObject(new DateTimeDto()\n        {\n            DateTime1 = resultDate,\n            DateTime2 = resultDate\n        }, new JsonSerializerSettings\n        {\n            ContractResolver = new AbpMvcContractResolver(inputDatetimeFormat, outputDatetimeFormat)\n        });\n        json.ShouldContain(\"\\\"DateTime1\\\":\\\"2016*04-13 08:58:10\\\"\");\n        json.ShouldContain(\"\\\"DateTime2\\\":\\\"2016*04-13 08:58:10\\\"\");\n\n        var dto = JsonSerializer.Deserialize<DateTimeDto>(\n            \"{\\\"DateTime1\\\":\\\"\" + resultDate.ToString(\"yyyy*MM*dd\") + \"\\\",\\\"DateTime2\\\":\\\"\" +\n            resultDate.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"\\\"}\", options);\n\n        dto.DateTime1.ShouldBe(resultDate.Date);\n        dto.DateTime1.Kind.ShouldBe(DateTimeKind.Utc);\n        dto.DateTime2.ShouldBe(resultDate);\n        dto.DateTime2.Value.Kind.ShouldBe(DateTimeKind.Utc);\n\n        dto = JsonConvert.DeserializeObject<DateTimeDto>(\n            \"{\\\"DateTime1\\\":\\\"\" + resultDate.ToString(\"yyyy*MM*dd\") + \"\\\",\\\"DateTime2\\\":\\\"\" +\n            resultDate.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"\\\"}\", new JsonSerializerSettings\n            {\n                ContractResolver = new AbpMvcContractResolver(inputDatetimeFormat, outputDatetimeFormat)\n            });\n\n        dto.DateTime1.ShouldBe(resultDate.Date);\n        dto.DateTime1.Kind.ShouldBe(DateTimeKind.Utc);\n        dto.DateTime2.ShouldBe(resultDate);\n        dto.DateTime2.Value.Kind.ShouldBe(DateTimeKind.Utc);\n    }"
      }
    ]
  },
  {
    "file": "MemoryCacheOptions_Test.cs",
    "methods": [
      {
        "name": "MemoryCacheOption_Size_Test",
        "body": "{\n        var memoryCacheManager = _applicationFactory.Services.GetService(typeof(ICacheManager)) as ICacheManager;\n\n        memoryCacheManager.ShouldNotBeNull();\n        memoryCacheManager.GetType().ShouldBe(typeof(AbpMemoryCacheManager));\n\n        var memoryCache = memoryCacheManager.GetCache(\"Test\");\n\n        memoryCache.ShouldNotBeNull();\n        memoryCache.GetType().ShouldBe(typeof(AbpMemoryCache));\n\n        var memberPath = ReflectionHelper.GetMemberPath(typeof(AbpMemoryCache), \"_memoryCacheOptions\").First();\n        var memoryCacheOptions = memberPath.GetMemberValue(memoryCache) as IOptions<MemoryCacheOptions>;\n        memoryCacheOptions.ShouldNotBeNull();\n        memoryCacheOptions.Value.SizeLimit.ShouldBe(2048);\n    }"
      },
      {
        "name": "MemoryCacheOption_SizeLimit_Test",
        "body": "{\n        new AbpMemoryCache(\"test\", new MemoryCacheOptions\n        {\n            SizeLimit = 256,\n        }).Set(\"test\", \"test\");\n    }"
      }
    ]
  },
  {
    "file": "ModelBindingAppServiceTests.cs",
    "methods": []
  },
  {
    "file": "RazorAuditPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n\n        var response = await client.PostAsync(\"/AuditFilterPageDemo\", new FormUrlEncodedContent(new[]\n        {\n                new KeyValuePair<string, string>(\"Message\",\"My test message\"),\n            }));\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n\n#pragma warning disable 4014\n\n        _auditingStore.Received().SaveAsync(Arg.Is<AuditInfo>(a => a.ServiceName.Contains(\"AuditFilterPageDemo\") && a.Parameters.Contains(\"My test message\")));\n\n#pragma warning restore 4014\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        AbpAspNetCoreDemoModule.ConfigurationAction.Value = configuration =>\n        {\n            configuration.Auditing.SaveReturnValues = true;\n        };\n\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.PostAsync(\"/AuditFilterPageDemo5?handler=String\", null);\n\n        // Assert\n        response.EnsureSuccessStatusCode();\n\n#pragma warning disable 4014\n        _auditingStore.Received().SaveAsync(Arg.Is<AuditInfo>(a =>\n            a.ServiceName.Contains(\"AuditFilterPageDemo5\") &&\n            a.MethodName.Contains(\"String\") &&\n            a.ReturnValue == \"test\"));\n#pragma warning restore 4014\n    }"
      }
    ]
  },
  {
    "file": "RazorExceptionPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/ExceptionFilterPageDemo\");\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.InternalServerError);\n\n        var result = JsonConvert.DeserializeObject<AjaxResponse>(await response.Content.ReadAsStringAsync());\n\n        result.ShouldNotBeNull();\n        result.Error.Message.ShouldBe(\"OnGet\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.PostAsync(\"/ExceptionFilterPageDemo\", new StringContent(\"\"));\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.InternalServerError);\n\n        var result = await response.Content.ReadAsStringAsync();\n\n        result.IndexOf(\"UserFriendlyException: OnPost\",\n            StringComparison.InvariantCultureIgnoreCase).ShouldNotBe(-1);\n    }"
      }
    ]
  },
  {
    "file": "RazorResultPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.GetAsync(\"/ResultFilterPageDemo\");\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.OK);\n\n        var result = await response.Content.ReadAsStringAsync();\n\n        result.ShouldBe(\"OnGet\");\n    }"
      },
      {
        "name": "Task",
        "body": "{\n        // Arrange\n        var client = _factory.CreateClient();\n\n        // Act\n        var response = await client.PostAsync(\"/ResultFilterPageDemo\", new StringContent(\"\"));\n\n        // Assert\n        response.StatusCode.ShouldBe(HttpStatusCode.OK);\n\n        var result = JsonConvert.DeserializeObject<AjaxResponse>(await response.Content.ReadAsStringAsync());\n\n        result.ShouldNotBeNull();\n        result.Success.ShouldBeTrue();\n\n        result.Result.ShouldBe(\"OnPost\");\n    }"
      }
    ]
  },
  {
    "file": "RazorUowPageFilterTests.cs",
    "methods": []
  },
  {
    "file": "SanitizerControllerTests.cs",
    "methods": []
  },
  {
    "file": "AlertsTestController.cs",
    "methods": []
  },
  {
    "file": "ResultWrappingTestController.cs",
    "methods": []
  },
  {
    "file": "SanitizerTestController.cs",
    "methods": []
  },
  {
    "file": "TestController.cs",
    "methods": []
  },
  {
    "file": "RazorPageAntiforgeryTokenTest.cshtml.cs",
    "methods": []
  }
]