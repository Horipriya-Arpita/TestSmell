[
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "ClientDbContextTests.cs",
    "methods": []
  },
  {
    "file": "IntegrationTest.cs",
    "methods": []
  },
  {
    "file": "ClientStoreTests.cs",
    "methods": []
  },
  {
    "file": "DeviceFlowStoreTests.cs",
    "methods": []
  },
  {
    "file": "PersistedGrantStoreTests.cs",
    "methods": []
  },
  {
    "file": "ResourceStoreTests.cs",
    "methods": []
  },
  {
    "file": "TokenCleanupTests.cs",
    "methods": []
  },
  {
    "file": "ApiResourceMappersTests.cs",
    "methods": [
      {
        "name": "AutomapperConfigurationIsValid",
        "body": "{\n            ApiResourceMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ApiResourceMapperProfile>();\n        }"
      },
      {
        "name": "Can_Map",
        "body": "{\n            var model = new ApiResource();\n            var mappedEntity = model.ToEntity();\n            var mappedModel = mappedEntity.ToModel();\n\n            Assert.NotNull(mappedModel);\n            Assert.NotNull(mappedEntity);\n        }"
      },
      {
        "name": "Properties_Map",
        "body": "{\n            var model = new ApiResource()\n            {\n               Description = \"description\",\n               DisplayName = \"displayname\",\n               Name = \"foo\",\n               Scopes = { \"foo1\", \"foo2\" },\n               Enabled = false\n            };\n\n\n            var mappedEntity = model.ToEntity();\n\n            mappedEntity.Scopes.Count.Should().Be(2);\n            var foo1 = mappedEntity.Scopes.FirstOrDefault(x => x.Scope == \"foo1\");\n            foo1.Should().NotBeNull();\n            var foo2 = mappedEntity.Scopes.FirstOrDefault(x => x.Scope == \"foo2\");\n            foo2.Should().NotBeNull();\n            \n\n            var mappedModel = mappedEntity.ToModel();\n            \n            mappedModel.Description.Should().Be(\"description\");\n            mappedModel.DisplayName.Should().Be(\"displayname\");\n            mappedModel.Enabled.Should().BeFalse();\n            mappedModel.Name.Should().Be(\"foo\");\n        }"
      },
      {
        "name": "missing_values_should_use_defaults",
        "body": "{\n            var entity = new IdentityServer4.EntityFramework.Entities.ApiResource\n            {\n                Secrets = new System.Collections.Generic.List<Entities.ApiResourceSecret>\n                {\n                    new Entities.ApiResourceSecret\n                    {\n                    }\n                }\n            };\n\n            var def = new ApiResource\n            {\n                ApiSecrets = { new Models.Secret(\"foo\") }\n            };\n\n            var model = entity.ToModel();\n            model.ApiSecrets.First().Type.Should().Be(def.ApiSecrets.First().Type);\n        }"
      }
    ]
  },
  {
    "file": "ClientMappersTests.cs",
    "methods": [
      {
        "name": "AutomapperConfigurationIsValid",
        "body": "{\n            ClientMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ClientMapperProfile>();\n        }"
      },
      {
        "name": "Can_Map",
        "body": "{\n            var model = new Client();\n            var mappedEntity = model.ToEntity();\n            var mappedModel = mappedEntity.ToModel();\n\n            Assert.NotNull(mappedModel);\n            Assert.NotNull(mappedEntity);\n        }"
      },
      {
        "name": "Properties_Map",
        "body": "{\n            var model = new Client()\n            {\n                Properties =\n                {\n                    {\"foo1\", \"bar1\"},\n                    {\"foo2\", \"bar2\"},\n                }\n            };\n\n\n            var mappedEntity = model.ToEntity();\n\n            mappedEntity.Properties.Count.Should().Be(2);\n            var foo1 = mappedEntity.Properties.FirstOrDefault(x => x.Key == \"foo1\");\n            foo1.Should().NotBeNull();\n            foo1.Value.Should().Be(\"bar1\");\n            var foo2 = mappedEntity.Properties.FirstOrDefault(x => x.Key == \"foo2\");\n            foo2.Should().NotBeNull();\n            foo2.Value.Should().Be(\"bar2\");\n\n\n\n            var mappedModel = mappedEntity.ToModel();\n\n            mappedModel.Properties.Count.Should().Be(2);\n            mappedModel.Properties.ContainsKey(\"foo1\").Should().BeTrue();\n            mappedModel.Properties.ContainsKey(\"foo2\").Should().BeTrue();\n            mappedModel.Properties[\"foo1\"].Should().Be(\"bar1\");\n            mappedModel.Properties[\"foo2\"].Should().Be(\"bar2\");\n        }"
      },
      {
        "name": "duplicates_properties_in_db_map",
        "body": "{\n            var entity = new IdentityServer4.EntityFramework.Entities.Client\n            {\n                Properties = new System.Collections.Generic.List<Entities.ClientProperty>()\n                {\n                    new Entities.ClientProperty{Key = \"foo1\", Value = \"bar1\"},\n                    new Entities.ClientProperty{Key = \"foo1\", Value = \"bar2\"},\n                }\n            };\n\n            Action modelAction = () => entity.ToModel();\n            modelAction.Should().Throw<Exception>();\n        }"
      },
      {
        "name": "missing_values_should_use_defaults",
        "body": "{\n            var entity = new IdentityServer4.EntityFramework.Entities.Client\n            {\n                ClientSecrets = new System.Collections.Generic.List<Entities.ClientSecret>\n                {\n                    new Entities.ClientSecret\n                    {\n                    }\n                }\n            };\n\n            var def = new Client\n            {\n                ClientSecrets = { new Models.Secret(\"foo\") }\n            };\n\n            var model = entity.ToModel();\n            model.ProtocolType.Should().Be(def.ProtocolType);\n            model.ClientSecrets.First().Type.Should().Be(def.ClientSecrets.First().Type);\n        }"
      }
    ]
  },
  {
    "file": "IdentityResourcesMappersTests.cs",
    "methods": [
      {
        "name": "IdentityResourceAutomapperConfigurationIsValid",
        "body": "{\n            IdentityResourceMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<IdentityResourceMapperProfile>();\n        }"
      },
      {
        "name": "CanMapIdentityResources",
        "body": "{\n            var model = new IdentityResource();\n            var mappedEntity = model.ToEntity();\n            var mappedModel = mappedEntity.ToModel();\n\n            Assert.NotNull(mappedModel);\n            Assert.NotNull(mappedEntity);\n        }"
      }
    ]
  },
  {
    "file": "PersistedGrantMappersTests.cs",
    "methods": [
      {
        "name": "PersistedGrantAutomapperConfigurationIsValid",
        "body": "{\n            PersistedGrantMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<PersistedGrantMapperProfile>();\n        }"
      },
      {
        "name": "CanMap",
        "body": "{\n            var model = new PersistedGrant()\n            {\n                ConsumedTime = new System.DateTime(2020, 02, 03, 4, 5, 6)\n            };\n            \n            var mappedEntity = model.ToEntity();\n            mappedEntity.ConsumedTime.Value.Should().Be(new System.DateTime(2020, 02, 03, 4, 5, 6));\n            \n            var mappedModel = mappedEntity.ToModel();\n            mappedModel.ConsumedTime.Value.Should().Be(new System.DateTime(2020, 02, 03, 4, 5, 6));\n\n            Assert.NotNull(mappedModel);\n            Assert.NotNull(mappedEntity);\n        }"
      }
    ]
  },
  {
    "file": "ScopeMappersTests.cs",
    "methods": [
      {
        "name": "ScopeAutomapperConfigurationIsValid",
        "body": "{\n            ScopeMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ScopeMapperProfile>();\n        }"
      },
      {
        "name": "CanMapScope",
        "body": "{\n            var model = new ApiScope();\n            var mappedEntity = model.ToEntity();\n            var mappedModel = mappedEntity.ToModel();\n\n            Assert.NotNull(mappedModel);\n            Assert.NotNull(mappedEntity);\n        }"
      },
      {
        "name": "Properties_Map",
        "body": "{\n            var model = new ApiScope()\n            {\n                Description = \"description\",\n                DisplayName = \"displayname\",\n                Name = \"foo\",\n                UserClaims = { \"c1\", \"c2\" },\n                Properties = {\n                    { \"x\", \"xx\" },\n                    { \"y\", \"yy\" },\n               },\n                Enabled = false\n            };\n\n\n            var mappedEntity = model.ToEntity();\n            mappedEntity.Description.Should().Be(\"description\");\n            mappedEntity.DisplayName.Should().Be(\"displayname\");\n            mappedEntity.Name.Should().Be(\"foo\");\n\n            mappedEntity.UserClaims.Count.Should().Be(2);\n            mappedEntity.UserClaims.Select(x => x.Type).Should().BeEquivalentTo(new[] { \"c1\", \"c2\" });\n            mappedEntity.Properties.Count.Should().Be(2);\n            mappedEntity.Properties.Should().Contain(x => x.Key == \"x\" && x.Value == \"xx\");\n            mappedEntity.Properties.Should().Contain(x => x.Key == \"y\" && x.Value == \"yy\");\n\n\n            var mappedModel = mappedEntity.ToModel();\n\n            mappedModel.Description.Should().Be(\"description\");\n            mappedModel.DisplayName.Should().Be(\"displayname\");\n            mappedModel.Enabled.Should().BeFalse();\n            mappedModel.Name.Should().Be(\"foo\");\n            mappedModel.UserClaims.Count.Should().Be(2);\n            mappedModel.UserClaims.Should().BeEquivalentTo(new[] { \"c1\", \"c2\" });\n            mappedModel.Properties.Count.Should().Be(2);\n            mappedModel.Properties[\"x\"].Should().Be(\"xx\");\n            mappedModel.Properties[\"y\"].Should().Be(\"yy\");\n        }"
      }
    ]
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "TestOperationalStoreNotification.cs",
    "methods": []
  },
  {
    "file": "IntegrationTest.cs",
    "methods": []
  },
  {
    "file": "CorsPolicyServiceTests.cs",
    "methods": []
  },
  {
    "file": "TestUsers.cs",
    "methods": []
  },
  {
    "file": "IntrospectionEndpoint.cs",
    "methods": []
  },
  {
    "file": "IntrospectionResult.cs",
    "methods": []
  },
  {
    "file": "TokenIntrospectionFailureEvent.cs",
    "methods": []
  },
  {
    "file": "TokenIntrospectionSuccessEvent.cs",
    "methods": []
  },
  {
    "file": "IntrospectionResponseGenerator.cs",
    "methods": []
  },
  {
    "file": "IIntrospectionResponseGenerator.cs",
    "methods": []
  },
  {
    "file": "TestUser.cs",
    "methods": []
  },
  {
    "file": "TestUserProfileService.cs",
    "methods": []
  },
  {
    "file": "TestUserResourceOwnerPasswordValidator.cs",
    "methods": []
  },
  {
    "file": "TestUserStore.cs",
    "methods": []
  },
  {
    "file": "IntrospectionRequestValidator.cs",
    "methods": []
  },
  {
    "file": "IIntrospectionRequestValidator.cs",
    "methods": []
  },
  {
    "file": "IntrospectionRequestValidationResult.cs",
    "methods": []
  },
  {
    "file": "TestCustomTokenRequestValidator.cs",
    "methods": []
  },
  {
    "file": "TestCert.cs",
    "methods": []
  },
  {
    "file": "ClientAuthenticationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n\n            _pipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _pipeline.CreateAuthorizeUrl(\n                           clientId: \"code_pipeline.Client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",\n                           nonce: nonce);\n            var response = await _pipeline.BrowserClient.GetAsync(url);\n\n            var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());\n            authorization.Code.Should().NotBeNull();\n\n            var code = authorization.Code;\n\n            // backchannel client\n            var wrapper = new MessageHandlerWrapper(_pipeline.Handler);\n            var tokenClient = new HttpClient(wrapper);\n            var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest\n            {\n                Address = IdentityServerPipeline.TokenEndpoint,\n                ClientId = \"code_pipeline.Client\",\n                ClientSecret = \"secret\",\n\n                Code = code,\n                RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"\n            });\n\n            tokenResult.IsError.Should().BeFalse();\n            tokenResult.HttpErrorReason.Should().Be(\"OK\");\n            tokenResult.TokenType.Should().Be(\"Bearer\");\n            tokenResult.AccessToken.Should().NotBeNull();\n            tokenResult.ExpiresIn.Should().BeGreaterThan(0);\n            tokenResult.IdentityToken.Should().NotBeNull();\n\n            wrapper.Response.Headers.CacheControl.NoCache.Should().BeTrue();\n            wrapper.Response.Headers.CacheControl.NoStore.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n\n            _pipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _pipeline.CreateAuthorizeUrl(\n                           clientId: \"code_pipeline.Client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",\n                           nonce: nonce);\n            var response = await _pipeline.BrowserClient.GetAsync(url);\n\n            var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());\n            authorization.Code.Should().NotBeNull();\n\n            var code = authorization.Code;\n\n            // backchannel client\n            var wrapper = new MessageHandlerWrapper(_pipeline.Handler);\n            var tokenClient = new HttpClient(wrapper);\n            var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest\n            {\n                Address = IdentityServerPipeline.TokenEndpoint,\n                ClientId = \"code_pipeline.Client\",\n                ClientSecret = \"secret\",\n                ClientCredentialStyle = ClientCredentialStyle.PostBody,\n\n                Code = code,\n                RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"\n            });\n\n            tokenResult.IsError.Should().BeFalse();\n            tokenResult.HttpErrorReason.Should().Be(\"OK\");\n            tokenResult.TokenType.Should().Be(\"Bearer\");\n            tokenResult.AccessToken.Should().NotBeNull();\n            tokenResult.ExpiresIn.Should().BeGreaterThan(0);\n            tokenResult.IdentityToken.Should().NotBeNull();\n        }"
      }
    ]
  },
  {
    "file": "CodeFlowTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n\n            _pipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _pipeline.CreateAuthorizeUrl(\n                           clientId: \"code_pipeline.Client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",\n                           nonce: nonce);\n            var response = await _pipeline.BrowserClient.GetAsync(url);\n\n            var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());\n            authorization.Code.Should().NotBeNull();\n\n            var code = authorization.Code;\n\n            // backchannel client\n            var wrapper = new MessageHandlerWrapper(_pipeline.Handler);\n            var tokenClient = new HttpClient(wrapper);\n            var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest\n            {\n                Address = IdentityServerPipeline.TokenEndpoint,\n                ClientId = \"code_pipeline.Client\",\n                ClientSecret = \"secret\",\n\n                Code = code,\n                RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"\n            });\n\n            tokenResult.IsError.Should().BeFalse();\n            tokenResult.HttpErrorReason.Should().Be(\"OK\");\n            tokenResult.TokenType.Should().Be(\"Bearer\");\n            tokenResult.AccessToken.Should().NotBeNull();\n            tokenResult.ExpiresIn.Should().BeGreaterThan(0);\n            tokenResult.IdentityToken.Should().NotBeNull();\n\n            var token = new JwtSecurityToken(tokenResult.IdentityToken);\n            \n            var s_hash = token.Claims.FirstOrDefault(c => c.Type == \"s_hash\");\n            s_hash.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n\n            _pipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _pipeline.CreateAuthorizeUrl(\n                           clientId: \"code_pipeline.Client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",\n                           state: \"state\",\n                           nonce: nonce);\n            var response = await _pipeline.BrowserClient.GetAsync(url);\n\n            var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());\n            authorization.Code.Should().NotBeNull();\n\n            var code = authorization.Code;\n\n            // backchannel client\n            var wrapper = new MessageHandlerWrapper(_pipeline.Handler);\n            var tokenClient = new HttpClient(wrapper);\n            var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest\n            {\n                Address = IdentityServerPipeline.TokenEndpoint,\n                ClientId = \"code_pipeline.Client\",\n                ClientSecret = \"secret\",\n\n                Code = code,\n                RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"\n            });\n\n            tokenResult.IsError.Should().BeFalse();\n            tokenResult.HttpErrorReason.Should().Be(\"OK\");\n            tokenResult.TokenType.Should().Be(\"Bearer\");\n            tokenResult.AccessToken.Should().NotBeNull();\n            tokenResult.ExpiresIn.Should().BeGreaterThan(0);\n            tokenResult.IdentityToken.Should().NotBeNull();\n\n            var token = new JwtSecurityToken(tokenResult.IdentityToken);\n            \n            var s_hash = token.Claims.FirstOrDefault(c => c.Type == \"s_hash\");\n            s_hash.Should().NotBeNull();\n            s_hash.Value.Should().Be(CryptoHelper.CreateHashClaimValue(\"state\", \"RS256\"));\n        }"
      }
    ]
  },
  {
    "file": "RedirectUriTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n            var state = Guid.NewGuid().ToString();\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                           clientId: \"code_client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://bad\",\n                           state: state,\n                           nonce: nonce);\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.ErrorWasCalled.Should().BeTrue();\n            _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n            var state = Guid.NewGuid().ToString();\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                          clientId: \"code_client\",\n                          responseType: \"code\",\n                          scope: \"openid\",\n                          // redirectUri deliberately absent \n                          redirectUri: null,\n                          state: state,\n                          nonce: nonce);\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.ErrorWasCalled.Should().BeTrue();\n            _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n            var state = Guid.NewGuid().ToString();\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                           clientId: \"code_client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_client/callback?foo=bar&baz=quux\",\n                           state: state,\n                           nonce: nonce);\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://code_client/callback?\");\n            var authorization = _mockPipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());\n            authorization.Code.Should().NotBeNull();\n            authorization.State.Should().Be(state);\n            var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(response.Headers.Location.Query);\n            query[\"foo\"].ToString().Should().Be(\"bar\");\n            query[\"baz\"].ToString().Should().Be(\"quux\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n            var state = Guid.NewGuid().ToString();\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                           clientId: \"code_client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_client/callback?baz=quux&foo=bar\",\n                           state: state,\n                           nonce: nonce);\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.ErrorWasCalled.Should().BeTrue();\n            _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");\n        }"
      }
    ]
  },
  {
    "file": "ResponseTypeResponseModeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var metadata = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.DiscoveryEndpoint);\n            metadata.StatusCode.Should().Be(HttpStatusCode.OK);\n\n            var state = Guid.NewGuid().ToString();\n            var nonce = Guid.NewGuid().ToString();\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                           clientId: \"code_client\",\n                           responseType: \"code\",\n                           scope: \"openid\",\n                           redirectUri: \"https://code_client/callback\",\n                           state: state,\n                           nonce: nonce);\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IsError.Should().BeFalse();\n            authorization.Code.Should().NotBeNull();\n            authorization.State.Should().Be(state);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var state = Guid.NewGuid().ToString();\n            var nonce = Guid.NewGuid().ToString();\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"code_client\",\n                responseType: null, // missing\n                scope: \"openid\",\n                redirectUri: \"https://code_client/callback\",\n                state: state,\n                nonce: nonce);\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.ErrorMessage.Error.Should().Be(\"unsupported_response_type\");\n        }"
      }
    ]
  },
  {
    "file": "PkceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(\"bob\");\n\n            var nonce = Guid.NewGuid().ToString();\n            var authorizeResponse = await _pipeline.RequestAuthorizationEndpointAsync(client_id_optional,\n                response_type,\n                IdentityServerConstants.StandardScopes.OpenId,\n                redirect_uri,\n                nonce: nonce);\n\n            authorizeResponse.IsError.Should().BeFalse();\n\n            var code = authorizeResponse.Code;\n\n            var tokenResponse = await _pipeline.BackChannelClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest\n            {\n                Address = IdentityServerPipeline.TokenEndpoint,\n                ClientId = client_id_optional,\n                ClientSecret = client_secret,\n\n                Code = code,\n                RedirectUri = redirect_uri,\n                CodeVerifier = code_verifier\n            });\n\n            tokenResponse.IsError.Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "ConsentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\"\n            );\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.ConsentWasCalled.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            _mockPipeline.ConsentResponse = new ConsentResponse()\n            {\n                ScopesValuesConsented = new string[] { \"openid\", \"api2\" }\n            };\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client2\",\n                responseType: \"id_token token\",\n                scope: \"openid profile api2\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://server/consent\");\n\n            response = await _mockPipeline.BrowserClient.GetAsync(response.Headers.Location.ToString());\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"/connect/authorize/callback\");\n\n            var modifiedAuthorizeCallback = \"https://server\" + response.Headers.Location.ToString();\n            modifiedAuthorizeCallback = modifiedAuthorizeCallback.Replace(\"api2\", \"api1%20api2\");\n\n            response = await _mockPipeline.BrowserClient.GetAsync(modifiedAuthorizeCallback);\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://server/consent\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            _mockPipeline.ConsentResponse = new ConsentResponse()\n            {\n                ScopesValuesConsented = new string[] { \"api2\" }\n            };\n            _mockPipeline.BrowserClient.StopRedirectingAfter = 2;\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client2\",\n                responseType: \"id_token token\",\n                scope: \"openid profile api1 api2\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://client2/callback\");\n\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IsError.Should().BeTrue();\n            authorization.Error.Should().Be(\"access_denied\");\n            authorization.State.Should().Be(\"123_state\");\n        }"
      }
    ]
  },
  {
    "file": "RestrictAccessTokenViaBrowserTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client1\",\n                \"id_token\", \"openid\", \"https://client1/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client1/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client1\",\n                \"id_token token\", \"openid\", \"https://client1/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client1/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client2\",\n                \"id_token\", \"openid\", \"https://client2/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client2/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client2\",\n                \"id_token token\", \"openid\", \"https://client2/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            _mockPipeline.ErrorWasCalled.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client3\",\n                \"code id_token\", \"openid\", \"https://client3/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client3/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().BeNull();\n            authorization.Code.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client3\",\n                \"code id_token token\", \"openid\", \"https://client3/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client3/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().NotBeNull();\n            authorization.Code.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client4\",\n                \"code id_token\", \"openid\", \"https://client4/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Found);\n            response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client4/callback\");\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IdentityToken.Should().NotBeNull();\n            authorization.AccessToken.Should().BeNull();\n            authorization.Code.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(_user);\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\"client4\",\n                \"code id_token token\", \"openid\", \"https://client4/callback\", \"state\", \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            _mockPipeline.ErrorWasCalled.Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "SessionIdTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n            var sid1 = _mockPipeline.GetSessionCookie().Value;\n            sid1.Should().NotBeNull();\n\n            _mockPipeline.RemoveSessionCookie();\n\n            await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.DiscoveryEndpoint);\n\n            var sid2 = _mockPipeline.GetSessionCookie().Value;\n            sid2.Should().Be(sid1);\n        }"
      }
    ]
  },
  {
    "file": "CheckSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.CheckSessionEndpoint);\n\n            response.StatusCode.Should().NotBe(HttpStatusCode.NotFound);\n        }"
      }
    ]
  },
  {
    "file": "DeviceAuthorizationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.DeviceAuthorization);\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());\n\n            resultDto.Should().NotBeNull();\n            resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidRequest);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>\n            {\n                {\"client_id\", Guid.NewGuid().ToString()}\n            };\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization,\n                new StringContent(@\"{\"\"client_id\"\": \"\"client1\"\"}\", Encoding.UTF8, \"application/json\"));\n\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());\n\n            resultDto.Should().NotBeNull();\n            resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidRequest);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization,\n                new FormUrlEncodedContent(new Dictionary<string, string>()));\n\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());\n\n            resultDto.Should().NotBeNull();\n            resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidClient);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>\n            {\n                {\"client_id\", \"client1\"}\n            };\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());\n\n            resultDto.Should().NotBeNull();\n            resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidClient);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>\n            {\n                {\"client_id\", \"client1\"},\n                {\"client_secret\", \"secret\" }\n            };\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.MediaType.Should().Be(\"application/json\");\n            \n            var resultDto = ParseJsonBody<ResultDto>(await response.Content.ReadAsStreamAsync());\n\n            resultDto.Should().NotBeNull();\n\n            resultDto.Should().NotBeNull();\n            resultDto.device_code.Should().NotBeNull();\n            resultDto.user_code.Should().NotBeNull();\n            resultDto.verification_uri.Should().NotBeNull();\n            resultDto.verification_uri_complete.Should().NotBeNull();\n            resultDto.expires_in.Should().BeGreaterThan(0);\n            resultDto.interval.Should().BeGreaterThan(0);\n        }"
      }
    ]
  },
  {
    "file": "DiscoveryEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n            pipeline.Initialize(\"/ROOT\");\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"HTTPS://SERVER/ROOT/.WELL-KNOWN/OPENID-CONFIGURATION\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var data = JObject.Parse(json);\n            var issuer = data[\"issuer\"].ToString();\n\n            issuer.Should().Be(\"https://server/root\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n            pipeline.Initialize(\"/ROOT\");\n\n            pipeline.Options.LowerCaseIssuerUri = false;\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"HTTPS://SERVER/ROOT/.WELL-KNOWN/OPENID-CONFIGURATION\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var data = JObject.Parse(json);\n            var issuer = data[\"issuer\"].ToString();\n\n            issuer.Should().Be(\"https://server/ROOT\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var key = CryptoHelper.CreateECDsaSecurityKey(JsonWebKeyECTypes.P256);\n            var expectedAlgorithm = SecurityAlgorithms.EcdsaSha256;\n\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n            pipeline.OnPostConfigureServices += services =>\n            {\n                // add key to standard RSA key\n                services.AddIdentityServerBuilder()\n                    .AddSigningCredential(key, expectedAlgorithm);\n            };\n            pipeline.Initialize(\"/ROOT\");\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var data = JObject.Parse(json);\n            var algorithmsSupported = data[\"id_token_signing_alg_values_supported\"];\n\n            algorithmsSupported.Count().Should().Be(2);\n\n            algorithmsSupported.Values().Should().Contain(SecurityAlgorithms.RsaSha256);\n            algorithmsSupported.Values().Should().Contain(SecurityAlgorithms.EcdsaSha256);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var ecdsaKey = CryptoHelper.CreateECDsaSecurityKey(JsonWebKeyECTypes.P256);\n            var parameters = ecdsaKey.ECDsa.ExportParameters(true);\n\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n\n            var jsonWebKeyFromECDsa = new JsonWebKey()\n            {\n                Kty = JsonWebAlgorithmsKeyTypes.EllipticCurve,\n                Use = \"sig\",\n                Kid = ecdsaKey.KeyId,\n                KeyId = ecdsaKey.KeyId,\n                X = Base64UrlEncoder.Encode(parameters.Q.X),\n                Y = Base64UrlEncoder.Encode(parameters.Q.Y),\n                D = Base64UrlEncoder.Encode(parameters.D),\n                Crv = JsonWebKeyECTypes.P256,\n                Alg = SecurityAlgorithms.EcdsaSha256\n            };\n            pipeline.OnPostConfigureServices += services =>\n            {\n                // add ECDsa as JsonWebKey\n                services.AddIdentityServerBuilder()\n                    .AddSigningCredential(jsonWebKeyFromECDsa, SecurityAlgorithms.EcdsaSha256);\n            };\n\n            pipeline.Initialize(\"/ROOT\");\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var data = JObject.Parse(json);\n\n            var keys = data[\"keys\"];\n            keys.Should().NotBeNull();\n\n            var key = keys[1];\n            key.Should().NotBeNull();\n\n            var crv = key[\"crv\"];\n            crv.Should().NotBeNull();\n\n            crv.Value<string>().Should().Be(JsonWebKeyECTypes.P256);\n\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n            pipeline.Initialize(\"/ROOT\");\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var data = JObject.Parse(json);\n\n            var keys = data[\"keys\"];\n            keys.Should().NotBeNull();\n\n            var key = keys[0];\n            key.Should().NotBeNull();\n\n            var alg = key[\"alg\"];\n            alg.Should().NotBeNull();\n\n            alg.Value<string>().Should().Be(Constants.SigningAlgorithms.RSA_SHA_256);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var ecdsaKey = CryptoHelper.CreateECDsaSecurityKey();\n            var rsaKey = CryptoHelper.CreateRsaSecurityKey();\n\n            IdentityServerPipeline pipeline = new IdentityServerPipeline();\n            pipeline.OnPostConfigureServices += services =>\n            {\n                services.AddIdentityServerBuilder()\n                    .AddSigningCredential(ecdsaKey, \"ES256\")\n                    .AddValidationKey(new SecurityKeyInfo { Key = rsaKey, SigningAlgorithm = \"RS256\" });\n            };\n            pipeline.Initialize(\"/ROOT\");\n\n            var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");\n\n            var json = await result.Content.ReadAsStringAsync();\n            var jwks = new JsonWebKeySet(json);\n\n            jwks.Keys.Should().Contain(x => x.KeyId == ecdsaKey.KeyId && x.Alg == \"ES256\");\n            jwks.Keys.Should().Contain(x => x.KeyId == rsaKey.KeyId && x.Alg == \"RS256\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var pipeline = new IdentityServerPipeline();\n            pipeline.Initialize();\n\n            var result = await pipeline.BackChannelClient.GetDiscoveryDocumentAsync(new DiscoveryDocumentRequest\n            {\n                Address = \"https://грант.рф\",\n                Policy =\n                {\n                    ValidateIssuerName = false,\n                    ValidateEndpoints = false,\n                    RequireHttps = false,\n                    RequireKeySet = false\n                }\n            });\n\n            result.Issuer.Should().Be(\"https://грант.рф\");\n        }"
      }
    ]
  },
  {
    "file": "EndSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            response.StatusCode.Should().NotBe(HttpStatusCode.NotFound);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockPipeline.Options.UserInteraction.LogoutUrl = \"/logout\";\n            _mockPipeline.Options.UserInteraction.LogoutIdParameter = \"id\";\n\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token +\n                \"&post_logout_redirect_uri=https://client1/signout-callback\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://server/logout?id=\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var authorization = await _mockPipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            var id_token = authorization.IdentityToken;\n\n            var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token +\n                \"&post_logout_redirect_uri=https://client2/signout-callback2\");\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n            _mockPipeline.LogoutRequest.Should().NotBeNull();\n            _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client2\");\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client2/signout-callback2\");\n\n            var parts = _mockPipeline.LogoutRequest.SignOutIFrameUrl.Split('?');\n            parts[0].Should().Be(IdentityServerPipeline.EndSessionCallbackEndpoint);\n            var iframeUrl = QueryHelpers.ParseNullableQuery(parts[1]);\n            iframeUrl[\"endSessionId\"].FirstOrDefault().Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var authorization = await _mockPipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            var id_token = authorization.IdentityToken;\n\n            _mockPipeline.RemoveLoginCookie();\n\n            var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token +\n                \"&post_logout_redirect_uri=https://client2/signout-callback2\");\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n            _mockPipeline.LogoutRequest.Should().NotBeNull();\n            _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client2\");\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client2/signout-callback2\");\n            _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n\n            var values = new List<KeyValuePair<string, string>>();\n            values.Add(new KeyValuePair<string, string>(\"id_token_hint\", id_token));\n            values.Add(new KeyValuePair<string, string>(\"post_logout_redirect_uri\", \"https://client1/signout-callback\"));\n            var content = new FormUrlEncodedContent(values);\n            response = await _mockPipeline.BrowserClient.PostAsync(IdentityServerPipeline.EndSessionEndpoint, content);\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n            _mockPipeline.LogoutRequest.Should().NotBeNull();\n            _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client1\");\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client1/signout-callback\");\n\n            var parts = _mockPipeline.LogoutRequest.SignOutIFrameUrl.Split('?');\n            parts[0].Should().Be(IdentityServerPipeline.EndSessionCallbackEndpoint);\n            var iframeUrl = QueryHelpers.ParseNullableQuery(parts[1]);\n            iframeUrl[\"endSessionId\"].FirstOrDefault().Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.EndSessionCallbackEndpoint);\n\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token +\n                \"&post_logout_redirect_uri=https://client1/signout-callback-not-valid\");\n\n            var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;\n\n            response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);\n\n            _mockPipeline.LogoutRequest.ClientId.Should().NotBeNull();\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            await _mockPipeline.LoginAsync(\"alice\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token +\n                \"&post_logout_redirect_uri=https://client1/signout-callback\");\n\n            _mockPipeline.LogoutRequest.ClientId.Should().BeNull();\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;\n\n            response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n            var sid = _mockPipeline.GetSessionCookie().Value;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            var url2 = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response2 = await _mockPipeline.BrowserClient.GetAsync(url2);\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;\n\n            response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Contain(HtmlEncoder.Default.Encode(\"https://client1/signout?sid=\" + sid + \"&iss=\" + UrlEncoder.Default.Encode(\"https://server\")));\n            html.Should().Contain(HtmlEncoder.Default.Encode(\"https://client2/signout?sid=\" + sid + \"&iss=\" + UrlEncoder.Default.Encode(\"https://server\")));\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n            var sid = _mockPipeline.GetSessionCookie().Value;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client4\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client4/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;\n\n            // since we don't have real ws-fed, we used OIDC to signin, but fooling this\n            // at signout to use ws-fed so we can test the iframe params\n            _wsfedClient.ProtocolType = ProtocolTypes.WsFederation;\n\n            response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Contain(\"https://client4/signout?wa=wsignoutcleanup1.0\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint + \n                \"?id_token_hint=\" + id_token);\n\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            var id_token = authorization.IdentityToken;\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = true;\n            response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +\n                \"?id_token_hint=\" + id_token);\n\n            _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var response = await _mockPipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client2\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client2/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            response.Should().NotBeNull();\n\n            await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n            _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            _mockPipeline.LogoutWasCalled.Should().BeTrue();\n            _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockPipeline.BackChannelMessageHandler.OnInvoke = async req =>\n            {\n                req.RequestUri.ToString().Should().StartWith(\"https://client3/signout\");\n\n                var form = await req.Content.ReadAsStringAsync();\n                form.Should().Contain(OidcConstants.BackChannelLogoutRequest.LogoutToken);\n\n                var token = form.Split('=')[1];\n                var parts = token.Split('.');\n                parts.Length.Should().Be(3);\n\n                var bytes = Base64Url.Decode(parts[1]);\n                var json = Encoding.UTF8.GetString(bytes);\n                var payload = JObject.Parse(json);\n                payload[\"iss\"].ToString().Should().Be(\"https://server\");\n                payload[\"sub\"].ToString().Should().Be(\"bob\");\n                payload[\"aud\"].ToString().Should().Be(\"client3\");\n                payload[\"iat\"].Should().NotBeNull();\n                payload[\"jti\"].Should().NotBeNull();\n                payload[\"sid\"].Should().NotBeNull();\n                payload[\"events\"].Type.Should().Be(JTokenType.Object);\n\n                var events = (JObject)payload[\"events\"];\n                events.Count.Should().Be(1);\n                events[\"http://schemas.openid.net/event/backchannel-logout\"].Should().NotBeNull();\n                events[\"http://schemas.openid.net/event/backchannel-logout\"].Type.Should().Be(JTokenType.Object);\n\n                var evt = (JObject)events[\"http://schemas.openid.net/event/backchannel-logout\"];\n                evt.Count.Should().Be(0);\n            };\n\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var response = await _mockPipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client3\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client3/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            response.Should().NotBeNull();\n\n            await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            _mockPipeline.BackChannelMessageHandler.InvokeWasCalled.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockPipeline.BackChannelMessageHandler.OnInvoke = req => throw new Exception(\"boom!\");\n\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var response = await _mockPipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client3\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client3/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n            response.Should().NotBeNull();\n\n            await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);\n\n            _mockPipeline.BackChannelMessageHandler.InvokeWasCalled.Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "IntrospectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>();\n\n            var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>();\n\n            _client.SetBasicAuthentication(\"unknown\", \"invalid\");\n            var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>();\n\n            _client.SetBasicAuthentication(\"api1\", \"invalid\");\n            var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var form = new Dictionary<string, string>();\n\n            _client.SetBasicAuthentication(\"api1\", \"secret\");\n            var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));\n\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api1\",\n                ClientSecret = \"secret\",\n\n                Token = \"invalid\"\n            });\n\n            introspectionResponse.IsActive.Should().Be(false);\n            introspectionResponse.IsError.Should().Be(false);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n                Scope = \"api1\"\n            });\n\n            var data = new\n            {\n                client_id = \"api1\",\n                client_secret = \"secret\",\n                token = tokenResponse.AccessToken\n            };\n            var json = JsonConvert.SerializeObject(data);\n\n            var client = new HttpClient(_handler);\n            var response = await client.PostAsync(IntrospectionEndpoint, new StringContent(json, Encoding.UTF8, \"application/json\"));\n            response.StatusCode.Should().Be(HttpStatusCode.UnsupportedMediaType);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n                Scope = \"api1\"\n            });\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api1\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            introspectionResponse.IsActive.Should().Be(true);\n            introspectionResponse.IsError.Should().Be(false);\n\n            var scopes = from c in introspectionResponse.Claims\n                         where c.Type == \"scope\"\n                         select c;\n\n            scopes.Count().Should().Be(1);\n            scopes.First().Value.Should().Be(\"api1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n                Scope = \"api1\"\n            });\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api1\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();\n\n            values[\"aud\"].GetType().Name.Should().Be(\"String\");\n            values[\"iss\"].GetType().Name.Should().Be(\"String\");\n            values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"exp\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"client_id\"].GetType().Name.Should().Be(\"String\");\n            values[\"active\"].GetType().Name.Should().Be(\"Boolean\");\n            values[\"scope\"].GetType().Name.Should().Be(\"String\");\n\n            values[\"scope\"].ToString().Should().Be(\"api1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestPasswordTokenAsync(new PasswordTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"ro.client\",\n                ClientSecret = \"secret\",\n                UserName = \"bob\",\n                Password = \"bob\",\n\n                Scope = \"api1\",\n            });\n\n            tokenResponse.IsError.Should().BeFalse();\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api1\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();\n\n            values[\"aud\"].GetType().Name.Should().Be(\"String\");\n            values[\"iss\"].GetType().Name.Should().Be(\"String\");\n            values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"exp\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"auth_time\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"client_id\"].GetType().Name.Should().Be(\"String\");\n            values[\"sub\"].GetType().Name.Should().Be(\"String\");\n            values[\"active\"].GetType().Name.Should().Be(\"Boolean\");\n            values[\"scope\"].GetType().Name.Should().Be(\"String\");\n\n            values[\"scope\"].ToString().Should().Be(\"api1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n\n                Scope = \"api2 api3-a api3-b\",\n            });\n\n            tokenResponse.IsError.Should().BeFalse();\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api3\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();\n\n            values[\"aud\"].GetType().Name.Should().Be(\"JArray\");\n\n            var audiences = ((JArray)values[\"aud\"]);\n            foreach (var aud in audiences)\n            {\n                aud.Type.Should().Be(JTokenType.String);\n            }\n\n            values[\"iss\"].GetType().Name.Should().Be(\"String\");\n            values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"exp\"].GetType().Name.Should().Be(\"Int64\");\n            values[\"client_id\"].GetType().Name.Should().Be(\"String\");\n            values[\"active\"].GetType().Name.Should().Be(\"Boolean\");\n            values[\"scope\"].GetType().Name.Should().Be(\"String\");\n\n            var scopes = values[\"scope\"].ToString();\n            scopes.Should().Be(\"api3-a api3-b\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n\n                Scope = \"api3-a api3-b\",\n            });\n\n            tokenResponse.IsError.Should().BeFalse();\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api3\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();\n\n            values[\"aud\"].GetType().Name.Should().Be(\"String\");\n            values[\"iss\"].GetType().Name.Should().Be(\"String\"); \n            values[\"nbf\"].GetType().Name.Should().Be(\"Int64\"); \n            values[\"exp\"].GetType().Name.Should().Be(\"Int64\"); \n            values[\"client_id\"].GetType().Name.Should().Be(\"String\"); \n            values[\"active\"].GetType().Name.Should().Be(\"Boolean\"); \n            values[\"scope\"].GetType().Name.Should().Be(\"String\");\n\n            var scopes = values[\"scope\"].ToString();\n            scopes.Should().Be(\"api3-a api3-b\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client3\",\n                ClientSecret = \"secret\",\n\n                Scope = \"api1 api2 api3-a\",\n            });\n\n            tokenResponse.IsError.Should().BeFalse();\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api3\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            introspectionResponse.IsActive.Should().BeTrue();\n            introspectionResponse.IsError.Should().BeFalse();\n\n            var scopes = from c in introspectionResponse.Claims\n                         where c.Type == \"scope\"\n                         select c.Value;\n\n            scopes.Count().Should().Be(1);\n            scopes.First().Should().Be(\"api3-a\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n\n                Scope = \"api1 api2\",\n            });\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api1\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            introspectionResponse.IsActive.Should().Be(true);\n            introspectionResponse.IsError.Should().Be(false);\n\n            var scopes = from c in introspectionResponse.Claims\n                         where c.Type == \"scope\"\n                         select c;\n\n            scopes.Count().Should().Be(1);\n            scopes.First().Value.Should().Be(\"api1\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest\n            {\n                Address = TokenEndpoint,\n                ClientId = \"client1\",\n                ClientSecret = \"secret\",\n\n                Scope = \"api1\",\n            });\n\n            var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest\n            {\n                Address = IntrospectionEndpoint,\n                ClientId = \"api2\",\n                ClientSecret = \"secret\",\n\n                Token = tokenResponse.AccessToken\n            });\n\n            introspectionResponse.IsActive.Should().Be(false);\n            introspectionResponse.IsError.Should().Be(false);\n        }"
      }
    ]
  },
  {
    "file": "RevocationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.RevocationEndpoint);\n\n            response.StatusCode.Should().Be(HttpStatusCode.MethodNotAllowed);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, null);\n\n            response.StatusCode.Should().Be(HttpStatusCode.UnsupportedMediaType);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeFalse();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = \"implicit\",\n                ClientSecret = client_secret,\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeFalse();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await UseRefreshTokenAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.RefreshToken\n            });\n\n            result.IsError.Should().BeFalse();\n\n            (await UseRefreshTokenAsync(tokens)).Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await UseRefreshTokenAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = \"implicit\",\n                ClientSecret = client_secret,\n\n                Token = tokens.RefreshToken\n            });\n\n            result.IsError.Should().BeFalse();\n\n            (await UseRefreshTokenAsync(tokens)).Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeFalse();\n\n            (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();\n\n            result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await UseRefreshTokenAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.RefreshToken\n            });\n\n            result.IsError.Should().BeFalse();\n\n            (await UseRefreshTokenAsync(tokens)).Should().BeFalse();\n\n            result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = client_secret,\n\n                Token = tokens.RefreshToken\n            });\n\n            result.IsError.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = \"not_valid\",\n                ClientSecret = client_secret,\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"invalid_client\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest\n            {\n                Address = IdentityServerPipeline.RevocationEndpoint,\n                ClientId = client_id,\n                ClientSecret = \"not_valid\",\n\n                Token = tokens.AccessToken\n            });\n\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"invalid_client\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret }\n            };\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var result = await ProtocolResponse.FromHttpResponseAsync<TokenRevocationResponse>(response);\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"invalid_request\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret },\n                { \"token\", tokens.AccessToken },\n                { \"token_type_hint\", \"not_valid\" }\n            };\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n\n            var result = await ProtocolResponse.FromHttpResponseAsync<TokenRevocationResponse>(response);\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"unsupported_token_type\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();\n\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret },\n                { \"token\", tokens.AccessToken }\n            };\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n\n            (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var tokens = await GetTokensAsync();\n            (await UseRefreshTokenAsync(tokens)).Should().BeTrue();\n\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret },\n                { \"token\", tokens.RefreshToken }\n            };\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n\n            (await UseRefreshTokenAsync(tokens)).Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token = await GetAccessTokenForImplicitClientAsync(\"implicit\");\n\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", \"implicit\" },\n                { \"token\", token }\n            };\n\n            (await IsAccessTokenValidAsync(token)).Should().BeTrue();\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            (await IsAccessTokenValidAsync(token)).Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token = await GetAccessTokenForImplicitClientAsync(\"implicit_and_client_creds\");\n\n            var data = new Dictionary<string, string>\n            {\n                { \"client_id\", \"implicit_and_client_creds\" },\n                { \"token\", token }\n            };\n\n            (await IsAccessTokenValidAsync(token)).Should().BeTrue();\n\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));\n            response.StatusCode.Should().Be(HttpStatusCode.BadRequest);\n            (await IsAccessTokenValidAsync(token)).Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "TokenEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var data = new Dictionary<string, string>\n            {\n                { \"grant_type\", \"client_credentials\" },\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret },\n                { \"scope\", scope_name },\n            };\n            var form = new FormUrlEncodedContent(data);\n            _mockPipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Referer\", \"http://127.0.0.1:33086/appservice/appservice?t=1564165664142?load\");\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.TokenEndpoint, form);\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            var json = await response.Content.ReadAsStringAsync();\n            var result = JObject.Parse(json);\n            result.ContainsKey(\"error\").Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var data = new Dictionary<string, string>\n            {\n                { \"grant_type\", \"password\" },\n                { \"username\", \"bob\" },\n                { \"password\", \"password\" },\n                { \"client_id\", client_id },\n                { \"client_secret\", client_secret },\n                { \"scope\", scope_name },\n            };\n            var form = new FormUrlEncodedContent(data);\n            _mockPipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Referer\", \"http://127.0.0.1:33086/appservice/appservice?t=1564165664142?load\");\n            var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.TokenEndpoint, form);\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            var json = await response.Content.ReadAsStringAsync();\n            var result = JObject.Parse(json);\n            result.ContainsKey(\"error\").Should().BeFalse();\n        }"
      }
    ]
  },
  {
    "file": "CustomProfileServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _mockPipeline.LoginAsync(\"bob\");\n\n            var url = _mockPipeline.CreateAuthorizeUrl(\n                clientId: \"implicit\",\n                responseType: \"id_token\",\n                scope: \"openid custom_identity\",\n                redirectUri: \"https://client/callback\",\n                state: \"state\",\n                nonce: \"nonce\");\n\n            _mockPipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _mockPipeline.BrowserClient.GetAsync(url);\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Headers.Location.ToString().Should().StartWith(\"https://client/callback\");\n\n            var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());\n            authorization.IsError.Should().BeFalse();\n            authorization.IdentityToken.Should().NotBeNull();\n\n            var payload = authorization.IdentityToken.Split('.')[1];\n            var json = Encoding.UTF8.GetString(Base64Url.Decode(payload));\n            var obj = JObject.Parse(json);\n\n            obj.GetValue(\"foo\").Should().NotBeNull();\n            obj[\"foo\"].ToString().Should().Be(\"bar\");\n        }"
      }
    ]
  },
  {
    "file": "CorsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var policy = new StubCorePolicyProvider();\n            _pipeline.OnPreConfigureServices += services =>\n            {\n                services.AddSingleton<ICorsPolicyService>(policy);\n            };\n            _pipeline.Initialize();\n\n            _pipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Origin\", \"https://client\");\n            _pipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Access-Control-Request-Method\", \"GET\");\n\n            var message = new HttpRequestMessage(HttpMethod.Options, IdentityServerPipeline.DiscoveryEndpoint);\n            var response = await _pipeline.BackChannelClient.SendAsync(message);\n\n            policy.WasCalled.Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "FederatedSignoutTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(_user);\n\n            await _pipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Contain(\"https://server/connect/endsession/callback?endSessionId=\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(_user);\n\n            await _pipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            var response = await _pipeline.BrowserClient.PostAsync(IdentityServerPipeline.FederatedSignOutUrl, new FormUrlEncodedContent(new Dictionary<string, string> { { \"sid\", \"123\" } }));\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Contain(\"https://server/connect/endsession/callback?endSessionId=\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _pipeline.LoginAsync(_user);\n\n            var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.Should().BeNull();\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Be(String.Empty);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.Should().BeNull();\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Be(String.Empty);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _pipeline.OnFederatedSignout = ctx =>\n            {\n                return Task.FromResult(true);\n            };\n\n            await _pipeline.LoginAsync(_user);\n\n            await _pipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.OK);\n            response.Content.Headers.ContentType.Should().BeNull();\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Be(String.Empty);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _pipeline.OnFederatedSignout = async ctx =>\n            {\n                await ctx.SignOutAsync(); // even if we signout, we should not see iframes\n                ctx.Response.Redirect(\"http://foo\");\n                return true;\n            };\n\n            await _pipeline.LoginAsync(_user);\n\n            await _pipeline.RequestAuthorizationEndpointAsync(\n                clientId: \"client1\",\n                responseType: \"id_token\",\n                scope: \"openid\",\n                redirectUri: \"https://client1/callback\",\n                state: \"123_state\",\n                nonce: \"123_nonce\");\n\n            _pipeline.BrowserClient.AllowAutoRedirect = false;\n            var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");\n\n            response.StatusCode.Should().Be(HttpStatusCode.Redirect);\n            response.Content.Headers.ContentType.Should().BeNull();\n            var html = await response.Content.ReadAsStringAsync();\n            html.Should().Be(String.Empty);\n        }"
      }
    ]
  },
  {
    "file": "TestCert.cs",
    "methods": []
  },
  {
    "file": "TestEventService.cs",
    "methods": []
  },
  {
    "file": "TestExtensions.cs",
    "methods": []
  },
  {
    "file": "TestIdentityServerOptions.cs",
    "methods": []
  },
  {
    "file": "TestLogger.cs",
    "methods": []
  },
  {
    "file": "TestUserConsentStore.cs",
    "methods": []
  },
  {
    "file": "PolicyProviderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _allowedPaths.AddRange(new string[] {\n                \"/foo\",\n                \"/bar\",\n                \"/baz/quux\"\n            });\n            Init();\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Scheme = \"https\";\n            ctx.Request.Host = new HostString(\"server\");\n            ctx.Request.Path = new PathString(\"/foo\");\n            ctx.Request.Headers.Add(\"Origin\", \"http://notserver\");\n\n            var response = await _subject.GetPolicyAsync(ctx, \"wrong_name\");\n\n            _mockPolicy.WasCalled.Should().BeFalse();\n            _mockInner.WasCalled.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _allowedPaths.AddRange(new string[] {\n                \"/foo\"\n            });\n            Init();\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Scheme = \"https\";\n            ctx.Request.Host = new HostString(\"server\");\n            ctx.Request.Path = new PathString(\"/foo\");\n            ctx.Request.Headers.Add(\"Origin\", \"https://server\");\n\n            var response = await _subject.GetPolicyAsync(ctx, _options.Cors.CorsPolicyName);\n\n            _mockPolicy.WasCalled.Should().BeFalse();\n            _mockInner.WasCalled.Should().BeFalse();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeCallbackEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var parameters = new NameValueCollection()\n            {\n                { \"client_id\", \"client\" },\n                { \"nonce\", \"some_nonce\" },\n                { \"scope\", \"api1 api2\" }\n            };\n            var request = new ConsentRequest(parameters, _user.GetSubjectId());\n            _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse()));\n\n            _mockUserSession.User = _user;\n\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<AuthorizeResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _mockUserSession.User = _user;\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<AuthorizeResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var parameters = new NameValueCollection()\n            {\n                { \"client_id\", \"client\" },\n                { \"nonce\", \"some_nonce\" },\n                { \"scope\", \"api1 api2\" }\n            };\n            var request = new ConsentRequest(parameters, _user.GetSubjectId());\n            _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(null));\n\n            _mockUserSession.User = _user;\n\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<AuthorizeResult>();\n            ((AuthorizeResult)result).Response.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubInteractionGenerator.Response.IsConsent = true;\n\n            var parameters = new NameValueCollection()\n            {\n                { \"client_id\", \"client\" },\n                { \"nonce\", \"some_nonce\" },\n                { \"scope\", \"api1 api2\" }\n            };\n            var request = new ConsentRequest(parameters, _user.GetSubjectId());\n            _mockUserConsentResponseMessageStore.Messages.Add(request.Id, null);\n\n            _mockUserSession.User = _user;\n\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<ConsentPageResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _context.Request.Method = \"POST\";\n\n            var result = await _subject.ProcessAsync(_context);\n\n            var statusCode = result as StatusCodeResult;\n            statusCode.Should().NotBeNull();\n            statusCode.StatusCode.Should().Be(405);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var parameters = new NameValueCollection()\n            {\n                { \"client_id\", \"client\" },\n                { \"nonce\", \"some_nonce\" },\n                { \"scope\", \"api1 api2\" }\n            };\n            var request = new ConsentRequest(parameters, _user.GetSubjectId());\n            _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse() { ScopesValuesConsented = new string[] { \"api1\", \"api2\" } }));\n\n            _mockUserSession.User = _user;\n\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());\n\n            var result = await _subject.ProcessAsync(_context);\n\n            _mockUserConsentResponseMessageStore.Messages.Count.Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var parameters = new NameValueCollection()\n            {\n                { \"client_id\", \"client\" },\n                { \"nonce\", \"some_nonce\" },\n                { \"scope\", \"api1 api2\" }\n            };\n            var request = new ConsentRequest(parameters, _user.GetSubjectId());\n            _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse() { ScopesValuesConsented = new string[] { \"api1\", \"api2\" } }));\n\n            _mockUserSession.User = _user;\n\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize/callback\");\n            _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<AuthorizeResult>();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeEndpointBaseTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _params.Add(\"prompt\", \"none\");\n            _stubAuthorizeRequestValidator.Result.ValidatedRequest.IsOpenIdRequest = true;\n            _stubAuthorizeRequestValidator.Result.ValidatedRequest.ClientId = \"client\";\n            _stubAuthorizeRequestValidator.Result.ValidatedRequest.SessionId = \"some_session\";\n            _stubAuthorizeRequestValidator.Result.ValidatedRequest.RedirectUri = \"http://redirect\";\n            _stubAuthorizeRequestValidator.Result.IsError = true;\n            _stubAuthorizeRequestValidator.Result.Error = \"login_required\";\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<AuthorizeResult>();\n            ((AuthorizeResult)result).Response.IsError.Should().BeTrue();\n            ((AuthorizeResult)result).Response.SessionState.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubAuthorizeRequestValidator.Result.IsError = true;\n            _stubAuthorizeRequestValidator.Result.Error = \"some_error\";\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<AuthorizeResult>();\n            ((AuthorizeResult)result).Response.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubInteractionGenerator.Response.IsConsent = true;\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<ConsentPageResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubInteractionGenerator.Response.Error = \"error\";\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<AuthorizeResult>();\n            ((AuthorizeResult)result).Response.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var errorDescription = \"some error description\";\n\n             _stubInteractionGenerator.Response.Error = \"error\";\n            _stubInteractionGenerator.Response.ErrorDescription = errorDescription;\n\n             var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n             result.Should().BeOfType<AuthorizeResult>();\n            var authorizeResult = ((AuthorizeResult)result);\n            authorizeResult.Response.IsError.Should().BeTrue();\n            authorizeResult.Response.ErrorDescription.Should().Be(errorDescription);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubInteractionGenerator.Response.IsLogin = true;\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<LoginPageResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockUserSession.User = _user;\n            _stubInteractionGenerator.Response.RedirectUrl = \"http://foo.com\";\n\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<CustomRedirectResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);\n\n            result.Should().BeOfType<AuthorizeResult>();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _context.Request.Method = \"GET\";\n            _context.Request.Path = new PathString(\"/connect/authorize\");\n            _mockUserSession.User = _user;\n\n            var result = await _subject.ProcessAsync(_context);\n\n            result.Should().BeOfType<AuthorizeResult>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _context.Request.Method = \"POST\";\n\n            var result = await _subject.ProcessAsync(_context);\n\n            var statusCode = result as StatusCodeResult;\n            statusCode.Should().NotBeNull();\n            statusCode.StatusCode.Should().Be(415);\n        }"
      }
    ]
  },
  {
    "file": "EndSessionCallbackEndpointTests.cs",
    "methods": []
  },
  {
    "file": "EndSessionCallbackResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Method = \"GET\";\n\n            await _subject.ExecuteAsync(ctx);\n\n            ctx.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"frame-src http://foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _options.Authentication.RequireCspFrameSrcForSignout = false;\n            _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Method = \"GET\";\n\n            await _subject.ExecuteAsync(ctx);\n\n            ctx.Response.Headers[\"Content-Security-Policy\"].FirstOrDefault().Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _response.Error = \"some_error\";\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockErrorMessageStore.Messages.Count.Should().Be(1);\n            _context.Response.StatusCode.Should().Be(302);\n            var location = _context.Response.Headers[\"Location\"].First();\n            location.Should().StartWith(\"https://server/error\");\n            var query = QueryHelpers.ParseQuery(new Uri(location).Query);\n            query[\"errorId\"].First().Should().Be(_mockErrorMessageStore.Messages.First().Key);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            const string errorDescription = \"some error description\";\n\n            _response.Error = OidcConstants.AuthorizeErrors.AccessDenied;\n            _response.ErrorDescription = errorDescription;\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ResponseMode = OidcConstants.ResponseModes.Query,\n                RedirectUri = \"http://client/callback\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockUserSession.Clients.Count.Should().Be(0);\n            _context.Response.StatusCode.Should().Be(302);\n            var location = _context.Response.Headers[\"Location\"].First();\n            location.Should().StartWith(\"http://client/callback\");\n\n            var queryString = new Uri(location).Query;\n            var queryParams = QueryHelpers.ParseQuery(queryString);\n\n            queryParams[\"error\"].Should().Equal(OidcConstants.AuthorizeErrors.AccessDenied);\n            queryParams[\"error_description\"].Should().Equal(errorDescription);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.Query,\n                RedirectUri = \"http://client/callback\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockUserSession.Clients.Should().Contain(\"client\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.Query,\n                RedirectUri = \"http://client/callback\",\n                State = \"state\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.StatusCode.Should().Be(302);\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");\n            var location = _context.Response.Headers[\"Location\"].First();\n            location.Should().StartWith(\"http://client/callback\");\n            location.Should().Contain(\"?state=state\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                RedirectUri = \"http://client/callback\",\n                State = \"state\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.StatusCode.Should().Be(302);\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");\n            var location = _context.Response.Headers[\"Location\"].First();\n            location.Should().StartWith(\"http://client/callback\");\n            location.Should().Contain(\"#state=state\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.FormPost,\n                RedirectUri = \"http://client/callback\",\n                State = \"state\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.StatusCode.Should().Be(200);\n            _context.Response.ContentType.Should().StartWith(\"text/html\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");\n            _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");\n            _context.Response.Body.Seek(0, SeekOrigin.Begin);\n            using (var rdr = new StreamReader(_context.Response.Body))\n            {\n                var html = rdr.ReadToEnd();\n                html.Should().Contain(\"<base target='_self'/>\");\n                html.Should().Contain(\"<form method='post' action='http://client/callback'>\");\n                html.Should().Contain(\"<input type='hidden' name='state' value='state' />\");\n            }\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.FormPost,\n                RedirectUri = \"http://client/callback\",\n                State = \"state\"\n            };\n\n            _options.Csp.Level = CspLevel.One;\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _response.Request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"client\",\n                ResponseMode = OidcConstants.ResponseModes.FormPost,\n                RedirectUri = \"http://client/callback\",\n                State = \"state\"\n            };\n\n            _options.Csp.AddDeprecatedHeader = false;\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].Should().BeEmpty();\n        }"
      }
    ]
  },
  {
    "file": "CheckSessionResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.StatusCode.Should().Be(200);\n            _context.Response.ContentType.Should().StartWith(\"text/html\");\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");\n            _context.Response.Body.Seek(0, SeekOrigin.Begin);\n            using (var rdr = new StreamReader(_context.Response.Body))\n            {\n                var html = rdr.ReadToEnd();\n                html.Should().Contain(\"<script id='cookie-name' type='application/json'>foobar</script>\");\n            }\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _options.Csp.Level = CspLevel.One;\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _options.Csp.AddDeprecatedHeader = false;\n\n            await _subject.ExecuteAsync(_context);\n\n            _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");\n            _context.Response.Headers[\"X-Content-Security-Policy\"].Should().BeEmpty();\n        }"
      }
    ]
  },
  {
    "file": "EndSessionCallbackResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Method = \"GET\";\n\n            await _subject.ExecuteAsync(ctx);\n\n            ctx.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"frame-src http://foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _options.Authentication.RequireCspFrameSrcForSignout = false;\n            _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Method = \"GET\";\n\n            await _subject.ExecuteAsync(ctx);\n\n            ctx.Response.Headers[\"Content-Security-Policy\"].FirstOrDefault().Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "EndSessionResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _result.IsError = false;\n            _result.ValidatedRequest = new ValidatedEndSessionRequest\n            {\n                Client = new Client\n                {\n                    ClientId = \"client\"\n                },\n                PostLogOutUri = \"http://client/post-logout-callback\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockLogoutMessageStore.Messages.Count.Should().Be(1);\n            var location = _context.Response.Headers[\"Location\"].Single();\n            var query = QueryHelpers.ParseQuery(new Uri(location).Query);\n\n            location.Should().StartWith(\"https://server/logout\");\n            query[\"logoutId\"].First().Should().Be(_mockLogoutMessageStore.Messages.First().Key);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _result.IsError = false;\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockLogoutMessageStore.Messages.Count.Should().Be(0);\n            var location = _context.Response.Headers[\"Location\"].Single();\n            var query = QueryHelpers.ParseQuery(new Uri(location).Query);\n\n            location.Should().StartWith(\"https://server/logout\");\n            query.Count.Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _result.IsError = true;\n            _result.ValidatedRequest = new ValidatedEndSessionRequest\n            {\n                Client = new Client\n                {\n                    ClientId = \"client\"\n                },\n                PostLogOutUri = \"http://client/post-logout-callback\"\n            };\n\n            await _subject.ExecuteAsync(_context);\n\n            _mockLogoutMessageStore.Messages.Count.Should().Be(0);\n            var location = _context.Response.Headers[\"Location\"].Single();\n            var query = QueryHelpers.ParseQuery(new Uri(location).Query);\n\n            location.Should().StartWith(\"https://server/logout\");\n            query.Count.Should().Be(0);\n        }"
      }
    ]
  },
  {
    "file": "ApiResourceSigningAlgorithmSelectionTests.cs",
    "methods": [
      {
        "name": "Single_resource_no_allowed_algorithms_set_should_return_empty_list",
        "body": "{\n            var resource = new ApiResource();\n\n            var allowedAlgorithms = new List<ApiResource> { resource }.FindMatchingSigningAlgorithms();\n\n            allowedAlgorithms.Count().Should().Be(0);\n        }"
      },
      {
        "name": "Two_resources_no_allowed_algorithms_set_should_return_empty_list",
        "body": "{\n            var resource1 = new ApiResource();\n            var resource2 = new ApiResource();\n\n            var allowedAlgorithms = new List<ApiResource> { resource1, resource2 }.FindMatchingSigningAlgorithms();\n\n            allowedAlgorithms.Count().Should().Be(0);\n        }"
      }
    ]
  },
  {
    "file": "EndpointOptionsExtensionsTests.cs",
    "methods": []
  },
  {
    "file": "HttpRequestExtensionsTests.cs",
    "methods": [
      {
        "name": "GetCorsOrigin_valid_cors_request_should_return_cors_origin",
        "body": "{\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Scheme = \"http\";\n            ctx.Request.Host = new HostString(\"foo\");\n            ctx.Request.Headers.Add(\"Origin\", \"http://bar\");\n\n            ctx.Request.GetCorsOrigin().Should().Be(\"http://bar\");\n        }"
      },
      {
        "name": "GetCorsOrigin_origin_from_same_host_should_not_return_cors_origin",
        "body": "{\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Scheme = \"http\";\n            ctx.Request.Host = new HostString(\"foo\");\n            ctx.Request.Headers.Add(\"Origin\", \"http://foo\");\n\n            ctx.Request.GetCorsOrigin().Should().BeNull();\n        }"
      },
      {
        "name": "GetCorsOrigin_no_origin_should_not_return_cors_origin",
        "body": "{\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Scheme = \"http\";\n            ctx.Request.Host = new HostString(\"foo\");\n\n            ctx.Request.GetCorsOrigin().Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "IResourceStoreExtensionsTests.cs",
    "methods": [
      {
        "name": "GetAllEnabledResourcesAsync_on_duplicate_identity_scopes_should_fail",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                IdentityResources = {\n                    new IdentityResource { Name = \"A\" },\n                    new IdentityResource { Name = \"A\" } }\n            };\n\n            Func<Task> a = () => store.GetAllEnabledResourcesAsync();\n            a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"identity scopes\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                IdentityResources = {\n                    new IdentityResource { Name = \"A\" },\n                    new IdentityResource { Name = \"B\" } }\n            };\n\n            await store.GetAllEnabledResourcesAsync();\n        }"
      },
      {
        "name": "GetAllEnabledResourcesAsync_on_duplicate_api_resources_should_fail",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                ApiResources = { new ApiResource { Name = \"a\" }, new ApiResource { Name = \"a\" } }\n            };\n\n            Func<Task> a = () => store.GetAllEnabledResourcesAsync();\n            a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"api resources\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                ApiResources = { new ApiResource(\"A\"), new ApiResource(\"B\") }\n            };\n\n            await store.GetAllEnabledResourcesAsync();\n        }"
      },
      {
        "name": "FindResourcesByScopeAsync_on_duplicate_identity_scopes_should_fail",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                IdentityResources = {\n                    new IdentityResource { Name = \"A\" },\n                    new IdentityResource { Name = \"A\" } }\n            };\n\n            Func<Task> a = () => store.FindResourcesByScopeAsync(new string[] { \"A\" });\n            a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"identity scopes\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                IdentityResources = {\n                    new IdentityResource { Name = \"A\" },\n                    new IdentityResource { Name = \"B\" } }\n            };\n\n            await store.FindResourcesByScopeAsync(new string[] { \"A\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                ApiResources = { \n                    new ApiResource { Name = \"api1\", Scopes = { \"a\" } },\n                    new ApiResource() { Name = \"api2\", Scopes = { \"a\" } },\n                },\n                ApiScopes = { \n                    new ApiScope(\"a\") \n                } \n            };\n\n            var result = await store.FindResourcesByScopeAsync(new string[] { \"a\" });\n            result.ApiResources.Count.Should().Be(2);\n            result.ApiScopes.Count.Should().Be(1);\n            result.ApiResources.Select(x => x.Name).Should().BeEquivalentTo(new[] { \"api1\", \"api2\" });\n            result.ApiScopes.Select(x => x.Name).Should().BeEquivalentTo(new[] { \"a\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                ApiResources = { new ApiResource(\"A\"), new ApiResource(\"B\") }\n            };\n\n            await store.FindResourcesByScopeAsync(new string[] { \"A\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var store = new MockResourceStore()\n            {\n                ApiResources = { \n                    new ApiResource { \n                        Name = \"api1\", Scopes = { \"a\", \"a\" }\n                    }\n                },\n                ApiScopes = {\n                    new ApiScope(\"a\"),\n                }\n            };\n\n            var result = await store.FindResourcesByScopeAsync(new string[] { \"a\" });\n            result.ApiResources.Count.Should().Be(1);\n        }"
      }
    ]
  },
  {
    "file": "IdentityServerBuilderExtensionsCacheStoreTests.cs",
    "methods": [
      {
        "name": "AddClientStoreCache_should_add_concrete_iclientstore_implementation",
        "body": "{\n            var services = new ServiceCollection();\n            var identityServerBuilder = new IdentityServerBuilder(services);\n\n            identityServerBuilder.AddClientStoreCache<CustomClientStore>();\n\n            services.Any(x => x.ImplementationType == typeof(CustomClientStore)).Should().BeTrue();\n        }"
      },
      {
        "name": "AddResourceStoreCache_should_attempt_to_register_iresourcestore_implementation",
        "body": "{\n            var services = new ServiceCollection();\n            var identityServerBuilder = new IdentityServerBuilder(services);\n\n            identityServerBuilder.AddResourceStoreCache<CustomResourceStore>();\n\n            services.Any(x => x.ImplementationType == typeof(CustomResourceStore)).Should().BeTrue();\n        }"
      }
    ]
  },
  {
    "file": "IdentityServerBuilderExtensionsCryptoTests.cs",
    "methods": [
      {
        "name": "AddSigningCredential_with_json_web_key_containing_asymmetric_key_should_succeed",
        "body": "{\n            IServiceCollection services = new ServiceCollection();\n            IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);\n\n            String json =\n            @\"{\n                \"\"alg\"\" : \"\"RS256\"\",\n                \"\"kty\"\" : \"\"RSA\"\",\n                \"\"use\"\" : \"\"sig\"\",\n                \"\"d\"\" : \"\"KGGNkbbgm2hNMqW6fP1fmcWwEBy77WOJIPAXnDJ0KxNTtqDF8K5ULj7EElHO1A8ZnNl1Ey/x//G9lJCOQUU9wmj010dOSsW0NBbR5NtRtLLuVbkVdyft53PGeTQs+1S3c51fz9jojtNqmlfXSANPFOH6QhxmzpTx3KLsf/TpCzblkSrEGOOqCCvVdl7ybTcB230jNhh3JoL7po1rvxKtoOM4a/Bs0NtKj7e+VaHcf0GLnBPJYetsHu43ZfNejJeDoouaXZzeVEklY3B0pe10OTCIOu0JUKGZxNekklRIo1WSEYdL+CJfrSKWIv8bLj6xSr5zrASvWODyH443LN6ZvQ==\"\",\n                \"\"e\"\" : \"\"AQAB\"\",\n                \"\"n\"\" : \"\"q7mZfquRq8tzg/5slbNdQmrosNN/mFXS25dbSPm11qEDCgZa452KkO8+hvMtqa92QaqdlmalSF8+FRDOz3grDR5NtmnXZxuKnp+raKfzpC6hCvh2JSIe/J9enmsMM4YeI4d1FOSDwhJlZIYMdMnqG/VJtO1LSHjOaF3XN31ANKF0nPAsmr2/WysiQlxnxxiikLEnsFuNdS615ODDXFGTQ1E+zc4zVur4/Ox0cllPwHPA4PqoIgdPJPL+xM9IOIXuAGtsp4CYoxT6VWaRrALIZXXDY806WGTuctq4KKot6FGL9HQte2hRLl4E/r8SzIK86U3wRwrBe7saK+XUXoP0gQ=\"\",\n\t\t        \"\"p\"\" :\t\"\"25dkucyCSqxRcJpRrhl7PXqw7wqBZeLQgYlZLpK493PdM8pFfq+/LK1hFtxIjdFKqXS/TOikB4YCBMEH0Im3HZ8Lo0dub3SWNhdegJyRjMbcoO+A9YSODEj7DFaNpZtdmtDi1n6etJm66ctPSR20NNpzoYZuaJ92fVQiKiOh6Qs=\"\",\n                \"\"q\"\" : \"\"yDKBrS8l1DOx4dwP9hdwhqZJ3XahidiIZSL7m46I/6+cjaki/1mtNiA60MOgqTKegP7Fo7jAYvliqQwnvVGmQvLv19cfKywlIuKN9DdkLHnKh75hfo7aakEbO7GJ5zVgsNnKOdf8wvpclfvIuRDEVva4cksPzsJy6K7C8ENCSCM=\"\",\n                \"\"dp\"\" :  \"\"GlYJ6o6wgawxCEQ5z5uWwETau5CS/Fk7kI2ceI14SZVHzlJQC2WglAcnQcqhmQCk57Xsy5iLM6vKyi8sdMJPh+nvR2HlyNA+w7YBy4L7odqn01VmLgv7zVVjZpNq4ZXEoDC1Q+xjtF1LoYaUt7wsRLp+a7znuPyHBXj1sAAeBwk=\"\",\n                \"\"dq\"\" :  \"\"W8OK3S83T8VCTBzq1Ap6cb3XLcQq11yBaJpYaj0zXr/IKsbUW+dnFeBAFWEWS3gAX3Bod1tAFB3rs0D3FjhO1XE1ruHUT520iAEAwGiDaj+JLh994NzqELo3GW2PoIM/BtFNeKYgHd9UgQsgPnQJCzOb6Aev/z3yHeW9RRQPVbE=\"\",\n                \"\"qi\"\" :  \"\"w4KdmiDN1GtK71JxaasqmEKPNfV3v2KZDXKnfyhUsdx/idKbdTVjvMOkxFPJ4FqV4yIVn06f3QHTm4NEG18Diqxsrzd6kXQIHOa858tLsCcmt9FoGfrgCFgVceh3K/Zah/r8rl9Y61u0Z1kZumwMvFpFE+mVU01t9HgTEAVkHTc=\"\",\n            }\";\n\n            JsonWebKey jsonWebKey = new JsonWebKey(json);\n            SigningCredentials credentials = new SigningCredentials(jsonWebKey, jsonWebKey.Alg);\n            identityServerBuilder.AddSigningCredential(credentials);\n        }"
      },
      {
        "name": "AddSigningCredential_with_json_web_key_containing_symmetric_key_should_throw_exception",
        "body": "{\n            IServiceCollection services = new ServiceCollection();\n            IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);\n\n            String json =\n            @\"{\n                \"\"alg\"\" : \"\"HS256\"\",\n                \"\"kty\"\" : \"\"oct\"\",\n                \"\"use\"\" : \"\"sig\"\",\n                \"\"k\"\" : \"\"y5FHaQFtC294HLAtPXAcMkxZ5gHzCq24223vSYQUrDuu-3CUw7UzPru-AX30ubeB2IM_gUsNQ80bX22wwSk_3LC6XxYxqeGJZSeoQqHG0VNbaWCVkqeuB_HOiL1-ksPfGT-o8_A_Uv-6zi2NaEOYpnIyff5LpdW__LhiE-bhIenaw7GhoXSAfsGEZfNZpUUOU35NAiN2dv0T5vptb87wkL1I2zLhV0pdLvWsDWgQPINEa8bbCA_mseBYpB1eioZvt0TZbp6CL9tiEoiikYV_F3IutrJ2SOWYtDNFeQ3sbyYP7zTzh9a2eyaM8ca5_q3qosI92AbZ7WpEFLa9cZ_O7g\"\"\n            }\";\n\n            JsonWebKey jsonWebKey = new JsonWebKey(json);\n            SigningCredentials credentials = new SigningCredentials(jsonWebKey, jsonWebKey.Alg);\n            Assert.Throws<InvalidOperationException>(() => identityServerBuilder.AddSigningCredential(credentials));\n        }"
      },
      {
        "name": "AddDeveloperSigningCredential_should_succeed",
        "body": "{\n            IServiceCollection services = new ServiceCollection();\n            IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);\n\n            identityServerBuilder.AddDeveloperSigningCredential();\n\n            //clean up... delete stored rsa key\n            var filename = Path.Combine(Directory.GetCurrentDirectory(), \"tempkey.rsa\");\n\n            if (File.Exists(filename))\n                File.Delete(filename);\n        }"
      },
      {
        "name": "AddDeveloperSigningCredential_should_succeed_when_called_multiple_times",
        "body": "{\n            IServiceCollection services = new ServiceCollection();\n            IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);\n\n            try\n            {\n                identityServerBuilder.AddDeveloperSigningCredential();\n\n                //calling a second time will try to load the saved rsa key from disk. An exception will be throw if the private key is not serialized properly.\n                identityServerBuilder.AddDeveloperSigningCredential();\n            }\n            finally\n            {\n                //clean up... delete stored rsa key\n                var filename = Path.Combine(Directory.GetCurrentDirectory(), \"tempkey.rsa\");\n\n                if (File.Exists(filename))\n                    File.Delete(filename);\n            }\n        }"
      }
    ]
  },
  {
    "file": "JwtPayloadCreationTests.cs",
    "methods": [
      {
        "name": "Should_create_scopes_as_array_by_default",
        "body": "{\n            var options = new IdentityServerOptions();\n            var payload = _token.CreateJwtPayload(new SystemClock(), options, TestLogger.Create<JwtPayloadCreationTests>());\n\n            payload.Should().NotBeNull();\n            var scopes = payload.Claims.Where(c => c.Type == JwtClaimTypes.Scope).ToArray();\n            scopes.Count().Should().Be(3);\n            scopes[0].Value.Should().Be(\"scope1\");\n            scopes[1].Value.Should().Be(\"scope2\");\n            scopes[2].Value.Should().Be(\"scope3\");\n        }"
      },
      {
        "name": "Should_create_scopes_as_string",
        "body": "{\n            var options = new IdentityServerOptions\n            {\n                EmitScopesAsSpaceDelimitedStringInJwt = true\n            };\n            \n            var payload = _token.CreateJwtPayload(new SystemClock(), options, TestLogger.Create<JwtPayloadCreationTests>());\n\n            payload.Should().NotBeNull();\n            var scopes = payload.Claims.Where(c => c.Type == JwtClaimTypes.Scope).ToList();\n            scopes.Count().Should().Be(1);\n            scopes.First().Value.Should().Be(\"scope1 scope2 scope3\");\n        }"
      }
    ]
  },
  {
    "file": "StringExtensionsTests.cs",
    "methods": [
      {
        "name": "TestGetOrigin",
        "body": "{\n            CheckOrigin(\"http://idsvr.com\", \"http://idsvr.com\");\n            CheckOrigin(\"http://idsvr.com/\", \"http://idsvr.com\");\n            CheckOrigin(\"http://idsvr.com/test\", \"http://idsvr.com\");\n            CheckOrigin(\"http://idsvr.com/test/resource\", \"http://idsvr.com\");\n            CheckOrigin(\"http://idsvr.com:8080\", \"http://idsvr.com:8080\");\n            CheckOrigin(\"http://idsvr.com:8080/\", \"http://idsvr.com:8080\");\n            CheckOrigin(\"http://idsvr.com:8080/test\", \"http://idsvr.com:8080\");\n            CheckOrigin(\"http://idsvr.com:8080/test/resource\", \"http://idsvr.com:8080\");\n            CheckOrigin(\"http://127.0.0.1\", \"http://127.0.0.1\");\n            CheckOrigin(\"http://127.0.0.1/\", \"http://127.0.0.1\");\n            CheckOrigin(\"http://127.0.0.1/test\", \"http://127.0.0.1\");\n            CheckOrigin(\"http://127.0.0.1/test/resource\", \"http://127.0.0.1\");\n            CheckOrigin(\"http://127.0.0.1:8080\", \"http://127.0.0.1:8080\");\n            CheckOrigin(\"http://127.0.0.1:8080/\", \"http://127.0.0.1:8080\");\n            CheckOrigin(\"http://127.0.0.1:8080/test\", \"http://127.0.0.1:8080\");\n            CheckOrigin(\"http://127.0.0.1:8080/test/resource\", \"http://127.0.0.1:8080\");\n            CheckOrigin(\"http://localhost\", \"http://localhost\");\n            CheckOrigin(\"http://localhost/\", \"http://localhost\");\n            CheckOrigin(\"http://localhost/test\", \"http://localhost\");\n            CheckOrigin(\"http://localhost/test/resource\", \"http://localhost\");\n            CheckOrigin(\"http://localhost:8080\", \"http://localhost:8080\");\n            CheckOrigin(\"http://localhost:8080/\", \"http://localhost:8080\");\n            CheckOrigin(\"http://localhost:8080/test\", \"http://localhost:8080\");\n            CheckOrigin(\"http://localhost:8080/test/resource\", \"http://localhost:8080\");\n            CheckOrigin(\"https://idsvr.com\", \"https://idsvr.com\");\n            CheckOrigin(\"https://idsvr.com/\", \"https://idsvr.com\");\n            CheckOrigin(\"https://idsvr.com/test\", \"https://idsvr.com\");\n            CheckOrigin(\"https://idsvr.com/test/resource\", \"https://idsvr.com\");\n            CheckOrigin(\"https://idsvr.com:8080\", \"https://idsvr.com:8080\");\n            CheckOrigin(\"https://idsvr.com:8080/\", \"https://idsvr.com:8080\");\n            CheckOrigin(\"https://idsvr.com:8080/test\", \"https://idsvr.com:8080\");\n            CheckOrigin(\"https://idsvr.com:8080/test/resource\", \"https://idsvr.com:8080\");\n            CheckOrigin(\"https://127.0.0.1\", \"https://127.0.0.1\");\n            CheckOrigin(\"https://127.0.0.1/\", \"https://127.0.0.1\");\n            CheckOrigin(\"https://127.0.0.1/test\", \"https://127.0.0.1\");\n            CheckOrigin(\"https://127.0.0.1/test/resource\", \"https://127.0.0.1\");\n            CheckOrigin(\"https://127.0.0.1:8080\", \"https://127.0.0.1:8080\");\n            CheckOrigin(\"https://127.0.0.1:8080/\", \"https://127.0.0.1:8080\");\n            CheckOrigin(\"https://127.0.0.1:8080/test\", \"https://127.0.0.1:8080\");\n            CheckOrigin(\"https://127.0.0.1:8080/test/resource\", \"https://127.0.0.1:8080\");\n            CheckOrigin(\"https://localhost\", \"https://localhost\");\n            CheckOrigin(\"https://localhost/\", \"https://localhost\");\n            CheckOrigin(\"https://localhost/test\", \"https://localhost\");\n            CheckOrigin(\"https://localhost/test/resource\", \"https://localhost\");\n            CheckOrigin(\"https://localhost:8080\", \"https://localhost:8080\");\n            CheckOrigin(\"https://localhost:8080/\", \"https://localhost:8080\");\n            CheckOrigin(\"https://localhost:8080/test\", \"https://localhost:8080\");\n            CheckOrigin(\"https://localhost:8080/test/resource\", \"https://localhost:8080\");\n            CheckOrigin(\"test://idsvr.com\", null);\n            CheckOrigin(\"test://idsvr.com/\", null);\n            CheckOrigin(\"test://idsvr.com/test\", null);\n            CheckOrigin(\"test://idsvr.com/test/resource\", null);\n            CheckOrigin(\"test://idsvr.com:8080\", null);\n            CheckOrigin(\"test://idsvr.com:8080/\", null);\n            CheckOrigin(\"test://idsvr.com:8080/test\", null);\n            CheckOrigin(\"test://idsvr.com:8080/test/resource\", null);\n            CheckOrigin(\"test://127.0.0.1\", null);\n            CheckOrigin(\"test://127.0.0.1/\", null);\n            CheckOrigin(\"test://127.0.0.1/test\", null);\n            CheckOrigin(\"test://127.0.0.1/test/resource\", null);\n            CheckOrigin(\"test://127.0.0.1:8080\", null);\n            CheckOrigin(\"test://127.0.0.1:8080/\", null);\n            CheckOrigin(\"test://127.0.0.1:8080/test\", null);\n            CheckOrigin(\"test://127.0.0.1:8080/test/resource\", null);\n            CheckOrigin(\"test://localhost\", null);\n            CheckOrigin(\"test://localhost/\", null);\n            CheckOrigin(\"test://localhost/test\", null);\n            CheckOrigin(\"test://localhost/test/resource\", null);\n            CheckOrigin(\"test://localhost:8080\", null);\n            CheckOrigin(\"test://localhost:8080/\", null);\n            CheckOrigin(\"test://localhost:8080/test\", null);\n            CheckOrigin(\"test://localhost:8080/test/resource\", null);\n        }"
      }
    ]
  },
  {
    "file": "ValidatedAuthorizeRequestExtensionsTests.cs",
    "methods": [
      {
        "name": "GetAcrValues_should_return_snapshot_of_values",
        "body": "{\n            var request = new ValidatedAuthorizeRequest()\n            {\n                Raw = new System.Collections.Specialized.NameValueCollection()\n            };\n            request.AuthenticationContextReferenceClasses.Add(\"a\");\n            request.AuthenticationContextReferenceClasses.Add(\"b\");\n            request.AuthenticationContextReferenceClasses.Add(\"c\");\n\n            var acrs = request.GetAcrValues();\n            foreach(var acr in acrs)\n            {\n                request.RemoveAcrValue(acr);\n            }\n        }"
      }
    ]
  },
  {
    "file": "EndpointRouterTests.cs",
    "methods": [
      {
        "name": "Endpoint_ctor_requires_path_to_start_with_slash",
        "body": "{\n            Action a = () => new IdentityServer4.Hosting.Endpoint(\"ep1\", \"ep1\", typeof(MyEndpointHandler));\n            a.Should().Throw<ArgumentException>();\n        }"
      },
      {
        "name": "Find_should_return_null_for_incorrect_path",
        "body": "{\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Path = new PathString(\"/wrong\");\n            ctx.RequestServices = new StubServiceProvider();\n\n            var result = _subject.Find(ctx);\n            result.Should().BeNull();\n        }"
      },
      {
        "name": "Find_should_find_path",
        "body": "{\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Path = new PathString(\"/ep1\");\n            ctx.RequestServices = new StubServiceProvider();\n\n            var result = _subject.Find(ctx);\n            result.Should().BeOfType<MyEndpointHandler>();\n        }"
      },
      {
        "name": "Find_should_not_find_nested_paths",
        "body": "{\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Path = new PathString(\"/ep1/subpath\");\n            ctx.RequestServices = new StubServiceProvider();\n\n            var result = _subject.Find(ctx);\n            result.Should().BeNull();\n        }"
      },
      {
        "name": "Find_should_find_first_registered_mapping",
        "body": "{\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyOtherEndpointHandler)));\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Path = new PathString(\"/ep1\");\n            ctx.RequestServices = new StubServiceProvider();\n\n            var result = _subject.Find(ctx);\n            result.Should().BeOfType<MyEndpointHandler>();\n        }"
      },
      {
        "name": "Find_should_return_null_for_disabled_endpoint",
        "body": "{\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(EndpointNames.Authorize, \"/ep1\", typeof(MyEndpointHandler)));\n            _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));\n\n            _options.Endpoints.EnableAuthorizeEndpoint = false;\n\n            var ctx = new DefaultHttpContext();\n            ctx.Request.Path = new PathString(\"/ep1\");\n            ctx.RequestServices = new StubServiceProvider();\n\n            var result = _subject.Find(ctx);\n            result.Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "ObjectSerializerTests.cs",
    "methods": [
      {
        "name": "Can_be_deserialize_message",
        "body": "{\n            Action a = () => IdentityServer4.ObjectSerializer.FromString<Message<ErrorMessage>>(\"{\\\"created\\\":0, \\\"data\\\": {\\\"error\\\": \\\"error\\\"}}\");\n            a.Should().NotThrow();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                    EnableLocalLogin = false,\n                    IdentityProviderRestrictions = new List<string>\n                    {\n                        \"some_idp\"\n                    }\n                },\n                PromptModes = new[] { PromptModes.None },\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _clock.UtcNowFunc = () => new DateTime(2020, 02, 03, 9, 0, 0);\n\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    AuthenticationTime = new DateTime(2020, 02, 01, 9, 0, 0),\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                    EnableLocalLogin = true,\n                },\n                PromptModes = new[] { PromptModes.None },\n                MaxAge = 3600\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client(),\n                AuthenticationContextReferenceClasses = new List<string>{\n                    \"idp:some_idp\"\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                PromptModes = new[] { PromptModes.None }\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client()\n                {\n                    UserSsoLifetime = 3600 // 1h\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = \"local\",\n                    AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(3700))\n                }.CreatePrincipal(),\n                PromptModes = new[] { PromptModes.None }\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client()\n                {\n                    EnableLocalLogin = false\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                PromptModes = new[] { PromptModes.None }\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.IsLogin.Should().BeFalse();\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Consent.cs",
    "methods": [
      {
        "name": "ProcessConsentAsync_NullRequest_Throws",
        "body": "{\n            Func<Task> act = () => _subject.ProcessConsentAsync(null, new ConsentResponse());\n\n            act.Should().Throw<ArgumentNullException>()\n                .And.ParamName.Should().Be(\"request\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.Consent },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            await _subject.ProcessConsentAsync(request, null);\n        }"
      },
      {
        "name": "ProcessConsentAsync_PromptModeIsLogin_Throws",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.Login },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n\n            Func<Task> act = () => _subject.ProcessConsentAsync(request);\n\n            act.Should().Throw<ArgumentException>()\n                .And.Message.Should().Contain(\"PromptMode\");\n        }"
      },
      {
        "name": "ProcessConsentAsync_PromptModeIsSelectAccount_Throws",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.SelectAccount },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n\n            Func<Task> act = () => _subject.ProcessConsentAsync(request);\n\n            act.Should().Throw<ArgumentException>()\n                .And.Message.Should().Contain(\"PromptMode\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.None },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var result = await _subject.ProcessConsentAsync(request);\n\n            request.WasConsentShown.Should().BeFalse();\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(OidcConstants.AuthorizeErrors.ConsentRequired);\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.Consent },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var result = await _subject.ProcessConsentAsync(request);\n            request.WasConsentShown.Should().BeFalse();\n            result.IsConsent.Should().BeTrue();\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.Consent },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var result = await _subject.ProcessConsentAsync(request);\n            request.WasConsentShown.Should().BeFalse();\n            result.IsConsent.Should().BeTrue();\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                PromptModes = new[] { OidcConstants.PromptModes.Consent },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] {}\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            request.WasConsentShown.Should().BeTrue();\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] {}\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            request.WasConsentShown.Should().BeTrue();\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var client = new Client {};\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n                Client = client\n            };\n\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] { \"read\" }\n            };\n\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                Client = new Client {\n                    AllowRememberConsent = false\n                },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] { \"openid\", \"read\" }\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            request.ValidatedResources.Resources.IdentityResources.Count().Should().Be(1);\n            request.ValidatedResources.Resources.ApiScopes.Count().Should().Be(1);\n            \"openid\".Should().Be(request.ValidatedResources.Resources.IdentityResources.Select(x => x.Name).First());\n            \"read\".Should().Be(request.ValidatedResources.Resources.ApiScopes.First().Name);\n            request.WasConsentShown.Should().BeTrue();\n            result.IsConsent.Should().BeFalse();\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                Client = new Client {\n                    AllowRememberConsent = false\n                },\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] { \"openid\", \"read\" }\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            request.ValidatedResources.Resources.IdentityResources.Count().Should().Be(1);\n            request.ValidatedResources.Resources.ApiScopes.Count().Should().Be(1);\n            \"read\".Should().Be(request.ValidatedResources.Resources.ApiScopes.First().Name);\n            request.WasConsentShown.Should().BeTrue();\n            result.IsConsent.Should().BeFalse();\n            AssertUpdateConsentNotCalled();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var client = new Client { AllowRememberConsent = true };\n            var user = new ClaimsPrincipal();\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                Client = client,\n                Subject = user,\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var consent = new ConsentResponse\n            {\n                RememberConsent = true,\n                ScopesValuesConsented = new string[] { \"openid\", \"read\" }\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            AssertUpdateConsentCalled(client, user, \"openid\", \"read\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            RequiresConsent(true);\n            var client = new Client { AllowRememberConsent = true };\n            var user = new ClaimsPrincipal();\n            var request = new ValidatedAuthorizeRequest()\n            {\n                ResponseMode = OidcConstants.ResponseModes.Fragment,\n                State = \"12345\",\n                RedirectUri = \"https://client.com/callback\",\n                Client = client,\n                Subject = user,\n                RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },\n                ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),\n            };\n            var consent = new ConsentResponse\n            {\n                RememberConsent = false,\n                ScopesValuesConsented = new string[] { \"openid\", \"read\" }\n            };\n            var result = await _subject.ProcessConsentAsync(request, consent);\n            AssertUpdateConsentCalled(client, user);\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Custom.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                },\n            };\n\n            _subject.ProcessLoginResponse = new InteractionResponse\n            {\n                RedirectUrl = \"/custom\"\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsRedirect.Should().BeTrue();\n            result.RedirectUrl.Should().Be(\"/custom\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                },\n                PromptModes = new[] { PromptModes.None },\n            };\n\n            _subject.ProcessLoginResponse = new InteractionResponse\n            {\n                IsLogin = true\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"login_required\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                },\n                PromptModes = new[] { PromptModes.None },\n            };\n\n            _subject.ProcessLoginResponse = new InteractionResponse\n            {\n                RedirectUrl = \"/custom\"\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"interaction_required\");\n            result.RedirectUrl.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                },\n                PromptModes = new[] { PromptModes.None },\n            };\n\n            _subject.ProcessConsentResponse = new InteractionResponse\n            {\n                IsConsent = true\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsError.Should().BeTrue();\n            result.Error.Should().Be(\"consent_required\");\n        }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Login.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = Principal.Anonymous\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client(),\n                ValidatedResources = new ResourceValidationResult(),\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessInteractionAsync(request);\n\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\") {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client \n                {\n                    IdentityProviderRestrictions = new List<string> \n                    {\n                        IdentityServerConstants.LocalIdentityProvider\n                    }\n                }\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal(),\n                Client = new Client\n                {\n                    EnableLocalLogin = false,\n                    IdentityProviderRestrictions = new List<string> \n                    {\n                        \"some_idp\"\n                    }\n                }\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client(),\n                 AuthenticationContextReferenceClasses = new List<string>{\n                    \"idp:\" + IdentityServerConstants.LocalIdentityProvider\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client(),\n                AuthenticationContextReferenceClasses = new List<string>{\n                    \"idp:some_idp\"\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client() {\n                    UserSsoLifetime = 3600 // 1h\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = \"local\",\n                    AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(10))\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client()\n                {\n                    UserSsoLifetime = 3600 // 1h\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = \"local\",\n                    AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(3700))\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Client = new Client()\n                {\n                    EnableLocalLogin = false\n                },\n                Subject = new IdentityServerUser(\"123\")\n                {\n                    IdentityProvider = IdentityServerConstants.LocalIdentityProvider\n                }.CreatePrincipal()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\").CreatePrincipal(),\n                PromptModes = new[] { OidcConstants.PromptModes.Login },\n                Raw = new NameValueCollection()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\").CreatePrincipal(),\n                PromptModes = new[] { OidcConstants.PromptModes.SelectAccount },\n                Raw = new NameValueCollection()\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            result.IsLogin.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new ValidatedAuthorizeRequest\n            {\n                ClientId = \"foo\",\n                Subject = new IdentityServerUser(\"123\").CreatePrincipal(),\n                PromptModes = new[] { OidcConstants.PromptModes.Login },\n                Raw = new NameValueCollection\n                {\n                    { OidcConstants.AuthorizeRequest.Prompt, OidcConstants.PromptModes.Login }\n                }\n            };\n\n            var result = await _subject.ProcessLoginAsync(request);\n\n            request.Raw.AllKeys.Should().NotContain(OidcConstants.AuthorizeRequest.Prompt);\n        }"
      }
    ]
  },
  {
    "file": "DeviceAuthorizationResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "ProcessAsync_when_valiationresult_null_exect_exception",
        "body": "{\n            Func<Task> act = () => generator.ProcessAsync(null, TestBaseUrl);\n            act.Should().Throw<ArgumentNullException>();\n        }"
      },
      {
        "name": "ProcessAsync_when_valiationresult_client_null_exect_exception",
        "body": "{\n            var validationResult = new DeviceAuthorizationRequestValidationResult(new ValidatedDeviceAuthorizationRequest());\n            Func <Task> act = () => generator.ProcessAsync(validationResult, TestBaseUrl);\n            act.Should().Throw<ArgumentNullException>();\n        }"
      },
      {
        "name": "ProcessAsync_when_baseurl_null_exect_exception",
        "body": "{\n            Func<Task> act = () => generator.ProcessAsync(testResult, null);\n            act.Should().Throw<ArgumentException>();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var creationTime = DateTime.UtcNow;\n            clock.UtcNowFunc = () => creationTime;\n\n            testResult.ValidatedRequest.Client.UserCodeType = FakeUserCodeGenerator.UserCodeTypeValue;\n            await deviceFlowCodeService.StoreDeviceAuthorizationAsync(FakeUserCodeGenerator.TestCollisionUserCode, new DeviceCode());\n\n            var response = await generator.ProcessAsync(testResult, TestBaseUrl);\n\n            response.UserCode.Should().Be(FakeUserCodeGenerator.TestUniqueUserCode);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var creationTime = DateTime.UtcNow;\n            clock.UtcNowFunc = () => creationTime;\n\n            fakeUserCodeGenerator.RetryLimit = 1;\n            testResult.ValidatedRequest.Client.UserCodeType = FakeUserCodeGenerator.UserCodeTypeValue;\n            await deviceFlowCodeService.StoreDeviceAuthorizationAsync(FakeUserCodeGenerator.TestCollisionUserCode, new DeviceCode());\n\n            await Assert.ThrowsAsync<InvalidOperationException>(() => generator.ProcessAsync(testResult, TestBaseUrl));\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var creationTime = DateTime.UtcNow;\n            clock.UtcNowFunc = () => creationTime;\n\n            testResult.ValidatedRequest.RequestedScopes = new List<string> { \"openid\", \"api1\" };\n            testResult.ValidatedRequest.ValidatedResources = new ResourceValidationResult(new Resources(\n                identityResources.Where(x=>x.Name == \"openid\"), \n                apiResources.Where(x=>x.Name == \"resource\"), \n                scopes.Where(x=>x.Name == \"api1\")));\n\n            var response = await generator.ProcessAsync(testResult, TestBaseUrl);\n\n            response.UserCode.Should().NotBeNullOrWhiteSpace();\n\n            var userCode = await deviceFlowCodeService.FindByUserCodeAsync(response.UserCode);\n            userCode.Should().NotBeNull();\n            userCode.ClientId.Should().Be(testResult.ValidatedRequest.Client.ClientId);\n            userCode.Lifetime.Should().Be(testResult.ValidatedRequest.Client.DeviceCodeLifetime);\n            userCode.CreationTime.Should().Be(creationTime);\n            userCode.Subject.Should().BeNull();\n            userCode.AuthorizedScopes.Should().BeNull();\n\n            userCode.RequestedScopes.Should().Contain(testResult.ValidatedRequest.RequestedScopes);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var creationTime = DateTime.UtcNow;\n            clock.UtcNowFunc = () => creationTime;\n\n            var response = await generator.ProcessAsync(testResult, TestBaseUrl);\n\n            response.DeviceCode.Should().NotBeNullOrWhiteSpace();\n            response.Interval.Should().Be(options.DeviceFlow.Interval);\n            \n            var deviceCode = await deviceFlowCodeService.FindByDeviceCodeAsync(response.DeviceCode);\n            deviceCode.Should().NotBeNull();\n            deviceCode.ClientId.Should().Be(testResult.ValidatedRequest.Client.ClientId);\n            deviceCode.IsOpenId.Should().Be(testResult.ValidatedRequest.IsOpenIdRequest);\n            deviceCode.Lifetime.Should().Be(testResult.ValidatedRequest.Client.DeviceCodeLifetime);\n            deviceCode.CreationTime.Should().Be(creationTime);\n            deviceCode.Subject.Should().BeNull();\n            deviceCode.AuthorizedScopes.Should().BeNull();\n            \n            response.DeviceCodeLifetime.Should().Be(deviceCode.Lifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            const string baseUrl = \"http://localhost:5000/\";\n            options.UserInteraction.DeviceVerificationUrl = \"/device\";\n            options.UserInteraction.DeviceVerificationUserCodeParameter = \"userCode\";\n\n            var response = await generator.ProcessAsync(testResult, baseUrl);\n\n            response.VerificationUri.Should().Be(\"http://localhost:5000/device\");\n            response.VerificationUriComplete.Should().StartWith(\"http://localhost:5000/device?userCode=\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            const string baseUrl = \"http://localhost:5000/\";\n            options.UserInteraction.DeviceVerificationUrl = \"http://short/device\";\n            options.UserInteraction.DeviceVerificationUserCodeParameter = \"userCode\";\n\n            var response = await generator.ProcessAsync(testResult, baseUrl);\n\n            response.VerificationUri.Should().Be(\"http://short/device\");\n            response.VerificationUriComplete.Should().StartWith(\"http://short/device?userCode=\");\n        }"
      }
    ]
  },
  {
    "file": "UserInfoResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var resources = await _subject.GetRequestedResourcesAsync(null);\n            var claims = await _subject.GetRequestedClaimTypesAsync(resources);\n            claims.Should().BeEquivalentTo(new string[] { });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"c1\", \"c2\" }));\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"c2\", \"c3\" }));\n\n            var resources = await _subject.GetRequestedResourcesAsync(new[] { \"id1\", \"id2\", \"id3\" });\n            var claims = await _subject.GetRequestedClaimTypesAsync(resources);\n            claims.Should().BeEquivalentTo(new string[] { \"c1\", \"c2\", \"c3\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"c1\", \"c2\" }) { Enabled = false });\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"c2\", \"c3\" }));\n\n            var resources = await _subject.GetRequestedResourcesAsync(new[] { \"id1\", \"id2\", \"id3\" });\n            var claims = await _subject.GetRequestedClaimTypesAsync(resources);\n            claims.Should().BeEquivalentTo(new string[] { \"c2\", \"c3\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n\n            var result = new UserInfoRequestValidationResult\n            {\n                Subject = _user,\n                TokenValidationResult = new TokenValidationResult\n                {\n                    Claims = new List<Claim>\n                    {\n                        { new Claim(\"scope\", \"id1\") },\n                        { new Claim(\"scope\", \"id2\") },\n                        { new Claim(\"scope\", \"id3\") }\n                    },\n                    Client = _client\n                }\n            };\n\n            var claims = await _subject.ProcessAsync(result);\n\n            _mockProfileService.GetProfileWasCalled.Should().BeTrue();\n            _mockProfileService.ProfileContext.RequestedClaimTypes.Should().BeEquivalentTo(new[] { \"foo\", \"bar\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n            \n            var address = new\n            {\n                street_address = \"One Hacker Way\",\n                locality = \"Heidelberg\",\n                postal_code = 69118,\n                country = \"Germany\"\n            };\n            \n            _mockProfileService.ProfileClaims = new[]\n            {\n                new Claim(\"email\", \"fred@gmail.com\"),\n                new Claim(\"name\", \"fred jones\"),\n                new Claim(\"address\", @\"{ 'street_address': 'One Hacker Way', 'locality': 'Heidelberg', 'postal_code': 69118, 'country': 'Germany' }\", IdentityServerConstants.ClaimValueTypes.Json),\n                new Claim(\"address2\", JsonSerializer.Serialize(address), IdentityServerConstants.ClaimValueTypes.Json)\n            };\n\n            var result = new UserInfoRequestValidationResult\n            {\n                Subject = _user,\n                TokenValidationResult = new TokenValidationResult\n                {\n                    Claims = new List<Claim>\n                    {\n                        { new Claim(\"scope\", \"id1\") },\n                        { new Claim(\"scope\", \"id2\") },\n                        { new Claim(\"scope\", \"id3\") }\n                    },\n                    Client = _client\n                }\n            };\n\n            var claims = await _subject.ProcessAsync(result);\n\n            claims.Should().ContainKey(\"email\");\n            claims[\"email\"].Should().Be(\"fred@gmail.com\");\n            claims.Should().ContainKey(\"name\");\n            claims[\"name\"].Should().Be(\"fred jones\");\n            \n            // this will be treated as a string because this is not valid JSON from the System.Text library point of view\n            claims.Should().ContainKey(\"address\");\n            claims[\"address\"].Should().Be(\"{ 'street_address': 'One Hacker Way', 'locality': 'Heidelberg', 'postal_code': 69118, 'country': 'Germany' }\");\n            \n            // this is a JsonElement\n            claims.Should().ContainKey(\"address2\");\n            claims[\"address2\"].ToString().Should().Be(\"{\\\"street_address\\\":\\\"One Hacker Way\\\",\\\"locality\\\":\\\"Heidelberg\\\",\\\"postal_code\\\":69118,\\\"country\\\":\\\"Germany\\\"}\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n\n            var result = new UserInfoRequestValidationResult\n            {\n                Subject = _user,\n                TokenValidationResult = new TokenValidationResult\n                {\n                    Claims = new List<Claim>\n                    {\n                        { new Claim(\"scope\", \"id1\") },\n                        { new Claim(\"scope\", \"id2\") },\n                        { new Claim(\"scope\", \"id3\") }\n                    },\n                    Client = _client\n                }\n            };\n\n            var claims = await _subject.ProcessAsync(result);\n\n            claims.Should().ContainKey(\"sub\");\n            claims[\"sub\"].Should().Be(\"bob\");\n        }"
      },
      {
        "name": "ProcessAsync_should_throw_if_incorrect_sub_issued_by_profile_service",
        "body": "{\n            _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n            _mockProfileService.ProfileClaims = new[]\n            {\n                new Claim(\"sub\", \"fred\")\n            };\n\n            var result = new UserInfoRequestValidationResult\n            {\n                Subject = _user,\n                TokenValidationResult = new TokenValidationResult\n                {\n                    Claims = new List<Claim>\n                    {\n                        { new Claim(\"scope\", \"id1\") },\n                        { new Claim(\"scope\", \"id2\") },\n                        { new Claim(\"scope\", \"id3\") }\n                    },\n                    Client = _client\n                }\n            };\n\n            Func<Task> act = () => _subject.ProcessAsync(result);\n\n            act.Should().Throw<InvalidOperationException>()\n                .And.Message.Should().Contain(\"subject\");\n        }"
      }
    ]
  },
  {
    "file": "DefaultClaimsServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);\n\n            var types = claims.Select(x => x.Type);\n            types.Should().Contain(JwtClaimTypes.Subject);\n            types.Should().Contain(JwtClaimTypes.AuthenticationTime);\n            types.Should().Contain(JwtClaimTypes.IdentityProvider);\n            types.Should().Contain(JwtClaimTypes.AuthenticationMethod);\n            types.Should().Contain(JwtClaimTypes.AuthenticationContextClassReference);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));\n\n            var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);\n\n            _mockMockProfileService.GetProfileWasCalled.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));\n            _mockMockProfileService.ProfileClaims.Add(new Claim(\"foo\", \"foo1\"));\n\n            var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, true, _validatedRequest);\n\n            _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _client.AlwaysIncludeUserClaimsInIdToken = true;\n\n            _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));\n            _mockMockProfileService.ProfileClaims.Add(new Claim(\"foo\", \"foo1\"));\n\n            var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);\n\n            _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));\n            _mockMockProfileService.ProfileClaims.Add(new Claim(\"aud\", \"bar\"));\n\n            var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, true, _validatedRequest);\n\n            claims.Count(x => x.Type == \"aud\" && x.Value == \"bar\").Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == JwtClaimTypes.ClientId && x.Value == _client.ClientId).Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == \"client_some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _validatedRequest.Client.ClientClaimsPrefix = \"custom_prefix_\";\n            var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == \"custom_prefix_some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _validatedRequest.Client.ClientClaimsPrefix = null;\n            var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == \"some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _validatedRequest.Client.ClientClaimsPrefix = null;\n            _validatedRequest.Client.AlwaysSendClientClaims = true;\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == \"some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n            _resources.ApiScopes.Add(new ApiScope(\"api1\"));\n            _resources.ApiScopes.Add(new ApiScope(\"api2\"));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Count().Should().Be(4);\n            scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api1\", \"api2\", \"id1\", \"id2\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiScopes.Add(new ApiScope(\"api\"));\n            var resourceResult = new ResourceValidationResult()\n            {\n                Resources = _resources,\n                ParsedScopes = { new ParsedScopeValue(\"api:123\", \"api\", \"123\") }\n            };\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, resourceResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Count().Should().Be(1);\n            scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api:123\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiResources.Add(new ApiResource(\"api1\"));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Count().Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // arguably, if this situation arises, then the ResourceValidationResult was not populated properly\n            // with ParsedScopes matching ApiScopes\n            _resources.ApiScopes.Add(new ApiScope(\"api1\"));\n            var resourceResult = new ResourceValidationResult()\n            {\n                Resources = _resources,\n                ParsedScopes = { new ParsedScopeValue(\"api2\") }\n            };\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, resourceResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Count().Should().Be(1);\n            scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api2\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.OfflineAccess = false;\n            _resources.IdentityResources.Clear();\n            _resources.ApiResources.Clear();\n            _resources.ApiScopes.Clear();\n\n            _resources.ApiResources.Add(new ApiResource { Name = \"api1\", Scopes = { \"resource\" } });\n            _resources.ApiResources.Add(new ApiResource { Name = \"api2\", Scopes = { \"resource\" } });\n            _resources.ApiResources.Add(new ApiResource { Name = \"api3\", Scopes = { \"resource\" } });\n            _resources.ApiScopes.Add(new ApiScope(\"resource\"));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Count().Should().Be(1);\n            scopes.ToArray().Should().BeEquivalentTo(new string[] { \"resource\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n            _resources.ApiResources.Add(new ApiResource(\"api1\"));\n            _resources.ApiResources.Add(new ApiResource(\"api2\"));\n            _resources.OfflineAccess = true;\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Should().Contain(IdentityServerConstants.StandardScopes.OfflineAccess);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));\n            _resources.ApiResources.Add(new ApiResource(\"api1\"));\n            _resources.ApiResources.Add(new ApiResource(\"api2\"));\n            _resources.OfflineAccess = true;\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);\n\n            var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);\n            scopes.Should().NotContain(IdentityServerConstants.StandardScopes.OfflineAccess);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            var types = claims.Select(x => x.Type);\n            types.Should().Contain(JwtClaimTypes.Subject);\n            types.Should().Contain(JwtClaimTypes.AuthenticationTime);\n            types.Should().Contain(JwtClaimTypes.IdentityProvider);\n            types.Should().Contain(JwtClaimTypes.AuthenticationMethod);\n            types.Should().Contain(JwtClaimTypes.AuthenticationContextClassReference);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));\n            _resources.ApiResources.Add(new ApiResource(\"api1\", new string[] { \"bar\" }));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().NotContain(\"foo\");\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"bar\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiResources.Add(new ApiResource(\"api1\", new[] { \"foo\" }));\n            _mockMockProfileService.ProfileClaims.Add(new Claim(\"aud\", \"bar\"));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            claims.Count(x => x.Type == \"aud\" && x.Value == \"bar\").Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiResources.Add(new ApiResource(\"api1\", new[] { \"foo\" }));\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiResources.Add(\n                new ApiResource(\"api\")\n                {\n                    Scopes = { \"api1\" }\n                }\n            );\n            _resources.ApiScopes.Add(\n                new ApiScope(\"api1\")\n                {\n                    UserClaims = { \"foo\" }\n                }\n            );\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _resources.ApiResources.Add(\n                new ApiResource(\"api\")\n                {\n                    UserClaims = { \"foo\" },\n                    Scopes = { \"api1\" } \n                }\n            );\n            _resources.ApiScopes.Add(\n                new ApiScope(\"api1\")\n                {\n                    UserClaims = { \"bar\" }\n                }\n            );\n\n            var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);\n\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");\n            _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"bar\");\n        }"
      }
    ]
  },
  {
    "file": "DefaultConsentServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _client.AllowRememberConsent = false;\n\n            await _subject.UpdateConsentAsync(_user, _client, new [] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);\n            consent.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);\n            consent.Scopes.Count().Should().Be(2);\n            consent.Scopes.Should().Contain(\"scope1\");\n            consent.Scopes.Should().Contain(\"scope2\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            await _subject.UpdateConsentAsync(_user, _client, new ParsedScopeValue[] { });\n\n            var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);\n            consent.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _client.RequireConsent = false;\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _client.AllowRememberConsent = false;\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var result = await _subject.RequiresConsentAsync(_user, _client, new ParsedScopeValue[] { });\n\n            result.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"offline_access\") });\n\n            result.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\"), new ParsedScopeValue(\"scope3\") });\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, new [] { new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeFalse();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope2\"), new ParsedScopeValue(\"scope3\") });\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });\n\n            result.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            now = DateTime.UtcNow;\n\n            var scopes = new[] { new ParsedScopeValue(\"foo\"), new ParsedScopeValue(\"bar\") };\n            _client.ConsentLifetime = 2;\n\n            await _subject.UpdateConsentAsync(_user, _client, scopes);\n\n            now = now.AddSeconds(3);\n\n            var result = await _subject.RequiresConsentAsync(_user, _client, scopes);\n\n            result.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            now = DateTime.UtcNow;\n\n            var scopes = new[] { new ParsedScopeValue(\"foo\"), new ParsedScopeValue(\"bar\") };\n            _client.ConsentLifetime = 2;\n\n            await _subject.UpdateConsentAsync(_user, _client, scopes);\n\n            now = now.AddSeconds(3);\n\n            await _subject.RequiresConsentAsync(_user, _client, scopes);\n\n            var result = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);\n\n            result.Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "DefaultCorsPolicyServiceTests.cs",
    "methods": [
      {
        "name": "IsOriginAllowed_null_param_ReturnsFalse",
        "body": "{\n            subject.IsOriginAllowedAsync(null).Result.Should().Be(false);\n            subject.IsOriginAllowedAsync(String.Empty).Result.Should().Be(false);\n            subject.IsOriginAllowedAsync(\"    \").Result.Should().Be(false);\n        }"
      },
      {
        "name": "IsOriginAllowed_OriginIsAllowed_ReturnsTrue",
        "body": "{\n            subject.AllowedOrigins.Add(\"http://foo\");\n            subject.IsOriginAllowedAsync(\"http://foo\").Result.Should().Be(true);\n        }"
      },
      {
        "name": "IsOriginAllowed_OriginIsNotAllowed_ReturnsFalse",
        "body": "{\n            subject.AllowedOrigins.Add(\"http://foo\");\n            subject.IsOriginAllowedAsync(\"http://bar\").Result.Should().Be(false);\n        }"
      },
      {
        "name": "IsOriginAllowed_OriginIsInAllowedList_ReturnsTrue",
        "body": "{\n            subject.AllowedOrigins.Add(\"http://foo\");\n            subject.AllowedOrigins.Add(\"http://bar\");\n            subject.AllowedOrigins.Add(\"http://baz\");\n            subject.IsOriginAllowedAsync(\"http://bar\").Result.Should().Be(true);\n        }"
      },
      {
        "name": "IsOriginAllowed_OriginIsNotInAllowedList_ReturnsFalse",
        "body": "{\n            subject.AllowedOrigins.Add(\"http://foo\");\n            subject.AllowedOrigins.Add(\"http://bar\");\n            subject.AllowedOrigins.Add(\"http://baz\");\n            subject.IsOriginAllowedAsync(\"http://quux\").Result.Should().Be(false);\n        }"
      },
      {
        "name": "IsOriginAllowed_AllowAllTrue_ReturnsTrue",
        "body": "{\n            subject.AllowAll = true;\n            subject.IsOriginAllowedAsync(\"http://foo\").Result.Should().Be(true);\n        }"
      }
    ]
  },
  {
    "file": "DefaultIdentityServerInteractionServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            // for this, we're just confirming that since the session has changed, there's not use in doing the iframe and thsu SLO\n            _mockUserSession.SessionId = null;\n            _mockLogoutMessageStore.Messages.Add(\"id\", new Message<LogoutMessage>(new LogoutMessage() { SessionId = \"session\" }));\n\n            var context = await _subject.GetLogoutContextAsync(\"id\");\n\n            context.SignOutIFrameUrl.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockUserSession.Clients.Add(\"foo\");\n            _mockUserSession.SessionId = \"session\";\n            _mockUserSession.User = new IdentityServerUser(\"123\").CreatePrincipal();\n\n            var context = await _subject.GetLogoutContextAsync(null);\n\n            context.SignOutIFrameUrl.Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockUserSession.SessionId = null;\n            _mockLogoutMessageStore.Messages.Add(\"id\", new Message<LogoutMessage>(new LogoutMessage()));\n\n            var context = await _subject.GetLogoutContextAsync(\"id\");\n\n            context.SignOutIFrameUrl.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var context = await _subject.CreateLogoutContextAsync();\n\n            context.Should().BeNull();\n            _mockLogoutMessageStore.Messages.Should().BeEmpty();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockUserSession.Clients.Add(\"foo\");\n            _mockUserSession.User = new IdentityServerUser(\"123\").CreatePrincipal();\n            _mockUserSession.SessionId = \"session\";\n\n            var context = await _subject.CreateLogoutContextAsync();\n\n            context.Should().NotBeNull();\n            _mockLogoutMessageStore.Messages.Should().NotBeEmpty();\n        }"
      },
      {
        "name": "GrantConsentAsync_should_throw_if_granted_and_no_subject",
        "body": "{\n            Func<Task> act = () => _subject.GrantConsentAsync(\n                new AuthorizationRequest(), \n                new ConsentResponse() { ScopesValuesConsented = new[] { \"openid\" } }, \n                null);\n\n            act.Should().Throw<ArgumentNullException>()\n                .And.Message.Should().Contain(\"subject\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var req = new AuthorizationRequest()\n            {\n                Client = new Client { ClientId = \"client\" },\n                ValidatedResources = _resourceValidationResult\n            };\n            await _subject.GrantConsentAsync(req, new ConsentResponse { Error = AuthorizationError.AccessDenied }, null);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockUserSession.User = new IdentityServerUser(\"bob\").CreatePrincipal();\n\n            var req = new AuthorizationRequest() { \n                Client = new Client { ClientId = \"client\" },\n                ValidatedResources = _resourceValidationResult\n            };\n            await _subject.GrantConsentAsync(req, new ConsentResponse(), null);\n\n            _mockConsentStore.Messages.Should().NotBeEmpty();\n            var consentRequest = new ConsentRequest(req, \"bob\");\n            _mockConsentStore.Messages.First().Key.Should().Be(consentRequest.Id);\n        }"
      }
    ]
  },
  {
    "file": "DefaultPersistedGrantServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                CreationTime = DateTime.UtcNow,\n                ClientId = \"client1\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo1\", \"foo2\" }\n            });\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                CreationTime = DateTime.UtcNow,\n                ClientId = \"client2\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo3\" }\n            });\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                CreationTime = DateTime.UtcNow,\n                ClientId = \"client1\",\n                SubjectId = \"456\",\n                Scopes = new string[] { \"foo3\" }\n            });\n\n            var handle1 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client1\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"bar1\"),\n                    new Claim(\"scope\", \"bar2\")\n                }\n            });\n\n            var handle2 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client2\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"bar3\")\n                }\n            });\n\n            var handle3 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client1\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"456\"),\n                    new Claim(\"scope\", \"bar3\")\n                }\n            });\n\n            var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client1\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"baz1\"),\n                        new Claim(\"scope\", \"baz2\")\n                    }\n                },\n                Version = 1\n            });\n            var handle5 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client1\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"456\"),\n                        new Claim(\"scope\", \"baz3\")\n                    }\n                },\n                Version = 1\n            });\n            var handle6 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client2\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"baz3\")\n                    }\n                },\n                Version = 1\n            });\n\n            var handle7 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux1\", \"quux2\" }\n            });\n\n            var handle8 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client2\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux3\" }\n            });\n\n            var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = new IdentityServerUser(\"456\").CreatePrincipal(),\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux3\" }\n            });\n\n            var grants = await _subject.GetAllGrantsAsync(\"123\");\n\n            grants.Count().Should().Be(2);\n            var grant1 = grants.First(x => x.ClientId == \"client1\");\n            grant1.SubjectId.Should().Be(\"123\");\n            grant1.ClientId.Should().Be(\"client1\");\n            grant1.Scopes.Should().BeEquivalentTo(new string[] { \"foo1\", \"foo2\", \"bar1\", \"bar2\", \"baz1\", \"baz2\", \"quux1\", \"quux2\" });\n\n            var grant2 = grants.First(x => x.ClientId == \"client2\");\n            grant2.SubjectId.Should().Be(\"123\");\n            grant2.ClientId.Should().Be(\"client2\");\n            grant2.Scopes.Should().BeEquivalentTo(new string[] { \"foo3\", \"bar3\", \"baz3\", \"quux3\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                ClientId = \"client1\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo1\", \"foo2\" }\n            });\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                ClientId = \"client2\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo3\" }\n            });\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                ClientId = \"client1\",\n                SubjectId = \"456\",\n                Scopes = new string[] { \"foo3\" }\n            });\n\n            var handle1 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client1\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"bar1\"),\n                    new Claim(\"scope\", \"bar2\")\n                }\n            });\n\n            var handle2 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client2\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"bar3\")\n                }\n            });\n\n            var handle3 = await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client1\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"456\"),\n                    new Claim(\"scope\", \"bar3\")\n                }\n            });\n\n            var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client1\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"baz1\"),\n                        new Claim(\"scope\", \"baz2\")\n                    }\n                },\n                Version = 1\n            });\n            var handle5 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client1\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"456\"),\n                        new Claim(\"scope\", \"baz3\")\n                    }\n                },\n                Version = 1\n            });\n            var handle6 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client2\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"baz3\")\n                    }\n                },\n                Version = 1\n            });\n\n            var handle7 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux1\", \"quux2\" }\n            });\n\n            var handle8 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client2\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux3\" }\n            });\n\n            var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = new IdentityServerUser(\"456\").CreatePrincipal(),\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux3\" }\n            });\n\n            await _subject.RemoveAllGrantsAsync(\"123\", \"client1\");\n\n            (await _referenceTokens.GetReferenceTokenAsync(handle1)).Should().BeNull();\n            (await _referenceTokens.GetReferenceTokenAsync(handle2)).Should().NotBeNull();\n            (await _referenceTokens.GetReferenceTokenAsync(handle3)).Should().NotBeNull();\n            (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().BeNull();\n            (await _refreshTokens.GetRefreshTokenAsync(handle5)).Should().NotBeNull();\n            (await _refreshTokens.GetRefreshTokenAsync(handle6)).Should().NotBeNull();\n            (await _codes.GetAuthorizationCodeAsync(handle7)).Should().BeNull();\n            (await _codes.GetAuthorizationCodeAsync(handle8)).Should().NotBeNull();\n            (await _codes.GetAuthorizationCodeAsync(handle9)).Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            {\n                var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client2\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client3\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session3\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n\n                await _subject.RemoveAllGrantsAsync(\"123\");\n\n                (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().BeNull();\n                await _refreshTokens.RemoveRefreshTokenAsync(handle1);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle2);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle3);\n            }\n            {\n                var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client2\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client3\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session3\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n\n                await _subject.RemoveAllGrantsAsync(\"123\", \"client1\");\n\n                (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().NotBeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().NotBeNull();\n                await _refreshTokens.RemoveRefreshTokenAsync(handle1);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle2);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle3);\n            }\n            {\n                var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client2\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client3\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session2\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                await _subject.RemoveAllGrantsAsync(\"123\", \"client1\", \"session1\");\n\n                (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().NotBeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().NotBeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().NotBeNull();\n                await _refreshTokens.RemoveRefreshTokenAsync(handle1);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle2);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle3);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle4);\n            }\n            {\n                var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client2\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client3\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session1\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n                {\n                    CreationTime = DateTime.UtcNow,\n                    Lifetime = 10,\n                    AccessToken = new Token\n                    {\n                        ClientId = \"client1\",\n                        Audiences = { \"aud\" },\n                        CreationTime = DateTime.UtcNow,\n                        Type = \"type\",\n                        Claims = new List<Claim>\n                        {\n                            new Claim(\"sub\", \"123\"),\n                            new Claim(\"sid\", \"session2\"),\n                            new Claim(\"scope\", \"baz\")\n                        }\n                    },\n                    Version = 1\n                });\n                await _subject.RemoveAllGrantsAsync(\"123\", sessionId:\"session1\");\n\n                (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().BeNull();\n                (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().NotBeNull();\n                await _refreshTokens.RemoveRefreshTokenAsync(handle1);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle2);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle3);\n                await _refreshTokens.RemoveRefreshTokenAsync(handle4);\n            }\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _userConsent.StoreUserConsentAsync(new Consent()\n            {\n                ClientId = \"client1\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo1\", \"foo2\" }\n            });\n\n            var grants = await _subject.GetAllGrantsAsync(\"123\");\n\n            grants.Count().Should().Be(1);\n            grants.First().Scopes.Should().Contain(new string[] { \"foo1\", \"foo2\" });\n\n            var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = new IdentityServerUser(\"123\").CreatePrincipal(),\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux3\" }\n            });\n\n            grants = await _subject.GetAllGrantsAsync(\"123\");\n\n            grants.Count().Should().Be(1);\n            grants.First().Scopes.Should().Contain(new string[] { \"foo1\", \"foo2\", \"quux3\" });\n        }"
      }
    ]
  },
  {
    "file": "DefaultRefreshTokenServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var client = new Client();\n            var accessToken = new Token();\n\n            var handle = await _subject.CreateRefreshTokenAsync(_user, accessToken, client);\n\n            (await _store.GetRefreshTokenAsync(handle)).Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Absolute,\n                AbsoluteRefreshTokenLifetime = 10\n            };\n\n            var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);\n\n            var refreshToken = (await _store.GetRefreshTokenAsync(handle));\n\n            refreshToken.Should().NotBeNull();\n            refreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime  = 100,\n                AbsoluteRefreshTokenLifetime = 10\n            };\n\n            var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);\n\n            var refreshToken = (await _store.GetRefreshTokenAsync(handle));\n\n            refreshToken.Should().NotBeNull();\n            refreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime = 10\n            };\n\n            var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);\n\n            var refreshToken = (await _store.GetRefreshTokenAsync(handle));\n\n            refreshToken.Should().NotBeNull();\n            refreshToken.Lifetime.Should().Be(client.SlidingRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            (await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client))\n                .Should().NotBeNull()\n                .And\n                .NotBe(handle);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime = 10,\n                AbsoluteRefreshTokenLifetime = 100\n            };\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var handle = await _store.StoreRefreshTokenAsync(new RefreshToken\n            {\n                CreationTime = now.AddSeconds(-10),\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            });\n\n            var refreshToken = await _store.GetRefreshTokenAsync(handle);\n            var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);\n\n            newHandle.Should().NotBeNull().And.Be(handle);\n\n            var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);\n\n            newRefreshToken.Should().NotBeNull();\n            newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime = 10,\n                AbsoluteRefreshTokenLifetime = 1000\n            };\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var handle = await _store.StoreRefreshTokenAsync(new RefreshToken\n            {\n                CreationTime = now.AddSeconds(-1000),\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            });\n\n            var refreshToken = await _store.GetRefreshTokenAsync(handle);\n            var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);\n\n            newHandle.Should().NotBeNull().And.Be(handle);\n\n            var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);\n\n            newRefreshToken.Should().NotBeNull();\n            newRefreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.ReUse,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime = 10,\n                AbsoluteRefreshTokenLifetime = 0\n            };\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var handle = await _store.StoreRefreshTokenAsync(new RefreshToken\n            {\n                CreationTime = now.AddSeconds(-1000),\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            });\n\n            var refreshToken = await _store.GetRefreshTokenAsync(handle);\n            var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);\n\n            newHandle.Should().NotBeNull().And.Be(handle);\n\n            var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);\n\n            newRefreshToken.Should().NotBeNull();\n            newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.OneTimeOnly,\n                RefreshTokenExpiration = TokenExpiration.Sliding,\n                SlidingRefreshTokenLifetime = 10,\n                AbsoluteRefreshTokenLifetime = 0\n            };\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var handle = await _store.StoreRefreshTokenAsync(new RefreshToken\n            {\n                CreationTime = now.AddSeconds(-1000),\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            });\n\n            var refreshToken = await _store.GetRefreshTokenAsync(handle);\n            var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);\n\n            newHandle.Should().NotBeNull().And.NotBe(handle);\n\n            var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);\n\n            newRefreshToken.Should().NotBeNull();\n            newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);\n\n            var oldToken = await _store.GetRefreshTokenAsync(handle);\n            var newToken = await _store.GetRefreshTokenAsync(newHandle);\n\n            oldToken.ConsumedTime.Should().Be(now);\n            newToken.ConsumedTime.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var result = await _subject.ValidateRefreshTokenAsync(\"invalid\", client);\n\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var result = await _subject.ValidateRefreshTokenAsync(handle, client);\n\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                AllowOfflineAccess = true,\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client2\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var result = await _subject.ValidateRefreshTokenAsync(handle, client);\n\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                AllowOfflineAccess = true,\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow.AddSeconds(20);\n            _clock.UtcNowFunc = () => now;\n\n            var result = await _subject.ValidateRefreshTokenAsync(handle, client);\n\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                AllowOfflineAccess = true,\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                ConsumedTime = DateTime.UtcNow,\n                \n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var result = await _subject.ValidateRefreshTokenAsync(handle, client);\n\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var client = new Client\n            {\n                ClientId = \"client1\",\n                AllowOfflineAccess = true,\n                RefreshTokenUsage = TokenUsage.OneTimeOnly\n            };\n\n            var refreshToken = new RefreshToken\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = client.ClientId,\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Claims = new List<Claim>()\n                    {\n                        new Claim(\"sub\", \"123\")\n                    }\n                }\n            };\n\n            var handle = await _store.StoreRefreshTokenAsync(refreshToken);\n\n            var now = DateTime.UtcNow;\n            _clock.UtcNowFunc = () => now;\n\n            var result = await _subject.ValidateRefreshTokenAsync(handle, client);\n\n            result.IsError.Should().BeFalse();\n        }"
      }
    ]
  },
  {
    "file": "DefaultTokenServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var request = new TokenCreationRequest { \n                ValidatedResources = new ResourceValidationResult()\n                {\n                    Resources = new Resources()\n                    {\n                        ApiResources = \n                        {\n                            new ApiResource(\"api1\"){ Scopes = { \"scope1\" } },\n                            new ApiResource(\"api2\"){ Scopes = { \"scope2\" } },\n                            new ApiResource(\"api3\"){ Scopes = { \"scope3\" } },\n                        },\n                    },\n                    ParsedScopes =\n                    {\n                        new ParsedScopeValue(\"scope1\"),\n                        new ParsedScopeValue(\"scope2\"),\n                        new ParsedScopeValue(\"scope3\"),\n                    }\n                },\n                ValidatedRequest = new ValidatedRequest()\n                {\n                    Client = new Client { }\n                }\n            };\n\n            var result = await _subject.CreateAccessTokenAsync(request);\n\n            result.Audiences.Count.Should().Be(3);\n            result.Audiences.Should().BeEquivalentTo(new[] { \"api1\", \"api2\", \"api3\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new TokenCreationRequest\n            {\n                ValidatedResources = new ResourceValidationResult()\n                {\n                    Resources = new Resources()\n                    {\n                        ApiScopes =\n                        {\n                            new ApiScope(\"scope1\"),\n                            new ApiScope(\"scope2\"),\n                            new ApiScope(\"scope3\"),\n                        },\n                    },\n                    ParsedScopes =\n                    {\n                        new ParsedScopeValue(\"scope1\"),\n                        new ParsedScopeValue(\"scope2\"),\n                        new ParsedScopeValue(\"scope3\"),\n                    }\n                },\n                ValidatedRequest = new ValidatedRequest()\n                {\n                    Client = new Client { }\n                }\n            };\n\n            var result = await _subject.CreateAccessTokenAsync(request);\n\n            result.Audiences.Count.Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new TokenCreationRequest\n            {\n                ValidatedResources = new ResourceValidationResult(),\n                ValidatedRequest = new ValidatedRequest()\n                {\n                    Client = new Client { },\n                    SessionId = null\n                }\n            };\n\n            var result = await _subject.CreateAccessTokenAsync(request);\n\n            result.Claims.SingleOrDefault(x => x.Type == JwtClaimTypes.SessionId).Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var request = new TokenCreationRequest\n            {\n                ValidatedResources = new ResourceValidationResult(),\n                ValidatedRequest = new ValidatedRequest()\n                {\n                    Client = new Client { },\n                    SessionId = \"123\"\n                }\n            };\n\n            var result = await _subject.CreateAccessTokenAsync(request);\n\n            result.Claims.SingleOrDefault(x => x.Type == JwtClaimTypes.SessionId).Value.Should().Be(\"123\");\n        }"
      }
    ]
  },
  {
    "file": "DefaultUserSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            await _subject.CreateSessionIdAsync(_user, _props);\n\n            _props.GetSessionId().Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            // this test is needed to allow same session id when cookie is slid\n            // IOW, if UI layer passes in same properties dictionary, then we assume it's the same user\n\n            _props.SetSessionId(\"999\");\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.CreateSessionIdAsync(_user, _props);\n\n            _props.GetSessionId().Should().NotBeNull();\n            _props.GetSessionId().Should().Be(\"999\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            _props.GetSessionId().Should().BeNull();\n\n            await _subject.CreateSessionIdAsync(_user, _props);\n\n            _props.GetSessionId().Should().NotBeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _props.SetSessionId(\"999\");\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.CreateSessionIdAsync(new IdentityServerUser(\"alice\").CreatePrincipal(), _props);\n\n            _props.GetSessionId().Should().NotBeNull();\n            _props.GetSessionId().Should().NotBe(\"999\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.CreateSessionIdAsync(_user, _props);\n\n            var cookieContainer = new CookieContainer();\n            var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);\n            cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));\n            _mockHttpContext.HttpContext.Response.Headers.Clear();\n\n            var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();\n            cookie.Value.Should().Be(_props.GetSessionId());\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _props.SetSessionId(\"999\");\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.EnsureSessionIdCookieAsync();\n\n            var cookieContainer = new CookieContainer();\n            var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);\n            cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));\n            _mockHttpContext.HttpContext.Response.Headers.Clear();\n\n            var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();\n            cookie.Value.Should().Be(\"999\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.EnsureSessionIdCookieAsync();\n\n            var cookieContainer = new CookieContainer();\n            var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);\n            cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));\n            _mockHttpContext.HttpContext.Response.Headers.Clear();\n\n            var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();\n            cookie.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _props.SetSessionId(\"999\");\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.EnsureSessionIdCookieAsync();\n\n            var cookieContainer = new CookieContainer();\n            var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);\n            cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));\n            _mockHttpContext.HttpContext.Response.Headers.Clear();\n\n            string cookie = cookieContainer.GetCookieHeader(new Uri(\"http://server\"));\n            _mockHttpContext.HttpContext.Request.Headers.Add(\"Cookie\", cookie);\n\n            await _subject.RemoveSessionIdCookieAsync();\n\n            cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);\n            cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));\n\n            var query = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName);\n            query.Count().Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _props.SetSessionId(\"999\");\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            var sid = await _subject.GetSessionIdAsync();\n            sid.Should().Be(\"999\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var sid = await _subject.GetSessionIdAsync();\n            sid.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            _props.Items.Count.Should().Be(0);\n            await _subject.AddClientIdAsync(\"client\");\n            _props.Items.Count.Should().Be(1);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            var user = await _subject.GetUserAsync();\n            user.GetSubjectId().Should().Be(\"123\");\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var user = await _subject.GetUserAsync();\n            user.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.AddClientIdAsync(\"client\");\n            var item = _props.Items.First();\n            _props.Items[item.Key] = \"junk\";\n\n            var clients = await _subject.GetClientListAsync();\n            clients.Should().BeEmpty();\n            _props.Items.Count.Should().Be(0);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.AddClientIdAsync(\"client\");\n            var clients = await _subject.GetClientListAsync();\n            clients.Should().Contain(new string[] { \"client\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));\n\n            await _subject.AddClientIdAsync(\"client1\");\n            await _subject.AddClientIdAsync(\"client2\");\n            var clients = await _subject.GetClientListAsync();\n            clients.Should().Contain(new string[] { \"client2\", \"client1\" });\n        }"
      }
    ]
  },
  {
    "file": "DistributedDeviceFlowThrottlingServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var handle = Guid.NewGuid().ToString();\n            var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock {UtcNowFunc = () => testDate}, options);\n\n            var result = await service.ShouldSlowDown(handle, deviceCode);\n\n            result.Should().BeFalse();\n\n            CheckCacheEntry(handle);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var handle = Guid.NewGuid().ToString();\n            var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);\n\n            cache.Set(CacheKey + handle, Encoding.UTF8.GetBytes(testDate.AddSeconds(-1).ToString(\"O\")));\n\n            var result = await service.ShouldSlowDown(handle, deviceCode);\n\n            result.Should().BeTrue();\n            \n            CheckCacheEntry(handle);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var handle = Guid.NewGuid().ToString();\n            \n            var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);\n\n            cache.Set($\"devicecode_{handle}\", Encoding.UTF8.GetBytes(testDate.AddSeconds(-deviceCode.Lifetime - 1).ToString(\"O\")));\n\n            var result = await service.ShouldSlowDown(handle, deviceCode);\n\n            result.Should().BeFalse();\n\n            CheckCacheEntry(handle);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var handle = Guid.NewGuid().ToString();\n            deviceCode.CreationTime = testDate.AddSeconds(-deviceCode.Lifetime * 2);\n\n            var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);\n\n            var result = await service.ShouldSlowDown(handle, deviceCode);\n            \n            result.Should().BeFalse();\n\n            cache.Items.TryGetValue(CacheKey + handle, out var values).Should().BeTrue();\n            values?.Item2.AbsoluteExpiration.Should().BeOnOrAfter(testDate);\n        }"
      }
    ]
  },
  {
    "file": "NumericUserCodeServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var sut = new NumericUserCodeGenerator();\n\n            var userCode = await sut.GenerateAsync();\n            var userCodeInt = int.Parse(userCode);\n\n            userCodeInt.Should().BeGreaterOrEqualTo(100000000);\n            userCodeInt.Should().BeLessOrEqualTo(999999999);\n        }"
      }
    ]
  },
  {
    "file": "DefaultPersistedGrantStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var code1 = new AuthorizationCode()\n            {\n                ClientId = \"test\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"scope1\", \"scope2\" }\n            };\n\n            var handle = await _codes.StoreAuthorizationCodeAsync(code1);\n            var code2 = await _codes.GetAuthorizationCodeAsync(handle);\n\n            code1.ClientId.Should().Be(code2.ClientId);\n            code1.CreationTime.Should().Be(code2.CreationTime);\n            code1.Lifetime.Should().Be(code2.Lifetime);\n            code1.Subject.GetSubjectId().Should().Be(code2.Subject.GetSubjectId());\n            code1.CodeChallenge.Should().Be(code2.CodeChallenge);\n            code1.RedirectUri.Should().Be(code2.RedirectUri);\n            code1.Nonce.Should().Be(code2.Nonce);\n            code1.RequestedScopes.Should().BeEquivalentTo(code2.RequestedScopes);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var code1 = new AuthorizationCode()\n            {\n                ClientId = \"test\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"scope1\", \"scope2\" }\n            };\n\n            var handle = await _codes.StoreAuthorizationCodeAsync(code1);\n            await _codes.RemoveAuthorizationCodeAsync(handle);\n            var code2 = await _codes.GetAuthorizationCodeAsync(handle);\n            code2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"foo\")\n                    }\n                },\n                Version = 1\n            };\n\n            var handle = await _refreshTokens.StoreRefreshTokenAsync(token1);\n            var token2 = await _refreshTokens.GetRefreshTokenAsync(handle);\n\n            token1.ClientId.Should().Be(token2.ClientId);\n            token1.CreationTime.Should().Be(token2.CreationTime);\n            token1.Lifetime.Should().Be(token2.Lifetime);\n            token1.Subject.GetSubjectId().Should().Be(token2.Subject.GetSubjectId());\n            token1.Version.Should().Be(token2.Version);\n            token1.AccessToken.Audiences.Count.Should().Be(1);\n            token1.AccessToken.Audiences.First().Should().Be(\"aud\");\n            token1.AccessToken.ClientId.Should().Be(token2.AccessToken.ClientId);\n            token1.AccessToken.CreationTime.Should().Be(token2.AccessToken.CreationTime);\n            token1.AccessToken.Type.Should().Be(token2.AccessToken.Type);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"foo\")\n                    }\n                },\n                Version = 1\n            };\n\n\n            var handle = await _refreshTokens.StoreRefreshTokenAsync(token1);\n            await _refreshTokens.RemoveRefreshTokenAsync(handle);\n            var token2 = await _refreshTokens.GetRefreshTokenAsync(handle);\n            token2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                AccessToken = new Token\n                {\n                    ClientId = \"client\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"foo\")\n                    }\n                },\n                Version = 1\n            };\n\n            var handle1 = await _refreshTokens.StoreRefreshTokenAsync(token1);\n            var handle2 = await _refreshTokens.StoreRefreshTokenAsync(token1);\n            await _refreshTokens.RemoveRefreshTokensAsync(\"123\", \"client\");\n\n            var token2 = await _refreshTokens.GetRefreshTokenAsync(handle1);\n            token2.Should().BeNull();\n            token2 = await _refreshTokens.GetRefreshTokenAsync(handle2);\n            token2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new Token()\n            {\n                ClientId = \"client\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"foo\")\n                },\n                Version = 1\n            };\n\n            var handle = await _referenceTokens.StoreReferenceTokenAsync(token1);\n            var token2 = await _referenceTokens.GetReferenceTokenAsync(handle);\n\n            token1.ClientId.Should().Be(token2.ClientId);\n            token1.Audiences.Count.Should().Be(1);\n            token1.Audiences.First().Should().Be(\"aud\");\n            token1.CreationTime.Should().Be(token2.CreationTime);\n            token1.Type.Should().Be(token2.Type);\n            token1.Lifetime.Should().Be(token2.Lifetime);\n            token1.Version.Should().Be(token2.Version);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new Token()\n            {\n                ClientId = \"client\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"foo\")\n                },\n                Version = 1\n            };\n\n            var handle = await _referenceTokens.StoreReferenceTokenAsync(token1);\n            await _referenceTokens.RemoveReferenceTokenAsync(handle);\n            var token2 = await _referenceTokens.GetReferenceTokenAsync(handle);\n            token2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var token1 = new Token()\n            {\n                ClientId = \"client\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"foo\")\n                },\n                Version = 1\n            };\n\n            var handle1 = await _referenceTokens.StoreReferenceTokenAsync(token1);\n            var handle2 = await _referenceTokens.StoreReferenceTokenAsync(token1);\n            await _referenceTokens.RemoveReferenceTokensAsync(\"123\", \"client\");\n\n            var token2 = await _referenceTokens.GetReferenceTokenAsync(handle1);\n            token2.Should().BeNull();\n            token2 = await _referenceTokens.GetReferenceTokenAsync(handle2);\n            token2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var consent1 = new Consent()\n            {\n                CreationTime = DateTime.UtcNow,\n                ClientId = \"client\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo\", \"bar\" }\n            };\n\n            await _userConsent.StoreUserConsentAsync(consent1);\n            var consent2 = await _userConsent.GetUserConsentAsync(\"123\", \"client\");\n\n            consent2.ClientId.Should().Be(consent1.ClientId);\n            consent2.SubjectId.Should().Be(consent1.SubjectId);\n            consent2.Scopes.Should().BeEquivalentTo(new string[] { \"bar\", \"foo\" });\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var consent1 = new Consent()\n            {\n                CreationTime = DateTime.UtcNow,\n                ClientId = \"client\",\n                SubjectId = \"123\",\n                Scopes = new string[] { \"foo\", \"bar\" }\n            };\n\n            await _userConsent.StoreUserConsentAsync(consent1);\n            await _userConsent.RemoveUserConsentAsync(\"123\", \"client\");\n            var consent2 = await _userConsent.GetUserConsentAsync(\"123\", \"client\");\n            consent2.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubHandleGenerationService.Handle = \"key\";\n\n            await _referenceTokens.StoreReferenceTokenAsync(new Token()\n            {\n                ClientId = \"client1\",\n                Audiences = { \"aud\" },\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 10,\n                Type = \"type\",\n                Claims = new List<Claim>\n                {\n                    new Claim(\"sub\", \"123\"),\n                    new Claim(\"scope\", \"bar1\"),\n                    new Claim(\"scope\", \"bar2\")\n                }\n            });\n\n            await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()\n            {\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 20,\n                AccessToken = new Token\n                {\n                    ClientId = \"client1\",\n                    Audiences = { \"aud\" },\n                    CreationTime = DateTime.UtcNow,\n                    Type = \"type\",\n                    Claims = new List<Claim>\n                    {\n                        new Claim(\"sub\", \"123\"),\n                        new Claim(\"scope\", \"baz1\"),\n                        new Claim(\"scope\", \"baz2\")\n                    }\n                },\n                Version = 1\n            });\n\n            await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()\n            {\n                ClientId = \"client1\",\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 30,\n                Subject = _user,\n                CodeChallenge = \"challenge\",\n                RedirectUri = \"http://client/cb\",\n                Nonce = \"nonce\",\n                RequestedScopes = new string[] { \"quux1\", \"quux2\" }\n            });\n\n            (await _codes.GetAuthorizationCodeAsync(\"key\")).Lifetime.Should().Be(30);\n            (await _refreshTokens.GetRefreshTokenAsync(\"key\")).Lifetime.Should().Be(20);\n            (await _referenceTokens.GetReferenceTokenAsync(\"key\")).Lifetime.Should().Be(10);\n        }"
      }
    ]
  },
  {
    "file": "InMemoryClientStoreTests.cs",
    "methods": [
      {
        "name": "InMemoryClient_should_throw_if_contain_duplicate_client_ids",
        "body": "{\n            List<Client> clients = new List<Client>\n            {\n                new Client { ClientId = \"1\"},\n                new Client { ClientId = \"1\"},\n                new Client { ClientId = \"3\"}\n            };\n\n            Action act = () => new InMemoryClientStore(clients);\n            act.Should().Throw<ArgumentException>();\n        }"
      },
      {
        "name": "InMemoryClient_should_not_throw_if_does_not_contain_duplicate_client_ids",
        "body": "{\n            List<Client> clients = new List<Client>\n            {\n                new Client { ClientId = \"1\"},\n                new Client { ClientId = \"2\"},\n                new Client { ClientId = \"3\"}\n            };\n\n            new InMemoryClientStore(clients);\n        }"
      }
    ]
  },
  {
    "file": "InMemoryDeviceFlowStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var deviceCode = Guid.NewGuid().ToString();\n            var userCode = Guid.NewGuid().ToString();\n            var data = new DeviceCode\n            {\n                ClientId = Guid.NewGuid().ToString(),\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 300,\n                IsAuthorized = false,\n                IsOpenId = true,\n                Subject = null,\n                RequestedScopes = new[] {\"scope1\", \"scope2\"}\n            };\n\n            await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);\n            var foundData = await _store.FindByUserCodeAsync(userCode);\n\n            foundData.ClientId.Should().Be(data.ClientId);\n            foundData.CreationTime.Should().Be(data.CreationTime);\n            foundData.Lifetime.Should().Be(data.Lifetime);\n            foundData.IsAuthorized.Should().Be(data.IsAuthorized);\n            foundData.IsOpenId.Should().Be(data.IsOpenId);\n            foundData.Subject.Should().Be(data.Subject);\n            foundData.RequestedScopes.Should().BeEquivalentTo(data.RequestedScopes);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var deviceCode = Guid.NewGuid().ToString();\n            var userCode = Guid.NewGuid().ToString();\n            var data = new DeviceCode\n            {\n                ClientId = Guid.NewGuid().ToString(),\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 300,\n                IsAuthorized = false,\n                IsOpenId = true,\n                Subject = null,\n                RequestedScopes = new[] {\"scope1\", \"scope2\"}\n            };\n\n            await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);\n            var foundData = await _store.FindByDeviceCodeAsync(deviceCode);\n\n            foundData.ClientId.Should().Be(data.ClientId);\n            foundData.CreationTime.Should().Be(data.CreationTime);\n            foundData.Lifetime.Should().Be(data.Lifetime);\n            foundData.IsAuthorized.Should().Be(data.IsAuthorized);\n            foundData.IsOpenId.Should().Be(data.IsOpenId);\n            foundData.Subject.Should().Be(data.Subject);\n            foundData.RequestedScopes.Should().BeEquivalentTo(data.RequestedScopes);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var deviceCode = Guid.NewGuid().ToString();\n            var userCode = Guid.NewGuid().ToString();\n            var initialData = new DeviceCode\n            {\n                ClientId = Guid.NewGuid().ToString(),\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 300,\n                IsAuthorized = false,\n                IsOpenId = true,\n                Subject = null,\n                RequestedScopes = new[] {\"scope1\", \"scope2\"}\n            };\n\n            await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, initialData);\n\n            var updatedData = new DeviceCode\n            {\n                ClientId = Guid.NewGuid().ToString(),\n                CreationTime = initialData.CreationTime.AddHours(2),\n                Lifetime = initialData.Lifetime + 600,\n                IsAuthorized = !initialData.IsAuthorized,\n                IsOpenId = !initialData.IsOpenId,\n                Subject = new ClaimsPrincipal(new ClaimsIdentity(new List<Claim> {new Claim(\"sub\", \"123\")})),\n                RequestedScopes = new[] {\"api1\", \"api2\"}\n            };\n\n            await _store.UpdateByUserCodeAsync(userCode, updatedData);\n\n            var foundData = await _store.FindByUserCodeAsync(userCode);\n\n            foundData.ClientId.Should().Be(updatedData.ClientId);\n            foundData.CreationTime.Should().Be(updatedData.CreationTime);\n            foundData.Lifetime.Should().Be(updatedData.Lifetime);\n            foundData.IsAuthorized.Should().Be(updatedData.IsAuthorized);\n            foundData.IsOpenId.Should().Be(updatedData.IsOpenId);\n            foundData.Subject.Should().BeEquivalentTo(updatedData.Subject);\n            foundData.RequestedScopes.Should().BeEquivalentTo(updatedData.RequestedScopes);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var deviceCode = Guid.NewGuid().ToString();\n            var userCode = Guid.NewGuid().ToString();\n            var data = new DeviceCode\n            {\n                ClientId = Guid.NewGuid().ToString(),\n                CreationTime = DateTime.UtcNow,\n                Lifetime = 300,\n                IsAuthorized = false,\n                IsOpenId = true,\n                Subject = null,\n                RequestedScopes = new[] { \"scope1\", \"scope2\" }\n            };\n\n            await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);\n            await _store.RemoveByDeviceCodeAsync(deviceCode);\n            var foundData = await _store.FindByUserCodeAsync(userCode);\n\n            foundData.Should().BeNull();\n        }"
      }
    ]
  },
  {
    "file": "InMemoryPersistedGrantStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            {\n                var item = await _subject.GetAsync(\"key1\");\n                item.Should().BeNull();\n            }\n\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key1\" });\n\n            {\n                var item = await _subject.GetAsync(\"key1\");\n                item.Should().NotBeNull();\n            }\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key1\", SubjectId = \"sub1\", ClientId = \"client1\", SessionId = \"session1\" });\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key2\", SubjectId = \"sub1\", ClientId = \"client2\", SessionId = \"session1\" });\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key3\", SubjectId = \"sub1\", ClientId = \"client1\", SessionId = \"session2\" });\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key4\", SubjectId = \"sub1\", ClientId = \"client3\", SessionId = \"session2\" });\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key5\", SubjectId = \"sub1\", ClientId = \"client4\", SessionId = \"session3\" });\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key6\", SubjectId = \"sub1\", ClientId = \"client4\", SessionId = \"session4\" });\n\n            await _subject.StoreAsync(new PersistedGrant() { Key = \"key7\", SubjectId = \"sub2\", ClientId = \"client4\", SessionId = \"session4\" });\n\n\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\", \"key2\", \"key3\", \"key4\", \"key5\", \"key6\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub3\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client1\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\", \"key3\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client2\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key2\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client3\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key4\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client4\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key5\", \"key6\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client5\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\",\n                ClientId = \"client1\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\",\n                ClientId = \"client4\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub3\",\n                ClientId = \"client1\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client1\",\n                SessionId = \"session1\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client1\",\n                SessionId = \"session2\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key3\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client1\",\n                SessionId = \"session3\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client2\",\n                SessionId = \"session1\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key2\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client2\",\n                SessionId = \"session2\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub1\",\n                ClientId = \"client4\",\n                SessionId = \"session4\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key6\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\",\n                ClientId = \"client4\",\n                SessionId = \"session4\"\n            }))\n            .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\",\n                ClientId = \"client4\",\n                SessionId = \"session1\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n\n            (await _subject.GetAllAsync(new PersistedGrantFilter\n            {\n                SubjectId = \"sub2\",\n                ClientId = \"client4\",\n                SessionId = \"session5\"\n            }))\n            .Select(x => x.Key).Should().BeEmpty();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().BeNull();\n                (await _subject.GetAsync(\"key2\")).Should().BeNull();\n                (await _subject.GetAsync(\"key3\")).Should().BeNull();\n                (await _subject.GetAsync(\"key4\")).Should().BeNull();\n                (await _subject.GetAsync(\"key5\")).Should().BeNull();\n                (await _subject.GetAsync(\"key6\")).Should().BeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub2\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().BeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub3\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().BeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().BeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client2\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().BeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client3\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().BeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client4\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().BeNull();\n                (await _subject.GetAsync(\"key6\")).Should().BeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client5\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub2\",\n                    ClientId = \"client1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client4\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().BeNull();\n                (await _subject.GetAsync(\"key6\")).Should().BeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub3\",\n                    ClientId = \"client1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client1\",\n                    SessionId = \"session1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().BeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client1\",\n                    SessionId = \"session2\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().BeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client1\",\n                    SessionId = \"session3\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client2\",\n                    SessionId = \"session1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().BeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client2\",\n                    SessionId = \"session2\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub1\",\n                    ClientId = \"client4\",\n                    SessionId = \"session4\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().BeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub2\",\n                    ClientId = \"client4\",\n                    SessionId = \"session4\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().BeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub2\",\n                    ClientId = \"client4\",\n                    SessionId = \"session1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub2\",\n                    ClientId = \"client4\",\n                    SessionId = \"session5\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n            {\n                await Populate();\n                await _subject.RemoveAllAsync(new PersistedGrantFilter\n                {\n                    SubjectId = \"sub3\",\n                    ClientId = \"client1\",\n                    SessionId = \"session1\"\n                });\n                (await _subject.GetAsync(\"key1\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key2\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key3\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key4\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key5\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key6\")).Should().NotBeNull();\n                (await _subject.GetAsync(\"key7\")).Should().NotBeNull();\n            }\n        }"
      }
    ]
  },
  {
    "file": "InMemoryResourcesStoreTests.cs",
    "methods": [
      {
        "name": "InMemoryResourcesStore_should_throw_if_contains_duplicate_names",
        "body": "{\n            List<IdentityResource> identityResources = new List<IdentityResource>\n            {\n                new IdentityResource { Name = \"A\" },\n                new IdentityResource { Name = \"A\" },\n                new IdentityResource { Name = \"C\" }\n            };\n\n            List<ApiResource> apiResources = new List<ApiResource>\n            {\n                new ApiResource { Name = \"B\" },\n                new ApiResource { Name = \"B\" },\n                new ApiResource { Name = \"C\" }\n            };\n\n            List<ApiScope> scopes = new List<ApiScope>\n            {\n                new ApiScope { Name = \"B\" },\n                new ApiScope { Name = \"C\" },\n                new ApiScope { Name = \"C\" },\n            };\n\n            Action act = () => new InMemoryResourcesStore(identityResources, null, null);\n            act.Should().Throw<ArgumentException>();\n\n            act = () => new InMemoryResourcesStore(null, apiResources, null);\n            act.Should().Throw<ArgumentException>();\n            \n            act = () => new InMemoryResourcesStore(null, null, scopes);\n            act.Should().Throw<ArgumentException>();\n        }"
      },
      {
        "name": "InMemoryResourcesStore_should_not_throw_if_does_not_contains_duplicate_names",
        "body": "{\n            List<IdentityResource> identityResources = new List<IdentityResource>\n            {\n                new IdentityResource { Name = \"A\" },\n                new IdentityResource { Name = \"B\" },\n                new IdentityResource { Name = \"C\" }\n            };\n\n            List<ApiResource> apiResources = new List<ApiResource>\n            {\n                new ApiResource { Name = \"A\" },\n                new ApiResource { Name = \"B\" },\n                new ApiResource { Name = \"C\" }\n            };\n\n            List<ApiScope> apiScopes = new List<ApiScope>\n            {\n                new ApiScope { Name = \"A\" },\n                new ApiScope { Name = \"B\" },\n                new ApiScope { Name = \"C\" },\n            };\n            \n            new InMemoryResourcesStore(identityResources, null, null);\n            new InMemoryResourcesStore(null, apiResources, null);\n            new InMemoryResourcesStore(null, null, apiScopes);\n        }"
      }
    ]
  },
  {
    "file": "EndSessionRequestValidatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            _options.Authentication.RequireAuthenticatedUserForSignOutMessage = true;\n\n            var parameters = new NameValueCollection();\n            var result = await _subject.ValidateAsync(parameters, null);\n            result.IsError.Should().BeTrue();\n\n            result = await _subject.ValidateAsync(parameters, new ClaimsPrincipal());\n            result.IsError.Should().BeTrue();\n\n            result = await _subject.ValidateAsync(parameters, new ClaimsPrincipal(new ClaimsIdentity()));\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()\n            {\n                IsError = false,\n                Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },\n                Client = new Client() { ClientId = \"client\"}\n            };\n            _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;\n\n            var parameters = new NameValueCollection();\n            parameters.Add(\"id_token_hint\", \"id_token\");\n            parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");\n            parameters.Add(\"client_id\", \"client1\");\n            parameters.Add(\"state\", \"foo\");\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeFalse();\n\n            result.ValidatedRequest.Client.ClientId.Should().Be(\"client\");\n            result.ValidatedRequest.PostLogOutUri.Should().Be(\"http://client/signout-cb\");\n            result.ValidatedRequest.State.Should().Be(\"foo\");\n            result.ValidatedRequest.Subject.GetSubjectId().Should().Be(_user.GetSubjectId());\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()\n            {\n                IsError = false,\n                Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },\n                Client = new Client() { ClientId = \"client1\", PostLogoutRedirectUris = new List<string> { \"foo\" } }\n            };\n            _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;\n\n            var parameters = new NameValueCollection();\n            parameters.Add(\"id_token_hint\", \"id_token\");\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeFalse();\n            result.ValidatedRequest.PostLogOutUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()\n            {\n                IsError = false,\n                Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },\n                Client = new Client() { ClientId = \"client1\", PostLogoutRedirectUris = new List<string> { \"foo\", \"bar\" } }\n            };\n            _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;\n\n            var parameters = new NameValueCollection();\n            parameters.Add(\"id_token_hint\", \"id_token\");\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeFalse();\n            result.ValidatedRequest.PostLogOutUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()\n            {\n                IsError = false,\n                Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },\n                Client = new Client() { ClientId = \"client\" }\n            };\n            _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = false;\n\n            var parameters = new NameValueCollection();\n            parameters.Add(\"id_token_hint\", \"id_token\");\n            parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");\n            parameters.Add(\"client_id\", \"client1\");\n            parameters.Add(\"state\", \"foo\");\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeFalse();\n\n            result.ValidatedRequest.Client.ClientId.Should().Be(\"client\");\n            result.ValidatedRequest.Subject.GetSubjectId().Should().Be(_user.GetSubjectId());\n            \n            result.ValidatedRequest.State.Should().BeNull();\n            result.ValidatedRequest.PostLogOutUri.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()\n            {\n                IsError = false,\n                Claims = new Claim[] { new Claim(\"sub\", \"xoxo\") },\n                Client = new Client() { ClientId = \"client\" }\n            };\n            _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;\n\n            var parameters = new NameValueCollection();\n            parameters.Add(\"id_token_hint\", \"id_token\");\n            parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");\n            parameters.Add(\"client_id\", \"client1\");\n            parameters.Add(\"state\", \"foo\");\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeTrue();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var parameters = new NameValueCollection();\n\n            var result = await _subject.ValidateAsync(parameters, _user);\n            result.IsError.Should().BeFalse();\n            result.ValidatedRequest.Raw.Should().BeSameAs(parameters);\n        }"
      }
    ]
  },
  {
    "file": "IntrospectionRequestValidatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{\n            var token = new Token {\n                CreationTime = DateTime.UtcNow,\n                Issuer = \"http://op\",\n                ClientId = \"codeclient\",\n                Lifetime = 1000,\n                Claims =\n                {\n                    new System.Security.Claims.Claim(\"scope\", \"a\"),\n                    new System.Security.Claims.Claim(\"scope\", \"b\")\n                }\n            };\n            var handle = await _referenceTokenStore.StoreReferenceTokenAsync(token);\n            \n            var param = new NameValueCollection()\n            {\n                { \"token\", handle}\n            };\n\n            var result = await _subject.ValidateAsync(param, null);\n\n            result.IsError.Should().Be(false);\n            result.IsActive.Should().Be(true);\n            result.Claims.Count().Should().Be(5);\n            result.Token.Should().Be(handle);\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var param = new NameValueCollection();\n            \n            var result = await _subject.ValidateAsync(param, null);\n\n            result.IsError.Should().Be(true);\n            result.Error.Should().Be(\"missing_token\");\n            result.IsActive.Should().Be(false);\n            result.Claims.Should().BeNull();\n            result.Token.Should().BeNull();\n        }"
      },
      {
        "name": "Task",
        "body": "{\n            var param = new NameValueCollection()\n            {\n                { \"token\", \"invalid\" }\n            };\n\n            var result = await _subject.ValidateAsync(param, null);\n\n            result.IsError.Should().Be(false);\n            result.IsActive.Should().Be(false);\n            result.Claims.Should().BeNull();\n            result.Token.Should().Be(\"invalid\");\n        }"
      }
    ]
  },
  {
    "file": "ClientValidationTestClients.cs",
    "methods": []
  },
  {
    "file": "TestClients.cs",
    "methods": []
  },
  {
    "file": "TestDeviceCodeValidator.cs",
    "methods": []
  },
  {
    "file": "TestDeviceFlowThrottlingService.cs",
    "methods": []
  },
  {
    "file": "TestGrantValidator.cs",
    "methods": []
  },
  {
    "file": "TestProfileService.cs",
    "methods": []
  },
  {
    "file": "TestResourceOwnerPasswordValidator.cs",
    "methods": []
  },
  {
    "file": "TestScopes.cs",
    "methods": []
  },
  {
    "file": "TestTokenValidator.cs",
    "methods": []
  }
]