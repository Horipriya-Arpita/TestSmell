[
  {
    "file": "GeneratedTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| return Fixture.VerifyForBody(| \"\"\"| [Get(\"/users\")]| Task<string> Get();| \"\"\", false);| }",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "FunctionTest.cs",
    "methods": [
      {
        "name": "ModifyParameterNameDoesRegenerate",
        "body": "{| var syntaxTree = CSharpSyntaxTree.ParseText(DefaultInterface, CSharpParseOptions.Default);| var compilation1 = Fixture.CreateLibrary(syntaxTree);| var driver1 = TestHelper.GenerateTracked(compilation1);| TestHelper.AssertRunReasons(driver1, IncrementalGeneratorRunReasons.New);| // change paramete",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "GenericTest.cs",
    "methods": [
      {
        "name": "RenameGenericTypeDoesRegenerate",
        "body": "{| var syntaxTree = CSharpSyntaxTree.ParseText(GenericInterface, CSharpParseOptions.Default);| var compilation1 = Fixture.CreateLibrary(syntaxTree);| var driver1 = TestHelper.GenerateTracked(compilation1);| TestHelper.AssertRunReasons(driver1, IncrementalGeneratorRunReasons.New);| // rename generic ",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "IncrementalTest.cs",
    "methods": [
      {
        "name": "AddUnrelatedTypeDoesntRegenerate",
        "body": "{| var syntaxTree = CSharpSyntaxTree.ParseText(DefaultInterface, CSharpParseOptions.Default);| var compilation1 = Fixture.CreateLibrary(syntaxTree);| var driver1 = TestHelper.GenerateTracked(compilation1);| TestHelper.AssertRunReasons(driver1, IncrementalGeneratorRunReasons.New);| var compilation2 =",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "InheritanceTest.cs",
    "methods": [
      {
        "name": "InheritFromIDisposableDoesRegenerate",
        "body": "{| var syntaxTree = CSharpSyntaxTree.ParseText(DefaultInterface, CSharpParseOptions.Default);| var compilation1 = Fixture.CreateLibrary(syntaxTree);| var driver1 = TestHelper.GenerateTracked(compilation1);| TestHelper.AssertRunReasons(driver1, IncrementalGeneratorRunReasons.New);| // inherit from ID",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "InterfaceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| return Fixture.VerifyForType(| \"\"\"| public class ContainerType| {| public interface IContainedInterface| {| [Get(\"/users\")]| Task<string> Get();| }| }| \"\"\");| }",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "MethodTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| return Fixture.VerifyForBody(| \"\"\"| [Get(\"/users\")]| Task<string> Get<T1, T2, T3, T4, T5>()| where T1 : class| where T2 : unmanaged| where T3 : struct| where T4 : notnull| where T5 : class, IDisposable, new();| void NonRefitMethod<T1, T2, T3, T4, T5>()| where T1 : class| where T2 : unmanaged| whe",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ParameterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| return Fixture.VerifyForBody(| \"\"\"| [Get(\"/users/{user}\")]| Task<string> Get(string user);| \"\"\");| }",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ReturnTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| return Fixture.VerifyForBody(| \"\"\"| [Get(\"/users\")]| Task<string> Get();| \"\"\");| }",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ApiApprovalTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available",
        "Smells": [
          {
            "Name": "Empty Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "AuthenticatedClientHandlerTests.cs",
    "methods": [
      {
        "name": "DefaultHandlerIsHttpClientHandler",
        "body": "{| var handler = new AuthenticatedHttpClientHandler(((_, _) => Task.FromResult(string.Empty)));| Assert.IsType<HttpClientHandler>(handler.InnerHandler);| }",
        "Smells": [
          {
            "Name": "Constructor Initialization Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "NullTokenGetterThrows",
        "body": "{| Assert.Throws<ArgumentNullException>(() => new AuthenticatedHttpClientHandler(null));| }",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "Task",
        "body": "{| var handler = new MockHttpMessageHandler();| var settings = new RefitSettings()| {| AuthorizationHeaderValueGetter = (_, __) => Task.FromResult(\"tokenValue\"),| HttpMessageHandlerFactory = () => handler| };| handler| .Expect(HttpMethod.Get, \"http://api/unauth\")| .With(msg => msg.Headers.Authorizat",
        "Smells": [
          {
            "Name": "Obscure In-Line Setup Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "DefaultUrlParameterFormatterTest.cs",
    "methods": [
      {
        "name": "NullParameterValue_ReturnsNull",
        "body": "{| var parameters = new DefaultUrlParameterFormatterTestRequest| {| DateTime = null| };| var urlParameterFormatter = new DefaultUrlParameterFormatter();| var output = urlParameterFormatter.Format(| parameters.DateTime,| parameters.GetType().GetProperty(nameof(parameters.DateTime))!,| parameters.GetT",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Eager Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "DeserializationExceptionFactoryTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var handler = new MockHttpMessageHandler();| var settings = new RefitSettings()| {| HttpMessageHandlerFactory = () => handler,| };| var intContent = 123;| handler| .Expect(HttpMethod.Get, \"http://api/get-with-result\")| .Respond(HttpStatusCode.OK, new StringContent($\"{intContent}\"));| var fixture ",
        "Smells": [
          {
            "Name": "Redundant Assertion Test Smell",
            "Status": "Not Found"
          },
          {
            "Name": "Empty Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ExceptionFactoryTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var handler = new MockHttpMessageHandler();| var settings = new RefitSettings()| {| HttpMessageHandlerFactory = () => handler,| ExceptionFactory = _ => Task.FromResult<Exception>(null)| };| handler| .Expect(HttpMethod.Get, \"http://api/get-with-result\")| .Respond(HttpStatusCode.NotFound, new Strin",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Eager Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Redundant Print Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "FormValueMultimapTests.cs",
    "methods": [
      {
        "name": "EmptyIfNullPassedIn",
        "body": "{| var target = new FormValueMultimap(null, settings);| Assert.Empty(target);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "LoadsFromDictionary",
        "body": "{| var source = new Dictionary<string, string> { { \"foo\", \"bar\" }, { \"xyz\", \"123\" } };| var target = new FormValueMultimap(source, settings);| Assert.Equal(source, target);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "LoadsFromObject",
        "body": "{| var source = new ObjectTestClass { A = \"1\", B = \"2\" };| var expected = new Dictionary<string, string> { { \"A\", \"1\" }, { \"B\", \"2\" }, };| var actual = new FormValueMultimap(source, settings);| Assert.Equal(expected, actual);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "LoadFromObjectWithCollections",
        "body": "{| var source = new ObjectWithRepeatedFieldsTestClass| {| A = new List<int> { 1, 2 },| B = new HashSet<string> { \"set1\", \"set2\" },| C = new HashSet<int> { 1, 2 },| D = new List<double> { 0.1, 1.0 },| E = new List<bool> { true, false }| };| var expected = new List<KeyValuePair<string, string>>| {| ne",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "DefaultCollectionFormatCanBeSpecifiedInSettings_Multi",
        "body": "{| var settingsWithCollectionFormat = new RefitSettings| {| CollectionFormat = CollectionFormat.Multi| };| var source = new ObjectWithRepeatedFieldsTestClass| {| // Members have explicit CollectionFormat| A = new List<int> { 1, 2 },| B = new HashSet<string> { \"set1\", \"set2\" },| C = new HashSet<int> ",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "ExcludesPropertiesWithInaccessibleGetters",
        "body": "{| var source = new ClassWithInaccessibleGetters { A = \"Foo\", B = \"Bar\" };| var expected = new Dictionary<string, string> { { \"C\", \"FooBar\" } };| var actual = new FormValueMultimap(source, settings);| Assert.Equal(expected, actual);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "LoadsFromAnonymousType",
        "body": "{| var source = new { foo = \"bar\", xyz = 123 };| var expected = new Dictionary<string, string> { { \"foo\", \"bar\" }, { \"xyz\", \"123\" } };| var actual = new FormValueMultimap(source, settings);| Assert.Equal(expected, actual);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "UsesAliasAsAttribute",
        "body": "{| var source = new AliasingTestClass { Foo = \"abc\" };| var target = new FormValueMultimap(source, settings);| Assert.DoesNotContain(\"Foo\", target.Keys);| Assert.Contains(\"f\", target.Keys);| Assert.Equal(\"abc\", target.FirstOrDefault(entry => entry.Key == \"f\").Value);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "UsesJsonPropertyAttribute",
        "body": "{| var source = new AliasingTestClass { Bar = \"xyz\" };| var target = new FormValueMultimap(source, settings);| Assert.DoesNotContain(\"Bar\", target.Keys);| Assert.Contains(\"b\", target.Keys);| Assert.Equal(\"xyz\", target.FirstOrDefault(entry => entry.Key == \"b\").Value);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "UsesQueryPropertyAttribute",
        "body": "{| var source = new AliasingTestClass { Frob = 4 };| var target = new FormValueMultimap(source, settings);| Assert.DoesNotContain(\"Bar\", target.Keys);| Assert.Contains(\"prefix-fr\", target.Keys);| Assert.Equal(\"4.0\", target.FirstOrDefault(entry => entry.Key == \"prefix-fr\").Value);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "GivesPrecedenceToAliasAs",
        "body": "{| var source = new AliasingTestClass { Baz = \"123\" };| var target = new FormValueMultimap(source, settings);| Assert.DoesNotContain(\"Bar\", target.Keys);| Assert.DoesNotContain(\"z\", target.Keys);| Assert.Contains(\"a\", target.Keys);| Assert.Equal(\"123\", target.FirstOrDefault(entry => entry.Key == \"a\"",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "SkipsNullValuesFromDictionary",
        "body": "{| var source = new Dictionary<string, string> { { \"foo\", \"bar\" }, { \"xyz\", null } };| var target = new FormValueMultimap(source, settings);| Assert.Single(target);| Assert.Contains(\"foo\", target.Keys);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "SerializesEnumWithEnumMemberAttribute",
        "body": "{| var source = new Dictionary<string, EnumWithEnumMember>()| {| { \"A\", EnumWithEnumMember.A },| { \"B\", EnumWithEnumMember.B }| };| var expected = new Dictionary<string, string> { { \"A\", \"A\" }, { \"B\", \"b\" } };| var actual = new FormValueMultimap(source, settings);| Assert.Equal(expected, actual);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "HttpClientFactoryExtensionsTests.cs",
    "methods": [
      {
        "name": "GenericHttpClientsAreAssignedUniqueNames",
        "body": "{| var services = new ServiceCollection();| var userClientName = services.AddRefitClient<IBoringCrudApi<User, string>>().Name;| var roleClientName = services.AddRefitClient<IBoringCrudApi<Role, string>>().Name;| Assert.NotEqual(userClientName, roleClientName);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientServicesAreAddedCorrectlyGivenGenericArgument",
        "body": "{| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient<IFooWithOtherAttribute>();| Assert.Contains(| serviceCollection,| z => z.ServiceType == typeof(SettingsFor<IFooWithOtherAttribute>)| );| Assert.Contains(| serviceCollection,| z => z.ServiceType == typeof(IRequestBu",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientServicesAreAddedCorrectlyGivenTypeArgument",
        "body": "{| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient(typeof(IFooWithOtherAttribute));| Assert.Contains(| serviceCollection,| z => z.ServiceType == typeof(SettingsFor<IFooWithOtherAttribute>)| );| Assert.Contains(| serviceCollection,| z => z.ServiceType == typeof(IReq",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientReturnsClientGivenGenericArgument",
        "body": "{| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient<IFooWithOtherAttribute>();| var serviceProvider = serviceCollection.BuildServiceProvider();| Assert.NotNull(serviceProvider.GetService<IFooWithOtherAttribute>());| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientReturnsClientGivenTypeArgument",
        "body": "{| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient(typeof(IFooWithOtherAttribute));| var serviceProvider = serviceCollection.BuildServiceProvider();| Assert.NotNull(serviceProvider.GetService<IFooWithOtherAttribute>());| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientSettingsAreInjectableGivenGenericArgument",
        "body": "{| var serviceCollection = new ServiceCollection().Configure<ClientOptions>(| o => o.Serializer = new SystemTextJsonContentSerializer(new JsonSerializerOptions())| );| serviceCollection.AddRefitClient<IFooWithOtherAttribute>(| _ =>| new RefitSettings()| {| ContentSerializer = _.GetRequiredService<| ",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientSettingsAreInjectableGivenTypeArgument",
        "body": "{| var serviceCollection = new ServiceCollection().Configure<ClientOptions>(| o => o.Serializer = new SystemTextJsonContentSerializer(new JsonSerializerOptions())| );| serviceCollection.AddRefitClient(| typeof(IFooWithOtherAttribute),| _ =>| new RefitSettings()| {| ContentSerializer = _.GetRequiredS",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientSettingsCanBeProvidedStaticallyGivenGenericArgument",
        "body": "{| var contentSerializer = new SystemTextJsonContentSerializer(new JsonSerializerOptions());| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient<IFooWithOtherAttribute>(| new RefitSettings() { ContentSerializer = contentSerializer }| );| var serviceProvider = serviceC",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "HttpClientSettingsCanBeProvidedStaticallyGivenTypeArgument",
        "body": "{| var contentSerializer = new SystemTextJsonContentSerializer(new JsonSerializerOptions());| var serviceCollection = new ServiceCollection();| serviceCollection.AddRefitClient<IFooWithOtherAttribute>(| new RefitSettings() { ContentSerializer = contentSerializer }| );| var serviceProvider = serviceC",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "ProvidedHttpClientIsUsedAsNamedClient",
        "body": "{| var baseUri = new Uri(\"https://0:1337\");| var services = new ServiceCollection();| services.AddHttpClient(\"MyHttpClient\", client => {| client.BaseAddress = baseUri;| client.DefaultRequestHeaders.Add(\"X-Powered-By\", Environment.OSVersion.VersionString);| });| services.AddRefitClient<IGitHubApi>(nu",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "IDefaultInterfaceMethodTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var mockHttp = new MockHttpMessageHandler();| var settings = new RefitSettings { HttpMessageHandlerFactory = () => mockHttp };| mockHttp| .Expect(HttpMethod.Get, \"https://httpbin.org/\")| .Respond(HttpStatusCode.OK, \"text/html\", \"OK\");| var fixture = RestService.For<IHaveDims>(\"https://httpbin.org",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      },
      {
        "name": "StaticInterfaceMethodTest",
        "body": "{| var plainText = IHaveDims.GetStatic();| Assert.True(!string.IsNullOrWhiteSpace(plainText));| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ReflectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| mockHandler| .Expect(HttpMethod.Get, \"https://foo/bar\")| .Respond(\"application/json\", nameof(IBasicApi.GetParam));| var methodInfo = typeof(IBasicApi).GetMethod(nameof(IBasicApi.GetParam))!;| var parameterInfo = methodInfo.GetParameters()[0];| var formatter = new TestUrlFormatter(parameterInfo, t",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Not Found"
          }
        ]
      }
    ]
  },
  {
    "file": "ResponseTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| mockHandler| .Expect(HttpMethod.Get, \"http://api/aliasTest\")| .Respond(| \"application/json\",| \"{\\\"FIELD_WE_SHOULD_SHORTEN_WITH_ALIAS_AS\\\": \\\"Hello\\\", \\\"FIELD_WE_SHOULD_SHORTEN_WITH_JSON_PROPERTY\\\": \\\"World\\\"}\"| );| var result = await fixture.GetTestObject();| Assert.Equal(\"World\", result.ShortNam",
        "Smells": [
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Obscure In-Line Setup Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "SerializedContentTests.cs",
    "methods": [
      {
        "name": "VerityDefaultSerializer",
        "body": "{| var settings = new RefitSettings();| Assert.NotNull(settings.ContentSerializer);| Assert.IsType<SystemTextJsonContentSerializer>(settings.ContentSerializer);| settings = new RefitSettings(new NewtonsoftJsonContentSerializer());| Assert.NotNull(settings.ContentSerializer);| Assert.IsType<Newtonsof",
        "Smells": [
          {
            "Name": "Duplicate Assert Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "UniqueNameTests.cs",
    "methods": [
      {
        "name": "SystemTypeAndLanguageTypeHaveSameNames",
        "body": "{| var name1 = UniqueName.ForType<System.Int32>();| var name2 = UniqueName.ForType<int>();| Assert.Equal(name1, name2);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "XmlContentSerializerTests.cs",
    "methods": [
      {
        "name": "MediaTypeShouldBeApplicationXmlAsync",
        "body": "{| var dto = BuildDto();| var sut = new XmlContentSerializer();| var content = sut.ToHttpContent(dto);| Assert.Equal(\"application/xml\", content.Headers.ContentType.MediaType);| }",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  }
]