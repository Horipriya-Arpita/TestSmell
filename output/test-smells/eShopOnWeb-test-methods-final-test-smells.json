[
  {
    "file": "CheckoutTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| // Add Item to Cart| var keyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"id\", \"2\"),| new K",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Obscure In-Line Setup Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "IndexTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse1 = await response.Content.ReadAsStringAsync();| string token = WebPageHelpers.GetRequestVerificationToken(stringResponse1);| // Add Item to Cart| var keyValues = new List<KeyValu",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Obscure In-Line Setup Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse1 = await response.Content.ReadAsStringAsync();| string token = WebPageHelpers.GetRequestVerificationToken(stringResponse1);| // Add Item to Cart| var keyValues = new List<KeyValu",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Obscure In-Line Setup Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "AuthenticateEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new AuthenticateRequest()| {| Username = testUsername,| Password = testPassword| };| var jsonContent = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, \"application/json\");| var response = await ProgramTest.NewClient.PostAsync(\"api/authenticate\", jsonContent);| re",
        "Smells": [
          {
            "Name": "Constructor Initialization Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "CatalogItemGetByIdEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await ProgramTest.NewClient.GetAsync(\"api/catalog-items/5\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<GetByIdCatalogItemResponse>();| Assert.AreEqual(5, model!.CatalogItem.Id);| Asser",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Assertion Roulette Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "Task",
        "body": "{| var response = await ProgramTest.NewClient.GetAsync(\"api/catalog-items/5\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<GetByIdCatalogItemResponse>();| Assert.AreEqual(5, model!.CatalogItem.Id);| Asser",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "CreateCatalogItemEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var jsonContent = GetValidNewItemJson();| var token = ApiTokenHelper.GetNormalUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);| var response = await client.PostAsync(\"api/catalog-items\", jsonContent);| ",
        "Smells": [
          {
            "Name": "Constructor Initialization Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "Task",
        "body": "{| var jsonContent = GetValidNewItemJson();| var token = ApiTokenHelper.GetNormalUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);| var response = await client.PostAsync(\"api/catalog-items\", jsonContent);| ",
        "Smells": [
          {
            "Name": "Constructor Initialization Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  },
  {
    "file": "DeleteCatalogItemEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var adminToken = ApiTokenHelper.GetAdminUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);| var response = await client.DeleteAsync(\"api/catalog-items/12\");| response.EnsureSuccessStatusCode();| var ",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          },
          {
            "Name": "Constructor Initialization Test Smell",
            "Status": "Found"
          }
        ]
      },
      {
        "name": "Task",
        "body": "{| var adminToken = ApiTokenHelper.GetAdminUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);| var response = await client.DeleteAsync(\"api/catalog-items/12\");| response.EnsureSuccessStatusCode();| var ",
        "Smells": [
          {
            "Name": "Magic Number Test Smell",
            "Status": "Found"
          }
        ]
      }
    ]
  }
]