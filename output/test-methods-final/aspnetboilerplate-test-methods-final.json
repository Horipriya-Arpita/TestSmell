[
  {
    "file": "AuditLogTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _mockAuditingStore.Logs.Count.ShouldBe(0);| //Act| await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.SimpleJsonException),| new| {| message = \"A test message\",| userFriendly = true| }),| HttpStatusCode.InternalServerError| );| //Assert| _mockAuditingStore.Logs.Count.ShouldBe(1);| var auditLog = _mockAuditingStore.Logs.ToArray()[0];| auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleJsonException));| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IAuditingConfiguration>().SaveReturnValues = true;| _mockAuditingStore.Logs.Count.ShouldBe(0);| //Act| await GetResponseAsStringAsync(GetUrl<SimpleTestController>(nameof(SimpleTestController.SimpleString)));| //Assert| _mockAuditingStore.Logs.Count.ShouldBe(1);| var auditLog = _mockAuditingStore.Logs.ToArray()[0];| auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleString));| auditLog.ReturnValue.ShouldBe(\"\\\"test\\\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IAuditingConfiguration>().SaveReturnValues = true;| _mockAuditingStore.Logs.Count.ShouldBe(0);| //Act| await GetResponseAsStringAsync(GetUrl<SimpleTestController>(nameof(SimpleTestController.SimpleContent)));| //Assert| _mockAuditingStore.Logs.Count.ShouldBe(1);| var auditLog = _mockAuditingStore.Logs.ToArray()[0];| auditLog.MethodName.ShouldBe(nameof(SimpleTestController.SimpleContent));| auditLog.ReturnValue.ShouldBe(\"Hello world...\");| }"
      }
    ]
  },
  {
    "file": "AuthTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<AuthTestController>(| nameof(AuthTestController.NonAuthorizedAction)| )| );| // Assert| response.ShouldBe(\"public content\");| // Act| response = await GetResponseAsStringAsync(| GetUrl<AuthTest2Controller>(| nameof(AuthTest2Controller.NonAuthorizedAction)| )| );| // Assert| response.ShouldBe(\"public content 2\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act & Assert| await Assert.ThrowsAnyAsync<Exception>(async () =>| {| await GetResponseAsStringAsync(| GetUrl<AuthTestController>(| nameof(AuthTestController.AuthorizedAction)| )| );| });| // Act & Assert| await Assert.ThrowsAnyAsync<Exception>(async () =>| {| await GetResponseAsStringAsync(| GetUrl<AuthTestController>(| nameof(AuthTestController.AbpMvcAuthorizedAction)| )| );| });| //Act| var response = await GetResponseAsObjectAsync<AjaxResponse>(| GetUrl<AuthTestController>(| nameof(AuthTestController.AbpMvcAuthorizedActionReturnsObject)| ) + \"?X-Requested-With=XMLHttpRequest\",| HttpStatusCode.Unauthorized| );| //Assert| response.Success.ShouldBeFalse();| response.Result.ShouldBe(null);| response.Error.ShouldNotBeNull();| response.Error.Message.ShouldNotBeNull();| response.UnAuthorizedRequest.ShouldBeTrue();| // Act & Assert| await Assert.ThrowsAnyAsync<Exception>(async () =>| {| await GetResponseAsStringAsync(| GetUrl<AuthTest2Controller>(| nameof(AuthTest2Controller.AuthorizedAction)| )| );| });| }"
      }
    ]
  },
  {
    "file": "DontWrapResultTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<DontWrapResultTestController>(| nameof(DontWrapResultTestController.Get)| )| );| // Assert| response.ShouldBe(\"42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<DontWrapResultTestController>(| nameof(DontWrapResultTestController.GetBase)| )| );| // Assert| response.ShouldBe(\"42\");| }"
      }
    ]
  },
  {
    "file": "EntityHistory_Reason_Tests.cs",
    "methods": [
      {
        "name": "HttpRequestEntityChangeSetReasonProvider_Can_Be_Constructor_Injected",
        "body": "{| _useCaseMarkedClass.ReasonProvider.ShouldBeOfType<HttpRequestEntityChangeSetReasonProvider>();| }"
      },
      {
        "name": "HttpRequestEntityChangeSetReasonProvider_Should_Be_Property_Injected",
        "body": "{| _nonUseCaseMarkedClass.ReasonProvider.ShouldBeOfType<HttpRequestEntityChangeSetReasonProvider>();| }"
      },
      {
        "name": "Should_Intercept_UseCase_Marked_Classes",
        "body": "{| _useCaseMarkedClass.NonUseCaseMarkedMethod();| }"
      },
      {
        "name": "Should_Intercept_UseCase_Marked_Methods",
        "body": "{| _nonUseCaseMarkedClass.UseCaseMarkedMethod();| }"
      },
      {
        "name": "Task",
        "body": "{| await _nonUseCaseMarkedClass.UseCaseMarkedAsyncMethod();| }"
      },
      {
        "name": "Task",
        "body": "{| await _nonUseCaseMarkedClass.UseCaseMarkedAsyncMethodWithResult();| }"
      },
      {
        "name": "Should_Not_Intercept_No_UseCase_Marked_Method",
        "body": "{| _nonUseCaseMarkedClass.AnotherMethod();| }"
      }
    ]
  },
  {
    "file": "FluentValidation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument1>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetJsonValue),| new { value = 42 }| )| );| response.Success.ShouldBeTrue();| response.Result.Value.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument3>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetNullableJsonValue),| new FluentValidationTestController.ValidationTestArgument3 { Value = null }| )| );| response.Success.ShouldBeTrue();| response.Result.Value.ShouldBe(null);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument3>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetNullableJsonValue2)| ),| new StringContent(\"{ \\\"value\\\": null }\", Encoding.UTF8, \"application/json\")| );| response.Success.ShouldBeTrue();| response.Result.Value.ShouldBe(null);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument2>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetJsonValueWithArray)| ),| new StringContent(\"{ \\\"array\\\": [ { \\\"value\\\": 1}, { \\\"value\\\": 3}, { \\\"value\\\": 5}] }\", Encoding.UTF8, \"application/json\")| );| response.Success.ShouldBeTrue();| response.Result.Array.Length.ShouldBe(3);| response.Result.Array[0].Value.ShouldBe(1);| response.Result.Array[1].Value.ShouldBe(3);| response.Result.Array[2].Value.ShouldBe(5);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument2>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetJsonValueWithArray)| ),| new StringContent(\"{ \\\"array\\\": [ { \\\"value\\\": 1}, { \\\"value\\\": -3}] }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(2);| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"array\");| response.Error.ValidationErrors[0].Message.ShouldBe(\"Array must contain at least three items\");| response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<FluentValidationTestController.ValidationTestArgument1>>(| GetUrl<FluentValidationTestController>(| nameof(FluentValidationTestController.GetJsonValue)| ),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| }"
      }
    ]
  },
  {
    "file": "MultiTenancy_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(| GetUrl<MultiTenancyTestController>(| nameof(MultiTenancyTestController.GetTenantId)| )| );| //Assert| response.Result.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| _multiTenancyConfig.TenantIdResolveKey = \"Abp-TenantId\";| Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(| GetUrl<MultiTenancyTestController>(| nameof(MultiTenancyTestController.GetTenantId)| )| );| //Assert| response.Result.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| Client.DefaultRequestHeaders.Add(\"Cookie\", new CookieHeaderValue(_multiTenancyConfig.TenantIdResolveKey, \"42\").ToString());| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(| GetUrl<MultiTenancyTestController>(| nameof(MultiTenancyTestController.GetTenantId)| )| );| //Assert| response.Result.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| Client.DefaultRequestHeaders.Add(\"Cookie\", new CookieHeaderValue(_multiTenancyConfig.TenantIdResolveKey, \"43\").ToString());| Client.DefaultRequestHeaders.Add(_multiTenancyConfig.TenantIdResolveKey, \"42\");| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<int?>>(| GetUrl<MultiTenancyTestController>(| nameof(MultiTenancyTestController.GetTenantId)| )| );| //Assert| response.Result.ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "NameConflict_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(| GetUrl<NameConflictController>(| nameof(NameConflictController.GetSelfActionUrl)| )| );| //Assert| response.Result.ShouldBe(\"/NameConflict/GetSelfActionUrl\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(| GetUrl<NameConflictController>(| nameof(NameConflictController.GetAppServiceActionUrlWithArea)| )| );| //Assert| response.Result.ShouldBe(\"/api/services/app/NameConflict/GetConstantString\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<string>>(| \"/api/services/app/NameConflict/GetConstantString\"| );| //Assert| response.Result.ShouldBe(\"return-value-from-app-service\");| }"
      }
    ]
  },
  {
    "file": "ProxyScripting_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<AbpServiceProxiesController>(| nameof(AbpServiceProxiesController.GetAll),| new { type = JQueryProxyScriptGenerator.Name }| )| );| response.ShouldNotBeNullOrEmpty();| }"
      }
    ]
  },
  {
    "file": "ResponseCacheTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsync(| GetUrl<ResponseCacheTestController>(| nameof(ResponseCacheTestController.Get)| )| );| // Assert| response.Headers.CacheControl.ShouldBeNull();| response.Headers.Pragma.Count.ShouldBe(0);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsync(| GetUrl<ResponseCacheTestController>(| nameof(ResponseCacheTestController.GetWithCache)| )| );| // Assert| response.Headers.CacheControl.ShouldNotBeNull();| response.Headers.CacheControl.MaxAge.ShouldBe(TimeSpan.FromSeconds(60));| response.Headers.CacheControl.Public.ShouldBeTrue();| response.Headers.Pragma.Count.ShouldBe(0);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsync(| GetUrl<ResponseCacheTestController>(| nameof(ResponseCacheTestController.GetWithoutCache)| )| );| // Assert| response.Headers.CacheControl.ShouldNotBeNull();| response.Headers.CacheControl.NoCache.ShouldBeTrue();| response.Headers.CacheControl.NoStore.ShouldBeTrue();| response.Headers.Pragma.Single().Name.ShouldBe(\"no-cache\");| }"
      }
    ]
  },
  {
    "file": "ResponseNoCacheTestAppService_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsync(| GetUrl<ResponseNoCacheTestAppService>(| nameof(ResponseNoCacheTestAppService.Get)| )| );| // Assert| response.Headers.CacheControl.ShouldNotBeNull();| response.Headers.CacheControl.NoCache.ShouldBeTrue();| response.Headers.CacheControl.NoStore.ShouldBeTrue();| response.Headers.Pragma.Single().Name.ShouldBe(\"no-cache\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsync(| GetUrl<ResponseNoCacheTestAppService>(| nameof(ResponseNoCacheTestAppService.GetWithCache)| )| );| // Assert| response.Headers.CacheControl.ShouldNotBeNull();| response.Headers.CacheControl.MaxAge.ShouldBe(TimeSpan.FromSeconds(20));| response.Headers.CacheControl.Private.ShouldBeTrue();| response.Headers.Pragma.Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "SimpleTestControllerTests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Controller",
        "body": "{| ServiceProvider.GetService<SimpleTestController>().ShouldNotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.SimpleContent)| )| );| // Assert| response.ShouldBe(\"Hello world...\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.SimpleJson)| )| );| //Assert| response.Result.StrValue.ShouldBe(\"Forty Two\");| response.Result.IntValue.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| //Act & Assert| await Assert.ThrowsAsync<UserFriendlyException>(async () =>| {| await GetResponseAsObjectAsync<AjaxResponse<SimpleViewModel>>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.SimpleJsonExceptionDownWrap)| ));| });| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<SimpleViewModel>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.SimpleJsonDontWrap)| ));| //Assert| response.StrValue.ShouldBe(\"Forty Two\");| response.IntValue.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetVoidTest)| ));| response.Success.ShouldBeTrue();| response.Result.ShouldBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetVoidTestDontWrap)| ));| response.ShouldBeNullOrEmpty();| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetActionResultTest)| ));| //Assert| response.ShouldBe(\"GetActionResultTest-Result\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetActionResultTest2)| ));| //Assert| response.ShouldBe(\"GetActionResultTestAsync-Result\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse>(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetVoidExceptionTest)| ), HttpStatusCode.InternalServerError);| response.Error.ShouldNotBeNull();| response.Error.Message.ShouldBe(\"GetVoidExceptionTestAsync-Exception\");| response.Result.ShouldBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| (await Assert.ThrowsAsync<UserFriendlyException>(async () =>| {| await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetActionResultExceptionTest)| ), HttpStatusCode.InternalServerError);| })).Message.ShouldBe(\"GetActionResultExceptionTestAsync-Exception\");| }"
      },
      {
        "name": "Task",
        "body": "{| //Arrange| Client.DefaultRequestHeaders.Add(CookieRequestCultureProvider.DefaultCookieName, \"c=it|uic=it\");| var culture = await GetResponseAsStringAsync(| GetUrl<SimpleTestController>(| nameof(SimpleTestController.GetCurrentCultureNameTest)| ));| culture.ShouldBe(\"it\");| }"
      }
    ]
  },
  {
    "file": "UnitOfWorkMiddleware_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await Client.GetAsync(\"/\");| var str = await response.Content.ReadAsStringAsync();| str.ShouldBe(\"not-null\");| }"
      }
    ]
  },
  {
    "file": "Validation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetContentValue),| new { value = 42 }| )| );| response.ShouldBe(\"OK: 42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValue),| new { value = 42 }| )| );| response.Success.ShouldBeTrue();| response.Result.Value.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValue)| ),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument2>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithEnum)| ),| new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| //The JSON value could not be converted to Abp.AspNetCore.App.Controllers.ValidationTestController+ValidationTestEnum.| //Path: $ | LineNumber: 0 | BytePositionInLine: 5.| //response.Error.ValidationErrors[0].Members[0].ShouldBe(\"$.value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument3>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithValidatableObject)| ),| new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be higher than 0\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument4>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithCustomValidate)| ),| new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be \\\"abp\\\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument5>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithCombinedValidators)| ),| new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(2);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");| }"
      }
    ]
  },
  {
    "file": "WrapResultTestController_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<WrapResultTestController>(| nameof(WrapResultTestController.Get)| )| );| // Assert| response.ShouldNotBe(\"42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<WrapResultTestController>(| nameof(WrapResultTestController.GetDontWrap)| )| );| // Assert| response.ShouldBe(\"42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<WrapResultTestController>(| nameof(WrapResultTestController.GetDontWrapByUrl)| )| );| // Assert| response.ShouldBe(\"42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<WrapResultTestController>(| nameof(WrapResultTestController.GetDontWrapByUrlWithException)| )| ).ShouldThrowAsync<UserFriendlyException>();| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<WrapResultTestController>(| nameof(WrapResultTestController.GetXml)| )| );| // Assert| var result = XElement.Parse(response).Elements().FirstOrDefault(x =>| string.Equals(x.Name.ToString(), \"result\", StringComparison.InvariantCultureIgnoreCase));| result.ShouldNotBeNull();| result.Value.ShouldBe(\"42\");| }"
      }
    ]
  },
  {
    "file": "AutoMapper_Inheritance_Tests.cs",
    "methods": [
      {
        "name": "Should_Map_Derived_To_Target",
        "body": "{| var derived = new MyDerivedClass { Value = \"fortytwo\" };| var target = _mapper.Map<MyTargetClassToMap>(derived);| target.Value.ShouldBe(\"fortytwo\");| }"
      },
      {
        "name": "Should_Map_EntityProxy_To_EntityDto_And_To_DrivedEntityDto",
        "body": "{| var proxy = new EntityProxy() { Value = \"42\" };| var target = _mapper.Map<EntityDto>(proxy);| var target2 = _mapper.Map<DerivedEntityDto>(proxy);| target.Value.ShouldBe(\"42\");| target2.Value.ShouldBe(\"42\");| }"
      },
      {
        "name": "AutoMapKey_MapTo_DerivedCollection_Tests",
        "body": "{| var list1 = new List<MyAutoMapKeyClass1>| {| new MyAutoMapKeyClass1 { Id = 1, TestProp = \"New test value 1\"},| new MyAutoMapKeyClass1 { Id = 2, TestProp = \"New test value 2\"}| };| var list2 = new List<MyAutoMapKeyClass2>| {| new MyAutoMapKeyClass2 { Id = 1, TestProp = \"Test value 1\", Value = 5},| new MyAutoMapKeyClass2 { Id = 2, TestProp = \"Test value 2\", Value = 10}| };| var list3 = new List<MyAutoMapKeyClass3>| {| new MyAutoMapKeyClass3 { Id = 1, TestProp = \"New test value 1\"},| new MyAutoMapKeyClass3 { Id = 2, TestProp = \"New test value 2\"}| };| var list4 = new List<MyAutoMapKeyClass4>| {| new MyAutoMapKeyClass4 { Id = 1, TestProp = \"Test value 1\", Value = 5},| new MyAutoMapKeyClass4 { Id = 2, TestProp = \"Test value 2\", Value = 10}| };| var list5 = new List<MyAutoMapKeyClass5>| {| new MyAutoMapKeyClass5 { Id = 1, SecondId = 2, TestProp = \"New test value 1\"},| new MyAutoMapKeyClass5 { Id = 2, SecondId = 3, TestProp = \"New test value 2\"}| };| var list6 = new List<MyAutoMapKeyClass6>| {| new MyAutoMapKeyClass6 { Id = 1, SecondId = 2, TestProp = \"Test value 1\", Value = 5},| new MyAutoMapKeyClass6 { Id = 2, SecondId = 3, TestProp = \"Test value 2\", Value = 10}| };| var list7 = new List<MyAutoMapKeyClass7>| {| new MyAutoMapKeyClass7 { Id = 1, SecondId = 2, TestProp = \"New test value 1\"},| new MyAutoMapKeyClass7 { Id = 2, SecondId = 3, TestProp = \"New test value 2\"}| };| var list8 = new List<MyAutoMapKeyClass8>| {| new MyAutoMapKeyClass8 { Id = 1, SecondId = 2, TestProp = \"Test value 1\", Value = 5},| new MyAutoMapKeyClass8 { Id = 2, SecondId = 3, TestProp = \"Test value 2\", Value = 10}| };| _mapper.Map(list1, list2);| list2.Count.ShouldBe(2);| list2[0].TestProp.ShouldBe(\"New test value 1\");| list2[0].Value.ShouldBe(5);| list2[1].TestProp.ShouldBe(\"New test value 2\");| list2[1].Value.ShouldBe(10);| _mapper.Map(list3, list4);| list4.Count.ShouldBe(2);| list4[0].TestProp.ShouldBe(\"New test value 1\");| list4[0].Value.ShouldBe(5);| list4[1].TestProp.ShouldBe(\"New test value 2\");| list4[1].Value.ShouldBe(10);| _mapper.Map(list5, list6);| list6.Count.ShouldBe(2);| list6[0].TestProp.ShouldBe(\"New test value 1\");| list6[0].Value.ShouldBe(5);| list6[1].TestProp.ShouldBe(\"New test value 2\");| list6[1].Value.ShouldBe(10);| _mapper.Map(list7, list8);| list8.Count.ShouldBe(2);| list8[0].TestProp.ShouldBe(\"New test value 1\");| list8[0].Value.ShouldBe(5);| list8[1].TestProp.ShouldBe(\"New test value 2\");| list8[1].Value.ShouldBe(10);| }"
      }
    ]
  },
  {
    "file": "AutoMapping_Tests.cs",
    "methods": [
      {
        "name": "Map_Null_Tests",
        "body": "{| MyClass1 obj1 = null;| var obj2 = _mapper.Map<MyClass2>(obj1);| obj2.ShouldBe(null);| }"
      },
      {
        "name": "Map_Null_Existing_Object_Tests",
        "body": "{| MyClass1 obj1 = null;| var obj2 = new MyClass2 { TestProp = \"before map\" };| _mapper.Map(obj1, obj2);| obj2.TestProp.ShouldBe(\"before map\");| }"
      },
      {
        "name": "MapTo_Tests",
        "body": "{| var obj1 = new MyClass1 { TestProp = \"Test value\" };| var obj2 = _mapper.Map<MyClass2>(obj1);| obj2.TestProp.ShouldBe(\"Test value\");| var obj3 = _mapper.Map<MyClass3>(obj1);| obj3.TestProp.ShouldBe(\"Test value\");| }"
      },
      {
        "name": "Should_Map_Two_Way_When_AutoMap_Attribute_Is_Used",
        "body": "{| MyClass3 obj2 = new MyClass3| {| TestProp = \"test\",| AnotherValue = 1| };| var obj1 = _mapper.Map<MyClass1>(obj2);| obj1.TestProp.ShouldBe(\"test\");| }"
      },
      {
        "name": "MapTo_Existing_Object_Tests",
        "body": "{| var obj1 = new MyClass1 { TestProp = \"Test value\" };| var obj2 = new MyClass2();| _mapper.Map(obj1, obj2);| obj2.TestProp.ShouldBe(\"Test value\");| var obj3 = new MyClass3();| _mapper.Map(obj2, obj3);| obj3.TestProp.ShouldBe(\"Test value\");| Assert.ThrowsAny<Exception>(() => // Did not define reverse mapping!| {| _mapper.Map(obj3, obj2);| });| }"
      },
      {
        "name": "MapFrom_Tests",
        "body": "{| var obj2 = new MyClass2 { TestProp = \"Test value\" };| var obj1 = _mapper.Map<MyClass1>(obj2);| obj1.TestProp.ShouldBe(\"Test value\");| }"
      },
      {
        "name": "IgnoreMap_Tests",
        "body": "{| var obj2 = new MyClass2 { TestProp = \"Test value\", AnotherValue = 42 };| var obj3 = _mapper.Map<MyClass3>(obj2);| obj3.TestProp.ShouldBe(\"Test value\");| obj3.AnotherValue.ShouldBe(0); //Ignored because of IgnoreMap attribute!| }"
      },
      {
        "name": "MapTo_Collection_Tests",
        "body": "{| var list1 = new List<MyClass1>| {| new MyClass1 {TestProp = \"Test value 1\"},| new MyClass1 {TestProp = \"Test value 2\"}| };| var list2 = _mapper.Map<List<MyClass2>>(list1);| list2.Count.ShouldBe(2);| list2[0].TestProp.ShouldBe(\"Test value 1\");| list2[1].TestProp.ShouldBe(\"Test value 2\");| }"
      },
      {
        "name": "AutoMapKey_MapTo_Collection_Tests",
        "body": "{| var list1 = new List<MyAutoMapKeyClass1>| {| new MyAutoMapKeyClass1 { Id = 1, TestProp = \"New test value 1\"},| new MyAutoMapKeyClass1 { Id = 2, TestProp = \"New test value 2\"}| };| var list2 = new List<MyAutoMapKeyClass2>| {| new MyAutoMapKeyClass2 { Id = 1, SecondId = 10, ThirdId = 100, TestProp = \"Test value 1\", Value = 5},| new MyAutoMapKeyClass2 { Id = 2, SecondId = 20, ThirdId = 200,TestProp = \"Test value 2\", Value = 10}| };| var list3 = new List<MyAutoMapKeyClass3>| {| new MyAutoMapKeyClass3 { SecondId = 10, ThirdId = 100, TestProp = \"Test value 1\", SecondValue = 50},| new MyAutoMapKeyClass3 { SecondId = 20, ThirdId = 200, TestProp = \"Test value 2\", SecondValue = 100}| };| _mapper.Map(list1, list2);| list2.Count.ShouldBe(2);| list2[0].TestProp.ShouldBe(\"New test value 1\");| list2[0].Value.ShouldBe(5);| list2[1].TestProp.ShouldBe(\"New test value 2\");| list2[1].Value.ShouldBe(10);| _mapper.Map(list2, list3);| list3.Count.ShouldBe(2);| list3[0].TestProp.ShouldBe(\"New test value 1\");| list3[0].SecondValue.ShouldBe(50);| list3[1].TestProp.ShouldBe(\"New test value 2\");| list3[1].SecondValue.ShouldBe(100);| }"
      },
      {
        "name": "Map_Should_Set_Null_Existing_Object_Tests",
        "body": "{| MyClass1 obj1 = new MyClass1 { TestProp = null };| var obj2 = new MyClass2 { TestProp = \"before map\" };| _mapper.Map(obj1, obj2);| obj2.TestProp.ShouldBe(null);| }"
      },
      {
        "name": "Should_Map_Nullable_Value_To_Null_If_It_Is_Null_On_Source",
        "body": "{| var obj1 = new MyClass1();| var obj2 = _mapper.Map<MyClass2>(obj1);| obj2.NullableValue.ShouldBe(null);| }"
      },
      {
        "name": "Should_Map_Nullable_Value_To__Not_Null_If_It_Is__Not_Null_On_Source",
        "body": "{| var obj1 = new MyClass1 { NullableValue = 42 };| var obj2 = _mapper.Map<MyClass2>(obj1);| obj2.NullableValue.ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "StaticAutoMapper_Tests.cs",
    "methods": [
      {
        "name": "StaticAutoMapper_Test",
        "body": "{| AbpEmulateAutoMapper.Mapper.ShouldNotBeNull();| var a = new ClassA| {| Id = 1,| Name = \"test1\"| };| var b = a.MapTo<ClassB>();| b.Id.ShouldBe(1);| b.Name.ShouldBe(\"test1\");| var c = new ClassB| {| Id = 2,| Name = \"test2\"| };| a.MapTo(c);| c.Id.ShouldBe(1);| c.Name.ShouldBe(\"test1\");| }"
      }
    ]
  },
  {
    "file": "AzureBlobNameCalculator_Tests.cs",
    "methods": [
      {
        "name": "Default_Settings",
        "body": "{| _calculator.Calculate(| GetArgs(\"my-container\", \"my-blob\")| ).ShouldBe($\"host{AzureSeparator}my-blob\");| }"
      },
      {
        "name": "Default_Settings_With_TenantId",
        "body": "{| var tenantId = RandomHelper.GetRandom();| using (AbpSession.Use(tenantId, null))| {| _calculator.Calculate(| GetArgs(\"my-container\", \"my-blob\")| ).ShouldBe($\"tenants{AzureSeparator}{tenantId:D}{AzureSeparator}my-blob\");| }| }"
      }
    ]
  },
  {
    "file": "DefaultAzureBlobNamingNormalizerProvider_Tests.cs",
    "methods": [
      {
        "name": "NormalizeContainerName_Lowercase",
        "body": "{| var filename = \"ThisIsMyContainerName\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"thisismycontainername\");| }"
      },
      {
        "name": "NormalizeContainerName_Only_Letters_Numbers_Dash",
        "body": "{| var filename = \",./this-i,./s-my-c,./ont,./ai+*/.=!@#$n^&*er-name.+/\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"this-is-my-container-name\");| }"
      },
      {
        "name": "NormalizeContainerName_Dash",
        "body": "{| var filename = \"-this--is----my-container----name-\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"this-is-my-container-name\");| }"
      },
      {
        "name": "NormalizeContainerName_Min_Length",
        "body": "{| var filename = \"a\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.Length.ShouldBeGreaterThanOrEqualTo(3);| }"
      },
      {
        "name": "NormalizeContainerName_Max_Length",
        "body": "{| var filename = \"abpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabpabp\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.Length.ShouldBeLessThanOrEqualTo(63);| }"
      },
      {
        "name": "NormalizeContainerName_Max_Length_Dash",
        "body": "{| var filename = \"-this-is-my-container-name-abpabpabpabpabpabpabpabp-a-b-p-a--b-p-\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"this-is-my-container-name-abpabpabpabpabpabpabpabp-a-b-p-a-b\");| }"
      }
    ]
  },
  {
    "file": "BlogFilePathCalculator_Tests.cs",
    "methods": [
      {
        "name": "Default_Settings",
        "body": "{| var separator = Path.DirectorySeparatorChar;| _calculator.Calculate(| GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\")| ).ShouldBe($\"C:{separator}my-files{separator}host{separator}my-container{separator}my-blob\");| }"
      },
      {
        "name": "Default_Settings_With_TenantId",
        "body": "{| var separator = Path.DirectorySeparatorChar;| var tenantId = RandomHelper.GetRandom();| using (AbpSession.Use(tenantId, null))| {| _calculator.Calculate(| GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\")| ).ShouldBe($\"C:{separator}my-files{separator}tenants{separator}{tenantId:D}{separator}my-container{separator}my-blob\");| }| }"
      },
      {
        "name": "AppendContainerNameToBasePath_Set_To_False",
        "body": "{| var separator = Path.DirectorySeparatorChar;| _calculator.Calculate(| GetArgs($\"C:{separator}my-files\", \"my-container\", \"my-blob\", appendContainerNameToBasePath: false)| ).ShouldBe($\"C:{separator}my-files{separator}host{separator}my-blob\");| }"
      }
    ]
  },
  {
    "file": "DefaultFileSystemBlobNamingNormalizerProvider_Tests.cs",
    "methods": [
      {
        "name": "NormalizeContainerName",
        "body": "{| var filename = \"thisismy:*?\\\"<>|foldername\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"thisismyfoldername\");| }"
      },
      {
        "name": "NormalizeBlobName",
        "body": "{| var filename = \"thisismy:*?\\\"<>|filename\";| filename = _blobNamingNormalizer.NormalizeContainerName(filename);| filename.ShouldBe(\"thisismyfilename\");| }"
      }
    ]
  },
  {
    "file": "AbpBlobStoringOptions_Tests.cs",
    "methods": [
      {
        "name": "Should_Property_Set_And_Get_Options_For_Different_Containers",
        "body": "{| var testContainer1Config = _configurationProvider.Get<TestContainer1>();| testContainer1Config.ProviderType.ShouldBe(typeof(FakeBlobProvider1));| testContainer1Config.GetConfigurationOrDefault<string>(\"TestConfig1\").ShouldBe(\"TestValue1\");| testContainer1Config.GetConfigurationOrDefault<string>(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");| var testContainer2Config = _configurationProvider.Get<TestContainer2>();| testContainer2Config.ProviderType.ShouldBe(typeof(FakeBlobProvider2));| testContainer2Config.GetConfigurationOrNull(\"TestConfig2\").ShouldBe(\"TestValue2\");| testContainer2Config.GetConfigurationOrNull(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");| }"
      },
      {
        "name": "Should_Fallback_To_Default_Configuration_If_Not_Specialized",
        "body": "{| var config = _configurationProvider.Get<TestContainer3>();| config.ProviderType.ShouldBe(typeof(FakeBlobProvider1));| config.GetConfigurationOrNull(\"TestConfigDefault\").ShouldBe(\"TestValueDefault\");| }"
      }
    ]
  },
  {
    "file": "BlobContainerFactory_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // TestContainer1 with FakeBlobProvider1| await _fakeProviders.Provider1| .DidNotReceiveWithAnyArgs()| .ExistsAsync(default);| await _factory| .Create<TestContainer1>()| .ExistsAsync(\"TestBlob1\");| await _fakeProviders.Provider1| .Received(1)| .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(args =>| args.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer1>() &&| args.BlobName == \"TestBlob1\"| )| );| // TestContainer2 with FakeBlobProvider2| await _fakeProviders.Provider2| .DidNotReceiveWithAnyArgs()| .ExistsAsync(default);| await _factory| .Create<TestContainer2>()| .ExistsAsync(\"TestBlob2\");| await _fakeProviders.Provider2| .Received(1)| .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(args =>| args.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer2>() &&| args.BlobName == \"TestBlob2\"| )| );| // TestContainer3 with FakeBlobProvider1 (default provider)| _fakeProviders.Provider1.ClearReceivedCalls();| await _factory| .Create<TestContainer3>()| .ExistsAsync(\"TestBlob3\");| await _fakeProviders.Provider1| .Received(1)| .ExistsAsync(Arg.Is<BlobProviderExistsArgs>(t =>| t.ContainerName == BlobContainerNameAttribute.GetContainerName<TestContainer3>() &&| t.BlobName == \"TestBlob3\"| )| );| }"
      }
    ]
  },
  {
    "file": "BlobContainerNameAttribute_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Specified_Name",
        "body": "{| BlobContainerNameAttribute| .GetContainerName<TestContainer2>()| .ShouldBe(\"Test2\");| }"
      },
      {
        "name": "Should_Get_Full_Class_Name_If_Not_Specified",
        "body": "{| BlobContainerNameAttribute| .GetContainerName<TestContainer1>()| .ShouldBe(typeof(TestContainer1).FullName);| }"
      }
    ]
  },
  {
    "file": "BlobContainer_Injection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_DefaultContainer_For_Non_Generic_Interface",
        "body": "{| Resolve<IBlobContainer>()| .ShouldBeOfType<BlobContainer<DefaultContainer>>();| }"
      },
      {
        "name": "Should_Inject_Specified_Container_For_Generic_Interface",
        "body": "{| Resolve<IBlobContainer<DefaultContainer>>()| .ShouldBeOfType<BlobContainer<DefaultContainer>>();| Resolve<IBlobContainer<TestContainer1>>()| .ShouldBeOfType<BlobContainer<TestContainer1>>();| Resolve<IBlobContainer<TestContainer2>>()| .ShouldBeOfType<BlobContainer<TestContainer2>>();| Resolve<IBlobContainer<TestContainer3>>()| .ShouldBeOfType<BlobContainer<TestContainer3>>();| }"
      }
    ]
  },
  {
    "file": "BlobContainer_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var blobName = \"test-blob-1\";| var testContent = \"test content\".GetBytes();| using (AbpSession.Use(RandomHelper.GetRandom(), null))| {| await Container.SaveAsync(blobName, testContent);| (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();| }| using (AbpSession.Use(RandomHelper.GetRandom(), null))| {| await Container.SaveAsync(blobName, testContent);| (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();| using (AbpSession.Use(null, null))| {| // Could not found the requested BLOB...| await Assert.ThrowsAsync<AbpException>(async () =>| await Container.GetAllBytesAsync(blobName)| );| }| }| using (AbpSession.Use(null, null))| {| await Container.SaveAsync(blobName, testContent);| (await Container.GetAllBytesAsync(blobName)).SequenceEqual(testContent).ShouldBeTrue();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var blobName = \"test-blob-1\";| var testContent = \"test content\".GetBytes();| await Container.SaveAsync(blobName, testContent);| var testContentOverwritten = \"test content overwritten\".GetBytes();| await Container.SaveAsync(blobName, testContentOverwritten, true);| var result = await Container.GetAllBytesAsync(blobName);| result.SequenceEqual(testContentOverwritten).ShouldBeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var blobName = \"test-blob-1\";| var testContent = \"test content\".GetBytes();| await Container.SaveAsync(blobName, testContent);| var testContentOverwritten = \"test content overwritten\".GetBytes();| await Assert.ThrowsAsync<BlobAlreadyExistsException>(() =>| Container.SaveAsync(blobName, testContentOverwritten)| );| }"
      }
    ]
  },
  {
    "file": "BlobProviderSelector_Tests.cs",
    "methods": [
      {
        "name": "Should_Select_Default_Provider_If_Not_Configured",
        "body": "{| _selector.Get<TestContainer3>().ShouldBeAssignableTo<FakeBlobProvider1>();| }"
      },
      {
        "name": "Should_Select_Configured_Provider",
        "body": "{| _selector.Get<TestContainer1>().ShouldBeAssignableTo<FakeBlobProvider1>();| _selector.Get<TestContainer2>().ShouldBeAssignableTo<FakeBlobProvider2>();| }"
      }
    ]
  },
  {
    "file": "Castle_Log4Net_Tests.cs",
    "methods": [
      {
        "name": "Should_Write_Logs_To_Text_File",
        "body": "{| //Arrange| var logFilePath = Path.Combine(Directory.GetCurrentDirectory(), \"AbpCastleLog4NetTests-Logs.txt\");| FileHelper.DeleteIfExists(logFilePath); //Clean old file| //Act| var container = new WindsorContainer();| container.AddFacility<LoggingFacility>(facility =>| {| facility.UseAbpLog4Net().WithConfig(\"log4net.config\");| });| var logger = container.Resolve<ILoggerFactory>().Create(typeof(Castle_Log4Net_Tests));| logger.Info(\"Should_Write_Logs_To_Text_File works!\");| //Assert| File.Exists(logFilePath).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "DapperRepository_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())| {| //---Insert operation should work and tenant, creation audit properties must be set---------------------| await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));| Product insertedProduct = await _productDapperRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");| insertedProduct.ShouldNotBeNull();| insertedProduct.TenantId.ShouldBe(AbpSession.TenantId);| ((DateTime?) insertedProduct.CreationTime).ShouldNotBe(null);| insertedProduct.CreatorUserId.ShouldBe(AbpSession.UserId);| //----Update operation should work and Modification Audits should be set---------------------------| await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));| Product productToUpdate = await _productDapperRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");| productToUpdate.Name = \"Pants\";| await _productDapperRepository.UpdateAsync(productToUpdate);| productToUpdate.ShouldNotBeNull();| productToUpdate.TenantId.ShouldBe(AbpSession.TenantId);| ((DateTime?) productToUpdate.CreationTime).ShouldNotBe(null);| productToUpdate.LastModifierUserId.ShouldBe(AbpSession.UserId);| //---Get method should return single-------------------------------------------------------------------| await _productDapperRepository.InsertAsync(new Product(\"TShirt\"));| Action getAction = () => _productDapperRepository.Single(x => x.Name == \"TShirt\");| getAction.ShouldThrow<InvalidOperationException>(\"Sequence contains more than one element\");| //----Select * from syntax should work---------------------------------| var queryResult = await _productDapperRepository.QueryAsync(\"select * from Products\");| IEnumerable<Product> products = queryResult;| products.Count().ShouldBeGreaterThan(0);| //------------Ef and Dapper should work under same transaction---------------------| Product productFromEf = await _productRepository.FirstOrDefaultAsync(x => x.Name == \"TShirt\");| Product productFromDapper = await _productDapperRepository.SingleAsync(productFromEf.Id);| productFromDapper.Name.ShouldBe(productFromEf.Name);| productFromDapper.TenantId.ShouldBe(productFromEf.TenantId);| //------Soft Delete should work for Dapper--------------| await _productDapperRepository.InsertAsync(new Product(\"SoftDeletableProduct\"));| Product toSoftDeleteProduct = await _productDapperRepository| .SingleAsync(x => x.Name == \"SoftDeletableProduct\");| await _productDapperRepository.DeleteAsync(toSoftDeleteProduct);| toSoftDeleteProduct.IsDeleted.ShouldBe(true);| toSoftDeleteProduct.DeleterUserId.ShouldBe(AbpSession.UserId);| toSoftDeleteProduct.TenantId.ShouldBe(AbpSession.TenantId);| Product softDeletedProduct = await _productRepository| .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");| softDeletedProduct.ShouldBeNull();| Product softDeletedProductFromDapper = await _productDapperRepository| .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");| softDeletedProductFromDapper.ShouldBeNull();| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))| {| Product softDeletedProductWhenFilterDisabled = await _productRepository| .FirstOrDefaultAsync(x => x.Name == \"SoftDeletableProduct\");| softDeletedProductWhenFilterDisabled.ShouldNotBeNull();| Product softDeletedProductFromDapperWhenFilterDisabled = await _productDapperRepository| .SingleAsync(x => x.Name == \"SoftDeletableProduct\");| softDeletedProductFromDapperWhenFilterDisabled.ShouldNotBeNull();| }| using (AbpSession.Use(2, 266))| {| int productWithTenant2Id = await _productDapperRepository| .InsertAndGetIdAsync(new Product(\"ProductWithTenant2\"));| var productWithTenant2 = await _productRepository.GetAsync(productWithTenant2Id);| productWithTenant2.TenantId| .ShouldBe(1); // Not sure about that?,Because we changed TenantId to 2 in this scope !!! Abp-TenantId = 2 now NOT 1 !!!| }| using (_unitOfWorkManager.Current.SetTenantId(3))| {| int productWithTenant3Id = await _productDapperRepository| .InsertAndGetIdAsync(new Product(\"ProductWithTenant3\"));| Product productWithTenant3 = await _productRepository.GetAsync(productWithTenant3Id);| productWithTenant3.TenantId.ShouldBe(3);| }| Product productWithTenantId3FromDapper = await _productDapperRepository| .FirstOrDefaultAsync(x => x.Name == \"ProductWithTenant3\");| productWithTenantId3FromDapper.ShouldBeNull();| Product p = await _productDapperRepository.FirstOrDefaultAsync(x => x.Status == Status.Active);| p.ShouldNotBeNull();| using (_unitOfWorkManager.Current.SetTenantId(3))| {| Product productWithTenantId3FromDapperInsideTenantScope = await _productDapperRepository| .FirstOrDefaultAsync(x => x.Name == \"ProductWithTenant3\");| productWithTenantId3FromDapperInsideTenantScope.ShouldNotBeNull();| }| //About issue-#2091| using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))| {| int productWithTenantId40 = await _productDapperRepository| .InsertAndGetIdAsync(new Product(\"ProductWithTenantId40\"));| Product productWithTenant40 = await _productRepository.GetAsync(productWithTenantId40);| productWithTenant40.TenantId.ShouldBe(AbpSession.TenantId);| productWithTenant40.CreatorUserId.ShouldBe(AbpSession.UserId);| }| //Second DbContext tests| var productDetailId = await _productDetailRepository| .InsertAndGetIdAsync(new ProductDetail(\"Woman\"));| (await _productDetailDapperRepository.GetAsync(productDetailId)).ShouldNotBeNull();| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Should_Insert_Only_Have_IMustHaveTenant",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))| {| int personWithTenantId40 =| _personDapperRepository.InsertAndGetId(new Person(\"PersonWithTenantId40\"));| Person personWithTenant40 = _personRepository.Get(personWithTenantId40);| personWithTenant40.TenantId.ShouldBe(AbpSession.TenantId.Value);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(AbpSession.TenantId))| {| await _goodDapperRepository.InsertAsync(new Good {Name = \"AbpTest\"});| await _unitOfWorkManager.Current.SaveChangesAsync();| int? id = 1;| var dapperCount = await _goodDapperRepository.CountAsync(a => a.Id != id && a.Name == \"AbpTest\");| dapperCount.ShouldBe(0);| }| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "DomainEvents_Tests.cs",
    "methods": [
      {
        "name": "Should_Trigger_Domain_Events_For_Aggregate_Root",
        "body": "{| //Arrange| var isTriggered = false;| _eventBus.Register<BlogUrlChangedEventData>(data =>| {| data.OldUrl.ShouldBe(\"http://testblog1.myblogs.com\");| isTriggered = true;| });| //Act| Blog blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");| blog1.ChangeUrl(\"http://testblog1-changed.myblogs.com\");| _blogRepository.Update(blog1);| //Assert| _blogDapperRepository.Get(blog1.Id).ShouldNotBeNull();| isTriggered.ShouldBeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var triggerCount = 0;| Resolve<IEventBus>().Register<EntityCreatedEventData<Blog>>(| eventData =>| {| eventData.Entity.Name.ShouldBe(\"OnSoftware\");| eventData.Entity.IsTransient().ShouldBe(false);| triggerCount++;| });| await _blogDapperRepository.InsertAsync(new Blog(\"OnSoftware\", \"www.aspnetboilerplate.com\"));| triggerCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "Repository_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Initial_Blogs",
        "body": "{| //Act| List<Blog> blogs = _blogRepository.GetAllList();| IEnumerable<Blog> blogsFromDapper = _blogDapperRepository.GetAll();| //Assert| blogs.Count.ShouldBeGreaterThan(0);| blogsFromDapper.Count().ShouldBeGreaterThan(0);| }"
      },
      {
        "name": "Task",
        "body": "{| int blog1Id;| int blog2Id;| //Act| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.SingleAsync(b => b.Name == \"test-blog-1\");| blog1Id = blog1.Id;| blog1.Name = \"test-blog-1-updated\";| await _blogDapperRepository.InsertAsync(new Blog(\"test-blog-2\", \"www\"));| Blog blog2 = await _blogRepository.SingleAsync(x => x.Name == \"test-blog-2\");| blog2Id = blog2.Id;| blog2.Name = \"test-blog-2-updated\";| await _blogDapperRepository.UpdateAsync(blog2);| await uow.CompleteAsync();| }| //Assert| await UsingDbContextAsync(async context =>| {| Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);| blog1.Name.ShouldBe(\"test-blog-1-updated\");| Blog blog2 = await context.Blogs.SingleAsync(b => b.Id == blog2Id);| blog2.Name.ShouldBe(\"test-blog-2-updated\");| });| }"
      },
      {
        "name": "Task",
        "body": "{| int blog1Id;| //Act| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogDapperRepository.SingleAsync(b => b.Name == \"test-blog-1\");| blog1Id = blog1.Id;| blog1.Name = \"test-blog-1-updated\";| await _blogDapperRepository.UpdateAsync(blog1);| await uow.CompleteAsync();| }| //Assert| await UsingDbContextAsync(async context =>| {| Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);| blog1.Name.ShouldBe(\"test-blog-1-updated\");| });| }"
      },
      {
        "name": "Task",
        "body": "{| //EF Core does not support lazy loading yet, so navigation properties will not be loaded if not included| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Post post = await _postRepository.GetAll().FirstAsync();| post.Blog.ShouldBeNull();| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Post post = await _postRepository.GetAllIncluding(p => p.Blog).FirstAsync();| post.Blog.ShouldNotBeNull();| post.Blog.Name.ShouldBe(\"test-blog-1\");| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| var blog = new Blog(\"blog2\", \"http://myblog2.com\");| blog.IsTransient().ShouldBeTrue();| await _blogRepository.InsertAsync(blog);| await uow.CompleteAsync();| blog.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| var blog = new Blog(\"blog2\", \"http://myblog2.com\");| blog.IsTransient().ShouldBeTrue();| await _blogDapperRepository.InsertAsync(blog);| await uow.CompleteAsync();| blog.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.GetAsync(1);| var post = new Post(blog1, \"a test title\", \"a test body\");| post.IsTransient().ShouldBeTrue();| await _postRepository.InsertAsync(post);| await uow.CompleteAsync();| post.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.GetAsync(1);| var post = new Post(blog1.Id, \"a test title\", \"a test body\");| post.IsTransient().ShouldBeTrue();| await _postDapperRepository.InsertAsync(post);| await uow.CompleteAsync();| post.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())| {| int blogId = _blogDapperRepository.InsertAndGetId(new Blog(\"Oguzhan_Same_Uow\", \"www\"));| Blog blog = _blogRepository.Get(blogId);| blog.ShouldNotBeNull();| uow.Complete();| }| }"
      },
      {
        "name": "querying_with_TEntity_TPrimaryKey_should_work_on_dapper_repositories",
        "body": "{| _commentRepository.Insert(new Comment(\"hey!\"));| List<Comment> comments = _commentDapperRepository.Query(\"select * from Comments\").ToList();| List<Comment> comments2 = _commentDapperRepository.Query<Comment>(\"select * from Comments\").ToList();| comments2.Count.ShouldBe(1);| comments.Count.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "Transaction_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| const string exceptionMessage = \"This is a test exception!\";| string blogName = Guid.NewGuid().ToString(\"N\");| try| {| using (_uowManager.Begin())| {| await _blogRepository.InsertAsync(| new Blog(blogName, $\"http://{blogName}.com/\")| );| throw new Exception(exceptionMessage);| }| }| catch (Exception ex) when (ex.Message == exceptionMessage)| {| }| var blog = await _blogRepository.FirstOrDefaultAsync(x => x.Name == blogName);| blog.ShouldBeNull();| }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork_and_when_any_exception_appears_then_rollback_should_be_consistent_for_two_orm",
        "body": "{| Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(| eventData =>| {| eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");| throw new Exception(\"Uow Rollback\");| });| try| {| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())| {| var blogId = _blogDapperRepository.InsertAndGetId(| new Blog(\"Oguzhan_Same_Uow\", \"www.oguzhansoykan.com\")| );| Blog person = _blogRepository.Get(blogId);| person.ShouldNotBeNull();| uow.Complete();| }| }| catch (Exception)| {| //no handling.| }| _blogDapperRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();| _blogRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(eventData =>| {| eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");| });| var blogId = 0;| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| blogId = await _blogDapperRepository.InsertAndGetIdAsync(| new Blog(\"Oguzhan_Same_Uow\", \"www.aspnetboilerplate.com\")| );| var person = await _blogRepository.GetAsync(blogId);| person.ShouldNotBeNull();| await uow.CompleteAsync();| }| try| {| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>()| .Begin(new UnitOfWorkOptions { IsTransactional = true }))| {| await _blogDapperRepository.ExecuteAsync(| \"Update Blogs Set Name = @name where Id =@id\",| new| {| id = blogId,| name = \"Oguzhan_New_Blog\"| }| );| throw new Exception(\"uow rollback\");| // Unreachable code.| // await uow.CompleteAsync();| }| }| catch (Exception)| {| //no handling.| }| (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();| (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();| (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();| (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();| }"
      }
    ]
  },
  {
    "file": "DateTimeKind_Normalization_Tests.cs",
    "methods": [
      {
        "name": "DateTime_Kind_Should_Be_Normalized_To_UTC_Test",
        "body": "{| // Clock.Provider is set to 'ClockProviders.Utc' | // in the constructor of EntityFrameworkCoreModuleTestBase| Clock.Kind.ShouldBe(DateTimeKind.Utc);| //Act| var blogs = _blogRepository.GetAllList();| //Assert| blogs.Count.ShouldBeGreaterThan(0);| foreach (var blog in blogs)| {| blog.CreationTime.Kind.ShouldBe(DateTimeKind.Utc);| blog.DeletionTime.ShouldNotBe(null);| blog.DeletionTime.Value.Kind.ShouldBe(DateTimeKind.Utc);| blog.DeletionTime.Value.ToString(\"yyy-MM-dd HH:mm:ss\").ShouldBe(\"2019-01-01 00:00:00\");| blog.BlogTime.LastAccessTime.Kind.ShouldBe(DateTimeKind.Utc);| blog.BlogTime.LatestPosTime.Kind.ShouldNotBe(DateTimeKind.Utc);| }| }"
      },
      {
        "name": "DateTime_Kind_Should_Not_Be_Normalized_Test",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| var category = _blogCategoryRepository.GetAllList().FirstOrDefault();| _blogCategoryRepository.EnsureCollectionLoaded(category, c => c.SubCategories);| //Assert| category.ShouldNotBeNull();| category.CreationTime.Kind.ShouldBe(DateTimeKind.Unspecified);| foreach (var subCategory in category.SubCategories)| {| subCategory.CreationTime.Kind.ShouldBe(DateTimeKind.Unspecified);| }| uow.Complete();| }| }"
      }
    ]
  },
  {
    "file": "DbQuery_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var blogViewRepository = Resolve<IRepository<BlogView>>();| var blogViews = await blogViewRepository.GetAllListAsync();| blogViews.ShouldNotBeNull();| blogViews.ShouldContain(x => x.Name == \"test-blog-1\" && x.Url == \"http://testblog1.myblogs.com\");| }"
      }
    ]
  },
  {
    "file": "DomainEvents_Tests.cs",
    "methods": [
      {
        "name": "Should_Trigger_Domain_Events_For_Aggregate_Root",
        "body": "{| //Arrange| var isTriggered = false;| _eventBus.Register<BlogUrlChangedEventData>(data =>| {| data.OldUrl.ShouldBe(\"http://testblog1.myblogs.com\");| isTriggered = true;| });| //Act| Blog blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");| blog1.ChangeUrl(\"http://testblog1-changed.myblogs.com\");| _blogRepository.Update(blog1);| //Assert| _blogDapperRepository.Get(blog1.Id).ShouldNotBeNull();| isTriggered.ShouldBeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var triggerCount = 0;| Resolve<IEventBus>().Register<EntityCreatedEventData<Blog>>(| eventData =>| {| eventData.Entity.Name.ShouldBe(\"OnSoftware\");| eventData.Entity.IsTransient().ShouldBe(false);| triggerCount++;| });| await _blogDapperRepository.InsertAsync(new Blog(\"OnSoftware\", \"www.aspnetboilerplate.com\"));| triggerCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "EntityChangeEvents_Tests.cs",
    "methods": [
      {
        "name": "Complex_Event_Test",
        "body": "{| var blogName = Guid.NewGuid().ToString(\"N\");| var creatingEventTriggered = false;| var createdEventTriggered = false;| var updatingEventTriggered = false;| var updatedEventTriggered = false;| var blogUrlChangedEventTriggered = false;| _eventBus.Register<EntityCreatingEventData<Blog>>(data =>| {| creatingEventTriggered.ShouldBeFalse();| createdEventTriggered.ShouldBeFalse();| updatingEventTriggered.ShouldBeFalse();| updatedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered.ShouldBeFalse();| creatingEventTriggered = true;| ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);| data.Entity.Name.ShouldBe(blogName);| /* Want to change url from http:// to https:// (ensure to save https url always)| * Expect to trigger EntityUpdatingEventData, EntityUpdatedEventData and BlogUrlChangedEventData events */| data.Entity.Url.ShouldStartWith(\"http://\");| data.Entity.ChangeUrl(data.Entity.Url.Replace(\"http://\", \"https://\"));| });| _eventBus.Register<EntityCreatedEventData<Blog>>(data =>| {| creatingEventTriggered.ShouldBeTrue();| createdEventTriggered.ShouldBeFalse();| updatingEventTriggered.ShouldBeTrue();| updatedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered.ShouldBeTrue();| createdEventTriggered = true;| ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);| data.Entity.Name.ShouldBe(blogName);| });| _eventBus.Register<EntityUpdatingEventData<Blog>>(data =>| {| creatingEventTriggered.ShouldBeTrue();| createdEventTriggered.ShouldBeFalse();| updatingEventTriggered.ShouldBeFalse();| updatedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered.ShouldBeFalse();| updatingEventTriggered = true;| ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);| data.Entity.Name.ShouldBe(blogName);| data.Entity.Url.ShouldStartWith(\"https://\");| });| _eventBus.Register<EntityUpdatedEventData<Blog>>(data =>| {| creatingEventTriggered.ShouldBeTrue();| createdEventTriggered.ShouldBeTrue();| updatingEventTriggered.ShouldBeTrue();| updatedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered.ShouldBeTrue();| updatedEventTriggered = true;| ((bool?)data.Entity.IsTransient()).ShouldNotBe(null);| data.Entity.Name.ShouldBe(blogName);| data.Entity.Url.ShouldStartWith(\"https://\");| });| _eventBus.Register<BlogUrlChangedEventData>(data =>| {| creatingEventTriggered.ShouldBeTrue();| createdEventTriggered.ShouldBeFalse();| updatingEventTriggered.ShouldBeTrue();| updatedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered.ShouldBeFalse();| blogUrlChangedEventTriggered = true;| ((bool?)data.Blog.IsTransient()).ShouldNotBe(null);| data.Blog.Name.ShouldBe(blogName);| data.Blog.Url.ShouldStartWith(\"https://\");| });| _blogRepository.Insert(new Blog(blogName, \"http://aspnetboilerplate.com\"));| }"
      }
    ]
  },
  {
    "file": "ExplicitLoading_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var uowManager = Resolve<IUnitOfWorkManager>();| using (var uow = uowManager.Begin())| {| var blog = await _blogRepository.FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");| blog.ShouldNotBeNull();| blog.Posts.ShouldBeNull(); //Because EF core does not have lazy loading yet!| await _blogRepository.EnsureCollectionLoadedAsync(blog, b => b.Posts);| blog.Posts.ShouldNotBeNull(); //Now loaded it!| blog.Posts.Count.ShouldBeGreaterThan(0);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var post = await _postRepository.FirstOrDefaultAsync(b => b.Title == \"test-post-1-title\");| post.ShouldNotBeNull();| post.Blog.ShouldBeNull(); //Because EF core does not have lazy loading yet!| await _postRepository.EnsurePropertyLoadedAsync(post, p => p.Blog);| post.Blog.ShouldNotBeNull(); //Now loaded it!| post.Blog.Name.ShouldBe(\"test-blog-1\");| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "QueryableExtensions_Tests.cs",
    "methods": [
      {
        "name": "Ef_Core_IncludeIf_Extension_With_Query_Test",
        "body": "{| UsingDbContext(context =>| {| var blog = context.Blogs.Where(b => b.Name == \"test-blog-1\")| .IncludeIf(true, e => e.Include(b => b.Posts).ThenInclude(p => p.Comments))| .FirstOrDefault();| blog.ShouldNotBeNull();| blog.Name.ShouldBe(\"test-blog-1\");| var post = blog.Posts.FirstOrDefault(p => p.Title == \"test-post-1-title\");| post.ShouldNotBeNull();| post.Comments.Count.ShouldBe(1);| });| }"
      },
      {
        "name": "Ef_Core_IncludeIf_Extension_With_Path_Test",
        "body": "{| UsingDbContext(context =>| {| var blog = context.Blogs.Where(b => b.Name == \"test-blog-1\")| .IncludeIf(true, \"Posts\")| .IncludeIf(true, \"Posts.Comments\")| .FirstOrDefault();| blog.ShouldNotBeNull();| blog.Name.ShouldBe(\"test-blog-1\");| var post = blog.Posts.FirstOrDefault(p => p.Title == \"test-post-1-title\");| post.ShouldNotBeNull();| post.Comments.Count.ShouldBe(1);| });| }"
      }
    ]
  },
  {
    "file": "Repository_Extension_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using var uow = _uowManager.Begin();| var blog1 = new Blog(\"blog1\", \"http://myblog1.com\");| var blog2 = new Blog(\"blog2\", \"http://myblog2.com\");| var blog3 = new Blog(\"blog3\", \"http://myblog3.com\");| var blog4 = new Blog(\"blog4\", \"http://myblog4.com\");| blog1.IsTransient().ShouldBeTrue();| blog2.IsTransient().ShouldBeTrue();| blog3.IsTransient().ShouldBeTrue();| blog4.IsTransient().ShouldBeTrue();| _blogRepository.InsertRange(blog1, blog2);| _blogRepository.InsertRange(new List<Blog> { blog3, blog4 });| await uow.CompleteAsync();| blog1.IsTransient().ShouldBeFalse();| blog2.IsTransient().ShouldBeFalse();| blog3.IsTransient().ShouldBeFalse();| blog4.IsTransient().ShouldBeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| using var uow = _uowManager.Begin();| var blog1 = new Blog(\"blog1\", \"http://myblog1.com\");| var blog2 = new Blog(\"blog2\", \"http://myblog2.com\");| var blog3 = new Blog(\"blog3\", \"http://myblog3.com\");| var blog4 = new Blog(\"blog4\", \"http://myblog4.com\");| blog1.IsTransient().ShouldBeTrue();| blog2.IsTransient().ShouldBeTrue();| blog3.IsTransient().ShouldBeTrue();| blog4.IsTransient().ShouldBeTrue();| await _blogRepository.InsertRangeAsync(blog1, blog2);| await _blogRepository.InsertRangeAsync(new List<Blog> { blog3, blog4 });| await uow.CompleteAsync();| blog1.IsTransient().ShouldBeFalse();| blog2.IsTransient().ShouldBeFalse();| blog3.IsTransient().ShouldBeFalse();| blog4.IsTransient().ShouldBeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var count = await _blogRepository.CountAsync();| var blogs = new List<Blog>| {| new(\"blog1\", \"http://myblog1.com\"),| new(\"blog2\", \"http://myblog2.com\"),| new(\"blog3\", \"http://myblog3.com\"),| new(\"blog4\", \"http://myblog4.com\")| };| using (var uow = _uowManager.Begin())| {| await _blogRepository.InsertRangeAsync(blogs);| await uow.CompleteAsync();| var afterCount = await _blogRepository.CountAsync();| afterCount.ShouldBe(count + 4);| }| using (var uow = _uowManager.Begin())| {| _blogRepository.RemoveRange(blogs[0], blogs[1]);| _blogRepository.RemoveRange(new List<Blog> { blogs[2], blogs[3] });| await uow.CompleteAsync();| var afterCount = await _blogRepository.CountAsync();| afterCount.ShouldBe(count);| }| }"
      }
    ]
  },
  {
    "file": "Repository_Filtering_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var posts = await _postRepository.GetAllListAsync();| posts.All(p => !p.IsDeleted).ShouldBeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))| {| var posts = await _postRepository.GetAllListAsync();| posts.Any(p => p.IsDeleted).ShouldBeTrue();| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| var postsDefault = await _postRepository.GetAllListAsync();| postsDefault.Any(p => p.TenantId == null).ShouldBeTrue();| //Switch to tenant 42| AbpSession.TenantId = 42;| var posts1 = await _postRepository.GetAllListAsync();| posts1.All(p => p.TenantId == 42).ShouldBeTrue();| //Switch to host| AbpSession.TenantId = null;| var posts2 = await _postRepository.GetAllListAsync();| posts2.Any(p => p.TenantId == 42).ShouldBeFalse();| using (var uow = _unitOfWorkManager.Begin())| {| //Switch to tenant 42| using (_unitOfWorkManager.Current.SetTenantId(42))| {| var posts3 = await _postRepository.GetAllListAsync(p => p.Title != null);| posts3.All(p => p.TenantId == 42).ShouldBeTrue();| }| var posts4 = await _postRepository.GetAllListAsync();| posts4.Any(p => p.TenantId == 42).ShouldBeFalse();| posts4.Any(p => p.TenantId == null).ShouldBeTrue();| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))| {| var posts5 = await _postRepository.GetAllListAsync();| posts5.Any(p => p.TenantId == 42).ShouldBeTrue();| posts5.Any(p => p.TenantId == null).ShouldBeTrue();| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| //Should get all entities for the host| var ticketsDefault = await _ticketRepository.GetAllListAsync();| ticketsDefault.Any(t => t.TenantId == 1).ShouldBeTrue();| ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();| //Switch to tenant 42| AbpSession.TenantId = 42;| ticketsDefault = await _ticketRepository.GetAllListAsync();| ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();| ticketsDefault.Any(t => t.TenantId != 42).ShouldBeFalse();| //TODO: Create unit test| //TODO: Change filter| }"
      },
      {
        "name": "Task",
        "body": "{| //Should get all entities for the host| var ticketsDefault = await _ticketListItemRepository.GetAllListAsync();| ticketsDefault.Any(t => t.TenantId == 1).ShouldBeTrue();| ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();| //Switch to tenant 42| AbpSession.TenantId = 42;| ticketsDefault = await _ticketListItemRepository.GetAllListAsync();| ticketsDefault.Any(t => t.TenantId == 42).ShouldBeTrue();| ticketsDefault.Any(t => t.TenantId != 42).ShouldBeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| await WithUnitOfWorkAsync(async () =>| {| var blog = await _blogRepository.GetAll().Include(x => x.Posts).FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");| blog.Posts.ShouldNotBeEmpty();| blog.Posts.Clear();| await _blogRepository.UpdateAsync(blog);| });| await WithUnitOfWorkAsync(async () =>| {| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.SoftDelete))| {| var blog = await _blogRepository.GetAll().Include(x => x.Posts).FirstOrDefaultAsync(b => b.Name == \"test-blog-1\");| blog.Posts.ShouldNotBeEmpty();| blog.Posts.ShouldAllBe(x => x.IsDeleted);| }| });| }"
      }
    ]
  },
  {
    "file": "Repository_Resolve_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Custom_Repository_If_Registered",
        "body": "{| var postRepository = Resolve<IRepository<Post, Guid>>();| postRepository.GetAllList().Any().ShouldBeTrue();| Assert.Throws<Exception>(| () => postRepository.Count()| ).Message.ShouldBe(\"can not get count of posts\");| //Should also resolve by custom interface and implementation| Resolve<IPostRepository>();| Resolve<PostRepository>();| }"
      },
      {
        "name": "Should_Resolve_Default_Repositories_For_Second_DbContext",
        "body": "{| var repo1 = Resolve<IRepository<Ticket>>();| var repo2 = Resolve<IRepository<Ticket, int>>();| Assert.Throws<Exception>(| () => repo1.Count()| ).Message.ShouldBe(\"can not get count!\");| Assert.Throws<Exception>(| () => repo2.Count()| ).Message.ShouldBe(\"can not get count!\");| }"
      },
      {
        "name": "Should_Resolve_Custom_Repositories_For_Second_DbContext",
        "body": "{| var repo1 = Resolve<ISupportRepository<Ticket>>();| var repo2 = Resolve<ISupportRepository<Ticket, int>>();| typeof(ISupportRepository<Ticket>).GetTypeInfo().IsInstanceOfType(repo1).ShouldBeTrue();| typeof(ISupportRepository<Ticket, int>).GetTypeInfo().IsInstanceOfType(repo1).ShouldBeTrue();| typeof(ISupportRepository<Ticket, int>).GetTypeInfo().IsInstanceOfType(repo2).ShouldBeTrue();| Assert.Throws<Exception>(| () => repo1.Count()| ).Message.ShouldBe(\"can not get count!\");| Assert.Throws<Exception>(| () => repo2.Count()| ).Message.ShouldBe(\"can not get count!\");| var activeTickets = repo1.GetActiveList();| activeTickets.Count.ShouldBeGreaterThan(0);| activeTickets.All(t => t.IsActive).ShouldBeTrue();| activeTickets = repo2.GetActiveList();| activeTickets.Count.ShouldBeGreaterThan(0);| activeTickets.All(t => t.IsActive).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Get_DbContext",
        "body": "{| Resolve<IPostRepository>().GetDbContext().ShouldBeOfType<BloggingDbContext>();| }"
      },
      {
        "name": "Should_Get_DbContext_2",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| Resolve<IRepository<Blog>>().GetDbContext().ShouldBeOfType<BloggingDbContext>();| uow.Complete();| }| }"
      },
      {
        "name": "Should_Get_DbContext_From_Second_DbContext",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| Resolve<IRepository<Ticket>>().GetDbContext().ShouldBeOfType<SupportDbContext>();| uow.Complete();| }| }"
      },
      {
        "name": "Should_Get_DbContext_From_Second_DbContext_With_Custom_Repository",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| Resolve<ISupportRepository<Ticket>>().GetDbContext().ShouldBeOfType<SupportDbContext>();| uow.Complete();| }| }"
      }
    ]
  },
  {
    "file": "Repository_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Initial_Blogs",
        "body": "{| //Act| List<Blog> blogs = _blogRepository.GetAllList();| IEnumerable<Blog> blogsFromDapper = _blogDapperRepository.GetAll();| //Assert| blogs.Count.ShouldBeGreaterThan(0);| blogsFromDapper.Count().ShouldBeGreaterThan(0);| }"
      },
      {
        "name": "Task",
        "body": "{| int blog1Id;| int blog2Id;| //Act| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.SingleAsync(b => b.Name == \"test-blog-1\");| blog1Id = blog1.Id;| blog1.Name = \"test-blog-1-updated\";| await _blogDapperRepository.InsertAsync(new Blog(\"test-blog-2\", \"www\"));| Blog blog2 = await _blogRepository.SingleAsync(x => x.Name == \"test-blog-2\");| blog2Id = blog2.Id;| blog2.Name = \"test-blog-2-updated\";| await _blogDapperRepository.UpdateAsync(blog2);| await uow.CompleteAsync();| }| //Assert| await UsingDbContextAsync(async context =>| {| Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);| blog1.Name.ShouldBe(\"test-blog-1-updated\");| Blog blog2 = await context.Blogs.SingleAsync(b => b.Id == blog2Id);| blog2.Name.ShouldBe(\"test-blog-2-updated\");| });| }"
      },
      {
        "name": "Task",
        "body": "{| int blog1Id;| //Act| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogDapperRepository.SingleAsync(b => b.Name == \"test-blog-1\");| blog1Id = blog1.Id;| blog1.Name = \"test-blog-1-updated\";| await _blogDapperRepository.UpdateAsync(blog1);| await uow.CompleteAsync();| }| //Assert| await UsingDbContextAsync(async context =>| {| Blog blog1 = await context.Blogs.SingleAsync(b => b.Id == blog1Id);| blog1.Name.ShouldBe(\"test-blog-1-updated\");| });| }"
      },
      {
        "name": "Task",
        "body": "{| //EF Core does not support lazy loading yet, so navigation properties will not be loaded if not included| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Post post = await _postRepository.GetAll().FirstAsync();| post.Blog.ShouldBeNull();| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Post post = await _postRepository.GetAllIncluding(p => p.Blog).FirstAsync();| post.Blog.ShouldNotBeNull();| post.Blog.Name.ShouldBe(\"test-blog-1\");| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| var blog = new Blog(\"blog2\", \"http://myblog2.com\");| blog.IsTransient().ShouldBeTrue();| await _blogRepository.InsertAsync(blog);| await uow.CompleteAsync();| blog.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| var blog = new Blog(\"blog2\", \"http://myblog2.com\");| blog.IsTransient().ShouldBeTrue();| await _blogDapperRepository.InsertAsync(blog);| await uow.CompleteAsync();| blog.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.GetAsync(1);| var post = new Post(blog1, \"a test title\", \"a test body\");| post.IsTransient().ShouldBeTrue();| await _postRepository.InsertAsync(post);| await uow.CompleteAsync();| post.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = _uowManager.Begin())| {| Blog blog1 = await _blogRepository.GetAsync(1);| var post = new Post(blog1.Id, \"a test title\", \"a test body\");| post.IsTransient().ShouldBeTrue();| await _postDapperRepository.InsertAsync(post);| await uow.CompleteAsync();| post.IsTransient().ShouldBeFalse();| }| }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork",
        "body": "{| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())| {| int blogId = _blogDapperRepository.InsertAndGetId(new Blog(\"Oguzhan_Same_Uow\", \"www\"));| Blog blog = _blogRepository.Get(blogId);| blog.ShouldNotBeNull();| uow.Complete();| }| }"
      },
      {
        "name": "querying_with_TEntity_TPrimaryKey_should_work_on_dapper_repositories",
        "body": "{| _commentRepository.Insert(new Comment(\"hey!\"));| List<Comment> comments = _commentDapperRepository.Query(\"select * from Comments\").ToList();| List<Comment> comments2 = _commentDapperRepository.Query<Comment>(\"select * from Comments\").ToList();| comments2.Count.ShouldBe(1);| comments.Count.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "Transaction_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| const string exceptionMessage = \"This is a test exception!\";| string blogName = Guid.NewGuid().ToString(\"N\");| try| {| using (_uowManager.Begin())| {| await _blogRepository.InsertAsync(| new Blog(blogName, $\"http://{blogName}.com/\")| );| throw new Exception(exceptionMessage);| }| }| catch (Exception ex) when (ex.Message == exceptionMessage)| {| }| var blog = await _blogRepository.FirstOrDefaultAsync(x => x.Name == blogName);| blog.ShouldBeNull();| }"
      },
      {
        "name": "Dapper_and_EfCore_should_work_under_same_unitofwork_and_when_any_exception_appears_then_rollback_should_be_consistent_for_two_orm",
        "body": "{| Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(| eventData =>| {| eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");| throw new Exception(\"Uow Rollback\");| });| try| {| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>().Begin())| {| var blogId = _blogDapperRepository.InsertAndGetId(| new Blog(\"Oguzhan_Same_Uow\", \"www.oguzhansoykan.com\")| );| Blog person = _blogRepository.Get(blogId);| person.ShouldNotBeNull();| uow.Complete();| }| }| catch (Exception)| {| //no handling.| }| _blogDapperRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();| _blogRepository.FirstOrDefault(x => x.Name == \"Oguzhan_Same_Uow\").ShouldBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IEventBus>().Register<EntityCreatingEventData<Blog>>(eventData =>| {| eventData.Entity.Name.ShouldBe(\"Oguzhan_Same_Uow\");| });| var blogId = 0;| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| blogId = await _blogDapperRepository.InsertAndGetIdAsync(| new Blog(\"Oguzhan_Same_Uow\", \"www.aspnetboilerplate.com\")| );| var person = await _blogRepository.GetAsync(blogId);| person.ShouldNotBeNull();| await uow.CompleteAsync();| }| try| {| using (IUnitOfWorkCompleteHandle uow = Resolve<IUnitOfWorkManager>()| .Begin(new UnitOfWorkOptions { IsTransactional = true }))| {| await _blogDapperRepository.ExecuteAsync(| \"Update Blogs Set Name = @name where Id =@id\",| new| {| id = blogId,| name = \"Oguzhan_New_Blog\"| }| );| throw new Exception(\"uow rollback\");| // Unreachable code.| // await uow.CompleteAsync();| }| }| catch (Exception)| {| //no handling.| }| (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();| (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_New_Blog\")).ShouldBeNull();| (await _blogDapperRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();| (await _blogRepository.FirstOrDefaultAsync(x => x.Name == \"Oguzhan_Same_Uow\")).ShouldNotBeNull();| }"
      }
    ]
  },
  {
    "file": "MemoryRepository_Simple_Tests.cs",
    "methods": [
      {
        "name": "Count_Test",
        "body": "{| _repository.Count().ShouldBe(2);| }"
      },
      {
        "name": "Delete_Test",
        "body": "{| var test1 = _repository.FirstOrDefault(e => e.Name == \"test-1\");| test1.ShouldNotBe(null);| _repository.Delete(test1);| | test1 = _repository.FirstOrDefault(e => e.Name == \"test-1\");| test1.ShouldBe(null);| }"
      }
    ]
  },
  {
    "file": "QuartzTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // There should be only one test case in this project, or the unit test may fail in AppVeyor| await ScheduleJobs();| var helloDependency = LocalIocManager.Resolve<IHelloDependency>();| var goodByeDependency = LocalIocManager.Resolve<IGoodByeDependency>();| _abpQuartzConfiguration.Scheduler.ShouldNotBeNull();| _abpQuartzConfiguration.Scheduler.IsStarted.ShouldBe(true);| (await _abpQuartzConfiguration.Scheduler.CheckExists(JobKey.Create(\"HelloJobKey\"))).ShouldBe(true);| (await _abpQuartzConfiguration.Scheduler.CheckExists(JobKey.Create(\"GoodByeJobKey\"))).ShouldBe(true);| //Wait for execution!| await Task.Delay(TimeSpan.FromSeconds(5));| helloDependency.ExecutionCount.ShouldBeGreaterThan(0);| goodByeDependency.ExecutionCount.ShouldBeGreaterThan(0);| await RescheduleJob();| (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"HelloJobTrigger\"))).ShouldBe(false);| (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"HelloJobRescheduleTrigger\"))).ShouldBe(true);| await UnscheduleJob();| (await _abpQuartzConfiguration.Scheduler.CheckExists(new TriggerKey(\"GoodByeJobTrigger\"))).ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "DefaultRedisCacheSerializer_Tests.cs",
    "methods": [
      {
        "name": "Serialize_List_Test",
        "body": "{| List<string> source = new List<string>| {| \"Stranger Things\",| \"The OA\",| \"Lost in Space\"| };| var result = _redisCacheSerializer.Serialize(source, typeof(List<string>));| result.ToString().ShouldStartWith(\"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String,\");| }"
      },
      {
        "name": "Serialize_Class_Test",
        "body": "{| var source = new MyTestClass| {| Field1 = 42,| Field2 = \"Stranger Things\"| };| var result = _redisCacheSerializer.Serialize(source, typeof(MyTestClass));| result.ToString().ShouldBe(\"{\\\"Payload\\\":\\\"{\\\\\\\"Field1\\\\\\\":42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.RedisCache.Tests.DefaultRedisCacheSerializer_Tests+MyTestClass, Abp.RedisCache.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\");| }"
      },
      {
        "name": "Deserialize_List_Test",
        "body": "{| var json = \"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String]]\\\"}\";| var cacheData = _redisCacheSerializer.Deserialize(json);| var typedCacheData = cacheData as List<string>;| typedCacheData.ShouldNotBeNull();| typedCacheData.Count.ShouldBe(3);| typedCacheData.First().ShouldBe(\"Stranger Things\");| }"
      },
      {
        "name": "Deserialize_Class_Test",
        "body": "{| var json = \"{\\\"Payload\\\": \\\"{\\\\\\\"Field1\\\\\\\": 42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.RedisCache.Tests.DefaultRedisCacheSerializer_Tests+MyTestClass, Abp.RedisCache.Tests\\\"}\";| var cacheData = _redisCacheSerializer.Deserialize(json);| var typedCacheData = cacheData as MyTestClass;| typedCacheData.ShouldNotBeNull();| typedCacheData.Field1.ShouldBe(42);| typedCacheData.Field2.ShouldBe(\"Stranger Things\");| }"
      }
    ]
  },
  {
    "file": "ProtoBufRedisCacheSerializer_Test.cs",
    "methods": [
      {
        "name": "Simple_Serialize_Deserialize_Test",
        "body": "{| //Arrange| var protoBufSerializer = new ProtoBufRedisCacheSerializer();| var objectToSerialize = new ClassToSerialize {Age = 10, Name = \"John\"};| //Act| string classSerializedString = protoBufSerializer.Serialize(| objectToSerialize,| typeof(ClassToSerialize)| );| object classUnSerialized = protoBufSerializer.Deserialize(classSerializedString);| //Assert| classUnSerialized.ShouldBeOfType<ClassToSerialize>();| ClassToSerialize classUnSerializedTyped = (ClassToSerialize) classUnSerialized;| classUnSerializedTyped.Age.ShouldBe(10);| classUnSerializedTyped.Name.ShouldBe(\"John\");| }"
      }
    ]
  },
  {
    "file": "RedisCacheManager_Test.cs",
    "methods": [
      {
        "name": "Cache_Options_Configuration_Test",
        "body": "{| _cache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(24));| }"
      }
    ]
  },
  {
    "file": "ApplicationWithoutDb_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{| var output = _myAppService.MyMethod(new MyMethodInput {MyStringValue = \"test\"});| output.Result.ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "ServiceWithDifferentInputs_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result = await _appService.GetsExpressionReturnsGenericAsync<MyEmptyDto>(t => t != null);| result.ShouldBeOfType(typeof(MyEmptyDto));| }"
      }
    ]
  },
  {
    "file": "Validation_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsStringAsync(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetContentValue),| new { value = 42 }| )| );| response.ShouldBe(\"OK: 42\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValue),| new { value = 42 }| )| );| response.Success.ShouldBeTrue();| response.Result.Value.ShouldBe(42);| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await GetResponseAsObjectAsync<AjaxResponse<ValidationTestController.ValidationTestArgument1>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValue)| ),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument2>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithEnum)| ),| new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| //The JSON value could not be converted to Abp.AspNetCore.App.Controllers.ValidationTestController+ValidationTestEnum.| //Path: $ | LineNumber: 0 | BytePositionInLine: 5.| //response.Error.ValidationErrors[0].Members[0].ShouldBe(\"$.value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument3>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithValidatableObject)| ),| new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be higher than 0\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument4>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithCustomValidate)| ),| new StringContent(\"{ \\\"value\\\": \\\"asd\\\" }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(1);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[0].Message.ShouldBe(\"Value must be \\\"abp\\\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| var response = await PostAsync<AjaxResponse<ValidationTestController.ValidationTestArgument5>>(| GetUrl<ValidationTestController>(| nameof(ValidationTestController.GetJsonValueWithCombinedValidators)| ),| new StringContent(\"{ \\\"value\\\": -1 }\", Encoding.UTF8, \"application/json\"),| HttpStatusCode.BadRequest| );| response.Success.ShouldBeFalse();| response.Result.ShouldBeNull();| response.Error.ShouldNotBeNull();| response.Error.ValidationErrors.Length.ShouldBe(2);| response.Error.ValidationErrors.ShouldNotBeNull();| response.Error.ValidationErrors[0].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[0].Members[0].ShouldBe(\"value\");| response.Error.ValidationErrors[1].Members.Length.ShouldBe(1);| response.Error.ValidationErrors[1].Members[0].ShouldBe(\"value\");| }"
      }
    ]
  },
  {
    "file": "SessionTests.cs",
    "methods": [
      {
        "name": "Should_Be_Default_On_Startup",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = false;| AbpSession.UserId.ShouldBe(null);| AbpSession.TenantId.ShouldBe(1);| Resolve<IMultiTenancyConfig>().IsEnabled = true;| AbpSession.UserId.ShouldBe(null);| AbpSession.TenantId.ShouldBe(null);| }"
      },
      {
        "name": "Can_Change_Session_Variables",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| AbpSession.UserId = 1;| AbpSession.TenantId = 42;| var resolvedAbpSession = LocalIocManager.Resolve<IAbpSession>();| resolvedAbpSession.UserId.ShouldBe(1);| resolvedAbpSession.TenantId.ShouldBe(42);| Resolve<IMultiTenancyConfig>().IsEnabled = false;| AbpSession.UserId.ShouldBe(1);| AbpSession.TenantId.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "Menu_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var testCase = new NavigationTestCase();| //Check created menu definitions| var mainMenuDefinition = testCase.NavigationManager.MainMenu;| mainMenuDefinition.Items.Count.ShouldBe(1);| var adminMenuItemDefinition = mainMenuDefinition.GetItemByNameOrNull(\"Abp.Zero.Administration\");| adminMenuItemDefinition.ShouldNotBe(null);| adminMenuItemDefinition.Items.Count.ShouldBe(3);| | //Check user menus| var userMenu = await testCase.UserNavigationManager.GetMenuAsync(mainMenuDefinition.Name, new UserIdentifier(1, 1));| userMenu.Items.Count.ShouldBe(1);| var userAdminMenu = userMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration\");| userAdminMenu.ShouldNotBe(null);| userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.User\").ShouldNotBe(null);| userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.Role\").ShouldBe(null);| userAdminMenu.Items.FirstOrDefault(i => i.Name == \"Abp.Zero.Administration.Setting\").ShouldNotBe(null);| mainMenuDefinition.RemoveItem(mainMenuDefinition.Items.FirstOrDefault()?.Name);| mainMenuDefinition.Items.Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "AuditingHelper_Tests.cs",
    "methods": [
      {
        "name": "Ignored_Properties_Should_Not_Be_Serialized",
        "body": "{| var json = new JsonNetAuditSerializer(new AuditingConfiguration {IgnoredTypes = { typeof(Exception) }})| .Serialize(new AuditingHelperTestPersonDto| {| FullName = \"John Doe\",| Age = 18,| School = new AuditingHelperTestSchoolDto| {| Name = \"Crosswell Secondary\",| Address = \"Broadway Ave, West Bend\"| },| Exception = new Exception(\"this should be ignored!\")| });| json.ShouldBe(\"{\\\"fullName\\\":\\\"John Doe\\\",\\\"school\\\":{\\\"name\\\":\\\"Crosswell Secondary\\\"}}\");| }"
      }
    ]
  },
  {
    "file": "AuthorizationHelper_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _authorizeHelper.AuthorizeAsync(| typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_NotAuthorized)),| typeof(MyNonAuthorizedClass)| );| await _authorizeHelper.AuthorizeAsync(| typeof(MyAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyAuthorizedClass.Test_NotAuthorized)),| typeof(MyAuthorizedClass)| );| }"
      },
      {
        "name": "Task",
        "body": "{| await Assert.ThrowsAsync<AbpAuthorizationException>(async () =>| {| await _authorizeHelper.AuthorizeAsync(| typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_Authorized)),| typeof(MyNonAuthorizedClass)| );| });| await Assert.ThrowsAsync<AbpAuthorizationException>(async () =>| {| await _authorizeHelper.AuthorizeAsync(| typeof(MyAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyAuthorizedClass.Test_Authorized)),| typeof(MyAuthorizedClass)| );| });| }"
      },
      {
        "name": "Task",
        "body": "{| var authorizeHelper = GetAuthorizationHelper(true, false);| await authorizeHelper.AuthorizeAsync(| typeof(MyNonAuthorizedClass).GetTypeInfo().GetMethod(nameof(MyNonAuthorizedClass.Test_FeatureDependent)),| typeof(MyNonAuthorizedClass)| );| }"
      }
    ]
  },
  {
    "file": "AuthorizationInterceptor_Tests.cs",
    "methods": [
      {
        "name": "Test_Authorization_Sync",
        "body": "{| //Authorized methods| _syncObj.MethodWithoutPermission();| _syncObj.Called_MethodWithoutPermission.ShouldBe(true);| _syncObj.MethodWithPermission1().ShouldBe(42);| _syncObj.Called_MethodWithPermission1.ShouldBe(true);| _syncObj.MethodWithPermission1AndPermission2();| _syncObj.Called_MethodWithPermission1AndPermission2.ShouldBe(true);| _syncObj.MethodWithPermission1AndPermission3();| _syncObj.Called_MethodWithPermission1AndPermission3.ShouldBe(true);| //Non authorized methods| Assert.Throws<AbpAuthorizationException>(() => _syncObj.MethodWithPermission3());| _syncObj.Called_MethodWithPermission3.ShouldBe(false);| Assert.Throws<AbpAuthorizationException>(() => _syncObj.MethodWithPermission1AndPermission3WithRequireAll());| _syncObj.Called_MethodWithPermission1AndPermission3WithRequireAll.ShouldBe(false);| }"
      },
      {
        "name": "Task",
        "body": "{| //Authorized methods| await _asyncObj.MethodWithoutPermission();| _asyncObj.Called_MethodWithoutPermission.ShouldBe(true);| (await _asyncObj.MethodWithPermission1Async()).ShouldBe(42);| _asyncObj.Called_MethodWithPermission1.ShouldBe(true);| await _asyncObj.MethodWithPermission1AndPermission2Async();| _asyncObj.Called_MethodWithPermission1AndPermission2.ShouldBe(true);| await _asyncObj.MethodWithPermission1AndPermission3Async();| _asyncObj.Called_MethodWithPermission1AndPermission3.ShouldBe(true);| await _asyncObj.MethodWithoutPermission();| _asyncObj.Called_MethodWithoutPermission.ShouldBe(true);| //Non authorized methods| await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObj.MethodWithPermission3Async());| _asyncObj.Called_MethodWithPermission3.ShouldBe(false);| await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObj.MethodWithPermission1AndPermission3WithRequireAllAsync());| _asyncObj.Called_MethodWithPermission1AndPermission3WithRequireAll.ShouldBe(false);| }"
      },
      {
        "name": "Test_Authorization_For_Protected_Sync",
        "body": "{| EmptySession();| _syncObjForProtectedMethod.MethodWithoutForProtectedPermission();| _syncObjForProtectedMethod.Called_AnonymousProtectedMethod.ShouldBe(true);| //Non authorized methods| Assert.Throws<AbpAuthorizationException>(() => _syncObjForProtectedMethod.MethodWithPermissionForProtected());| _syncObjForProtectedMethod.Called_AuthorizedProtectedMethod.ShouldBe(false);| }"
      },
      {
        "name": "Task",
        "body": "{| EmptySession();| await _asyncObjForProtectedMethod.MethodWithoutPermissionForProtectedAsync();| _asyncObjForProtectedMethod.Called_AnonymousProtectedMethod.ShouldBe(true);| //Non authorized methods| await Assert.ThrowsAsync<AbpAuthorizationException>(async () => await _asyncObjForProtectedMethod.MethodWithPermissionForProtectedAsync());| _asyncObjForProtectedMethod.Called_AuthorizedProtectedMethod.ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "PermissionDefinitionTests.cs",
    "methods": [
      {
        "name": "Test_PermissionManager",
        "body": "{| var authorizationConfiguration = new AuthorizationConfiguration();| authorizationConfiguration.Providers.Add<MyAuthorizationProvider1>();| authorizationConfiguration.Providers.Add<MyAuthorizationProvider2>();| LocalIocManager.IocContainer.Register(| Component.For<IFeatureDependencyContext, FeatureDependencyContext>().UsingFactoryMethod(() =>| new FeatureDependencyContext(LocalIocManager, Substitute.For<IFeatureChecker>())),| Component.For<MyAuthorizationProvider1>().LifestyleTransient(),| Component.For<MyAuthorizationProvider2>().LifestyleTransient(),| Component.For<IUnitOfWorkManager, UnitOfWorkManager>().LifestyleTransient(),| Component.For<ICurrentUnitOfWorkProvider, AsyncLocalCurrentUnitOfWorkProvider>().LifestyleTransient(),| Component.For<IUnitOfWorkDefaultOptions, UnitOfWorkDefaultOptions>().LifestyleTransient(),| Component.For<IMultiTenancyConfig, MultiTenancyConfig>().LifestyleTransient()| );| var permissionManager = new PermissionManager(LocalIocManager, authorizationConfiguration,| LocalIocManager.Resolve<IUnitOfWorkManager>(), LocalIocManager.Resolve<IMultiTenancyConfig>());| permissionManager.Initialize();| permissionManager.GetAllPermissions().Count.ShouldBe(5);| var userManagement = permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration.UserManagement\");| userManagement.ShouldNotBe(null);| userManagement.Children.Count.ShouldBe(1);| var changePermissions =| permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration.UserManagement.ChangePermissions\");| changePermissions.ShouldNotBe(null);| changePermissions.Parent.ShouldBeSameAs(userManagement);| permissionManager.GetPermissionOrNull(\"NonExistingPermissionName\").ShouldBe(null);| userManagement.RemoveChildPermission(userManagement.Children.FirstOrDefault()?.Name);| userManagement.Children.Count.ShouldBe(0);| permissionManager.RemovePermission(\"Abp.Zero.Administration\");| permissionManager.GetPermissionOrNull(\"Abp.Zero.Administration\").ShouldBe(null);| }"
      },
      {
        "name": "Should_Manage_Permission_With_Custom_Properties",
        "body": "{| var authorizationConfiguration = new AuthorizationConfiguration();| authorizationConfiguration.Providers.Add<MyAuthorizationProviderWithCustomProperties>();| LocalIocManager.IocContainer.Register(| Component.For<IFeatureDependencyContext, FeatureDependencyContext>()| .UsingFactoryMethod(() =>| new FeatureDependencyContext(LocalIocManager, Substitute.For<IFeatureChecker>())),| Component.For<MyAuthorizationProviderWithCustomProperties>().LifestyleTransient(),| Component.For<IUnitOfWorkManager, UnitOfWorkManager>().LifestyleTransient(),| Component.For<ICurrentUnitOfWorkProvider, AsyncLocalCurrentUnitOfWorkProvider>().LifestyleTransient(),| Component.For<IUnitOfWorkDefaultOptions, UnitOfWorkDefaultOptions>().LifestyleTransient(),| Component.For<IMultiTenancyConfig, MultiTenancyConfig>().LifestyleTransient()| );| var permissionManager = new PermissionManager(LocalIocManager, authorizationConfiguration,| LocalIocManager.Resolve<IUnitOfWorkManager>(), LocalIocManager.Resolve<IMultiTenancyConfig>());| permissionManager.Initialize();| permissionManager.GetAllPermissions().Count.ShouldBe(4);| var customPermission = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission\");| customPermission.ShouldNotBe(null);| customPermission.Children.Count.ShouldBe(2);| customPermission.Properties.Count.ShouldBe(2);| customPermission[\"MyProp1\"].ShouldBe(\"Test\");| ((MyAuthorizationProviderWithCustomProperties.MyTestPropertyClass) customPermission[\"MyProp2\"]).Prop1| .ShouldBe(\"Test\");| //its not exist| customPermission[\"MyProp3\"].ShouldBeNull();| customPermission.Children[0][\"MyProp1\"].ShouldBeNull();| customPermission.Children[1][\"MyProp1\"].ShouldBe(\"TestChild\");| var customPermission2 = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission2\");| customPermission2.ShouldNotBe(null);| customPermission2.Children.Count.ShouldBe(0);| customPermission2.Properties.Count.ShouldBe(0);| customPermission2[\"MyProp1\"].ShouldBeNull();| customPermission2[\"MyProp1\"] = \"Test\";| var customPermission21 = permissionManager.GetPermissionOrNull(\"Abp.Zero.MyCustomPermission2\");| customPermission2.ShouldBeSameAs(customPermission21);| customPermission21[\"MyProp1\"].ShouldBe(\"Test\");| }"
      }
    ]
  },
  {
    "file": "InMemoryBackgroundJobStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var jobInfo = new BackgroundJobInfo| {| JobType = \"TestType\",| JobArgs = \"{}\",| NextTryTime = Clock.Now.AddMinutes(-1) // to be sure NextTryTime will not be same when _store.InsertAsync and _store.GetWaitingJobsAsync are executed.| };| | await _store.InsertAsync(jobInfo);| (await _store.GetWaitingJobsAsync(BackgroundJobConfiguration.DefaultMaxWaitingJobToProcessPerPeriod)).Count.ShouldBe(1);| var jobInfoFromStore = await _store.GetAsync(1);| jobInfoFromStore.ShouldNotBeNull();| jobInfoFromStore.JobType.ShouldBeSameAs(jobInfo.JobType);| jobInfoFromStore.JobArgs.ShouldBeSameAs(jobInfo.JobArgs);| await _store.DeleteAsync(jobInfo);| (await _store.GetWaitingJobsAsync(BackgroundJobConfiguration.DefaultMaxWaitingJobToProcessPerPeriod)).Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "Castle_Interception_Test.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _handler.HandleEvent(new MyEventData());| await _asyncHandler.HandleEventAsync(new MyEventData());| }"
      },
      {
        "name": "Task",
        "body": "{| typeof(IEventHandler<MyEventData>)| .GetMethod(\"HandleEvent\", BindingFlags.Instance | BindingFlags.Public)| .Invoke(_handler, new object[] {new MyEventData()});| await (Task) typeof(IAsyncEventHandler<MyEventData>)| .GetMethod(\"HandleEventAsync\", BindingFlags.Instance | BindingFlags.Public)| .Invoke(_asyncHandler, new object[] {new MyEventData()});| }"
      }
    ]
  },
  {
    "file": "ListExtensions_Tests.cs",
    "methods": [
      {
        "name": "Should_SortByDependencies",
        "body": "{| var a = new DependedObject(\"A\");| var b = new DependedObject(\"B\");| var c = new DependedObject(\"C\");| var d = new DependedObject(\"D\");| b.Dependencies.Add(a);| c.Dependencies.Add(a);| c.Dependencies.Add(d);| d.Dependencies.Add(b);| ShouldSortedCorrectly(new List<DependedObject> { a, b, c, d });| ShouldSortedCorrectly(new List<DependedObject> { d, c, b, a });| ShouldSortedCorrectly(new List<DependedObject> { a, c, d, b });| ShouldSortedCorrectly(new List<DependedObject> { c, a, d, b });| }"
      }
    ]
  },
  {
    "file": "TypeList_Test.cs",
    "methods": [
      {
        "name": "Should_Only_Add_True_Types",
        "body": "{| var list = new TypeList<IMyInterface>();| list.Add<MyClass1>();| list.Add(typeof(MyClass2));| Assert.Throws<ArgumentException>(() => list.Add(typeof(MyClass3)));| }"
      }
    ]
  },
  {
    "file": "DictionaryBasedConfig_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Value",
        "body": "{| var testObject = new TestClass {Value = 42};| _config[\"IntValue\"] = 42;| _config[\"StringValue\"] = \"Test string\";| _config[\"ObjectValue\"] = testObject;| _config[\"IntValue\"].ShouldBe(42);| _config.Get<int>(\"IntValue\").ShouldBe(42);| _config[\"StringValue\"].ShouldBe(\"Test string\");| _config.Get<string>(\"StringValue\").ShouldBe(\"Test string\");| _config[\"ObjectValue\"].ShouldBeSameAs(testObject);| _config.Get<TestClass>(\"ObjectValue\").ShouldBeSameAs(testObject);| _config.Get<TestClass>(\"ObjectValue\").Value.ShouldBe(42);| }"
      },
      {
        "name": "Should_Get_Default_If_No_Value",
        "body": "{| _config[\"MyUndefinedName\"].ShouldBe(null);| _config.Get<string>(\"MyUndefinedName\").ShouldBe(null);| _config.Get<MyConfig>(\"MyUndefinedName\").ShouldBe(null);| _config.Get<int>(\"MyUndefinedName\").ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "SettingManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var settingManager = CreateSettingManager();| (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(42);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level default value\");| }"
      },
      {
        "name": "Task",
        "body": "{| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(48);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level stored value\");| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| session.TenantId = 1;| //Inherited setting| session.UserId = 1;| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 stored value\");| session.UserId = 2;| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 2 stored value\");| session.UserId = 3;| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting))| .ShouldBe(\"tenant 1 stored value\"); //Because no user value in the store| session.TenantId = 3;| session.UserId = 3;| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting))| .ShouldBe(\"application level stored value\"); //Because no user and tenant value in the store| //Not inherited setting| session.TenantId = 1;| session.UserId = 1;| (await settingManager.GetSettingValueForApplicationAsync(MyNotInheritedSetting)).ShouldBe(| \"application value\");| (await settingManager.GetSettingValueForTenantAsync(MyNotInheritedSetting, session.TenantId.Value))| .ShouldBe(\"default-value\");| (await settingManager.GetSettingValueAsync(MyNotInheritedSetting)).ShouldBe(\"default-value\");| (await settingManager.GetSettingValueAsync<MyEnumSettingType>(MyEnumTypeSetting)).ShouldBe(MyEnumSettingType| .Setting1);| }"
      },
      {
        "name": "Task",
        "body": "{| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| (await settingManager.GetAllSettingValuesAsync()).Count.ShouldBe(5);| (await settingManager.GetAllSettingValuesForApplicationAsync()).Count.ShouldBe(4);| (await settingManager.GetAllSettingValuesForTenantAsync(1)).Count.ShouldBe(2);| (await settingManager.GetAllSettingValuesForTenantAsync(1)).Count.ShouldBe(2);| (await settingManager.GetAllSettingValuesForTenantAsync(2)).Count.ShouldBe(0);| (await settingManager.GetAllSettingValuesForTenantAsync(3)).Count.ShouldBe(0);| (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 1))).Count.ShouldBe(1);| (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 2))).Count.ShouldBe(2);| (await settingManager.GetAllSettingValuesForUserAsync(new UserIdentifier(1, 3))).Count.ShouldBe(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| //Application level changes| await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"53\");| await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"54\");| await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting,| \"application level changed value\");| (await settingManager.SettingStore.GetSettingOrNullAsync(null, null, MyAppLevelSetting)).Value| .ShouldBe(\"54\");| (await settingManager.GetSettingValueAsync<int>(MyAppLevelSetting)).ShouldBe(54);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level changed value\");| //Tenant level changes| session.TenantId = 1;| await settingManager.ChangeSettingForTenantAsync(1, MyAllLevelsSetting, \"tenant 1 changed value\");| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"tenant 1 changed value\");| //User level changes| session.UserId = 1;| await settingManager.ChangeSettingForUserAsync(1, MyAllLevelsSetting, \"user 1 changed value\");| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 changed value\");| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var store = new MemorySettingStore();| var settingManager = CreateSettingManager();| settingManager.SettingStore = store;| settingManager.AbpSession = session;| session.TenantId = 1;| session.UserId = 1;| //We can get user's personal stored value| (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldNotBe(null);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"user 1 stored value\");| //This will delete setting for the user since it's same as tenant's setting value| await settingManager.ChangeSettingForUserAsync(1, MyAllLevelsSetting, \"tenant 1 stored value\");| (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldBe(null);| //We can get tenant's setting value| (await store.GetSettingOrNullAsync(1, null, MyAllLevelsSetting)).ShouldNotBe(null);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"tenant 1 stored value\");| //This will delete setting for tenant since it's same as application's setting value| await settingManager.ChangeSettingForTenantAsync(1, MyAllLevelsSetting, \"application level stored value\");| (await store.GetSettingOrNullAsync(1, 1, MyAllLevelsSetting)).ShouldBe(null);| //We can get application's value| (await store.GetSettingOrNullAsync(null, null, MyAllLevelsSetting)).ShouldNotBe(null);| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level stored value\");| //This will delete setting for application since it's same as the default value of the setting| await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting,| \"application level default value\");| (await store.GetSettingOrNullAsync(null, null, MyAllLevelsSetting)).ShouldBe(null);| //Now, there is no setting value, default value should return| (await settingManager.GetSettingValueAsync(MyAllLevelsSetting)).ShouldBe(\"application level default value\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var session = CreateTestAbpSession(multiTenancyIsEnabled: false);| var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| // Act| await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting, \"53\");| // Assert| var value = await settingManager.GetSettingValueAsync(MyAllLevelsSetting);| value.ShouldBe(\"53\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var session = CreateTestAbpSession(multiTenancyIsEnabled: false);| var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| // Act| await settingManager.ChangeSettingForApplicationAsync(MyAllLevelsSetting, \"53\");| // Assert| var value = await settingManager.GetSettingValueForApplicationAsync(MyAllLevelsSetting);| value.ShouldBe(\"53\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var session = CreateTestAbpSession(multiTenancyIsEnabled: false);| var settingManager = CreateSettingManager(multiTenancyIsEnabled: false);| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| //change setting value with \"B\"| await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"B\");| // it's ok| (await settingManager.GetSettingValueForApplicationAsync(MyAppLevelSetting)).ShouldBe(\"B\");| //change setting with same value \"B\" again,| await settingManager.ChangeSettingForApplicationAsync(MyAppLevelSetting, \"B\");| //but was \"A\" ,that's wrong| (await settingManager.GetSettingValueForApplicationAsync(MyAppLevelSetting)).ShouldBe(\"B\");| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| session.TenantId = 1;| // User setting| session.UserId = 2;| (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"user_setting\");| // Tenant setting| session.UserId = null;| (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"tenant_setting\");| // App setting| session.TenantId = null;| (await settingManager.GetSettingValueAsync(MyEncryptedSetting)).ShouldBe(\"app_setting\");| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| session.TenantId = 1;| // User setting| session.UserId = 2;| await settingManager.ChangeSettingForUserAsync(session.ToUserIdentifier(), MyEncryptedSetting,| \"user_123qwe\");| var settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(| session.TenantId,| session.UserId,| MyEncryptedSetting| );| settingValue.Value.ShouldBe(\"oKPqQDCAHhz+AEnl/r0fsw==\");| // Tenant setting| session.UserId = null;| await settingManager.ChangeSettingForTenantAsync(session.GetTenantId(), MyEncryptedSetting,| \"tenant_123qwe\");| settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(| session.TenantId,| session.UserId,| MyEncryptedSetting| );| settingValue.Value.ShouldBe(\"YX+MTwbuOwXgL7tnKw+oxw==\");| // App setting| session.TenantId = null;| await settingManager.ChangeSettingForApplicationAsync(MyEncryptedSetting, \"app_123qwe\");| settingValue = await settingManager.SettingStore.GetSettingOrNullAsync(| session.TenantId,| session.UserId,| MyEncryptedSetting| );| settingValue.Value.ShouldBe(\"EOi2wcQt1pi1K4qYycBBbg==\");| }"
      },
      {
        "name": "Task",
        "body": "{| var session = CreateTestAbpSession();| var settingManager = CreateSettingManager();| settingManager.SettingStore = new MemorySettingStore();| settingManager.AbpSession = session;| session.TenantId = 1;| // User setting| session.UserId = 2;| await settingManager.ChangeSettingForUserAsync(| session.ToUserIdentifier(),| MyEncryptedSetting,| \"new_user_setting\"| );| var settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);| settingValue.ShouldBe(\"new_user_setting\");| // Tenant Setting| session.UserId = null;| await settingManager.ChangeSettingForTenantAsync(| session.GetTenantId(),| MyEncryptedSetting,| \"new_tenant_setting\"| );| settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);| settingValue.ShouldBe(\"new_tenant_setting\");| // App Setting| session.TenantId = null;| await settingManager.ChangeSettingForApplicationAsync(| MyEncryptedSetting,| \"new_app_setting\"| );| settingValue = await settingManager.GetSettingValueAsync(MyEncryptedSetting);| settingValue.ShouldBe(\"new_app_setting\");| }"
      }
    ]
  },
  {
    "file": "Circular_Constructor_Dependency_Tests.cs",
    "methods": [
      {
        "name": "Should_Fail_Circular_Constructor_Dependency",
        "body": "{| LocalIocManager.Register<MyClass1>();| LocalIocManager.Register<MyClass2>();| LocalIocManager.Register<MyClass3>();| Assert.Throws<CircularDependencyException>(() => LocalIocManager.Resolve<MyClass1>());| }"
      }
    ]
  },
  {
    "file": "Circular_Property_Dependency_Tests.cs",
    "methods": [
      {
        "name": "Should_Success_Circular_Property_Injection_Transient",
        "body": "{| Initialize_Test(DependencyLifeStyle.Transient);| var obj1 = LocalIocManager.Resolve<MyClass1>();| obj1.Obj2.ShouldNotBe(null);| obj1.Obj3.ShouldNotBe(null);| obj1.Obj2.Obj3.ShouldNotBe(null);| var obj2 = LocalIocManager.Resolve<MyClass2>();| obj2.Obj1.ShouldNotBe(null);| obj2.Obj3.ShouldNotBe(null);| obj2.Obj1.Obj3.ShouldNotBe(null);| MyClass1.CreateCount.ShouldBe(2);| MyClass2.CreateCount.ShouldBe(2);| MyClass3.CreateCount.ShouldBe(4);| }"
      },
      {
        "name": "Should_Success_Circular_Property_Injection_Singleton",
        "body": "{| Initialize_Test(DependencyLifeStyle.Singleton);| var obj1 = LocalIocManager.Resolve<MyClass1>();| obj1.Obj2.ShouldNotBe(null);| obj1.Obj3.ShouldNotBe(null);| obj1.Obj2.Obj3.ShouldNotBe(null);| var obj2 = LocalIocManager.Resolve<MyClass2>();| obj2.Obj1.ShouldBe(null); //!!!Notice: It's null| obj2.Obj3.ShouldNotBe(null);| MyClass1.CreateCount.ShouldBe(1);| MyClass2.CreateCount.ShouldBe(1);| MyClass3.CreateCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "DisposableDependencyObjectWrapper_Tests.cs",
    "methods": [
      {
        "name": "ResolveAsDisposable_Should_Work",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| SimpleDisposableObject simpleObj;| using (var wrapper = LocalIocManager.ResolveAsDisposable<SimpleDisposableObject>())| {| wrapper.Object.ShouldNotBe(null);| simpleObj = wrapper.Object;| }| simpleObj.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "ResolveAsDisposable_With_Constructor_Args_Should_Work",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| using (var wrapper = LocalIocManager.ResolveAsDisposable<SimpleDisposableObject>(new { myData = 42 }))| {| wrapper.Object.MyData.ShouldBe(42);| }| }"
      },
      {
        "name": "Using_Test",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| LocalIocManager.Using<SimpleDisposableObject>(obj => obj.MyData.ShouldBe(0));| }"
      }
    ]
  },
  {
    "file": "GenericInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Generic_Types",
        "body": "{| LocalIocManager.IocContainer.Register(| Component.For<MyClass>(),| Component.For(typeof (IEmpty<>)).ImplementedBy(typeof (EmptyImplOne<>))| );| var genericObj = LocalIocManager.Resolve<IEmpty<MyClass>>();| genericObj.GenericArg.GetType().ShouldBe(typeof(MyClass));| }"
      }
    ]
  },
  {
    "file": "IocManager_LifeStyle_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Dispose_Of_Transient_Dependency_When_Object_Is_Released",
        "body": "{| LocalIocManager.IocContainer.Register(| Component.For<SimpleDisposableObject>().LifestyleTransient()| );| var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();| LocalIocManager.IocContainer.Release(obj);| obj.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "Should_Call_Dispose_Of_Transient_Dependency_When_IocManager_Is_Disposed",
        "body": "{| LocalIocManager.IocContainer.Register(| Component.For<SimpleDisposableObject>().LifestyleTransient()| );| var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();| LocalIocManager.Dispose();| obj.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "Should_Call_Dispose_Of_Singleton_Dependency_When_IocManager_Is_Disposed",
        "body": "{| LocalIocManager.IocContainer.Register(| Component.For<SimpleDisposableObject>().LifestyleSingleton()| );| var obj = LocalIocManager.IocContainer.Resolve<SimpleDisposableObject>();| LocalIocManager.Dispose();| obj.DisposeCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "IocManager_Override_Tests.cs",
    "methods": [
      {
        "name": "Should_Not_Override_As_Default",
        "body": "{| //Arrange| LocalIocManager.Register<IMyService, MyImpl1>(DependencyLifeStyle.Transient);| LocalIocManager.Register<IMyService, MyImpl2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<IMyService, MyImpl3>(DependencyLifeStyle.Transient);| //Act| var service = LocalIocManager.Resolve<IMyService>();| var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();| //Assert| service.ShouldBeOfType<MyImpl1>();| allServices.Length.ShouldBe(3);| allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Override_When_Using_IsDefault",
        "body": "{| //Arrange| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());| //Act| var service = LocalIocManager.Resolve<IMyService>();| var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();| //Assert| service.ShouldBeOfType<MyImpl2>();| allServices.Length.ShouldBe(2);| allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Override_When_Using_IsDefault_Twice",
        "body": "{| //Arrange| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl3>().LifestyleTransient().IsDefault());| //Act| var service = LocalIocManager.Resolve<IMyService>();| var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();| //Assert| service.ShouldBeOfType<MyImpl3>();| allServices.Length.ShouldBe(3);| allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Get_Default_Service",
        "body": "{| //Arrange| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl1>().LifestyleTransient());| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl2>().LifestyleTransient().IsDefault());| LocalIocManager.IocContainer.Register(Component.For<IMyService>().ImplementedBy<MyImpl3>().LifestyleTransient());| //Act| var service = LocalIocManager.Resolve<IMyService>();| var allServices = LocalIocManager.IocContainer.ResolveAll<IMyService>();| //Assert| service.ShouldBeOfType<MyImpl2>();| allServices.Length.ShouldBe(3);| allServices.Any(s => s.GetType() == typeof(MyImpl1)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl2)).ShouldBeTrue();| allServices.Any(s => s.GetType() == typeof(MyImpl3)).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "IocManager_Self_Register_Tests.cs",
    "methods": [
      {
        "name": "Should_Self_Register_With_All_Interfaces",
        "body": "{| var registrar = LocalIocManager.Resolve<IIocRegistrar>();| var resolver = LocalIocManager.Resolve<IIocResolver>();| var managerByInterface = LocalIocManager.Resolve<IIocManager>();| var managerByClass = LocalIocManager.Resolve<IocManager>();| managerByClass.ShouldBeSameAs(registrar);| managerByClass.ShouldBeSameAs(resolver);| managerByClass.ShouldBeSameAs(managerByInterface);| }"
      }
    ]
  },
  {
    "file": "IocManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_First_Registered_Class_If_Registered_Multiple_Class_For_Same_Interface",
        "body": "{| LocalIocManager.Resolve<IEmpty>().GetType().ShouldBe(typeof (EmptyImplOne));| }"
      },
      {
        "name": "ResolveAll_Test",
        "body": "{| var instances = LocalIocManager.ResolveAll<IEmpty>();| instances.Length.ShouldBe(2);| instances.Any(i => i.GetType() == typeof(EmptyImplOne)).ShouldBeTrue();| instances.Any(i => i.GetType() == typeof(EmptyImplTwo)).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "PropertyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_Session_For_ApplicationService",
        "body": "{| var session = Substitute.For<IAbpSession>();| session.TenantId.Returns(1);| session.UserId.Returns(42);| LocalIocManager.Register<MyApplicationService>();| LocalIocManager.IocContainer.Register(| Component.For<IAbpSession>().Instance(session)| );| var myAppService = LocalIocManager.Resolve<MyApplicationService>();| myAppService.TestSession();| }"
      }
    ]
  },
  {
    "file": "Registrar_And_Resolver_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_Self_Registered_Types",
        "body": "{| _registrar.Register<MyClass>();| _resolver.Resolve<MyClass>();| }"
      },
      {
        "name": "Should_Resolve_Registered_By_Interface_Types",
        "body": "{| _registrar.Register<IMyInterface, MyClass>();| _resolver.Resolve<IMyInterface>();| try| {| _resolver.Resolve<MyClass>();| Assert.Fail(\"Should not resolve by class that is registered by interface\");| }| catch { }| }"
      },
      {
        "name": "Should_Get_Different_Objects_For_Transients",
        "body": "{| _registrar.Register<MyClass>(DependencyLifeStyle.Transient);| | var obj1 = _resolver.Resolve<MyClass>();| var obj2 = _resolver.Resolve<MyClass>();| obj1.ShouldNotBeSameAs(obj2);| }"
      },
      {
        "name": "Should_Get_Same_Object_For_Singleton",
        "body": "{| _registrar.Register<MyClass>(DependencyLifeStyle.Singleton);| var obj1 = _resolver.Resolve<MyClass>();| var obj2 = _resolver.Resolve<MyClass>();| obj1.ShouldBeSameAs(obj2);| }"
      }
    ]
  },
  {
    "file": "ScopedIocResolver_Inject_Tests.cs",
    "methods": [
      {
        "name": "Should_Automatically_Release_Resolved_Dependencies_When_Injected_Class_Released",
        "body": "{| //Arrange| LocalIocManager.Register<IScopedIocResolver, ScopedIocResolver>(DependencyLifeStyle.Transient);| LocalIocManager.Register<MyDependency>(DependencyLifeStyle.Transient);| LocalIocManager.Register<MyMainClass>(DependencyLifeStyle.Transient);| //Act| var mainClass = LocalIocManager.Resolve<MyMainClass>();| var dependency = mainClass.CreateDependency();| dependency.IsDisposed.ShouldBeFalse();| LocalIocManager.Release(mainClass);| //Assert| dependency.IsDisposed.ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "ScopedIocResolver_Tests.cs",
    "methods": [
      {
        "name": "UsingScope_Test_ShouldWork",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| SimpleDisposableObject simpleObj = null;| LocalIocManager.UsingScope(scope => { simpleObj = scope.Resolve<SimpleDisposableObject>(); });| simpleObj.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "UsingScope_Test_With_Constructor_ShouldWork",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| SimpleDisposableObject simpleObj = null;| LocalIocManager.UsingScope(scope => { simpleObj = scope.Resolve<SimpleDisposableObject>(new { myData = 40 }); });| simpleObj.MyData.ShouldBe(40);| }"
      },
      {
        "name": "IIocScopedResolver_Test_ShouldWork",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject3>(DependencyLifeStyle.Transient);| SimpleDisposableObject simpleObj;| SimpleDisposableObject2 simpleObj2;| SimpleDisposableObject3 simpleObj3;| using (var scope = LocalIocManager.CreateScope())| {| simpleObj = scope.Resolve<SimpleDisposableObject>();| simpleObj2 = scope.Resolve<SimpleDisposableObject2>();| simpleObj3 = scope.Resolve<SimpleDisposableObject3>();| }| simpleObj.DisposeCount.ShouldBe(1);| simpleObj2.DisposeCount.ShouldBe(1);| simpleObj3.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "IIocScopedResolver_Test_With_ConstructorArgs_ShouldWork",
        "body": "{| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject3>(DependencyLifeStyle.Transient);| SimpleDisposableObject simpleObj;| SimpleDisposableObject2 simpleObj2;| SimpleDisposableObject3 simpleObj3;| using (var scope = LocalIocManager.CreateScope())| {| simpleObj = scope.Resolve<SimpleDisposableObject>(new { myData = 40 });| simpleObj2 = scope.Resolve<SimpleDisposableObject2>(new { myData = 4040 });| simpleObj3 = scope.Resolve<SimpleDisposableObject3>(new { myData = 404040 });| }| simpleObj.MyData.ShouldBe(40);| simpleObj2.MyData.ShouldBe(4040);| simpleObj3.MyData.ShouldBe(404040);| }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_DisposeAll_Registrants",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);| IEnumerable<ISimpleDependency> simpleDependendcies;| using (var scope = LocalIocManager.CreateScope())| {| simpleDependendcies = scope.ResolveAll<ISimpleDependency>();| }| simpleDependendcies.ShouldAllBe(d => d.DisposeCount == 1);| }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_WithConstructor",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);| IEnumerable<ISimpleDependency> simpleDependendcies;| using (var scope = LocalIocManager.CreateScope())| {| simpleDependendcies = scope.ResolveAll<ISimpleDependency>(new { myData = 40 });| }| simpleDependendcies.ShouldAllBe(x => x.MyData == 40);| }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_With_OtherResolvings",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| IEnumerable<ISimpleDependency> simpleDependendcies;| SimpleDisposableObject simpleObject;| using (var scope = LocalIocManager.CreateScope())| {| simpleDependendcies = scope.ResolveAll<ISimpleDependency>();| simpleObject = scope.Resolve<SimpleDisposableObject>();| }| simpleDependendcies.ShouldAllBe(x => x.DisposeCount == 1);| simpleObject.DisposeCount.ShouldBe(1);| }"
      },
      {
        "name": "IIocScopedResolver_Test_ResolveAll_Should_Work_With_OtherResolvings_ConstructorArguments",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency2>(DependencyLifeStyle.Transient);| LocalIocManager.Register<ISimpleDependency, SimpleDependency3>(DependencyLifeStyle.Transient);| LocalIocManager.Register<SimpleDisposableObject>(DependencyLifeStyle.Transient);| IEnumerable<ISimpleDependency> simpleDependendcies;| SimpleDisposableObject simpleObject;| using (var scope = LocalIocManager.CreateScope())| {| simpleDependendcies = scope.ResolveAll<ISimpleDependency>(new { myData = 40 });| simpleObject = scope.Resolve<SimpleDisposableObject>(new { myData = 40 });| }| simpleDependendcies.ShouldAllBe(x => x.MyData == 40);| simpleObject.MyData.ShouldBe(40);| }"
      },
      {
        "name": "IIocScopedResolver_Test_IsRegistered_ShouldWork",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| using (var scope = LocalIocManager.CreateScope())| {| scope.IsRegistered<ISimpleDependency>().ShouldBe(true);| scope.IsRegistered(typeof(ISimpleDependency)).ShouldBe(true);| }| }"
      },
      {
        "name": "IIocScopedResolver_Test_Custom_Release_ShouldWork",
        "body": "{| LocalIocManager.Register<ISimpleDependency, SimpleDependency>(DependencyLifeStyle.Transient);| ISimpleDependency simpleDependency;| using (var scope = LocalIocManager.CreateScope())| {| simpleDependency = scope.Resolve<ISimpleDependency>();| scope.Release(simpleDependency);| }| simpleDependency.DisposeCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "ShouldInitialize_Simple_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Initialize",
        "body": "{| LocalIocManager.Register<MyService>(DependencyLifeStyle.Transient);| var myService = LocalIocManager.Resolve<MyService>();| myService.InitializeCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "Unicode_Naming_Tests.cs",
    "methods": [
      {
        "name": "Castle_Should_Support_Unicode_Class_Names",
        "body": "{| var container = new WindsorContainer();| container.Register(| Component.For<Iお知らせAppService>().ImplementedBy<お知らせAppService>().LifestyleTransient()| );| container.Resolve<Iお知らせAppService>().ShouldBeOfType<お知らせAppService>();| }"
      },
      {
        "name": "Castle_Should_Register_Unicode_Names_In_Conventions",
        "body": "{| var container = new WindsorContainer();| container.Register(| Classes| .FromAssemblyContaining(typeof(Unicode_Naming_Tests))| .Where(c => c == typeof(お知らせAppService))| .WithServiceDefaultInterfaces()| .WithServiceSelf()| .LifestyleTransient()| );| container.Resolve<お知らせAppService>().ShouldBeOfType<お知らせAppService>();| container.Resolve<Iお知らせAppService>().ShouldBeOfType<お知らせAppService>();| }"
      }
    ]
  },
  {
    "file": "DisposeAction_Test.cs",
    "methods": [
      {
        "name": "Should_Call_Action_When_Disposed",
        "body": "{| var actionIsCalled = false;| | using (new DisposeAction(() => actionIsCalled = true))| {| | }| actionIsCalled.ShouldBe(true);| }"
      }
    ]
  },
  {
    "file": "EntityHelper_Tests.cs",
    "methods": [
      {
        "name": "GetPrimaryKeyType_Tests",
        "body": "{| EntityHelper.GetPrimaryKeyType<Manager>().ShouldBe(typeof(int));| EntityHelper.GetPrimaryKeyType(typeof(Manager)).ShouldBe(typeof(int));| EntityHelper.GetPrimaryKeyType(typeof(TestEntityWithGuidPk)).ShouldBe(typeof(Guid));| }"
      }
    ]
  },
  {
    "file": "ExtendableObject_Tests.cs",
    "methods": [
      {
        "name": "Should_Set_And_Get_Primitive_Values",
        "body": "{| var entity = new MyEntity();| entity.SetData(\"Name\", \"John\");| entity.GetData<string>(\"Name\").ShouldBe(\"John\");| entity.SetData(\"Length\", 42424242);| entity.GetData<int>(\"Length\").ShouldBe(42424242);| entity.SetData(\"Age\", 42);| Assert.Equal(42, entity.GetData<byte>(\"Age\"));| entity.SetData(\"BirthDate\", new DateTime(2015, 05, 25, 13, 24, 00, DateTimeKind.Utc));| Assert.Equal(new DateTime(2015, 05, 25, 13, 24, 00, DateTimeKind.Utc), entity.GetData<DateTime>(\"BirthDate\"));| entity.SetData(\"EnumVal\", MyEnum.Value2);| entity.GetData<MyEnum>(\"EnumVal\").ShouldBe(MyEnum.Value2);| | entity.GetData<string>(\"NonExistingValue\").ShouldBe(null);| }"
      },
      {
        "name": "Should_Set_And_Get_Complex_Values",
        "body": "{| var entity = new MyEntity();| var obj = new MyComplexType| {| Name = \"John\",| Age = 42,| Inner = new List<MyComplexTypeInner>| {| new MyComplexTypeInner {Value1 = \"A\", Value2 = 2},| new MyComplexTypeInner {Value1 = \"B\", Value2 = null},| new MyComplexTypeInner {Value1 = null, Value2 = null},| null| }| };| entity.SetData(\"ComplexData\", obj);| var obj2 = entity.GetData<MyComplexType>(\"ComplexData\");| obj.ToJsonString().ShouldBe(obj2.ToJsonString());| entity.SetData(\"ComplexData\", (MyComplexType)null);| entity.GetData<MyComplexType>(\"ComplexData\").ShouldBe(null);| }"
      },
      {
        "name": "Should_Set_ExtensionData_To_Null_If_No_Properties_Remain_With_Setting_Properties_To_Default",
        "body": "{| var entity = new MyEntity();| entity.ExtensionData.ShouldBeNull(); //It's null at the beginning| entity.SetData(\"Name\", \"Douglas\");| entity.SetData(\"Age\", 42);| entity.ExtensionData.ShouldNotBeNull();| entity.SetData<string>(\"Name\", null); //setting to default removes data| entity.ExtensionData.ShouldNotBeNull(); //but there is an \"Age\" property.| entity.SetData(\"Age\", 0); //setting to default removes data, no data remains| entity.ExtensionData.ShouldBeNull(); //Now, it's null| }"
      },
      {
        "name": "Should_Set_ExtensionData_To_Null_If_No_Properties_Remain_With_Removing_Properties",
        "body": "{| var entity = new MyEntity();| entity.ExtensionData.ShouldBeNull(); //It's null at the beginning| entity.SetData(\"Name\", \"Douglas\");| entity.SetData(\"Age\", 42);| entity.ExtensionData.ShouldNotBeNull();| entity.RemoveData(\"Name\");| entity.ExtensionData.ShouldNotBeNull();| entity.RemoveData(\"Age\");| entity.ExtensionData.ShouldBeNull(); //Now, it's null| }"
      },
      {
        "name": "Should_Get_Default_If_Not_Present",
        "body": "{| var entity = new MyEntity();| entity.GetData<string>(\"Name\").ShouldBe(null);| entity.GetData<int>(\"Length\").ShouldBe(0);| entity.GetData<int?>(\"Length\").ShouldBe(null);| entity.GetData<DateTime>(\"BirthDate\").ShouldBe(new DateTime());| entity.GetData<DateTime?>(\"BirthDate\").ShouldBe(null);| Assert.Equal(0, entity.GetData<byte>(\"Age\"));| Assert.Null(entity.GetData<byte?>(\"Age\"));| entity.GetData<MyComplexType>(\"ComplexData\").ShouldBe(null);| }"
      },
      {
        "name": "Should_Support_Inheritance_Of_Complex_Objects",
        "body": "{| var entity = new MyEntity();| entity.SetData<IAnimal>(\"MyCat\", new Tiger(), true);| var tiger = entity.GetData<IAnimal>(\"MyCat\", true) as Tiger;| tiger.ShouldNotBeNull();| }"
      },
      {
        "name": "Should_Support_Inheritance_Of_Complex_Objects_Inside_Array",
        "body": "{| var entity = new MyEntity();| var animals = new AnimalBase[]| {| new Cat {Friend = new Lion()},| new Lion(),| new Tiger()| };| entity.SetData(\"MyAnimals\", animals, true);| var animals2 = entity.GetData<AnimalBase[]>(\"MyAnimals\", true);| animals2.Length.ShouldBe(3);| animals2[0].ShouldBeOfType<Cat>();| animals2[0].As<Cat>().Friend.ShouldBeOfType<Lion>();| animals2[1].ShouldBeOfType<Lion>();| animals2[2].ShouldBeOfType<Tiger>();| }"
      }
    ]
  },
  {
    "file": "Test_Entities.cs",
    "methods": [
      {
        "name": "Equality_Operator_Works",
        "body": "{| var w1 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };| var w2 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };| Assert.True(w1.EntityEquals(w2), \"Same class with same Id must be equal\");| Assert.True(w2.EntityEquals(w1), \"Same class with same Id must be equal\");| Worker w3 = null;| Worker w4 = null;| Assert.True(w3 == w4, \"Null objects in same class must be equal\");| var m1 = new Manager { Id = 5, Name = \"Halil ibrahim Kalkan\", Title = \"Software Architect\" };| Assert.True(m1.EntityEquals(w1), \"Derived classes must be equal if their Ids are equal\");| var d1 = new Department { Id = 5, Name = \"IVR\" };| Assert.False(m1.EntityEquals(d1), \"Different classes must not be considered as equal even if their Ids are equal!\");| var w5 = w1;| w5.Id = 6;| Assert.True(w5.EntityEquals(w1), \"Same object instance must be equal.\");| }"
      },
      {
        "name": "IsTransient_Works",
        "body": "{| var w1 = new Worker { Name = \"Halil ibrahim Kalkan\" };| var w2 = new Worker { Id = 5, Name = \"Halil ibrahim Kalkan\" };| Assert.True(w1.IsTransient());| Assert.False(w2.IsTransient());| }"
      },
      {
        "name": "GetHashCode_ReferenceIdNull",
        "body": "{| var e1 = new StringEntity();| var dic = new Dictionary<StringEntity, string>| {| {e1, string.Empty}| };| | var a = dic[e1];| Assert.Equal(a, string.Empty);| }"
      }
    ]
  },
  {
    "file": "InnerUnitOfWorkCompleteHandle_Test.cs",
    "methods": [
      {
        "name": "Should_Not_Throw_Exception_If_Complete_Called",
        "body": "{| using (var uow = new InnerUnitOfWorkCompleteHandle())| {| uow.Complete();| }| }"
      },
      {
        "name": "Should_Throw_Exception_If_Complete_Did_Not_Called",
        "body": "{| Assert.Throws<AbpException>(() =>| {| using (var uow = new InnerUnitOfWorkCompleteHandle())| {| }| }).Message.ShouldBe(InnerUnitOfWorkCompleteHandle.DidNotCallCompleteMethodExceptionMessage);| }"
      },
      {
        "name": "Should_Not_Override_Exception_If_Exception_Is_Thrown_By_User",
        "body": "{| Assert.Throws<Exception>(| new Action(() =>| {| using (var uow = new InnerUnitOfWorkCompleteHandle())| {| throw new Exception(\"My inner exception!\");| }| })).Message.ShouldBe(\"My inner exception!\");| }"
      }
    ]
  },
  {
    "file": "UnitOfWorkManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Call_Uow_Methods",
        "body": "{| var fakeUow = Substitute.For<IUnitOfWork>();| LocalIocManager.IocContainer.Register(| Component.For<IUnitOfWorkDefaultOptions>().ImplementedBy<UnitOfWorkDefaultOptions>().LifestyleSingleton(),| Component.For<IUnitOfWorkManager>().ImplementedBy<UnitOfWorkManager>().LifestyleSingleton(),| Component.For<IUnitOfWork>().Instance(fakeUow).LifestyleSingleton(),| Component.For<ICurrentUnitOfWorkProvider>().ImplementedBy<AsyncLocalCurrentUnitOfWorkProvider>().LifestyleSingleton()| );| var uowManager = LocalIocManager.Resolve<IUnitOfWorkManager>();| //Starting the first uow| using (var uow1 = uowManager.Begin())| {| //so, begin will be called| fakeUow.Received(1).Begin(Arg.Any<UnitOfWorkOptions>());| //trying to begin a uow (not starting a new one, using the outer)| using (var uow2 = uowManager.Begin())| {| //Since there is a current uow, begin is not called| fakeUow.Received(1).Begin(Arg.Any<UnitOfWorkOptions>());| uow2.Complete();| //complete has no effect since outer uow should complete it| fakeUow.DidNotReceive().Complete();| }| //trying to begin a uow (forcing to start a NEW one)| using (var uow2 = uowManager.Begin(TransactionScopeOption.RequiresNew))| {| //So, begin is called again to create an inner uow| fakeUow.Received(2).Begin(Arg.Any<UnitOfWorkOptions>());| uow2.Complete();| //And the inner uow should be completed| fakeUow.Received(1).Complete();| }| //complete the outer uow| uow1.Complete();| }| fakeUow.Received(2).Complete();| fakeUow.Received(2).Dispose();| }"
      }
    ]
  },
  {
    "file": "ValueObject_Simple_Tests.cs",
    "methods": [
      {
        "name": "Value_Objects_Should_Be_Same_If_Contains_Same_Data",
        "body": "{| var address1 = new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);| var address2 = new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);| Assert.True(address1.ValueEquals(address2));| Assert.True(address2.ValueEquals(address1));| }"
      },
      {
        "name": "Value_Objects_Should_Not_Be_Same_If_Contains_Different_Data",
        "body": "{| Assert.False(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5A0\"), \"Baris Manco Street\", 42))| );| Assert.False(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Streettt\", 42).ValueEquals(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42))| );| Assert.False(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(| new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 45))| );| }"
      },
      {
        "name": "Value_Objects_Should_Not_Be_Same_If_One_Of_Them_Is_Null",
        "body": "{| Assert.False(new Address(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42).ValueEquals(null));| }"
      },
      {
        "name": "Value_Object_Nullable_Guid_Property_Test",
        "body": "{| var anAddress = new Address2(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);| var anotherAddress = new Address2(null, \"Another street\", 42);| Assert.False(anAddress.ValueEquals(anotherAddress));| Assert.False(anotherAddress.ValueEquals(anAddress));| }"
      },
      {
        "name": "Value_Object_Should_Be_Same_If_Ignored_Property_Diff",
        "body": "{| var address1 = new Address3(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);| var address2 = new Address3(null, \"Baris Manco Street\", 42);| Assert.True(address1.ValueEquals(address2));| Assert.True(address2.ValueEquals(address1));| }"
      },
      {
        "name": "Value_Object_Should__Not_Be_Same_If_NotIgnored_Property_Diff",
        "body": "{| var address1 = new Address3(new Guid(\"21C67A65-ED5A-4512-AA29-66308FAAB5AF\"), \"Baris Manco Street\", 42);| var address2 = new Address3(null, \"Another street\", 42);| Assert.False(address1.ValueEquals(address2));| Assert.False(address2.ValueEquals(address1));| }"
      }
    ]
  },
  {
    "file": "ActionBasedEventHandlerTest.cs",
    "methods": [
      {
        "name": "Should_Call_Action_On_Event_With_Correct_Source",
        "body": "{| var totalData = 0;| EventBus.Register<MySimpleEventData>(| eventData =>| {| totalData += eventData.Value;| Assert.Equal(this, eventData.EventSource);| });| EventBus.Trigger(this, new MySimpleEventData(1));| EventBus.Trigger(this, new MySimpleEventData(2));| EventBus.Trigger(this, new MySimpleEventData(3));| EventBus.Trigger(this, new MySimpleEventData(4));| Assert.Equal(10, totalData);| }"
      },
      {
        "name": "Should_Call_Handler_With_Non_Generic_Trigger",
        "body": "{| var totalData = 0;| EventBus.Register<MySimpleEventData>(| eventData =>| {| totalData += eventData.Value;| Assert.Equal(this, eventData.EventSource);| });| EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(1));| EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(2));| EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(3));| EventBus.Trigger(typeof(MySimpleEventData), this, new MySimpleEventData(4));| Assert.Equal(10, totalData);| }"
      },
      {
        "name": "Should_Not_Call_Action_After_Unregister_1",
        "body": "{| var totalData = 0;| var registerDisposer = EventBus.Register<MySimpleEventData>(| eventData =>| {| totalData += eventData.Value;| });| EventBus.Trigger(this, new MySimpleEventData(1));| EventBus.Trigger(this, new MySimpleEventData(2));| EventBus.Trigger(this, new MySimpleEventData(3));| registerDisposer.Dispose();| EventBus.Trigger(this, new MySimpleEventData(4));| Assert.Equal(6, totalData);| }"
      },
      {
        "name": "Should_Not_Call_Action_After_Unregister_2",
        "body": "{| var totalData = 0;| var action = new Action<MySimpleEventData>(| eventData =>| {| totalData += eventData.Value;| });| EventBus.Register(action);| EventBus.Trigger(this, new MySimpleEventData(1));| EventBus.Trigger(this, new MySimpleEventData(2));| EventBus.Trigger(this, new MySimpleEventData(3));| EventBus.Unregister(action);| EventBus.Trigger(this, new MySimpleEventData(4));| Assert.Equal(6, totalData);| }"
      },
      {
        "name": "Task",
        "body": "{| int totalData = 0;| EventBus.AsyncRegister<MySimpleEventData>(| async eventData =>| {| await Task.Delay(20);| Interlocked.Add(ref totalData, eventData.Value);| await Task.Delay(20);| Assert.Equal(this, eventData.EventSource);| });| await EventBus.TriggerAsync(this, new MySimpleEventData(1));| await EventBus.TriggerAsync(this, new MySimpleEventData(2));| await EventBus.TriggerAsync(this, new MySimpleEventData(3));| await EventBus.TriggerAsync(this, new MySimpleEventData(4));| Assert.Equal(10, totalData);| }"
      }
    ]
  },
  {
    "file": "EventBus_Exception_Test.cs",
    "methods": [
      {
        "name": "Should_Throw_Single_Exception_If_Only_One_Of_Handlers_Fails",
        "body": "{| EventBus.Register<MySimpleEventData>(| eventData => throw new Exception(\"This exception is intentionally thrown!\")| );| var appException = Assert.Throws<Exception>(() =>| {| EventBus.Trigger<MySimpleEventData>(null, new MySimpleEventData(1));| });| appException.Message.ShouldBe(\"This exception is intentionally thrown!\");| }"
      },
      {
        "name": "Should_Throw_Aggregate_Exception_If_More_Than_One_Of_Handlers_Fail",
        "body": "{| EventBus.Register<MySimpleEventData>(| eventData => throw new Exception(\"This exception is intentionally thrown #1!\")| );| EventBus.Register<MySimpleEventData>(| eventData => throw new Exception(\"This exception is intentionally thrown #2!\")| );| var aggrException = Assert.Throws<AggregateException>(() =>| {| EventBus.Trigger<MySimpleEventData>(null, new MySimpleEventData(1));| });| aggrException.InnerExceptions.Count.ShouldBe(2);| aggrException.InnerExceptions[0].Message.ShouldBe(\"This exception is intentionally thrown #1!\");| aggrException.InnerExceptions[1].Message.ShouldBe(\"This exception is intentionally thrown #2!\");| }"
      }
    ]
  },
  {
    "file": "EventBus_MultipleHandle_Test.cs",
    "methods": [
      {
        "name": "Should_Call_Created_And_Changed_Once",
        "body": "{| var handler = new MyEventHandler();| EventBus.Register<EntityChangedEventData<MyEntity>>(handler);| EventBus.Register<EntityCreatedEventData<MyEntity>>(handler);| var asyncHandler = new MyAsyncEventHandler();| EventBus.AsyncRegister<EntityChangedEventData<MyEntity>>(asyncHandler);| EventBus.AsyncRegister<EntityCreatedEventData<MyEntity>>(asyncHandler);| EventBus.Trigger(new EntityCreatedEventData<MyEntity>(new MyEntity()));| handler.EntityCreatedEventCount.ShouldBe(1);| handler.EntityChangedEventCount.ShouldBe(1);| asyncHandler.EntityCreatedEventCount.ShouldBe(1);| asyncHandler.EntityChangedEventCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "EventRegisterUnregisterTest.cs",
    "methods": [
      {
        "name": "EventBustTest_UnregisterWhileHandlingEvent_ShouldNotThrow",
        "body": "{| // Arrange| Func<MyEvent, Task> eventHandler = async (axel) => await axel.Semaphore.WaitAsync();| eventBus.AsyncRegister(eventHandler);| var myEvent = new MyEvent();| // Act| var triggerTask = eventBus.TriggerAsync(myEvent);| eventBus.AsyncUnregister(eventHandler);| myEvent.Semaphore.Release();| // Assert| Should.NotThrow(async () => await triggerTask);| }"
      }
    ]
  },
  {
    "file": "GenericInheritanceTest.cs",
    "methods": [
      {
        "name": "Should_Trigger_For_Inherited_Generic_1",
        "body": "{| var triggeredEvent = false;| EventBus.Register<EntityChangedEventData<Person>>(| eventData =>| {| eventData.Entity.Id.ShouldBe(42);| triggeredEvent = true;| });| EventBus.Trigger(new EntityUpdatedEventData<Person>(new Person { Id = 42 }));| triggeredEvent.ShouldBe(true);| }"
      },
      {
        "name": "Should_Trigger_For_Inherited_Generic_2",
        "body": "{| var triggeredEvent = false;| EventBus.Register<EntityChangedEventData<Person>>(| eventData =>| {| eventData.Entity.Id.ShouldBe(42);| triggeredEvent = true;| });| EventBus.Trigger(new EntityChangedEventData<Student>(new Student { Id = 42 }));| triggeredEvent.ShouldBe(true);| }"
      }
    ]
  },
  {
    "file": "InheritanceTest.cs",
    "methods": [
      {
        "name": "Should_Handle_Events_For_Derived_Classes",
        "body": "{| var totalData = 0;| EventBus.Register<MySimpleEventData>(| eventData =>| {| totalData += eventData.Value;| Assert.Equal(this, eventData.EventSource);| });| EventBus.Trigger(this, new MySimpleEventData(1)); //Should handle directly registered class| EventBus.Trigger(this, new MySimpleEventData(2)); //Should handle directly registered class| EventBus.Trigger(this, new MyDerivedEventData(3)); //Should handle derived class too| EventBus.Trigger(this, new MyDerivedEventData(4)); //Should handle derived class too| Assert.Equal(10, totalData);| }"
      },
      {
        "name": "Should_Not_Handle_Events_For_Base_Classes",
        "body": "{| var totalData = 0;| EventBus.Register<MyDerivedEventData>(| eventData =>| {| totalData += eventData.Value;| Assert.Equal(this, eventData.EventSource);| });| EventBus.Trigger(this, new MySimpleEventData(1)); //Should not handle| EventBus.Trigger(this, new MySimpleEventData(2)); //Should not handle| EventBus.Trigger(this, new MyDerivedEventData(3)); //Should handle| EventBus.Trigger(this, new MyDerivedEventData(4)); //Should handle| Assert.Equal(7, totalData);| }"
      }
    ]
  },
  {
    "file": "TransientDisposableEventHandlerTest.cs",
    "methods": [
      {
        "name": "Should_Call_Handler_AndDispose",
        "body": "{| EventBus.Register<MySimpleEventData, MySimpleTransientEventHandler>();| EventBus.Register<MySimpleEventData, MySimpleTransientAsyncEventHandler>();| EventBus.Trigger(new MySimpleEventData(1));| EventBus.Trigger(new MySimpleEventData(2));| EventBus.Trigger(new MySimpleEventData(3));| Assert.Equal(3, MySimpleTransientEventHandler.HandleCount);| Assert.Equal(3, MySimpleTransientEventHandler.DisposeCount);| Assert.Equal(3, MySimpleTransientAsyncEventHandler.HandleCount);| Assert.Equal(3, MySimpleTransientAsyncEventHandler.DisposeCount);| }"
      }
    ]
  },
  {
    "file": "GenericMethodCallTests.cs",
    "methods": [
      {
        "name": "Test_Method_BaseEvent_BaseArg",
        "body": "{| Method_BaseEvent_BaseArg(new EntityEventData<Person>(new Person())); //TODO: <Student>| Method_BaseEvent_BaseArg(new EntityEventData<Person>(new Student())); //TODO: <Student>| Method_BaseEvent_BaseArg(new EntityUpdatedEventData<Person>(new Person())); //TODO: <Student>| Method_BaseEvent_BaseArg(new EntityUpdatedEventData<Person>(new Student())); //TODO: <Student>| }"
      },
      {
        "name": "Test_Method_BaseEvent_DerivedArg",
        "body": "{| Method_BaseEvent_DerivedArg(new EntityEventData<Student>(new Student()));| Method_BaseEvent_DerivedArg(new EntityUpdatedEventData<Student>(new Student()));| }"
      },
      {
        "name": "Test_Method_DerivedEvent_BaseArg",
        "body": "{| Method_DerivedEvent_BaseArg(new EntityUpdatedEventData<Person>(new Person()));| Method_DerivedEvent_BaseArg(new EntityUpdatedEventData<Person>(new Student()));| }"
      },
      {
        "name": "Test_Method_DerivedEvent_DerivedArg",
        "body": "{| Method_DerivedEvent_DerivedArg(new EntityUpdatedEventData<Student>(new Student()));| }"
      }
    ]
  },
  {
    "file": "ComparableExtensions_Tests.cs",
    "methods": [
      {
        "name": "IsBetween_Test",
        "body": "{| //Number| var number = 5;| number.IsBetween(1, 10).ShouldBe(true);| number.IsBetween(1, 5).ShouldBe(true);| number.IsBetween(5, 10).ShouldBe(true);| number.IsBetween(10, 20).ShouldBe(false);| //DateTime| var dateTimeValue = new DateTime(2014, 10, 4, 18, 20, 42, 0);| dateTimeValue.IsBetween(new DateTime(2014, 1, 1), new DateTime(2015, 1, 1)).ShouldBe(true);| dateTimeValue.IsBetween(new DateTime(2015, 1, 1), new DateTime(2016, 1, 1)).ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "DateTimeExtensions_Tests.cs",
    "methods": [
      {
        "name": "ToUnixTimestamp_Test",
        "body": "{| var timestamp = new DateTime(1980, 11, 20).ToUnixTimestamp();| timestamp.ShouldBe(343526400);| }"
      },
      {
        "name": "FromUnixTimestamp_Test",
        "body": "{| var date = 343526400d.FromUnixTimestamp();| date.ShouldBe(new DateTime(1980, 11, 20));| }"
      },
      {
        "name": "ToDayEnd_Test",
        "body": "{| var now = Clock.Now;| var dateEnd = now.ToDayEnd();| dateEnd.ShouldBe(now.Date.AddDays(1).AddMilliseconds(-1));| }"
      },
      {
        "name": "StartOfWeek_Test",
        "body": "{| var startOfWeekSunday = new DateTime(1980, 11, 20).StartOfWeek(DayOfWeek.Sunday);| startOfWeekSunday.ShouldBe(new DateTime(1980, 11, 16));| var startOfWeekMonday = new DateTime(1980, 11, 20).StartOfWeek(DayOfWeek.Monday);| startOfWeekMonday.ShouldBe(new DateTime(1980, 11, 17));| }"
      },
      {
        "name": "DaysOfMonth_Test",
        "body": "{| var days = DateTimeExtensions.DaysOfMonth(2018, 1);| days.ShouldNotBeNull();| days.Count().ShouldBe(31);| }"
      },
      {
        "name": "WeekDayInstanceOfMonth_Test",
        "body": "{| var instance = new DateTime(2011, 11, 29).WeekDayInstanceOfMonth();| instance.ShouldBe(5);| }"
      },
      {
        "name": "TotalDaysInMonth_Test",
        "body": "{| var totalDays = new DateTime(2018, 1, 15).TotalDaysInMonth();| totalDays.ShouldBe(31);| }"
      },
      {
        "name": "ToDateTimeUnspecified_Test",
        "body": "{| var localTime = Clock.Now;| var unspecified = localTime.ToDateTimeUnspecified();| unspecified.Kind.ShouldBe(DateTimeKind.Unspecified);| }"
      },
      {
        "name": "TrimMilliseconds_Test",
        "body": "{| var now = Clock.Now;| var trimmed = now.TrimMilliseconds();| trimmed.Millisecond.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "DateTimeRange_Tests.cs",
    "methods": [
      {
        "name": "StaticRanges_Test",
        "body": "{| DateTimeRange.Today.StartTime.ShouldBeGreaterThan(DateTimeRange.Yesterday.EndTime);| DateTimeRange.Today.EndTime.ShouldBeLessThan(DateTimeRange.Tomorrow.StartTime);| DateTimeRange.ThisMonth.StartTime.Day.ShouldBe(1);| DateTimeRange.LastMonth.StartTime.Day.ShouldBe(1);| DateTimeRange.NextMonth.StartTime.Day.ShouldBe(1);| DateTimeRange.ThisMonth.StartTime.ShouldBeGreaterThan(DateTimeRange.LastMonth.EndTime);| DateTimeRange.ThisMonth.EndTime.ShouldBeLessThan(DateTimeRange.NextMonth.EndTime);| DateTimeRange.ThisYear.StartTime.Month.ShouldBe(1);| DateTimeRange.ThisYear.StartTime.Day.ShouldBe(1);| | DateTimeRange.ThisYear.StartTime.ShouldBeGreaterThan(DateTimeRange.LastYear.EndTime);| DateTimeRange.ThisYear.EndTime.ShouldBeLessThan(DateTimeRange.NextYear.StartTime);| DateTimeRange.Last7DaysExceptToday.EndTime.ShouldBeLessThan(DateTimeRange.Today.StartTime);| DateTimeRange.Last30DaysExceptToday.EndTime.ShouldBeLessThan(DateTimeRange.Today.StartTime);| }"
      },
      {
        "name": "DaysInRange_Test",
        "body": "{| var now = Clock.Now;| var dateTimeRange = new DateTimeRange(now.Date, now.Date.AddDays(1));| var days = dateTimeRange.DaysInRange();| days.ShouldNotBeNull();| days.Count().ShouldBe(1);| days.Single().ShouldBe(now.Date);| var year = new DateTime(2018,1,1);| var yearRange = new DateTimeRange(year, year.AddYears(1));| var yearDays = yearRange.DaysInRange();| yearDays.ShouldNotBeNull();| yearDays.Count().ShouldBe(365);| yearDays.FirstOrDefault().ShouldBe(year);| }"
      }
    ]
  },
  {
    "file": "DayOfWeekExtensions_Tests.cs",
    "methods": [
      {
        "name": "Weekend_Weekday_Test",
        "body": "{| DayOfWeek.Monday.IsWeekday().ShouldBe(true);| DayOfWeek.Monday.IsWeekend().ShouldBe(false);| DayOfWeek.Saturday.IsWeekend().ShouldBe(true);| DayOfWeek.Saturday.IsWeekday().ShouldBe(false);| var datetime1 = new DateTime(2014, 10, 5, 16, 37, 25); //Sunday| var datetime2 = new DateTime(2014, 10, 7, 16, 37, 25); //Tuesday| datetime1.DayOfWeek.IsWeekend().ShouldBe(true);| datetime2.DayOfWeek.IsWeekend().ShouldBe(false);| datetime1.DayOfWeek.IsWeekday().ShouldBe(false);| datetime2.DayOfWeek.IsWeekday().ShouldBe(true);| }"
      },
      {
        "name": "FindNthWeekDayOfMonth_Test",
        "body": "{| var firstMondayOfJan2018 = DayOfWeek.Monday.FindNthWeekDayOfMonth(2018, 1, 1);| firstMondayOfJan2018.ShouldBe(new DateTime(2018, 1, 1));| var secondFridayOfJan2018 = DayOfWeek.Friday.FindNthWeekDayOfMonth(2018, 1, 2);| secondFridayOfJan2018.ShouldBe(new DateTime(2018, 1, 12));| var lastSundayOfJan2018 = DayOfWeek.Sunday.FindNthWeekDayOfMonth(2018, 1, 5);| lastSundayOfJan2018.ShouldBe(new DateTime(2018, 1, 28));| var lastWednesdayOfJan2018 = DayOfWeek.Wednesday.FindNthWeekDayOfMonth(2018, 1, 5);| lastWednesdayOfJan2018.ShouldBe(new DateTime(2018, 1, 31));| }"
      },
      {
        "name": "TotalInstancesInMonth_Test",
        "body": "{| var totalSundaysInJan2018 = DayOfWeek.Sunday.TotalInstancesInMonth(2018, 1);| totalSundaysInJan2018.ShouldBe(4);| var totalWednesdaysInJan2018 = DayOfWeek.Wednesday.TotalInstancesInMonth(2018, 1);| totalWednesdaysInJan2018.ShouldBe(5);| }"
      }
    ]
  },
  {
    "file": "ObjectExtension_Test.cs",
    "methods": [
      {
        "name": "As_Test",
        "body": "{| var obj = (object)new ObjectExtensions_Tests();| obj.As<ObjectExtensions_Tests>().ShouldNotBe(null);| obj = null;| obj.As<ObjectExtensions_Tests>().ShouldBe(null);| }"
      },
      {
        "name": "To_Tests",
        "body": "{| \"42\".To<int>().ShouldBeOfType<int>().ShouldBe(42);| \"42\".To<Int32>().ShouldBeOfType<Int32>().ShouldBe(42);| \"28173829281734\".To<long>().ShouldBeOfType<long>().ShouldBe(28173829281734);| \"28173829281734\".To<Int64>().ShouldBeOfType<Int64>().ShouldBe(28173829281734);| \"2.0\".To<double>().ShouldBe(2.0);| \"0.2\".To<double>().ShouldBe(0.2);| (2.0).To<int>().ShouldBe(2);| \"false\".To<bool>().ShouldBeOfType<bool>().ShouldBe(false);| \"True\".To<bool>().ShouldBeOfType<bool>().ShouldBe(true);| \"2260afec-bbfd-42d4-a91a-dcb11e09b17f\".To<Guid>().ShouldBeOfType<Guid>().ShouldBe(new Guid(\"2260afec-bbfd-42d4-a91a-dcb11e09b17f\"));| \"ABC\".To<TestEnum>().ShouldBe(TestEnum.ABC);| \"BDE\".To<TestEnum>().ShouldBe(TestEnum.BDE);| \"08:00:00\".To<TimeSpan>().ShouldBe(TimeSpan.FromHours(8));| \"1\".To<TimeSpan>().ShouldBe(TimeSpan.FromDays(1));| \"1:0\".To<TimeSpan>().ShouldBe(TimeSpan.FromHours(1));| \"0:0:1\".To<TimeSpan>().ShouldBe(TimeSpan.FromSeconds(1));| \"0:0:0.5\".To<TimeSpan>().ShouldBe(TimeSpan.FromMilliseconds(500));| Assert.Throws<FormatException>(() => \"test\".To<bool>());| Assert.Throws<FormatException>(() => \"test\".To<int>());| Assert.Throws<FormatException>(() => \"a\".To<TimeSpan>());| Assert.Throws<ArgumentException>(() => \"0\".To<TestEnum>());| Assert.Throws<ArgumentException>(() => \"abc\".To<TestEnum>());| }"
      },
      {
        "name": "IsIn_Test",
        "body": "{| 5.IsIn(1, 3, 5, 7).ShouldBe(true);| 6.IsIn(1, 3, 5, 7).ShouldBe(false);| int? number = null;| number.IsIn(2, 3, 5).ShouldBe(false);| var str = \"a\";| str.IsIn(\"a\", \"b\", \"c\").ShouldBe(true);| str = null;| str.IsIn(\"a\", \"b\", \"c\").ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "StringExtensions_Tests.cs",
    "methods": [
      {
        "name": "EnsureEndsWith_Test",
        "body": "{| //Expected use-cases| \"Test\".EnsureEndsWith('!').ShouldBe(\"Test!\");| \"Test!\".EnsureEndsWith('!').ShouldBe(\"Test!\");| @\"C:\\test\\folderName\".EnsureEndsWith('\\\\').ShouldBe(@\"C:\\test\\folderName\\\");| @\"C:\\test\\folderName\\\".EnsureEndsWith('\\\\').ShouldBe(@\"C:\\test\\folderName\\\");| //Case differences| \"TurkeY\".EnsureEndsWith('y').ShouldBe(\"TurkeYy\");| \"TurkeY\".EnsureEndsWith('y', StringComparison.OrdinalIgnoreCase).ShouldBe(\"TurkeY\");| //Edge cases for Turkish 'i'.| \"TAKSİ\".EnsureEndsWith('i', true, new CultureInfo(\"tr-TR\")).ShouldBe(\"TAKSİ\");| \"TAKSİ\".EnsureEndsWith('i', false, new CultureInfo(\"tr-TR\")).ShouldBe(\"TAKSİi\");| }"
      },
      {
        "name": "EnsureStartsWith_Test",
        "body": "{| //Expected use-cases| \"Test\".EnsureStartsWith('~').ShouldBe(\"~Test\");| \"~Test\".EnsureStartsWith('~').ShouldBe(\"~Test\");| //Case differences| \"Turkey\".EnsureStartsWith('t').ShouldBe(\"tTurkey\");| \"Turkey\".EnsureStartsWith('t', StringComparison.OrdinalIgnoreCase).ShouldBe(\"Turkey\");| //Edge cases for Turkish 'i'.| \"İstanbul\".EnsureStartsWith('i', true, new CultureInfo(\"tr-TR\")).ShouldBe(\"İstanbul\");| \"İstanbul\".EnsureStartsWith('i', false, new CultureInfo(\"tr-TR\")).ShouldBe(\"iİstanbul\");| }"
      },
      {
        "name": "ToPascalCase_Test",
        "body": "{| (null as string).ToPascalCase().ShouldBe(null);| \"helloWorld\".ToPascalCase().ShouldBe(\"HelloWorld\");| \"istanbul\".ToPascalCase().ShouldBe(\"Istanbul\");| \"istanbul\".ToPascalCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"İstanbul\");| }"
      },
      {
        "name": "ToCamelCase_Test",
        "body": "{| (null as string).ToCamelCase().ShouldBe(null);| \"HelloWorld\".ToCamelCase().ShouldBe(\"helloWorld\");| \"Istanbul\".ToCamelCase().ShouldBe(\"istanbul\");| \"Istanbul\".ToCamelCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"ıstanbul\");| \"İstanbul\".ToCamelCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"istanbul\");| }"
      },
      {
        "name": "ToSentenceCase_Test",
        "body": "{| (null as string).ToSentenceCase().ShouldBe(null);| \"HelloWorld\".ToSentenceCase().ShouldBe(\"Hello world\");| using (CultureInfoHelper.Use(\"en-US\"))| {| \"HelloIsparta\".ToSentenceCase().ShouldBe(\"Hello isparta\");| }| \"HelloIsparta\".ToSentenceCase(new CultureInfo(\"tr-TR\")).ShouldBe(\"Hello ısparta\");| }"
      },
      {
        "name": "Right_Test",
        "body": "{| const string str = \"This is a test string\";| str.Right(3).ShouldBe(\"ing\");| str.Right(0).ShouldBe(\"\");| str.Right(str.Length).ShouldBe(str);| }"
      },
      {
        "name": "Left_Test",
        "body": "{| const string str = \"This is a test string\";| str.Left(3).ShouldBe(\"Thi\");| str.Left(0).ShouldBe(\"\");| str.Left(str.Length).ShouldBe(str);| }"
      },
      {
        "name": "NormalizeLineEndings_Test",
        "body": "{| const string str = \"This\\r\\n is a\\r test \\n string\";| var normalized = str.NormalizeLineEndings();| var lines = normalized.SplitToLines();| lines.Length.ShouldBe(4);| }"
      },
      {
        "name": "NthIndexOf_Test",
        "body": "{| const string str = \"This is a test string\";| str.NthIndexOf('i', 0).ShouldBe(-1);| str.NthIndexOf('i', 1).ShouldBe(2);| str.NthIndexOf('i', 2).ShouldBe(5);| str.NthIndexOf('i', 3).ShouldBe(18);| str.NthIndexOf('i', 4).ShouldBe(-1);| }"
      },
      {
        "name": "Truncate_Test",
        "body": "{| const string str = \"This is a test string\";| const string nullValue = null;| str.Truncate(7).ShouldBe(\"This is\");| str.Truncate(0).ShouldBe(\"\");| str.Truncate(100).ShouldBe(str);| nullValue.Truncate(5).ShouldBe(null);| }"
      },
      {
        "name": "TruncateWithPostFix_Test",
        "body": "{| const string str = \"This is a test string\";| const string nullValue = null;| str.TruncateWithPostfix(3).ShouldBe(\"...\");| str.TruncateWithPostfix(12).ShouldBe(\"This is a...\");| str.TruncateWithPostfix(0).ShouldBe(\"\");| str.TruncateWithPostfix(100).ShouldBe(str);| nullValue.Truncate(5).ShouldBe(null);| str.TruncateWithPostfix(3, \"~\").ShouldBe(\"Th~\");| str.TruncateWithPostfix(12, \"~\").ShouldBe(\"This is a t~\");| str.TruncateWithPostfix(0, \"~\").ShouldBe(\"\");| str.TruncateWithPostfix(100, \"~\").ShouldBe(str);| nullValue.TruncateWithPostfix(5, \"~\").ShouldBe(null);| }"
      },
      {
        "name": "RemovePostFix_Tests",
        "body": "{| //null case| (null as string).RemovePreFix(\"Test\").ShouldBeNull();| //Simple case| \"MyTestAppService\".RemovePostFix(\"AppService\").ShouldBe(\"MyTest\");| \"MyTestAppService\".RemovePostFix(\"Service\").ShouldBe(\"MyTestApp\");| //Multiple postfix (orders of postfixes are important)| \"MyTestAppService\".RemovePostFix(\"AppService\", \"Service\").ShouldBe(\"MyTest\");| \"MyTestAppService\".RemovePostFix(\"Service\", \"AppService\").ShouldBe(\"MyTestApp\");| //Unmatched case| \"MyTestAppService\".RemovePostFix(\"Unmatched\").ShouldBe(\"MyTestAppService\");| }"
      },
      {
        "name": "RemovePreFix_Tests",
        "body": "{| \"Home.Index\".RemovePreFix(\"NotMatchedPostfix\").ShouldBe(\"Home.Index\");| \"Home.About\".RemovePreFix(\"Home.\").ShouldBe(\"About\");| }"
      },
      {
        "name": "ToEnum_Test",
        "body": "{| \"MyValue1\".ToEnum<MyEnum>().ShouldBe(MyEnum.MyValue1);| \"MyValue2\".ToEnum<MyEnum>().ShouldBe(MyEnum.MyValue2);| }"
      }
    ]
  },
  {
    "file": "EntityDtoSerialization_Tests.cs",
    "methods": [
      {
        "name": "Should_Serialize_Types_Derived_From_EntityDto",
        "body": "{| var obj = new MyClass1| {| Id = 42,| Value = new MyClass2| {| Id = 42| }| };| obj.ToJsonString().ShouldNotBeNull();| }"
      }
    ]
  },
  {
    "file": "JsonExtensions_Tests.cs",
    "methods": [
      {
        "name": "ToJsonString_Test",
        "body": "{| 42.ToJsonString().ShouldBe(\"42\");| }"
      },
      {
        "name": "ToJsonString_Not_Normalize_DateTime_Test",
        "body": "{| Clock.Provider = ClockProviders.Utc;| var model1 = new MyClass1| {| Date = new DateTime(2016, 03, 16, 14, 0, 0, DateTimeKind.Local)| };| var model1AsString = model1.ToJsonString();| var date1 = model1AsString.Replace(\"{\\\"Date\\\":\", \"\").Replace(\"\\\"}\", \"\").Replace(\"\\\"\", \"\");| date1.ShouldNotEndWith(\"00Z\");| var model2 = new MyClass2| {| Date = new DateTime(2016, 03, 16, 14, 0, 0, DateTimeKind.Local)| };| var model2AsString = model2.ToJsonString();| var date2 = model2AsString.Replace(\"{\\\"Date\\\":\", \"\").Replace(\"\\\"}\", \"\").Replace(\"\\\"\", \"\");| date2.ShouldNotEndWith(\"00Z\");| }"
      }
    ]
  },
  {
    "file": "JsonSerializationHelper_Tests.cs",
    "methods": [
      {
        "name": "Should_Simply_Serialize_And_Deserialize",
        "body": "{| var str = JsonSerializationHelper.SerializeWithType(new LocalizableString(\"Foo\", \"Bar\"));| var result = (LocalizableString)JsonSerializationHelper.DeserializeWithType(str);| result.ShouldNotBeNull();| result.Name.ShouldBe(\"Foo\");| result.SourceName.ShouldBe(\"Bar\");| }"
      },
      {
        "name": "Should_Deserialize_With_Different_Assembly_Version",
        "body": "{| var str = \"Abp.Localization.LocalizableString, Abp, Version=1.5.1.0, Culture=neutral, PublicKeyToken=null|{\\\"SourceName\\\":\\\"Bar\\\",\\\"Name\\\":\\\"Foo\\\"}\";| var result = (LocalizableString)JsonSerializationHelper.DeserializeWithType(str);| result.ShouldNotBeNull();| result.Name.ShouldBe(\"Foo\");| result.SourceName.ShouldBe(\"Bar\");| }"
      },
      {
        "name": "Should_Deserialize_With_DateTime",
        "body": "{| Clock.Provider = ClockProviders.Utc;| var str = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass2, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";| var result = (MyClass2)JsonSerializationHelper.DeserializeWithType(str);| result.ShouldNotBeNull();| result.Date.ShouldBe(new DateTime(2016, 04, 13, 08, 58, 10, 526, Clock.Kind));| result.Date.Kind.ShouldBe(Clock.Kind);| }"
      },
      {
        "name": "Should_Deserialize_Without_DateTime_Normalization",
        "body": "{| Clock.Provider = ClockProviders.Utc;| var str1 = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass3, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";| var result1 = (MyClass3)JsonSerializationHelper.DeserializeWithType(str1);| result1.ShouldNotBeNull();| result1.Date.Kind.ShouldBe(DateTimeKind.Local);| var str2 = \"Abp.Tests.Json.JsonSerializationHelper_Tests+MyClass4, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null|{\\\"Date\\\":\\\"2016-04-13T16:58:10.526+08:00\\\"}\";| var result2 = (MyClass4)JsonSerializationHelper.DeserializeWithType(str2);| result2.ShouldNotBeNull();| result2.Date.Kind.ShouldBe(DateTimeKind.Local);| }"
      }
    ]
  },
  {
    "file": "AbpNullableFromEmptyStringConverterFactory_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpNullableFromEmptyStringConverterFactory()| }| };| var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Prop1\\\": \\\"\\\", \\\"Prop2\\\": \\\"\\\", \\\"Prop3\\\": \\\"\\\", \\\"Prop4\\\": \\\"\\\", \\\"Prop5\\\": \\\"\\\"}\", options);| testClass.ShouldNotBeNull();| testClass.Prop1.ShouldBeNull();| testClass.Prop2.ShouldBeNull();| testClass.Prop3.ShouldBeNull();| testClass.Prop4.ShouldBeNull();| testClass.Prop5.ShouldBe(\"\");| }"
      },
      {
        "name": "Test_Write",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToBooleanConverter()| }| };| var testClassJson = JsonSerializer.Serialize(new TestClass()| {| Prop1 = null,| Prop2 = null,| Prop3 = null,| Prop4 = null,| Prop5 = \"\"| }, options);| testClassJson.ShouldBe(\"{\\\"Prop1\\\":null,\\\"Prop2\\\":null,\\\"Prop3\\\":null,\\\"Prop4\\\":null,\\\"Prop5\\\":\\\"\\\"}\");| }"
      }
    ]
  },
  {
    "file": "AbpStringToBoolean_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToBooleanConverter()| }| };| var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Enabled\\\": \\\"TrUe\\\"}\", options);| testClass.ShouldNotBeNull();| testClass.Enabled.ShouldBe(true);| testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Enabled\\\": true}\", options);| testClass.ShouldNotBeNull();| testClass.Enabled.ShouldBe(true);| }"
      },
      {
        "name": "Test_Write",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToBooleanConverter()| }| };| var testClassJson = JsonSerializer.Serialize(new TestClass()| {| Enabled = true| });| testClassJson.ShouldBe(\"{\\\"Enabled\\\":true}\");| }"
      }
    ]
  },
  {
    "file": "AbpStringToEnum_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToEnumFactory()| }| };| var testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Day\\\": \\\"Monday\\\"}\", options);| testClass.ShouldNotBeNull();| testClass.Day.ShouldBe(DayOfWeek.Monday);| testClass = JsonSerializer.Deserialize<TestClass>(\"{\\\"Day\\\": 1}\", options);| testClass.ShouldNotBeNull();| testClass.Day.ShouldBe(DayOfWeek.Monday);| var dictionary = JsonSerializer.Deserialize<Dictionary<DayOfWeek, string>>(\"{\\\"Monday\\\":\\\"Mo\\\"}\", options);| dictionary.ShouldNotBeNull();| dictionary.Keys.ShouldContain(DayOfWeek.Monday);| dictionary.Values.ShouldContain(\"Mo\");| dictionary = JsonSerializer.Deserialize<Dictionary<DayOfWeek, string>>(\"{\\\"1\\\":\\\"Mo\\\"}\", options);| dictionary.ShouldNotBeNull();| dictionary.Keys.ShouldContain(DayOfWeek.Monday);| dictionary.Values.ShouldContain(\"Mo\");| }"
      },
      {
        "name": "Test_Write",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToEnumFactory()| }| };| var testClassJson = JsonSerializer.Serialize(new TestClass()| {| Day = DayOfWeek.Monday| });| testClassJson.ShouldBe(\"{\\\"Day\\\":1}\");| testClassJson = JsonSerializer.Serialize(new Dictionary<DayOfWeek, string>| {| {DayOfWeek.Monday, \"Mo\"}| }, options);| testClassJson.ShouldBe(\"{\\\"Monday\\\":\\\"Mo\\\"}\");| }"
      }
    ]
  },
  {
    "file": "AbpStringToGuid_Tests.cs",
    "methods": [
      {
        "name": "Test_Read",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToGuidConverter(),| new AbpNullableStringToGuidConverter()| }| };| var guid = Guid.Parse(\"762DDB84-5225-4853-A566-FF0B3AF57585\");| var testClass = JsonSerializer.Deserialize<TestClass>(\"{\" +| $\"\\\"Id\\\": \\\"{guid:N}\\\", \" +| $\"\\\"NullableId\\\": \\\"{guid:D}\\\", \" +| $\"\\\"NullableId2\\\": \\\"{guid:B}\\\", \" +| $\"\\\"NullableId3\\\": \\\"{guid:P}\\\", \" +| $\"\\\"NullableId4\\\": \\\"{guid:X}\\\", \" +| \"\\\"NullableId5\\\": \\\"\\\", \" +| \"\\\"NullableId6\\\": null}\", options);| testClass.ShouldNotBeNull();| testClass.Id.ShouldBe(guid);| testClass.NullableId.ShouldBe(guid);| testClass.NullableId2.ShouldBe(guid);| testClass.NullableId3.ShouldBe(guid);| testClass.NullableId4.ShouldBe(guid);| testClass.NullableId5.ShouldBeNull();| testClass.NullableId6.ShouldBeNull();| }"
      },
      {
        "name": "Test_Write",
        "body": "{| var options = new JsonSerializerOptions()| {| Converters =| {| new AbpStringToGuidConverter(),| new AbpNullableStringToGuidConverter()| }| };| var guid = Guid.Parse(\"762DDB84-5225-4853-A566-FF0B3AF57585\");| var json = JsonSerializer.Serialize(new TestClass()| {| Id = guid,| NullableId = null,| NullableId2 = guid,| NullableId3 = null,| NullableId4 = guid,| NullableId5 = null,| NullableId6 = guid| }, options);| json.ShouldBe($\"{{\\\"Id\\\":\\\"{guid:D}\\\",\\\"NullableId\\\":null,\\\"NullableId2\\\":\\\"{guid:D}\\\",\\\"NullableId3\\\":null,\\\"NullableId4\\\":\\\"{guid:D}\\\",\\\"NullableId5\\\":null,\\\"NullableId6\\\":\\\"{guid:D}\\\"}}\");| }"
      }
    ]
  },
  {
    "file": "AbpSystemTextJsonExtensions_Tests.cs",
    "methods": [
      {
        "name": "Serialize_Deserialize_With_Boolean",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":\\\"fAlSe\\\"}\";| var file = json.FromJsonString<FileWithBoolean>();| file.Name.ShouldBe(\"abp\");| file.IsDeleted.ShouldBeFalse();| file.IsDeleted = false;| var newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":false}\");| }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Boolean",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":null}\";| var file = json.FromJsonString<FileWithNullableBoolean>();| file.Name.ShouldBe(\"abp\");| file.IsDeleted.ShouldBeNull();| var newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":null}\");| json = \"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":\\\"true\\\"}\";| file = json.FromJsonString<FileWithNullableBoolean>();| file.IsDeleted.ShouldNotBeNull();| file.IsDeleted.Value.ShouldBeTrue();| newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"IsDeleted\\\":true}\");| }"
      },
      {
        "name": "Serialize_Deserialize_With_Enum",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":\\\"Exe\\\"}\";| var file = json.FromJsonString<FileWithEnum>();| file.Name.ShouldBe(\"abp\");| file.Type.ShouldBe(FileType.Exe);| var newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":2}\");| }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Enum",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":null}\";| var file = json.FromJsonString<FileWithNullableEnum>();| file.Name.ShouldBe(\"abp\");| file.Type.ShouldBeNull();| var newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":null}\");| json = \"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":\\\"Exe\\\"}\";| file = json.FromJsonString<FileWithNullableEnum>();| file.Type.ShouldNotBeNull();| file.Type.ShouldBe(FileType.Exe);| newJson = file.ToJsonString();| newJson.ShouldBe(\"{\\\"Name\\\":\\\"abp\\\",\\\"Type\\\":2}\");| }"
      },
      {
        "name": "Serialize_Deserialize_With_Datetime",
        "body": "{| Clock.Provider = ClockProviders.Unspecified;| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";| var file = json.FromJsonString<FileWithDatetime>();| file.CreationTime.Year.ShouldBe(2020);| file.CreationTime.Month.ShouldBe(11);| file.CreationTime.Day.ShouldBe(20);| var newJson = file.ToJsonString();| newJson.ShouldBe(json);| }"
      },
      {
        "name": "Serialize_Deserialize_With_Nullable_Datetime",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":null}\";| var file = json.FromJsonString<FileWithNullableDatetime>();| file.CreationTime.ShouldBeNull();| json = \"{\\\"Name\\\":\\\"abp\\\"}\";| file = json.FromJsonString<FileWithNullableDatetime>();| file.CreationTime.ShouldBeNull();| json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";| file = json.FromJsonString<FileWithNullableDatetime>();| file.CreationTime.ShouldNotBeNull();| file.CreationTime.Value.Year.ShouldBe(2020);| file.CreationTime.Value.Month.ShouldBe(11);| file.CreationTime.Value.Day.ShouldBe(20);| var newJson = file.ToJsonString();| newJson.ShouldBe(json);| }"
      },
      {
        "name": "Serialize_Deserialize",
        "body": "{| var json = \"{\\\"Name\\\":\\\"abp\\\",\\\"CreationTime\\\":\\\"2020-11-20T00:00:00\\\"}\";| var file = json.FromJsonString<AbpSystemTextJsonExtensionsTests.FileWithDatetime>();| file.CreationTime.Kind.ShouldBe(Kind);| }"
      }
    ]
  },
  {
    "file": "PredicateBuilder_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{| var args = new TestArgs();| var predicate = PredicateBuilder.New<TestObj>();| predicate = predicate.And(t => args.Value == t.Value);| var func = predicate.Compile();| args.Value = true;| var r2 = func(new TestObj { Value = true });| r2.ShouldBeTrue();| args.Value = false;| var r1 = func(new TestObj { Value = false });| r1.ShouldBeTrue();| args = new TestArgs {Value = true};| var r3 = func(new TestObj { Value = false });| r3.ShouldBeFalse();| args = new TestArgs { Value = false };| var r4 = func(new TestObj { Value = false });| r4.ShouldBeTrue();| }"
      },
      {
        "name": "Test2",
        "body": "{| var args = new TestArgs();| var predicate = PredicateBuilder.New<TestObj>();| predicate = predicate.And(t => !args.Value);| var func = predicate.Compile();| args.Value = true;| var r2 = func(new TestObj { Value = true });| r2.ShouldBeFalse();| args.Value = false;| var r1 = func(new TestObj { Value = false });| r1.ShouldBeTrue();| args = new TestArgs { Value = true };| var r3 = func(new TestObj { Value = false });| r3.ShouldBeFalse();| args = new TestArgs { Value = false };| var r4 = func(new TestObj { Value = false });| r4.ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "DefaultLanguageProvider_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Languages",
        "body": "{| var languageProvider = LocalIocManager.Resolve<ILanguageProvider>();| var allLanguages = languageProvider.GetLanguages();| allLanguages.Count.ShouldBe(2);| }"
      },
      {
        "name": "Should_Get_Active_Languages",
        "body": "{| var languageProvider = LocalIocManager.Resolve<ILanguageProvider>();| var activeLanguages = languageProvider.GetActiveLanguages();| activeLanguages.Count.ShouldBe(1);| activeLanguages.Single().Name.ShouldBe(\"en\");| }"
      }
    ]
  },
  {
    "file": "HumanizerOfUndefinedLocalizationSource_Tests.cs",
    "methods": [
      {
        "name": "Undefined_Localization_Source_Should_Be_Humanized",
        "body": "{| // Fallback to the same text as It's already in sentence case| _resourceFileLocalizationSource| .GetString(\"Lorem ipsum dolor sit amet\", new CultureInfo(\"en-US\"))| .ShouldBe(\"Lorem ipsum dolor sit amet\");| // Text in PascalCase should be converted properly| _resourceFileLocalizationSource| .GetString(\"LoremIpsumDolorSitAmet\", new CultureInfo(\"en-US\"))| .ShouldBe(\"Lorem ipsum dolor sit amet\");| // Text with mixed cases should be converted properly| _resourceFileLocalizationSource| .GetString(\"LoremIpsum dolor sit amet\", new CultureInfo(\"en-US\"))| .ShouldBe(\"Lorem ipsum dolor sit amet\");| }"
      }
    ]
  },
  {
    "file": "JsonAndXmlSourceMixing_Tests.cs",
    "methods": [
      {
        "name": "Test_Xml_Json",
        "body": "{| var mananger = LocalIocManager.Resolve<LocalizationManager>();| using (CultureInfoHelper.Use(\"en\"))| {| var source = mananger.GetSource(\"Lang\");| source.GetString(\"Apple\").ShouldBe(\"Apple\");| source.GetString(\"Banana\").ShouldBe(\"Banana\");| source.GetString(\"ThisIsATest\").ShouldBe(\"This is a test.\");| source.GetString(\"HowAreYou\").ShouldBe(\"How are you?\");| }| using (CultureInfoHelper.Use(\"zh-Hans\"))| {| var source = mananger.GetSource(\"Lang\");| source.GetString(\"Apple\").ShouldBe(\"苹果\");| source.GetString(\"Banana\").ShouldBe(\"香蕉\");| source.GetString(\"ThisIsATest\").ShouldBe(\"这是一个测试.\");| source.GetString(\"HowAreYou\").ShouldBe(\"你好吗?\");| }| }"
      }
    ]
  },
  {
    "file": "JsonEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{| var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();| dictionaries.Count.ShouldBe(2);| var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");| enDict.ShouldNotBe(null);| enDict[\"Apple\"].ShouldBe(\"Apple\");| enDict[\"Banana\"].ShouldBe(\"Banana\");| var zhHansDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"zh-Hans\");| zhHansDict.ShouldNotBe(null);| zhHansDict[\"Apple\"].ShouldBe(\"苹果\");| zhHansDict[\"Banana\"].ShouldBe(\"香蕉\");| }"
      }
    ]
  },
  {
    "file": "ResourceFileLocalizationSource_Tests.cs",
    "methods": [
      {
        "name": "Test_GetString",
        "body": "{| //Defined in English| _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");| //en-US and en-GB fallbacks to en| _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"Hello!\");| _resourceFileLocalizationSource.GetString(\"World\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"World!\");| _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"en-GB\")).ShouldBe(\"Hello!\");| //Defined in Turkish| _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"tr\")).ShouldBe(\"Merhaba!\");| //tr-TR fallbacks to tr| _resourceFileLocalizationSource.GetString(\"Hello\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"Merhaba!\");| //Undefined for Turkish, fallbacks to default language| _resourceFileLocalizationSource.GetString(\"World\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"World!\");| //Undefined at all, fallback to given text| _resourceFileLocalizationSource.GetString(\"Apple\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"[Apple]\");| }"
      },
      {
        "name": "Test_GetStringOrNull",
        "body": "{| //Defined in English| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");| //en-US and en-GB fallbacks to en| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"Hello!\");| _resourceFileLocalizationSource.GetStringOrNull(\"World\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBe(\"World!\");| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en-GB\")).ShouldBe(\"Hello!\");| //Defined in Turkish| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"tr\")).ShouldBe(\"Merhaba!\");| //tr-TR fallbacks to tr| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"Merhaba!\");| //Undefined for Turkish, fallbacks to default language| _resourceFileLocalizationSource.GetStringOrNull(\"World\", CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldBe(\"World!\");| //Undefined at all, returns null| _resourceFileLocalizationSource.GetStringOrNull(\"Apple\", CultureInfo.GetCultureInfo(\"en-US\")).ShouldBeNull();| }"
      },
      {
        "name": "Test_GetStrings",
        "body": "{| //Defined in English| var enStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en\"));| enStrings.ShouldContain(x => x == \"Hello!\");| enStrings.ShouldContain(x => x == \"World!\");| //en-US and en-GB fallbacks to en| var enUsStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-US\"));| enUsStrings.ShouldContain(x => x == \"Hello!\");| enUsStrings.ShouldContain(x => x == \"World!\");| var enGBStrings = _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-GB\"));| enGBStrings.ShouldContain(x => x == \"Hello!\");| enGBStrings.ShouldContain(x => x == \"World!\");| //Defined in Turkish| _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr\")).ShouldContain(x => x == \"Merhaba!\");| //tr-TR fallbacks to tr| _resourceFileLocalizationSource.GetStrings(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"Merhaba!\");| //Undefined for Turkish, fallbacks to default language| _resourceFileLocalizationSource.GetStrings(new List<string>{\"World\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"World!\");| //Undefined at all, fallback to given text| _resourceFileLocalizationSource.GetStrings(new List<string>{\"Apple\"}, CultureInfo.GetCultureInfo(\"en-US\")).ShouldContain(x => x == \"[Apple]\");| }"
      },
      {
        "name": "Test_GetStringsOrNull",
        "body": "{| //Defined in English| _resourceFileLocalizationSource.GetStringOrNull(\"Hello\", CultureInfo.GetCultureInfo(\"en\")).ShouldBe(\"Hello!\");| //en-US and en-GB fallbacks to en| var enUsStrings = _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\", \"World\"}, CultureInfo.GetCultureInfo(\"en-US\"));| enUsStrings.ShouldContain(x => x == \"Hello!\");| enUsStrings.ShouldContain(x => x == \"World!\");| _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"en-GB\")).ShouldContain(x => x == \"Hello!\");| //Defined in Turkish| _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr\")).ShouldContain(x => x == \"Merhaba!\");| //tr-TR fallbacks to tr| _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"Merhaba!\");| //Undefined for Turkish, fallbacks to default language| _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"World\"}, CultureInfo.GetCultureInfo(\"tr-TR\")).ShouldContain(x => x == \"World!\");| //Undefined at all, returns null| _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Apple\"}, CultureInfo.GetCultureInfo(\"en-US\")).ShouldContain(x => x == null);| }"
      },
      {
        "name": "Test_GetStringsOrNull_When_Name_Not_Exist",
        "body": "{| var enStrings = _resourceFileLocalizationSource.GetStringsOrNull(new List<string>{\"Hello\", \"World\", \"NotExist\"}, CultureInfo.GetCultureInfo(\"en\"));| enStrings.ShouldContain(x => x == \"Hello!\");| enStrings.ShouldContain(x => x == \"World!\");| enStrings.ShouldContain(x => x == null);| enStrings[2].ShouldBeNull(); //NotExist| }"
      },
      {
        "name": "Should_Get_Correct_Localization_Key",
        "body": "{| _resourceFileLocalizationSource.FindKeyOrNull(\"Hello!\", new CultureInfo(\"en\")).ShouldBe(\"Hello\");| _resourceFileLocalizationSource.FindKeyOrNull(\"Merhaba!\", new CultureInfo(\"tr\")).ShouldBe(\"Hello\");| }"
      },
      {
        "name": "Test_GetAllStrings",
        "body": "{| var allStrings = _resourceFileLocalizationSource.GetAllStrings(CultureInfo.GetCultureInfo(\"en\"));| allStrings.Count.ShouldBe(2);| allStrings.Any(s => s.Name == \"Hello\" && s.Value == \"Hello!\").ShouldBeTrue();| allStrings.Any(s => s.Name == \"World\" && s.Value == \"World!\").ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "Test_DictionaryBasedLocalizationSource.cs",
    "methods": [
      {
        "name": "Should_Get_Correct_String_On_Exact_Culture",
        "body": "{| Assert.Equal(\"Yeryüzü\", _localizationSource.GetString(\"world\", new CultureInfo(\"tr-TR\")));| }"
      },
      {
        "name": "Should_Get_Most_Close_String_On_Base_Culture",
        "body": "{| Assert.Equal(\"Merhaba\", _localizationSource.GetString(\"hello\", new CultureInfo(\"tr-TR\")));| }"
      },
      {
        "name": "Should_Get_Default_If_Not_Exists_On_Given_Culture",
        "body": "{| Assert.Equal(\"Fourty Two (42)\", _localizationSource.GetString(\"fourtyTwo\", new CultureInfo(\"tr\")));| Assert.Equal(\"Fourty Two (42)\", _localizationSource.GetString(\"fourtyTwo\", new CultureInfo(\"tr-TR\")));| }"
      },
      {
        "name": "Should_Get_All_Strings",
        "body": "{| var localizedStrings = _localizationSource.GetAllStrings(new CultureInfo(\"tr-TR\")).OrderBy(ls => ls.Name).ToList();| Assert.Equal(3, localizedStrings.Count);| Assert.Equal(\"Fourty Two (42)\", localizedStrings[0].Value);| Assert.Equal(\"Merhaba\", localizedStrings[1].Value);| Assert.Equal(\"Yeryüzü\", localizedStrings[2].Value);| }"
      },
      {
        "name": "Should_Extend_LocalizationSource_Overriding",
        "body": "{| _localizationSource.Extend(| new LocalizationDictionaryWithAddMethod(new CultureInfo(\"tr\"))| {| {\"hello\", \"Selam\"},| });| _localizationSource.GetString(\"hello\", new CultureInfo(\"tr-TR\")).ShouldBe(\"Selam\");| }"
      },
      {
        "name": "Should_Extend_LocalizationSource_With_New_Language",
        "body": "{| _localizationSource.Extend(| new LocalizationDictionaryWithAddMethod(new CultureInfo(\"fr\"))| {| {\"hello\", \"Bonjour\"},| });| _localizationSource.GetString(\"hello\", new CultureInfo(\"fr\")).ShouldBe(\"Bonjour\");| _localizationSource.GetString(\"world\", new CultureInfo(\"fr\")).ShouldBe(\"World\"); //not localed into french| }"
      },
      {
        "name": "Should_Return_Given_Text_If_Not_Found",
        "body": "{| _localizationSource.GetString(\"An undefined text\").ShouldBe(\"[An undefined text]\");| }"
      },
      {
        "name": "Should_Get_Correct_Localization_Key",
        "body": "{| _localizationSource.FindKeyOrNull(\"Yeryüzü\", new CultureInfo(\"tr-TR\")).ShouldBe(\"world\");| _localizationSource.FindKeyOrNull(\"Fourty Two (42)\", new CultureInfo(\"fr-FR\")).ShouldBe(\"fourtyTwo\");| }"
      }
    ]
  },
  {
    "file": "Test_XmlLocalizationDictionaryBuilder.cs",
    "methods": [
      {
        "name": "Can_Build_LocalizationDictionary_From_Xml_String",
        "body": "{| var xmlString = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>|<localizationDictionary culture=\"\"tr\"\">| <texts>| <text name=\"\"hello\"\" value=\"\"Merhaba\"\" />| <text name=\"\"world\"\">D�nya</text>| </texts>|</localizationDictionary>\";| var dictionary = XmlLocalizationDictionary.BuildFomXmlString(xmlString);| dictionary.CultureInfo.Name.ShouldBe(\"tr\");| dictionary[\"hello\"].ShouldBe(\"Merhaba\");| dictionary[\"world\"].ShouldBe(\"D�nya\");| }"
      },
      {
        "name": "Should_Throw_Exception_For_Duplicate_Name",
        "body": "{| var xmlString = @\"<?xml version=\"\"1.0\"\" encoding=\"\"utf-8\"\" ?>|<localizationDictionary culture=\"\"tr\"\">| <texts>| <text name=\"\"hello\"\" value=\"\"Merhaba\"\" />| <text name=\"\"hello\"\" value=\"\"Merhabalar\"\"></text>| </texts>|</localizationDictionary>\";| Assert.Throws<AbpException>(() => XmlLocalizationDictionary.BuildFomXmlString(xmlString));| }"
      }
    ]
  },
  {
    "file": "XmlEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{| var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();| | dictionaries.Count.ShouldBe(2);| var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");| enDict.ShouldNotBe(null);| enDict.ShouldBe(_dictionaryProvider.DefaultDictionary);| enDict[\"hello\"].ShouldBe(\"Hello\");| | var trDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"tr\");| trDict.ShouldNotBe(null);| trDict[\"hello\"].ShouldBe(\"Merhaba\");| }"
      }
    ]
  },
  {
    "file": "LogSeverity_Tests.cs",
    "methods": [
      {
        "name": "AuthorizationException_Default_Log_Severity_Test",
        "body": "{| // change log severity ...| AbpAuthorizationException.DefaultLogSeverity = LogSeverity.Warn;| | var exception = new AbpAuthorizationException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Warn);| }"
      },
      {
        "name": "AuthorizationException_Default_Log_Severity_Change_Test",
        "body": "{| // change log severity ...| AbpAuthorizationException.DefaultLogSeverity = LogSeverity.Error;| | var exception = new AbpAuthorizationException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Error);| }"
      },
      {
        "name": "ValidationException_Default_Log_Severity_Test",
        "body": "{| // change log severity ...| AbpValidationException.DefaultLogSeverity = LogSeverity.Warn;| | var exception = new AbpValidationException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Warn);| }"
      },
      {
        "name": "ValidationException_Default_Log_Severity_Change_Test",
        "body": "{| // change log severity ...| AbpValidationException.DefaultLogSeverity = LogSeverity.Error;| | var exception = new AbpValidationException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Error);| }"
      },
      {
        "name": "UserFriendlyException_Default_Log_Severity_Test",
        "body": "{| // change log severity ...| UserFriendlyException.DefaultLogSeverity = LogSeverity.Warn;| | var exception = new UserFriendlyException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Warn);| }"
      },
      {
        "name": "UserFriendlyException_Default_Log_Severity_Change_Test",
        "body": "{| // change log severity ...| UserFriendlyException.DefaultLogSeverity = LogSeverity.Error;| | var exception = new UserFriendlyException(\"Test exception !\");| exception.Severity.ShouldBe(LogSeverity.Error);| }"
      }
    ]
  },
  {
    "file": "MimeTypeMap_Tests.cs",
    "methods": [
      {
        "name": "Try_Get_Mime_Type_Common_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetMimeType(\"\", out _); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetMimeType(null, out _); });| _mimeTypeMap.TryGetMimeType(\"test\", out _).ShouldBeFalse(); //not found| }"
      },
      {
        "name": "Get_Mime_Type_Common_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetMimeType(\"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetMimeType(null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.GetMimeType(\"test\"); }); //not found exception| _mimeTypeMap.GetMimeType(\"test\", throwErrorIfNotFound: false).ShouldBe(string.Empty);| }"
      },
      {
        "name": "Try_Get_Extension_Common_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetExtension(\"\", out _); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.TryGetExtension(null, out _); });| _mimeTypeMap.TryGetExtension(\"test\", out _).ShouldBeFalse(); //not found| }"
      },
      {
        "name": "Get_Extension_Common_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetExtension(\"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.GetExtension(null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.GetExtension(\"test\"); }); //not found exception| _mimeTypeMap.GetExtension(\"test\", throwErrorIfNotFound: false).ShouldBe(string.Empty);| }"
      },
      {
        "name": "Add_Mime_Type_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"\", \"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(null, null); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"\", \".test\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(null, \".test\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"test\", \"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddMimeType(\"test\", null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\".test\", \".test\"); }); //MIME type should not start with dot exception| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\"test\", \"test\"); }); //Extension should start with dot exception| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddMimeType(\"application/zip\", \".zip\"); }); //An item with the same mimeType has already been added exception| var testMimeType = \"test/test\";| var testExtension = \".test\";| _mimeTypeMap.GetExtension(testMimeType, false).ShouldBeNullOrEmpty();| _mimeTypeMap.AddMimeType(testMimeType, testExtension);| _mimeTypeMap.GetExtension(testMimeType).ShouldBe(testExtension);| }"
      },
      {
        "name": "Remove_Mime_Type_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveMimeType(\"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveMimeType(null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.RemoveMimeType(\".test\"); }); //MIME type should not start with dot exception| var testMimeType = \"application/zip\";| _mimeTypeMap.GetExtension(testMimeType, false).ShouldNotBeNullOrEmpty();| _mimeTypeMap.RemoveMimeType(testMimeType);| _mimeTypeMap.GetExtension(testMimeType, false).ShouldBeNullOrEmpty();| }"
      },
      {
        "name": "Add_Extension_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"\", \"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(null, null); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"\", \".test\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(null, \".test\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"test\", \"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.AddExtension(\"test\", null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\".test\", \".test\"); }); //MIME type should not start with dot exception| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\"test\", \"test\"); }); //Extension should start with dot exception| Should.Throw<ArgumentException>(() => { _mimeTypeMap.AddExtension(\".zip\", \"application/zip\"); }); //An item with the same extension has already been added exception| var testMimeType = \"test/test\";| var testExtension = \".test\";| _mimeTypeMap.GetMimeType(testExtension, false).ShouldBeNullOrEmpty();| _mimeTypeMap.AddExtension(testExtension, testMimeType);| _mimeTypeMap.GetMimeType(testExtension).ShouldBe(testMimeType);| }"
      },
      {
        "name": "Remove_Extension_Tests",
        "body": "{| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveExtension(\"\"); });| Should.Throw<ArgumentNullException>(() => { _mimeTypeMap.RemoveExtension(null); });| Should.Throw<ArgumentException>(() => { _mimeTypeMap.RemoveExtension(\"test\"); }); //Extension should start with dot exception| var testExtension = \".zip\";| _mimeTypeMap.GetMimeType(testExtension, false).ShouldNotBeNullOrEmpty();| _mimeTypeMap.RemoveExtension(testExtension);| _mimeTypeMap.GetMimeType(testExtension, false).ShouldBeNullOrEmpty();| }"
      }
    ]
  },
  {
    "file": "AbpAssemblyFinder_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Module_And_Additional_Assemblies",
        "body": "{| //Arrange| var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>| {| options.IocManager = LocalIocManager;| });| bootstrapper.Initialize();| //Act| var assemblies = bootstrapper.IocManager.Resolve<AbpAssemblyFinder>().GetAllAssemblies();| //Assert| assemblies.Count.ShouldBe(3);| assemblies.Any(a => a == typeof(MyStartupModule).GetAssembly()).ShouldBeTrue();| assemblies.Any(a => a == typeof(AbpKernelModule).GetAssembly()).ShouldBeTrue();| assemblies.Any(a => a == typeof(FactAttribute).GetAssembly()).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "PlugInModuleLoading_Tests.cs",
    "methods": [
      {
        "name": "Should_Load_All_Modules",
        "body": "{| //Arrange| var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>| {| options.IocManager = LocalIocManager;| });| bootstrapper.PlugInSources.AddTypeList(typeof(MyPlugInModule));| bootstrapper.Initialize();| //Act| var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;| //Assert| modules.Count.ShouldBe(6);| modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyPlugInModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyPlugInDependedModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyNotDependedModule)).ShouldBeFalse();| }"
      }
    ]
  },
  {
    "file": "StartupModuleToBeLast_Tests.cs",
    "methods": [
      {
        "name": "StartupModule_ShouldBe_LastModule",
        "body": "{| //Arrange| var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>| {| options.IocManager = LocalIocManager;| });| bootstrapper.Initialize();| //Act| var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;| //Assert| modules.Count.ShouldBe(4);| modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();| var startupModule = modules.Last();| startupModule.Type.ShouldBe(typeof(MyStartupModule));| }"
      },
      {
        "name": "PluginModule_ShouldNotBeLast",
        "body": "{| var bootstrapper = AbpBootstrapper.Create<MyStartupModule>(options =>| {| options.IocManager = LocalIocManager;| });| bootstrapper.PlugInSources.AddTypeList(typeof(MyPlugInModule));| bootstrapper.Initialize();| var modules = bootstrapper.IocManager.Resolve<IAbpModuleManager>().Modules;| //Assert| modules.Count.ShouldBe(6);| modules.Any(m => m.Type == typeof(AbpKernelModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyStartupModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule1)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyModule2)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyPlugInModule)).ShouldBeTrue();| modules.Any(m => m.Type == typeof(MyPlugInDependedModule)).ShouldBeTrue();| modules.Last().Type.ShouldBe(typeof(MyStartupModule));| }"
      }
    ]
  },
  {
    "file": "NotificationData_Serialization_Tests.cs",
    "methods": [
      {
        "name": "Should_Deserialize_And_Serialize_MessageNotificationData",
        "body": "{| var data = JsonConvert| .DeserializeObject(| new MessageNotificationData(\"Hello World!\").ToJsonString(),| typeof(MessageNotificationData)| ) as MessageNotificationData;| Assert.NotNull(data);| data.Message.ShouldBe(\"Hello World!\");| }"
      },
      {
        "name": "Should_Deserialize_And_Serialize_LocalizableMessageNotificationData",
        "body": "{| var serialized = new LocalizableMessageNotificationData(new LocalizableString(\"Hello\", \"MySource\")).ToJsonString();| var data = JsonConvert| .DeserializeObject(| serialized,| typeof(LocalizableMessageNotificationData)| ) as LocalizableMessageNotificationData;| Assert.NotNull(data);| Assert.NotNull(data.Message);| data.Message.Name.ShouldBe(\"Hello\");| data.Message.SourceName.ShouldBe(\"MySource\");| }"
      },
      {
        "name": "MessageNotificationData_Backward_Compatibility_Test",
        "body": "{| const string serialized = \"{\\\"Message\\\":\\\"a test message\\\",\\\"Type\\\":\\\"Abp.Notifications.MessageNotificationData\\\",\\\"Properties\\\":{}}\";| var data = JsonConvert| .DeserializeObject(| serialized,| typeof(MessageNotificationData)| ) as MessageNotificationData;| Assert.NotNull(data);| data.Message.ShouldBe(\"a test message\");| data.Properties[\"Message\"].ShouldBe(\"a test message\");| }"
      }
    ]
  },
  {
    "file": "NotificationPublisher_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| //Arrange| var notificationData = CreateNotificationData();| //Act| await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success);| //Assert| await _store.Received()| .InsertNotificationAsync(| Arg.Is<NotificationInfo>(| n => n.NotificationName == \"TestNotification\" &&| n.Severity == NotificationSeverity.Success &&| n.DataTypeName == notificationData.GetType().AssemblyQualifiedName &&| n.Data.Contains(\"42\")| )| );| await _backgroundJobManager.Received()| .EnqueueAsync<NotificationDistributionJob, NotificationDistributionJobArgs>(| Arg.Any<NotificationDistributionJobArgs>()| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Act| await _publisher.PublishAsync(\"TestNotification\", tenantIds: new int?[] { null });| // Assert| await _store.Received()| .InsertNotificationAsync(| Arg.Is<NotificationInfo>(n => n.TenantIds == \"null\")| );| }"
      }
    ]
  },
  {
    "file": "ObjectComparatorManager_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_All_Compare_Types_By_Type",
        "body": "{| var compareTypesForString = _objectComparatorManager.GetAllCompareTypes<string>();| compareTypesForString.ShouldContain(MyTestStringObjectComparator.EqualsCompareType);| compareTypesForString.ShouldContain(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType);| var compareTypesForClass = _objectComparatorManager.GetAllCompareTypes<ObjectComparatorTestClass>();| compareTypesForClass.SequenceEqual(Enum.GetNames(typeof(ObjectComparatorTestClassCompareTypes))).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Get_All_Compare_Types",
        "body": "{| var compareTypes = _objectComparatorManager.GetAllCompareTypes();| compareTypes.ContainsKey(typeof(ObjectComparatorTestClass)).ShouldBeTrue();| var compareTypesForTestClass = compareTypes[typeof(ObjectComparatorTestClass)];| compareTypesForTestClass.SequenceEqual(Enum.GetNames(typeof(ObjectComparatorTestClassCompareTypes))).ShouldBeTrue();| compareTypes.ContainsKey(typeof(string)).ShouldBeTrue();| var compareTypesForString = compareTypes[typeof(string)];| compareTypesForString.ShouldContain(MyTestStringObjectComparator.EqualsCompareType);| compareTypesForString.ShouldContain(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType);| }"
      },
      {
        "name": "Should_Find_Comparator",
        "body": "{| _objectComparatorManager.HasComparator<string>().ShouldBeTrue();| _objectComparatorManager.HasComparator<ObjectComparatorTestClass>().ShouldBeTrue();| _objectComparatorManager.HasComparator<bool>().ShouldBeFalse();| }"
      },
      {
        "name": "Can_Comparator_Tests",
        "body": "{| _objectComparatorManager.CanCompare<string>(MyTestStringObjectComparator.EqualsCompareType).ShouldBeTrue();| _objectComparatorManager.CanCompare<string>(MyTestStringObjectComparator.ReverseOfSecondIsEqualtoFirstCompareType).ShouldBeTrue();| _objectComparatorManager.CanCompare<string>(\"NonExistCompareType\").ShouldBeFalse();| _objectComparatorManager| .CanCompare<ObjectComparatorTestClass, ObjectComparatorTestClassCompareTypes>(ObjectComparatorTestClassCompareTypes.Equals)| .ShouldBeTrue();| _objectComparatorManager| .CanCompare<ObjectComparatorTestClass, ObjectComparatorTestClassCompareTypes>(ObjectComparatorTestClassCompareTypes.FirstProp1BiggerThanSecondProp2AsInt)| .ShouldBeTrue();| _objectComparatorManager.CanCompare<ObjectComparatorTestClass>(\"test\").ShouldBeFalse();| }"
      }
    ]
  },
  {
    "file": "ObjectComparatorTestBase.cs",
    "methods": [
      {
        "name": "Should_Get_All_Compare_Types",
        "body": "{| var compareTypes = ObjectComparatorManager.GetAllCompareTypes<TObjectType>();| compareTypes.ToList().SequenceEqual(Enum.GetNames(typeof(TEnumCompareTypes))).ShouldBeTrue();| }"
      },
      {
        "name": "Should_Find_Comparator",
        "body": "{| ObjectComparatorManager.HasComparator<TObjectType>().ShouldBeTrue();| }"
      },
      {
        "name": "Can_Comparator_Tests",
        "body": "{| foreach (var compareType in Enum.GetNames(typeof(TEnumCompareTypes)))| {| ObjectComparatorManager.CanCompare<TObjectType>(compareType).ShouldBeTrue();| }| ObjectComparatorManager.CanCompare<TObjectType>(\"test\").ShouldBeFalse();| }"
      }
    ]
  },
  {
    "file": "InMemoryOnlineClientManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| int tenantId = 1;| Dictionary<string, int> connections = new Dictionary<string, int>();| for (int i = 0; i < 100; i++)| {| connections.Add(MakeNewConnectionId(), i + 1);| }| foreach (var pair in connections)| {| await _clientManager.AddAsync(new OnlineClient(pair.Key, \"127.0.0.1\", tenantId, pair.Value));| }| var testId = connections.Keys.ToList()[5];| (await _clientManager.GetAllClientsAsync()).Count.ShouldBe(connections.Count);| (await _clientManager.GetAllByUserIdAsync(new UserIdentifier(tenantId, connections[testId]))).Count.ShouldBe(1);| (await _clientManager.GetByConnectionIdOrNullAsync(testId)).ShouldNotBeNull();| (await _clientManager.RemoveAsync(testId)).ShouldBeTrue();| (await _clientManager.GetAllClientsAsync()).Count.ShouldBe(connections.Count - 1);| (await _clientManager.GetByConnectionIdOrNullAsync(testId)).ShouldBeNull();| (await _clientManager.GetAllByUserIdAsync(new UserIdentifier(tenantId, connections[testId]))).Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "InMemoryOnlineClientStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var connectionId = Guid.NewGuid().ToString(\"N\");| await _store.AddAsync(new OnlineClient(connectionId, \"127.0.0.1\", 1, 2));| (await _store.TryGetAsync(connectionId, value => _ = value)).ShouldBeTrue();| (await _store.ContainsAsync(connectionId)).ShouldBeTrue();| (await _store.GetAllAsync()).Count.ShouldBe(1);| (await _store.RemoveAsync(connectionId)).ShouldBeTrue();| (await _store.GetAllAsync()).Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "ReflectionHelper_Tests.cs",
    "methods": [
      {
        "name": "Should_Find_GenericType",
        "body": "{| ReflectionHelper.IsAssignableToGenericType(typeof(List<string>), typeof(List<>)).ShouldBe(true);| ReflectionHelper.IsAssignableToGenericType(new List<string>().GetType(), typeof(List<>)).ShouldBe(true);| | ReflectionHelper.IsAssignableToGenericType(typeof(MyList), typeof(List<>)).ShouldBe(true);| ReflectionHelper.IsAssignableToGenericType(new MyList().GetType(), typeof(List<>)).ShouldBe(true);| }"
      },
      {
        "name": "Should_Find_Attributes",
        "body": "{| var attributes = ReflectionHelper.GetAttributesOfMemberAndDeclaringType<MyAttribute>(typeof(MyDerivedList).GetTypeInfo().GetMethod(\"DoIt\"));| attributes.Count.ShouldBe(2); //TODO: Why not find MyList's attribute?| attributes[0].Number.ShouldBe(1);| attributes[1].Number.ShouldBe(2);| //attributes[2].Number.ShouldBe(3);| }"
      },
      {
        "name": "GetSingleAttributeOfMemberOrDeclaringTypeOrDefault_Test",
        "body": "{| var attr1 = ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault<IMyAttribute>(| typeof(MyDerivedList).GetTypeInfo().GetMethod(\"DoIt\")| );| attr1.ShouldNotBeNull();| attr1.Number.ShouldBe(1);| var attr2 = ReflectionHelper.GetSingleAttributeOfMemberOrDeclaringTypeOrDefault<IMyAttribute>(| typeof(MyDerivedList2).GetTypeInfo().GetMethod(\"DoIt\")| );| attr2.ShouldNotBeNull();| attr2.Number.ShouldBe(2);| }"
      },
      {
        "name": "Should_Find_Property_Using_Path",
        "body": "{| var model = new MyParentObject| {| Child = new MyChildObject| {| InnerChild = new MyInnerChildObject| {| Age = 42| }| }| };| var property = ReflectionHelper.GetPropertyByPath(model, typeof(MyParentObject), \"Child.InnerChild.Age\");| var propertyInfo = property as PropertyInfo;| propertyInfo.ShouldNotBeNull();| propertyInfo.Name.ShouldBe(\"Age\");| propertyInfo.PropertyType.ShouldBe(typeof(Int32));| }"
      },
      {
        "name": "Should_Find_Property_Value_Using_Path",
        "body": "{| var model = new MyParentObject| {| Child = new MyChildObject| {| InnerChild = new MyInnerChildObject| {| Age = 42| }| }| };| var value = ReflectionHelper.GetValueByPath(model, typeof(MyParentObject), \"Child.InnerChild.Age\");| value.ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "TypeHelper_Tests.cs",
    "methods": [
      {
        "name": "Test_IsFunc",
        "body": "{| TypeHelper.IsFunc(new Func<object>(() => 42)).ShouldBe(true);| TypeHelper.IsFunc(new Func<int>(() => 42)).ShouldBe(true);| TypeHelper.IsFunc(new Func<string>(() => \"42\")).ShouldBe(true);| TypeHelper.IsFunc(\"42\").ShouldBe(false);| }"
      },
      {
        "name": "Test_IsFuncOfTReturn",
        "body": "{| TypeHelper.IsFunc<object>(new Func<object>(() => 42)).ShouldBe(true);| TypeHelper.IsFunc<object>(new Func<int>(() => 42)).ShouldBe(false);| TypeHelper.IsFunc<string>(new Func<string>(() => \"42\")).ShouldBe(true);| TypeHelper.IsFunc(\"42\").ShouldBe(false);| }"
      },
      {
        "name": "Test_IsPrimitiveExtendedIncludingNullable",
        "body": "{| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(int)).ShouldBe(true);| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(int?)).ShouldBe(true);| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(Guid)).ShouldBe(true);| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(Guid?)).ShouldBe(true);| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(string)).ShouldBe(true);| TypeHelper.IsPrimitiveExtendedIncludingNullable(typeof(TypeHelper_Tests)).ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "EmbeddedResourceTests.cs",
    "methods": [
      {
        "name": "Should_Define_And_Get_Embedded_Resources",
        "body": "{| var filepath = \"/MyApp/MyResources/js/MyScriptFile1.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Dash_In_Name",
        "body": "{| var filepath = \"/MyApp/MyResources/js/MyScriptFile-2.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Two_Dots_In_Name",
        "body": "{| var filepath = \"/MyApp/MyResources/js/MyScriptFile3.min.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Underscore_In_Name",
        "body": "{| var filepath = \"/MyApp/MyResources/js/MyScriptFile_4.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resources_With_Dash_In_folder",
        "body": "{| var filepath = \"/MyApp/MyResources/js-dash/MyScriptFile.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Underscore_In_Folder",
        "body": "{| var filepath = \"/MyApp/MyResources/js_underscore/MyScriptFile.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resource_With_Begin_Digit_In_Folder",
        "body": "{| var filepath = \"/MyApp/MyResources/0.9/MyScriptFile.0.9.js\";| var resource = _embeddedResourceManager.GetResource(filepath);| var filename = System.IO.Path.GetFileName(filepath);| var extension = System.IO.Path.GetExtension(filepath);| resource.ShouldNotBeNull();| Assert.True(resource.Assembly == GetType().GetAssembly());| Assert.True(resource.Content.Length > 0);| Assert.EndsWith(filename, resource.FileName);| Assert.True(resource.FileExtension == extension.Substring(1)); // without dot| }"
      },
      {
        "name": "Should_Get_Embedded_Resources",
        "body": "{| var filepath = \"/MyApp/MyResources/js/\";| var resources = _embeddedResourceManager.GetResources(filepath);| resources.ShouldNotBeNull();| Assert.True(resources.Count() == 4);| }"
      }
    ]
  },
  {
    "file": "AbpCacheBase_Tests.cs",
    "methods": [
      {
        "name": "Single_Key_Get_Test",
        "body": "{| var cache1 = new MyCache1(\"cache 1\");| var cacheValue1 = cache1.GetOrDefault(\"A\");| cacheValue1.ShouldBe(0);| cacheValue1 = cache1.Get(\"A\", (key) => 1);| cacheValue1.ShouldBe(1);| var cache2 = new MyCache2(\"cache 2\");| var cacheValue2 = cache2.GetOrDefault(\"B\");| cacheValue2.ShouldBeNull();| cacheValue2 = cache2.Get(\"B\", (key) => 2);| cacheValue2.ShouldBe(2);| }"
      },
      {
        "name": "Multi_Keys_Get_Test",
        "body": "{| var cache1 = new MyCache1(\"cache 1\");| var cacheValues1 = cache1.GetOrDefault(new[] { \"A\", \"B\" });| cacheValues1.ShouldNotBeNull();| cacheValues1.Length.ShouldBe(2);| cacheValues1[0].ShouldBe(0);| cacheValues1[1].ShouldBe(0);| cacheValues1 = cache1.Get(new[] { \"A\", \"B\" }, (key) => 11);| cacheValues1.ShouldNotBeNull();| cacheValues1.Length.ShouldBe(2);| cacheValues1[0].ShouldBe(11);| cacheValues1[1].ShouldBe(11);| var cache2 = new MyCache2(\"cache 2\");| var cacheValues2 = cache2.GetOrDefault(new[] { \"C\", \"D\" });| cacheValues2.ShouldNotBeNull();| cacheValues2.Length.ShouldBe(2);| cacheValues2[0].ShouldBeNull();| cacheValues2[1].ShouldBeNull();| cacheValues2 = cache2.Get(new[] { \"C\", \"D\" }, (key) => 22);| cacheValues2.ShouldNotBeNull();| cacheValues2.Length.ShouldBe(2);| cacheValues2[0].ShouldBe(22);| cacheValues2[1].ShouldBe(22);| }"
      }
    ]
  },
  {
    "file": "AbpCacheData_Tests.cs",
    "methods": [
      {
        "name": "Serialize_List_Test",
        "body": "{| List<string> source = new List<string>| {| \"Stranger Things\",| \"The OA\",| \"Lost in Space\"| };| var result = AbpCacheData.Serialize(source);| result.Type.ShouldStartWith(\"System.Collections.Generic.List`1[[System.String,\");| result.Payload.ShouldBe(\"[\\\"Stranger Things\\\",\\\"The OA\\\",\\\"Lost in Space\\\"]\");| }"
      },
      {
        "name": "Serialize_Class_Test",
        "body": "{| var source = new MyTestClass| {| Field1 = 42,| Field2 = \"Stranger Things\"| };| var result = AbpCacheData.Serialize(source);| result.Type.ShouldBe(| \"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClass, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");| result.Payload.ShouldBe(\"{\\\"Field1\\\":42,\\\"Field2\\\":\\\"Stranger Things\\\"}\");| }"
      },
      {
        "name": "Deserialize_List_Test",
        "body": "{| var json =| \"{\\\"Payload\\\":\\\"[\\\\\\\"Stranger Things\\\\\\\",\\\\\\\"The OA\\\\\\\",\\\\\\\"Lost in Space\\\\\\\"]\\\",\\\"Type\\\":\\\"System.Collections.Generic.List`1[[System.String]]\\\"}\";| var cacheData = AbpCacheData.Deserialize(json);| cacheData.ShouldNotBeNull();| }"
      },
      {
        "name": "Deserialize_Class_Test",
        "body": "{| var json =| \"{\\\"Payload\\\": \\\"{\\\\\\\"Field1\\\\\\\": 42,\\\\\\\"Field2\\\\\\\":\\\\\\\"Stranger Things\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClass, Abp.Tests\\\"}\";| var cacheData = AbpCacheData.Deserialize(json);| cacheData.ShouldNotBeNull();| }"
      },
      {
        "name": "Serialize_Class_With_Type_Field_Test",
        "body": "{| var source = new MyTestClassWithType| {| Name = \"MyTestClassWithType\",| ObjectType = typeof(MyTestClassWithType)| };| var result = AbpCacheData.Serialize(source);| result.Type.ShouldBe(| \"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\");| result.Payload.ShouldBe(| \"{\\\"Name\\\":\\\"MyTestClassWithType\\\",\\\"ObjectType\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\");| }"
      },
      {
        "name": "Deserialize_Class_With_Type_Field_Test",
        "body": "{| var json =| \"{\\\"Payload\\\": \\\"{\\\\\\\"Name\\\\\\\":\\\\\\\"MyTestClassWithType\\\\\\\",\\\\\\\"ObjectType\\\\\\\":\\\\\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\";| var cacheData = AbpCacheData.Deserialize(json);| cacheData.ShouldNotBeNull();| }"
      },
      {
        "name": "Deserialize_Class_With_Type_Field_Test_2",
        "body": "{| var json =| \"{\\\"Payload\\\": \\\"{\\\\\\\"Name\\\\\\\":\\\\\\\"MyTestClassWithType\\\\\\\",\\\\\\\"ObjectType\\\\\\\":\\\\\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\\\\\"}\\\",\\\"Type\\\":\\\"Abp.Tests.Runtime.Caching.AbpCacheData_Tests+MyTestClassWithType, Abp.Tests, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null\\\"}\";| var cacheData = AbpCacheData.Deserialize(json);| cacheData.ShouldNotBeNull();| | var cachedObject = cacheData.Payload.FromJsonString<MyTestClassWithType>();| cachedObject.Name.ShouldBe(\"MyTestClassWithType\");| cachedObject.ObjectType.ShouldBe(typeof(MyTestClassWithType));| }"
      }
    ]
  },
  {
    "file": "AbpMemoryCache_Tests.cs",
    "methods": [
      {
        "name": "Single_Key_Get_Test",
        "body": "{| var cacheValue = _memoryCache.GetOrDefault(\"A\");| cacheValue.ShouldBeNull();| cacheValue = _memoryCache.Get(\"A\", (key) => \"test\");| cacheValue.ShouldBe(\"test\");| }"
      },
      {
        "name": "Multi_Keys_Get_Test",
        "body": "{| var cacheValues = _memoryCache.GetOrDefault(new[] { \"A\", \"B\" });| cacheValues.ShouldNotBeNull();| cacheValues.Length.ShouldBe(2);| cacheValues[0].ShouldBeNull();| cacheValues[1].ShouldBeNull();| cacheValues = _memoryCache.Get(new[] { \"A\", \"B\" }, (key) => \"test \" + key);| cacheValues.ShouldNotBeNull();| cacheValues.Length.ShouldBe(2);| cacheValues[0].ShouldBe(\"test A\");| cacheValues[1].ShouldBe(\"test B\");| }"
      }
    ]
  },
  {
    "file": "MemoryCacheManager_Tests.cs",
    "methods": [
      {
        "name": "Simple_Get_Set_Test",
        "body": "{| _cache.GetOrDefault(\"A\").ShouldBe(null);| _cache.Set(\"A\", new MyCacheItem { Value = 42 });| _cache.GetOrDefault(\"A\").ShouldNotBe(null);| _cache.GetOrDefault(\"A\").Value.ShouldBe(42);| _cache.Get(\"B\", () => new MyCacheItem { Value = 43 }).Value.ShouldBe(43);| _cache.Get(\"B\", () => new MyCacheItem { Value = 44 }).Value.ShouldBe(43); //Does not call factory, so value is not changed| var items1 = _cache.GetOrDefault(new string[] { \"B\", \"C\" });| items1[0].Value.ShouldBe(43);| items1[1].ShouldBeNull();| var items2 = _cache.GetOrDefault(new string[] { \"C\", \"D\" });| items2[0].ShouldBeNull();| items2[1].ShouldBeNull();| _cache.Set(new KeyValuePair<string, MyCacheItem>[] {| new KeyValuePair<string, MyCacheItem>(\"C\", new MyCacheItem{ Value = 44}),| new KeyValuePair<string, MyCacheItem>(\"D\", new MyCacheItem{ Value = 45})| });| var items3 = _cache.GetOrDefault(new string[] { \"C\", \"D\" });| items3[0].Value.ShouldBe(44);| items3[1].Value.ShouldBe(45);| var items4 = _cache.Get(new string[] { \"D\", \"E\" }, (key) => new MyCacheItem { Value = key == \"D\" ? 46 : 47 });| items4[0].Value.ShouldBe(45); //Does not call factory, so value is not changed| items4[1].Value.ShouldBe(47);| }"
      },
      {
        "name": "MultiThreading_Test",
        "body": "{| Parallel.For(| 0,| 2048,| new ParallelOptions { MaxDegreeOfParallelism = 16 },| i =>| {| var randomKey = RandomHelper.GetRandomOf(\"A\", \"B\", \"C\", \"D\");| var randomValue = RandomHelper.GetRandom(0, 32);| switch (RandomHelper.GetRandom(0, 4))| {| case 0:| _cache.Get(randomKey, () => new MyCacheItem(randomValue));| _cache.GetOrDefault(randomKey);| break;| case 1:| _cache.GetOrDefault(randomKey);| _cache.Set(randomKey, new MyCacheItem(RandomHelper.GetRandom(0, 16)));| _cache.GetOrDefault(randomKey);| break;| case 2:| _cache.GetOrDefault(randomKey);| break;| case 3:| var randomKeys = new string[] { randomKey, randomKey + randomKey };| _cache.GetOrDefault(randomKeys);| var pairs = new KeyValuePair<string, MyCacheItem>[]| {| new KeyValuePair<string, MyCacheItem>(randomKeys[0], new MyCacheItem{ Value= RandomHelper.GetRandom(0, 16) }),| new KeyValuePair<string, MyCacheItem>(randomKeys[1], new MyCacheItem{ Value= RandomHelper.GetRandom(0, 16) })| };| _cache.Set(pairs);| _cache.GetOrDefault(randomKeys);| break;| }| });| }"
      },
      {
        "name": "Property_Injected_CacheManager_Should_Work",
        "body": "{| LocalIocManager.Using<MyClientPropertyInjects>(client =>| {| client.SetGetValue(42).ShouldBe(42); //Not in cache, getting from factory| });| LocalIocManager.Using<MyClientPropertyInjects>(client =>| {| client.SetGetValue(43).ShouldBe(42); //Retrieving from the cache| });| }"
      },
      {
        "name": "DefaultAbsoluteExpireTimeFactory_Test",
        "body": "{| var cache = _cacheManager.GetCache<string, MyCacheItem>(\"MyCacheItems\");| cache.DefaultAbsoluteExpireTimeFactory = _ => DateTimeOffset.Now + TimeSpan.FromMilliseconds(800);| var absoluteExpireTimeChangedCount = 0;| for (var i = 0; i < 10; i++)| {| cache.Get(\"A\", () =>| {| absoluteExpireTimeChangedCount++;| return new MyCacheItem();| });| }| absoluteExpireTimeChangedCount.ShouldBe(1);| Thread.Sleep(1 * 1000);| for (var i = 0; i < 10; i++)| {| cache.Get(\"A\", () =>| {| absoluteExpireTimeChangedCount++;| return new MyCacheItem();| });| }| absoluteExpireTimeChangedCount.ShouldBe(2);| Thread.Sleep(1 * 1000);| for (var i = 0; i < 10; i++)| {| cache.Get(\"A\", () =>| {| absoluteExpireTimeChangedCount++;| return new MyCacheItem();| });| }| absoluteExpireTimeChangedCount.ShouldBe(3);| }"
      }
    ]
  },
  {
    "file": "DataContextAmbientScopeProvider_Tests.cs",
    "methods": [
      {
        "name": "Test_Sync",
        "body": "{| var scopeAccessor = new DataContextAmbientScopeProvider<TestData>(| new AsyncLocalAmbientDataContext()| );| scopeAccessor.GetValue(ContextKey).ShouldBeNull();| using (scopeAccessor.BeginScope(ContextKey, new TestData(42)))| {| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);| using (scopeAccessor.BeginScope(ContextKey, new TestData(24)))| {| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(24);| }| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);| }| scopeAccessor.GetValue(ContextKey).ShouldBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var scopeAccessor = new DataContextAmbientScopeProvider<TestData>(| new AsyncLocalAmbientDataContext()| );| scopeAccessor.GetValue(ContextKey).ShouldBeNull();| await Task.Delay(1);| using (scopeAccessor.BeginScope(ContextKey, new TestData(42)))| {| await Task.Delay(1);| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);| using (scopeAccessor.BeginScope(ContextKey, new TestData(24)))| {| await Task.Delay(1);| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(24);| }| await Task.Delay(1);| scopeAccessor.GetValue(ContextKey).Number.ShouldBe(42);| }| await Task.Delay(1);| scopeAccessor.GetValue(ContextKey).ShouldBeNull();| }"
      }
    ]
  },
  {
    "file": "SimpleStringCipher_Tests.cs",
    "methods": [
      {
        "name": "Should_Be_Able_To_Change_InitVector_And_Key",
        "body": "{| const string initVectorString = \"1234BCHF9876skd*\";| const string myKey = \"84ncpaKMC_!TuAna\";| const string plainText = \"This is a plain text!\";| var cipher = new SimpleStringCipher| {| InitVectorBytes = Encoding.ASCII.GetBytes(initVectorString)| };| var enryptedText = cipher.Encrypt(plainText, myKey);| cipher.Decrypt(enryptedText, myKey).ShouldBe(plainText);| }"
      }
    ]
  },
  {
    "file": "Specification_Tests.cs",
    "methods": [
      {
        "name": "Any_Should_Return_All",
        "body": "{| _customers| .Where(new AnySpecification<Customer>()) //Implicitly converted to Expression!| .Count()| .ShouldBe(_customers.Count());| }"
      },
      {
        "name": "None_Should_Return_Empty",
        "body": "{| _customers| .Where(new NoneSpecification<Customer>().ToExpression())| .Count()| .ShouldBe(0);| }"
      },
      {
        "name": "Not_Should_Return_Reverse_Result",
        "body": "{| _customers| .Where(new EuropeanCustomerSpecification().Not().ToExpression())| .Count()| .ShouldBe(3);| }"
      },
      {
        "name": "Should_Support_Native_Expressions_And_Combinations",
        "body": "{| _customers| .Where(new ExpressionSpecification<Customer>(c => c.Age >= 18).ToExpression())| .Count()| .ShouldBe(6);| _customers| .Where(new EuropeanCustomerSpecification().And(new ExpressionSpecification<Customer>(c => c.Age >= 18)).ToExpression())| .Count()| .ShouldBe(4);| }"
      },
      {
        "name": "CustomSpecification_Test",
        "body": "{| _customers| .Where(new EuropeanCustomerSpecification().ToExpression())| .Count()| .ShouldBe(7);| _customers| .Where(new Age18PlusCustomerSpecification().ToExpression())| .Count()| .ShouldBe(6);| _customers| .Where(new BalanceCustomerSpecification(10000, 30000).ToExpression())| .Count()| .ShouldBe(2);| _customers| .Where(new PremiumCustomerSpecification().ToExpression())| .Count()| .ShouldBe(3);| }"
      },
      {
        "name": "IsSatisfiedBy_Tests",
        "body": "{| new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 49, 55000, \"USA\")).ShouldBeTrue();| new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 49, 200, \"USA\")).ShouldBeFalse();| new PremiumCustomerSpecification().IsSatisfiedBy(new Customer(\"David\", 12, 55000, \"USA\")).ShouldBeFalse();| }"
      },
      {
        "name": "CustomSpecification_Composite_Tests",
        "body": "{| _customers| .Where(new EuropeanCustomerSpecification().And(new Age18PlusCustomerSpecification()).ToExpression())| .Count()| .ShouldBe(4);| _customers| .Where(new EuropeanCustomerSpecification().Not().And(new Age18PlusCustomerSpecification()).ToExpression())| .Count()| .ShouldBe(2);| _customers| .Where(new Age18PlusCustomerSpecification().AndNot(new EuropeanCustomerSpecification()).ToExpression())| .Count()| .ShouldBe(2);| }"
      }
    ]
  },
  {
    "file": "AbpBootstraper_Tester.cs",
    "methods": [
      {
        "name": "Should_Initialize_Bootstrapper",
        "body": "{| _bootstrapper.Initialize();| }"
      },
      {
        "name": "Should_Call_Module_Events_Once",
        "body": "{| _bootstrapper.Initialize();| _bootstrapper.Dispose();| var testModule = LocalIocManager.Resolve<MyTestModule>();| var otherModule = LocalIocManager.Resolve<MyOtherModule>();| var anotherModule = LocalIocManager.Resolve<MyAnotherModule>();| testModule.PreInitializeCount.ShouldBe(1);| testModule.InitializeCount.ShouldBe(1);| testModule.PostInitializeCount.ShouldBe(1);| testModule.ShutdownCount.ShouldBe(1);| otherModule.PreInitializeCount.ShouldBe(1);| otherModule.InitializeCount.ShouldBe(1);| otherModule.PostInitializeCount.ShouldBe(1);| otherModule.ShutdownCount.ShouldBe(1);| otherModule.CallMeOnStartupCount.ShouldBe(1);| anotherModule.PreInitializeCount.ShouldBe(1);| anotherModule.InitializeCount.ShouldBe(1);| anotherModule.PostInitializeCount.ShouldBe(1);| anotherModule.ShutdownCount.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "FormattedStringTokenizer_Test.cs",
    "methods": [
      {
        "name": "Should_Throw_FormatException_For_Invalid_Format",
        "body": "{| Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"a sample { wrong format\"));| Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"a sample {0{1}} wrong format\"));| Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"} wrong format\"));| Assert.Throws<FormatException>(() => new FormatStringTokenizer().Tokenize(\"wrong {} format\"));| }"
      },
      {
        "name": "Should_Tokenize_For_Valid_Format",
        "body": "{| TokenizeTest(\"\");| TokenizeTest(\"a sample {0} value\", \"a sample \", \"{0}\", \" value\");| TokenizeTest(\"{0} is {name} at this {1}.\", \"{0}\", \" is \", \"{name}\", \" at this \", \"{1}\", \".\");| }"
      }
    ]
  },
  {
    "file": "FormattedStringValueExtracter_Tests.cs",
    "methods": [
      {
        "name": "Test_Matched",
        "body": "{| Test_Matched_Internal(| \"My name is Neo.\",| \"My name is {0}.\",| new NameValue(\"0\", \"Neo\")| );| Test_Matched_Internal(| \"User halil does not exist.\",| \"User {0} does not exist.\",| new NameValue(\"0\", \"halil\")| );| }"
      },
      {
        "name": "Test_Not_Matched",
        "body": "{| Test_Not_Matched_Internal(| \"My name is Neo.\",| \"My name is Marry.\"| );| Test_Not_Matched_Internal(| \"Role {0} does not exist.\",| \"User name {0} is invalid, can only contain letters or digits.\"| );| Test_Not_Matched_Internal(| \"{0} cannot be null or empty.\",| \"Incorrect password.\"| );| Test_Not_Matched_Internal(| \"Incorrect password.\",| \"{0} cannot be null or empty.\"| );| }"
      },
      {
        "name": "IsMatch_Test",
        "body": "{| string[] values;| FormattedStringValueExtracter.IsMatch(\"User halil does not exist.\", \"User {0} does not exist.\", out values).ShouldBe(true);| values[0].ShouldBe(\"halil\");| }"
      }
    ]
  },
  {
    "file": "AsyncHelper_Tests.cs",
    "methods": [
      {
        "name": "Test1",
        "body": "{| AsyncHelper.RunSync(AsyncMethod1);| AsyncHelper.RunSync(() => AsyncMethod2(21)).ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "LockExtensions_Tests.cs",
    "methods": [
      {
        "name": "Test_Locking",
        "body": "{| //Just sample usages:| _list.Locking(() => { });| _list.Locking(list => { });| _list.Locking(() => 42).ShouldBe(42);| _list.Locking(list => 42).ShouldBe(42);| }"
      }
    ]
  },
  {
    "file": "OneTimeRunner_Tests.cs",
    "methods": [
      {
        "name": "OneTimeRunner_Should_Run_Once",
        "body": "{| var oneTimeRunner = new OneTimeRunner();| var count = 0;| for (int i = 0; i < 10; i++)| {| oneTimeRunner.Run(() =>| {| count++;| });| }| | count.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "TimezoneHelper_Tests.cs",
    "methods": [
      {
        "name": "All_Windows_Timezones_Should_Be_Convertable_To_Iana",
        "body": "{| var allTimezones = TimezoneHelper.GetWindowsTimeZoneIds();| Should.NotThrow(() =>| {| var exceptions = new List<string>();| foreach (var timezone in allTimezones)| {| try| {| TimezoneHelper.WindowsToIana(timezone);| }| catch (Exception ex)| {| exceptions.Add(ex.Message);| }| }| if (exceptions.Any())| {| throw new Exception(exceptions.JoinAsString(Environment.NewLine));| }| });| }"
      },
      {
        "name": "Should_Throw_Exception_For_Unknown_Windows_Timezone_Id",
        "body": "{| Should.Throw<Exception>(() =>| {| TimezoneHelper.WindowsToIana(\"abc\");| });| }"
      },
      {
        "name": "Should_Throw_Exception_For_Unknown_Iana_Timezone_Id",
        "body": "{| Should.Throw<Exception>(() =>| {| TimezoneHelper.IanaToWindows(\"cba\");| });| }"
      },
      {
        "name": "Convert_By_Iana_Timezone_Should_Be_Convert_By_Windows_Timezone",
        "body": "{| var now = DateTime.UtcNow;| TimezoneHelper.ConvertTimeFromUtcByIanaTimeZoneId(now, \"Asia/Shanghai\")| .ShouldBe(TimezoneHelper.ConvertFromUtc(now, \"China Standard Time\"));| }"
      },
      {
        "name": "ConvertToDateTimeOffset_Date_With_America_NewYork_TimeZone_Should_Return_Correct_DateTimeOffset",
        "body": "{| var testDate = new DateTime(1980,11,20);| var timeSpan = new TimeSpan(-5,0,0);| DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/New_York\");| dateTimeOffset.ShouldNotBe(null);| dateTimeOffset.Value.Offset.ShouldBe(timeSpan);| dateTimeOffset.Value.DateTime.ShouldBe(testDate);| }"
      },
      {
        "name": "ConvertToDateTimeOffset_Date_With_America_NewYork_TimeZone_Should_Return_Correct_DateTimeOffset_With_DaylightSavings",
        "body": "{| var testDate = new DateTime(1980, 5, 20);| var timeSpan = new TimeSpan(-4, 0, 0);| DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/New_York\");| dateTimeOffset.ShouldNotBe(null);| dateTimeOffset.Value.Offset.ShouldBe(timeSpan);| dateTimeOffset.Value.DateTime.ShouldBe(testDate);| }"
      },
      {
        "name": "ConvertToDateTimeOffset_Dates_With_America_Phoenix_TimeZone_Should_Return_Correct_DateTimeOffsests_With_No_DaylightSavings",
        "body": "{| var testDate = new DateTime(1980, 5, 20);| var timeSpan = new TimeSpan(-7, 0, 0);| DateTimeOffset? dateTimeOffset = TimezoneHelper.ConvertToDateTimeOffset(testDate, \"America/Phoenix\");| dateTimeOffset.ShouldNotBe(null);| dateTimeOffset.Value.Offset.ShouldBe(timeSpan);| dateTimeOffset.Value.DateTime.ShouldBe(testDate);| var testDate2 = new DateTime(1980, 11, 20);| DateTimeOffset? dateTimeOffset2 = TimezoneHelper.ConvertToDateTimeOffset(testDate2, \"America/Phoenix\");| dateTimeOffset2.ShouldNotBe(null);| dateTimeOffset2.Value.Offset.ShouldBe(timeSpan); // should be the same timespan as previous date| dateTimeOffset2.Value.DateTime.ShouldBe(testDate2);| }"
      }
    ]
  },
  {
    "file": "UserIdentifier_Tests.cs",
    "methods": [
      {
        "name": "GetHashCode_Test",
        "body": "{| UserIdentifier.Parse(\"5@4\").GetHashCode().ShouldBe(UserIdentifier.Parse(\"5@4\").GetHashCode());| UserIdentifier.Parse(\"1@1\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"2@2\").GetHashCode());| UserIdentifier.Parse(\"1@0\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"0@1\").GetHashCode());| UserIdentifier.Parse(\"1@2\").GetHashCode().ShouldNotBe(UserIdentifier.Parse(\"2@1\").GetHashCode());| }"
      }
    ]
  },
  {
    "file": "AbpUserConfigurationBuilder_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var userConfiguration = await _abpUserConfigurationBuilder.GetAll();| userConfiguration.ShouldNotBe(null);| userConfiguration.MultiTenancy.ShouldNotBe(null);| userConfiguration.Session.ShouldNotBe(null);| userConfiguration.Localization.ShouldNotBe(null);| userConfiguration.Features.ShouldNotBe(null);| userConfiguration.Auth.ShouldNotBe(null);| userConfiguration.Nav.ShouldNotBe(null);| userConfiguration.Setting.ShouldNotBe(null);| userConfiguration.Clock.ShouldNotBe(null);| userConfiguration.Timing.ShouldNotBe(null);| userConfiguration.Security.ShouldNotBe(null);| userConfiguration.Custom.ShouldNotBe(null);| }"
      },
      {
        "name": "Task",
        "body": "{| var userConfiguration = await _abpUserConfigurationBuilder.GetAll();| userConfiguration.Setting.Values.ShouldNotContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var userConfiguration = await _abpUserConfigurationBuilder.GetAll();| userConfiguration.Setting.Values.ShouldNotContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting2\");| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var userConfiguration = await _abpUserConfigurationBuilder.GetAll();| userConfiguration.Setting.Values.ShouldContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting1\");| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var userConfiguration = await _abpUserConfigurationBuilder.GetAll();| userConfiguration.Setting.Values.ShouldContain(s => s.Key == \"AbpWebCommonTestModule.Test.Setting2\");| }"
      }
    ]
  },
  {
    "file": "CustomConfigScriptManager_Tests.cs",
    "methods": [
      {
        "name": "CustomConfigScriptManager_Should_Build_Custom_Configuration",
        "body": "{| _abpStartupConfiguration.CustomConfigProviders.Add(new TestCustomConfigProvider());| var script = _customConfigScriptManager.GetScript();| script.ShouldNotBeNullOrEmpty();| script.ShouldContain(\"EntityHistory\");| }"
      },
      {
        "name": "CustomConfigScriptManager_Should_Build_Empty_Custom_Configuration_When_CustomConfigProviders_Empty",
        "body": "{| _abpStartupConfiguration.CustomConfigProviders.Clear();| var script = _customConfigScriptManager.GetScript();| script.ShouldNotBeNullOrEmpty();| }"
      }
    ]
  },
  {
    "file": "SettingScriptManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var scripts = await _settingScriptManager.GetScriptAsync();| scripts.ShouldNotContain(\"AbpWebCommonTestModule.Test.Setting1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var scripts = await _settingScriptManager.GetScriptAsync();| scripts.ShouldNotContain(\"AbpWebCommonTestModule.Test.Setting2\");| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var scripts = await _settingScriptManager.GetScriptAsync();| scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting1\");| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var scripts = await _settingScriptManager.GetScriptAsync();| scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting2\");| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var scripts = await _settingScriptManager.GetScriptAsync();| scripts.ShouldContain(\"AbpWebCommonTestModule.Test.Setting3\");| scripts.ShouldContain(\"Test \\\\u003e Value3\");| }"
      }
    ]
  },
  {
    "file": "DefaultErrorInfoConverter_Tests.cs",
    "methods": [
      {
        "name": "DefaultErrorInfoConverter_Should_Work_For_EntityNotFoundException_Overload_Methods",
        "body": "{| var message = \"Test message\";| var errorInfo = _defaultErrorInfoConverter.Convert(new EntityNotFoundException(message));| Assert.Equal(errorInfo.Message, message);| var exceptionWithoutMessage = new EntityNotFoundException();| errorInfo = _defaultErrorInfoConverter.Convert(exceptionWithoutMessage);| Assert.Equal(errorInfo.Message, exceptionWithoutMessage.Message);| }"
      }
    ]
  },
  {
    "file": "AbpWebCommonLocalization_Tests.cs",
    "methods": [
      {
        "name": "Should_Localize_AbpWebCommon_Text",
        "body": "{| using (CultureInfoHelper.Use(\"en\"))| {| _localizationManager| .GetSource(AbpWebConsts.LocalizationSourceName)| .GetString(\"ValidationError\")| .ShouldBe(\"Your request is not valid!\");| }| }"
      },
      {
        "name": "Should_Localize_AbpWebCommon_Texts",
        "body": "{| using (CultureInfoHelper.Use(\"en\"))| {| var texts = _localizationManager| .GetSource(AbpWebConsts.LocalizationSourceName)| .GetStrings(new List<string> {\"ValidationError\", \"InternalServerError\"});| texts.ShouldContain(x => x == \"Your request is not valid!\");| texts.ShouldContain(x => x == \"An internal error occurred during your request!\");| }| }"
      }
    ]
  },
  {
    "file": "DependencyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_AbpPersistedGrantStore",
        "body": "{| Resolve<AbpPersistedGrantStore>();| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| AbpSession.TenantId = 1;| var repository = Resolve<IRepository<User, long>>();| var userToAdd = User.CreateTenantAdminUser(AbpSession.TenantId.Value, \"admin@test.com\");| userToAdd.Password = \"123qwe\";| var userId = await repository.InsertAndGetIdAsync(userToAdd);| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| //Arrange| var user = await repository.FirstOrDefaultAsync(userId);| user.ShouldNotBeNull();| var principalFactory = Resolve<IUserClaimsPrincipalFactory<User>>();| //Act| var identity = (await principalFactory.CreateAsync(user)).Identity;| //Assert| identity.GetTenantId().ShouldBe(AbpSession.TenantId);| identity.GetUserId().ShouldBe(user.Id);| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "BackgroundJobManagerEventTriggerExtensions_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| for (int i = 0; i < 5; i++)| {| await _backgroundJobManager.EnqueueEventAsync(new MySimpleEventData(i));| }| var eventCount = await _backgroundJobStore.GetWaitingJobsAsync(5);| eventCount.Count.ShouldBe(5);| }"
      },
      {
        "name": "Task",
        "body": "{| var id = await _backgroundJobManager.EnqueueAsync<TestJob, TestJobArgs>(new TestJobArgs());| Convert.ToInt64(id).ShouldBeGreaterThan(0);| }"
      }
    ]
  },
  {
    "file": "AbpStartupConfiguration_Test.cs",
    "methods": [
      {
        "name": "Should_Get_Custom_Config_Providers",
        "body": "{| var providers = _startupConfiguration.CustomConfigProviders;| providers.Count.ShouldBeGreaterThan(0);| }"
      },
      {
        "name": "Should_Get_Custom_Config_Providers_Values",
        "body": "{| _startupConfiguration.GetCustomConfig().Count.ShouldBeGreaterThan(0);| }"
      }
    ]
  },
  {
    "file": "DependencyInjection_Tests.cs",
    "methods": [
      {
        "name": "Should_Inject_AbpPersistedGrantStore",
        "body": "{| Resolve<AbpPersistedGrantStore>();| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| AbpSession.TenantId = 1;| var repository = Resolve<IRepository<User, long>>();| var userToAdd = User.CreateTenantAdminUser(AbpSession.TenantId.Value, \"admin@test.com\");| userToAdd.Password = \"123qwe\";| var userId = await repository.InsertAndGetIdAsync(userToAdd);| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| //Arrange| var user = await repository.FirstOrDefaultAsync(userId);| user.ShouldNotBeNull();| var principalFactory = Resolve<IUserClaimsPrincipalFactory<User>>();| //Act| var identity = (await principalFactory.CreateAsync(user)).Identity;| //Assert| identity.GetTenantId().ShouldBe(AbpSession.TenantId);| identity.GetUserId().ShouldBe(user.Id);| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "EntityChange_Test.cs",
    "methods": [
      {
        "name": "Entity_Change_Should_Check_OwnedEntity",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var blog1 = _blogRepository.Single(b => b.Name == \"test-blog-1\");| //blog1.More is Owned Entity| blog1.More.BloggerName = \"test-blog-2\";| _blogRepository.GetDbContext().Entry(blog1).State.ShouldBe(EntityState.Unchanged);| _blogRepository.GetDbContext().Entry(blog1.More).State.ShouldBe(EntityState.Modified);| _blogRepository.GetDbContext().Entry(blog1).CheckOwnedEntityChange().ShouldBeTrue();| uow.Complete();| }| }"
      }
    ]
  },
  {
    "file": "EntitySnapshotManager_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var id = CreateUserAndGetId();| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var snapshot = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity, int>(id, DateTime.Now);| snapshot.ChangedPropertiesSnapshots.Count.ShouldBe(0);| snapshot.PropertyChangesStackTree.Count.ShouldBe(0);| await uow.CompleteAsync();| }| Thread.Sleep(3 * 1000);| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = await _userRepository.GetAsync(id);| user.Name = \"test-user-name-updated\";| user.Surname = \"test-user-surname-updated\";| await uow.CompleteAsync();| }| Thread.Sleep(3 * 1000);| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = await _userRepository.GetAsync(id);| user.Name = \"test-user-name-updated-2\";| await uow.CompleteAsync();| }| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| //undo last update| var snapshot = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity, int>(id, DateTime.Now.AddSeconds(-2));| snapshot.ChangedPropertiesSnapshots.Count.ShouldBe(1);| snapshot.PropertyChangesStackTree.Count.ShouldBe(1);| snapshot[\"Name\"].ShouldBe(\"\\\"test-user-name-updated\\\"\");| snapshot.PropertyChangesStackTree[\"Name\"].ShouldBe(\"\\\"test-user-name-updated\\\" -> \\\"test-user-name-updated-2\\\"\");| //undo all changes| var snapshot2 = await _entitySnapshotManager.GetSnapshotAsync<UserTestEntity>(id, DateTime.Now.AddDays(-1));| snapshot2.ChangedPropertiesSnapshots.Count.ShouldBe(2);| snapshot2.PropertyChangesStackTree.Count.ShouldBe(2);| snapshot2[\"Name\"].ShouldBe(\"\\\"test-user-name-start\\\"\");| snapshot2[\"Surname\"].ShouldBe(\"\\\"test-user-surname-start\\\"\");| snapshot2.PropertyChangesStackTree[\"Name\"].ShouldBe(\"\\\"test-user-name-start\\\" -> \\\"test-user-name-updated\\\" -> \\\"test-user-name-updated-2\\\"\");| snapshot2.PropertyChangesStackTree[\"Surname\"].ShouldBe(\"\\\"test-user-surname-start\\\" -> \\\"test-user-surname-updated\\\"\");| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "JsonEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{| var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();| dictionaries.Count.ShouldBe(2);| var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");| enDict.ShouldNotBe(null);| enDict[\"Apple\"].ShouldBe(\"Apple\");| enDict[\"Banana\"].ShouldBe(\"Banana\");| var zhHansDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"zh-Hans\");| zhHansDict.ShouldNotBe(null);| zhHansDict[\"Apple\"].ShouldBe(\"苹果\");| zhHansDict[\"Banana\"].ShouldBe(\"香蕉\");| }"
      }
    ]
  },
  {
    "file": "XmlEmbeddedFileLocalizationDictionaryProvider_Tests.cs",
    "methods": [
      {
        "name": "Should_Get_Dictionaries",
        "body": "{| var dictionaries = _dictionaryProvider.Dictionaries.Values.ToList();| | dictionaries.Count.ShouldBe(2);| var enDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"en\");| enDict.ShouldNotBe(null);| enDict.ShouldBe(_dictionaryProvider.DefaultDictionary);| enDict[\"hello\"].ShouldBe(\"Hello\");| | var trDict = dictionaries.FirstOrDefault(d => d.CultureInfo.Name == \"tr\");| trDict.ShouldNotBe(null);| trDict[\"hello\"].ShouldBe(\"Merhaba\");| }"
      }
    ]
  },
  {
    "file": "MultiLingual_Entity_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _productAppService.CreateProduct(new ProductCreateDto| {| Price = 99,| Stock = 1000,| Translations = new List<ProductTranslationDto>| {| new ProductTranslationDto| {| Language = \"en\",| Name = \"Mobile Phone\"| }| }| });| using (var uow = _unitOfWorkManager.Begin())| {| var products = await _productRepository.GetAllIncluding(p => p.Translations).ToListAsync();| products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Mobile Phone\" && pt.Language == \"en\").ShouldBe(1);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| await _productAppService.CreateProduct(new ProductCreateDto| {| Price = 99,| Stock = 1000,| Translations = new List<ProductTranslationDto>| {| new ProductTranslationDto| {| Language = \"en\",| Name = \"Mobile Phone\"| },| new ProductTranslationDto| {| Language = \"tr\",| Name = \"Cep telefonu\"| }| }| });| using (var uow = _unitOfWorkManager.Begin())| {| var products = await _productRepository.GetAllIncluding(p => p.Translations).ToListAsync();| products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Mobile Phone\" && pt.Language == \"en\").ShouldBe(1);| products.SelectMany(p => p.Translations).Count(pt => pt.Name == \"Cep telefonu\" && pt.Language == \"tr\").ShouldBe(1);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var product = await GetProduct(\"it\", \"Giornale\");| product.ShouldNotBeNull();| product.Translations.Count.ShouldBe(1);| await _productAppService.UpdateProduct(new ProductUpdateDto| {| Id = product.Id,| Price = product.Price,| Stock = product.Stock,| Translations = new List<ProductTranslationDto>| {| new ProductTranslationDto| {| Name = \"Newspaper\",| Language = \"en\"| }| }| });| using (var uow = _unitOfWorkManager.Begin())| {| // Old Translation| product = await GetProduct(\"it\", \"Giornale\");| product.ShouldBe(null);| product = await GetProduct(\"en\", \"Newspaper\");| product.ShouldNotBe(null);| product.Translations.Count.ShouldBe(1);| var translation = product.Translations.First();| translation.Language.ShouldBe(\"en\");| translation.Name.ShouldBe(\"Newspaper\");| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var product = await GetProduct(\"en\", \"Bike\");| product.ShouldNotBeNull();| product.Translations.Count.ShouldBe(2);| await _productAppService.UpdateProduct(new ProductUpdateDto| {| Id = product.Id,| Price = product.Price,| Stock = product.Stock,| Translations = new List<ProductTranslationDto>| {| new ProductTranslationDto| {| Name = \"Bicycle\",| Language = \"en\"| },| new ProductTranslationDto| {| Name = \"Bicicleta\",| Language = \"es\"| }| }| });| using (var uow = _unitOfWorkManager.Begin())| {| // Old Translation| product = await GetProduct(\"en\", \"Bike\");| product.ShouldBe(null);| product = await GetProduct(\"en\", \"Bicycle\");| product.ShouldNotBe(null);| product.Translations.Count.ShouldBe(2);| product.Translations.Count(pt => pt.Language == \"fr\").ShouldBe(0);| product.Translations.Count(pt => pt.Language == \"es\" && pt.Name == \"Bicicleta\").ShouldBe(1);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var product = await GetProduct(\"it\", \"Giornale\");| await _productAppService.Translate(product.Id, new ProductTranslationDto| {| Name = \"Bicycle\",| Language = \"en\"| });| product = await GetProduct(\"en\", \"Bicycle\");| product.ShouldNotBeNull();| product.Translations.Count.ShouldBe(2);| product.Translations.Count(pt => pt.Language == \"en\" && pt.Name == \"Bicycle\").ShouldBeGreaterThan(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var product = await GetProduct(\"it\", \"Giornale\");| await _productAppService.Translate(product.Id, new ProductTranslationDto| {| Name = \"il Giornale\",| Language = \"it\"| });| product = await GetProduct(\"it\", \"il Giornale\");| product.ShouldNotBeNull();| product.Translations.Count.ShouldBe(1);| }"
      }
    ]
  },
  {
    "file": "MultiLingual_Mapping_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");| var products = await _productAppService.GetProducts();| products.ShouldNotBeNull();| products.Items.Count.ShouldBe(3);| var product1 = products.Items[0];| var product2 = products.Items[1];| var product3 = products.Items[2];| product1.Language.ShouldBe(\"tr\");| product1.Name.ShouldBe(\"Saat\");| product2.Language.ShouldBe(\"en\");| product2.Name.ShouldBe(\"Bike\");| product3.Language.ShouldBe(\"it\");| product3.Name.ShouldBe(\"Giornale\");| CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");| products = await _productAppService.GetProducts();| products.ShouldNotBeNull();| products.Items.Count.ShouldBe(3);| product1 = products.Items[0];| product2 = products.Items[1];| product3 = products.Items[2];| product1.Language.ShouldBe(\"en\");| product1.Name.ShouldBe(\"Watch\");| product2.Language.ShouldBe(\"fr\");| product2.Name.ShouldBe(\"Bicyclette\");| product3.Language.ShouldBe(\"it\");| product3.Name.ShouldBe(\"Giornale\");| }"
      },
      {
        "name": "Task",
        "body": "{| CultureInfo.CurrentUICulture = new CultureInfo(\"en-GB\");| var products = await _productAppService.GetProducts();| products.ShouldNotBeNull();| products.Items.Count.ShouldBe(3);| var product1 = products.Items[0];| var product2 = products.Items[1];| var product3 = products.Items[2];| product1.Language.ShouldBe(\"en\");| product1.Name.ShouldBe(\"Watch\");| product2.Language.ShouldBe(\"en\");| product2.Name.ShouldBe(\"Bike\");| product3.Language.ShouldBe(\"it\");| product3.Name.ShouldBe(\"Giornale\");| }"
      },
      {
        "name": "Task",
        "body": "{| /*| * When no translation is available, it should still map the| */| UsingDbContext(context =>| {| context.ProductTranslations.RemoveRange(context.ProductTranslations.ToList());| });| CultureInfo.CurrentUICulture = new CultureInfo(\"en-GB\");| var products = await _productAppService.GetProducts();| products.ShouldNotBeNull();| products.Items.Count.ShouldBe(3);| var product1 = products.Items[0];| var product2 = products.Items[1];| var product3 = products.Items[2];| product1.Language.ShouldBe(null);| product1.Name.ShouldBe(null);| product1.Price.ShouldBe(10);| product2.Language.ShouldBe(null);| product2.Name.ShouldBe(null);| product2.Price.ShouldBe(99);| product3.Language.ShouldBe(null);| product3.Name.ShouldBe(null);| product3.Price.ShouldBe(15);| }"
      },
      {
        "name": "Task",
        "body": "{| CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");| var products = await _productAppService.GetProducts();| products.ShouldNotBeNull();| var product1 = products.Items[0];| product1.Language.ShouldBe(\"tr\");| product1.Name.ShouldBe(\"Saat\");| product1.Id.ShouldBe(1);| }"
      },
      {
        "name": "Task",
        "body": "{| CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");| var orders = await _orderAppService.GetOrders();| orders.Items.Count.ShouldBe(1);| var testOrder = orders.Items.First();| testOrder.Price.ShouldBe(100);| testOrder.Language.ShouldBe(\"fr\");| testOrder.Name.ShouldBe(\"Tester\");| testOrder.ProductCount.ShouldBe(3);| }"
      },
      {
        "name": "Task",
        "body": "{| CultureInfo.CurrentUICulture = new CultureInfo(\"tr\");| var offices = await _officeAppService.GetOffices();| offices.ShouldNotBeNull();| offices.Items.Count.ShouldBe(1);| var volosoftOffice = offices.Items[0];| volosoftOffice.Language.ShouldBe(\"tr\");| volosoftOffice.Name.ShouldBe(\"Volosoft Ofisi\");| CultureInfo.CurrentUICulture = new CultureInfo(\"fr\");| offices = await _officeAppService.GetOffices();| offices.ShouldNotBeNull();| offices.Items.Count.ShouldBe(1);| volosoftOffice = offices.Items[0];| volosoftOffice.Language.ShouldBe(\"en\");| volosoftOffice.Name.ShouldBe(\"Volosoft Office\");| }"
      }
    ]
  },
  {
    "file": "NotificationDistributer_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| //Arrange| var notificationData = new NotificationData();| //Act| await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });| //Assert| _fakeNotificationDistributer.IsDistributeCalled.ShouldBeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| //Arrange| var notificationData = new NotificationData();| //Act| await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });| //Assert| _fakeNotificationDistributer.IsDistributeCalled.ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "NotificationStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var userIdentifier = AbpSession.ToUserIdentifier();| await _notificationPublisher.PublishAsync(\"Test\", userIds: new[] { userIdentifier });| var allNotifications = await| _notificationStore.GetUserNotificationsWithNotificationsAsync(userIdentifier);| allNotifications.Count.ShouldBe(1);| }"
      },
      {
        "name": "Task",
        "body": "{| var userIdentifier = AbpSession.ToUserIdentifier();| var now = DateTime.Now;| await _notificationPublisher.PublishAsync(\"TestNotification\", userIds: new[] { userIdentifier });| Thread.Sleep(TimeSpan.FromSeconds(5));| //this notification's creation time will be more than now+5sec| await _notificationPublisher.PublishAsync(\"TestNotification2\", userIds: new[] { userIdentifier });| Thread.Sleep(TimeSpan.FromSeconds(5));| //this notification's creation time will be more than now+10sec| await _notificationPublisher.PublishAsync(\"TestNotification3\", userIds: new[] { userIdentifier });| //this should get second added notification| var notifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now.AddSeconds(5),| endDate: now.AddSeconds(10)| );| notifications.Count.ShouldBe(1);| //this should get all added notification| var allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now,| endDate: now.AddSeconds(30)| );| allNotifications.Count.ShouldBe(3);| }"
      },
      {
        "name": "Task",
        "body": "{| var now = DateTime.Now;| var userIdentifier = AbpSession.ToUserIdentifier();| await _notificationPublisher.PublishAsync(\"TestNotification\", userIds: new[] { userIdentifier });| Thread.Sleep(TimeSpan.FromSeconds(5));| //this notification's creation time will be more than now+5sec| await _notificationPublisher.PublishAsync(\"TestNotification2\", userIds: new[] { userIdentifier });| Thread.Sleep(TimeSpan.FromSeconds(5));| //this notification's creation time will be more than now+10sec| await _notificationPublisher.PublishAsync(\"TestNotification3\", userIds: new[] { userIdentifier });| var allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now,| endDate: now.AddSeconds(30)| );| allNotifications.Count.ShouldBe(3);| //delete second added notification| await _notificationStore.DeleteAllUserNotificationsAsync(| userIdentifier,| state: null,| startDate: now.AddSeconds(5),| endDate: now.AddSeconds(10)| );| //check| var notifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now.AddSeconds(5),| endDate: now.AddSeconds(10)| );| notifications.Count.ShouldBe(0);| allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now,| endDate: now.AddSeconds(30)| );| allNotifications.Count.ShouldBe(2);| //delete all added notification| await _notificationStore.DeleteAllUserNotificationsAsync(| userIdentifier,| state: null,| startDate: now,| endDate: now.AddSeconds(30)| );| //check| allNotifications = await _notificationStore.GetUserNotificationsWithNotificationsAsync(| userIdentifier,| startDate: now,| endDate: now.AddSeconds(30)| );| allNotifications.Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "NotificationSubscription_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var notificationName = \"CustomNotification\";| // Arrange -> subscribe to CustomNotification with _realTimeNotifier| await _notificationSubscriptionManager.SubscribeAsync(| AbpSession.ToUserIdentifier(),| notificationName,| null,| _realTimeNotifier1.GetType().FullName| );| // Act| var subscriptions = await _notificationSubscriptionManager.GetSubscriptionsAsync(| AbpSession.TenantId,| notificationName,| null,| _realTimeNotifier2.GetType().FullName| );| // Assert| subscriptions.Count.ShouldBe(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var notificationName = \"TestNotification\";| // Arrange -> subscribe to CustomNotification with _realTimeNotifier| await _notificationSubscriptionManager.SubscribeAsync(| AbpSession.ToUserIdentifier(),| notificationName,| null,| _realTimeNotifier1.GetType().FullName| );| var notificationData = new NotificationData();| //Act| await _publisher.PublishAsync(| \"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() }| );| //Assert| _realTimeNotifier1.IsSendNotificationCalled.ShouldBeTrue();| _realTimeNotifier2.IsSendNotificationCalled.ShouldBeFalse();| }"
      }
    ]
  },
  {
    "file": "RealTimeNotifier_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| //Arrange| var notificationData = new NotificationData();| //Act| var before = Clock.Now;| await _publisher.PublishAsync(\"TestNotification\", notificationData, severity: NotificationSeverity.Success, userIds: new[] { AbpSession.ToUserIdentifier() });| var after = Clock.Now;| //Assert| Predicate<UserNotification[]> predicate = userNotifications =>| {| userNotifications.Length.ShouldBe(1);| var userNotification = userNotifications[0];| userNotification.State.ShouldBe(UserNotificationState.Unread);| userNotification.TenantId.ShouldBe(AbpSession.TenantId);| userNotification.UserId.ShouldBe(AbpSession.UserId.Value);| var notification = userNotification.Notification;| notification.CreationTime.ShouldBeInRange(before, after);| notification.Data.ToString().ShouldBe(notificationData.ToString());| notification.EntityId.ShouldBe(null);| notification.EntityTypeName.ShouldBe(null);| notification.NotificationName.ShouldBe(\"TestNotification\");| notification.Severity.ShouldBe(NotificationSeverity.Success);| notification.TenantId.ShouldBe(AbpSession.TenantId);| return true;| };| await _realTimeNotifier1.Received().SendNotificationsAsync(Arg.Is<UserNotification[]>(uns => predicate(uns)));| await _realTimeNotifier2.Received().SendNotificationsAsync(Arg.Is<UserNotification[]>(uns => predicate(uns)));| }"
      }
    ]
  },
  {
    "file": "RealtimeNotification_TargetNotification_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| var notificationData = new NotificationData();| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() }| );| Assert.True(_realTimeNotifier1.IsSendNotificationCalled);| Assert.True(_realTimeNotifier2.IsSendNotificationCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| var notificationData = new NotificationData();| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() },| targetNotifiers: new[] { _realTimeNotifier1.GetType(), _realTimeNotifier2.GetType() }| );| Assert.True(_realTimeNotifier1.IsSendNotificationCalled);| Assert.True(_realTimeNotifier2.IsSendNotificationCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| var notificationData = new NotificationData();| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() },| targetNotifiers: new[] { _realTimeNotifier2.GetType() }| );| Assert.False(_realTimeNotifier1.IsSendNotificationCalled);| Assert.True(_realTimeNotifier2.IsSendNotificationCalled);| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() },| targetNotifiers: new[] { _realTimeNotifier1.GetType() }| );| Assert.True(_realTimeNotifier1.IsSendNotificationCalled);| Assert.False(_realTimeNotifier2.IsSendNotificationCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| var notificationData = new NotificationData();| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| await Should.ThrowAsync<Exception>(async () =>| {| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() },| targetNotifiers: new[] { typeof(NotificationData) }| );| });| Assert.False(_realTimeNotifier1.IsSendNotificationCalled);| Assert.False(_realTimeNotifier2.IsSendNotificationCalled);| var notifierSubstitute = Substitute.For<IRealTimeNotifier>();| _realTimeNotifier1.IsSendNotificationCalled = false;| _realTimeNotifier2.IsSendNotificationCalled = false;| await Should.ThrowAsync<Exception>(async () =>| {| await _publisher.PublishAsync(\"TestNotification\",| notificationData,| severity: NotificationSeverity.Success,| userIds: new[] { AbpSession.ToUserIdentifier() },| targetNotifiers: new[] { notifierSubstitute.GetType() }| );| });| Assert.False(_realTimeNotifier1.IsSendNotificationCalled);| Assert.False(_realTimeNotifier2.IsSendNotificationCalled);| }"
      }
    ]
  },
  {
    "file": "PrimaryKey_Guid_Generation_Tests.cs",
    "methods": [
      {
        "name": "Guid_Id_ShouldBe_Generated_By_GuidGenerator_When_DatabaseGeneratedOption_None_Is_Used",
        "body": "{| var guid = Guid.NewGuid();| UsingDbContext(context =>| {| var testGuidGenerator = new TestGuidGenerator(guid);| context.GuidGenerator = testGuidGenerator;| var book = new Book| {| Name = \"Hitchhiker's Guide to the Galaxy\"| };| context.Set<Book>().Add(book);| context.SaveChanges();| testGuidGenerator.CreateCalled.ShouldBeTrue();| guid.ShouldBe(book.Id);| });| }"
      },
      {
        "name": "Guid_Id_ShouldBe_Generated_By_GuidGenerator_When_DatabaseGenerated_None_Attribute_Is_Used",
        "body": "{| var guid = Guid.NewGuid();| UsingDbContext(context =>| {| var testGuidGenerator = new TestGuidGenerator(guid);| context.GuidGenerator = testGuidGenerator;| var author = new Author| {| Name = \"Douglas Adams\"| };| context.Set<Author>().Add(author);| context.SaveChanges();| testGuidGenerator.CreateCalled.ShouldBeTrue();| guid.ShouldBe(author.Id);| });| }"
      },
      {
        "name": "Guid_Id_Should_Be_Generated_By_GuidGenerator_When_Id_Field_Has_Different_Name",
        "body": "{| var guid = Guid.NewGuid();| UsingDbContext(context =>| {| var testGuidGenerator = new TestGuidGenerator(guid);| context.GuidGenerator = testGuidGenerator;| var store = new Store| {| Name = \"Tesk book store\"| };| context.Set<Store>().Add(store);| context.SaveChanges();| testGuidGenerator.CreateCalled.ShouldBeTrue();| guid.ShouldBe(store.Id);| });| }"
      }
    ]
  },
  {
    "file": "AbpPerRequestRedisCacheReplacement_Tests.cs",
    "methods": [
      {
        "name": "Should_Request_Once_For_Same_Context",
        "body": "{| ChangeHttpContext();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| TestCacheItem GetCacheValue()| {| counter++;| return new TestCacheItem { Value = cacheValue };| }| var item1 = _typedCache.Get(cacheKey, GetCacheValue);| var item2 = _typedCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());| var cachedObject =| RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);| counter.ShouldBe(1);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Should_Request_Again_For_Same_Context",
        "body": "{| ChangeHttpContext();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| TestCacheItem GetCacheValue()| {| counter++;| return new TestCacheItem { Value = cacheValue };| }| var item1 = _typedCache.Get(cacheKey, GetCacheValue);| ChangeHttpContext();| var item2 = _typedCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());| var cachedObject =| RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| RedisDatabase.Received(2).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);| counter.ShouldBe(2);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Should_Not_Request_Again_For_Same_Context",
        "body": "{| var context1 = GetNewContextSubstitute();| var context2 = GetNewContextSubstitute();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| TestCacheItem GetCacheValue()| {| counter++;| return new TestCacheItem { Value = cacheValue };| }| CurrentHttpContext = context1;| var item1 = _typedCache.Get(cacheKey, GetCacheValue); //First request| CurrentHttpContext = context2;| var item2 = _typedCache.Get(cacheKey, GetCacheValue); //Second request| CurrentHttpContext = context1;| var item3 = _typedCache.Get(cacheKey, GetCacheValue); //First request again| CurrentHttpContext = context2;| var item4 = _typedCache.Get(cacheKey, GetCacheValue); //Second request again| RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());| var cachedObject = RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| RedisDatabase.Received(2).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| _typedCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);| counter.ShouldBe(2);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| item3.ShouldNotBe(null);| item3.Value.ShouldBe(cacheValue);| item4.ShouldNotBe(null);| item4.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| ChangeHttpContext();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| Task<TestCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new TestCacheItem { Value = cacheValue });| }| var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue);| var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());| var cachedObject =| RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);| counter.ShouldBe(1);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| ChangeHttpContext();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| Task<TestCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new TestCacheItem { Value = cacheValue });| }| var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue);| ChangeHttpContext();| var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());| var cachedObject =| RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| await RedisDatabase.Received(2).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);| counter.ShouldBe(2);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| var context1 = GetNewContextSubstitute();| var context2 = GetNewContextSubstitute();| string cacheKey = Guid.NewGuid().ToString();| int counter = 0;| int cacheValue = 1;| Task<TestCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new TestCacheItem { Value = cacheValue });| }| CurrentHttpContext = context1;| var item1 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //First request| CurrentHttpContext = context2;| var item2 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //Second request| CurrentHttpContext = context1;| var item3 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //First request again| CurrentHttpContext = context2;| var item4 = await _typedCache.GetAsync(cacheKey, GetCacheValue); //Second request again| await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());| var cachedObject =| RedisSerializer.Serialize(new TestCacheItem { Value = cacheValue }, typeof(TestCacheItem));| await RedisDatabase.Received(2).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| (await _typedCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);| counter.ShouldBe(2);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| item3.ShouldNotBe(null);| item3.Value.ShouldBe(cacheValue);| item4.ShouldNotBe(null);| item4.Value.ShouldBe(cacheValue);| }"
      }
    ]
  },
  {
    "file": "AbpPerRequestRedisCache_Test.cs",
    "methods": [
      {
        "name": "Cache_Options_Configuration_Test",
        "body": "{| _normalRedisCache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(12));| _perRequestRedisCache.DefaultSlidingExpireTime.ShouldBe(TimeSpan.FromHours(24));| }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetUserPermissionCache",
        "body": "{| var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();| var rolePermissionCache = cacheManager.GetUserPermissionCache();| rolePermissionCache.Name.ShouldBe(UserPermissionCacheItem.CacheStoreName);| }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetRolePermissionCache",
        "body": "{| var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();| var rolePermissionCache = cacheManager.GetRolePermissionCache();| rolePermissionCache.Name.ShouldBe(RolePermissionCacheItem.CacheStoreName);| }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetTenantFeatureCache",
        "body": "{| var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();| var rolePermissionCache = cacheManager.GetTenantFeatureCache();| rolePermissionCache.Name.ShouldBe(TenantFeatureCacheItem.CacheStoreName);| }"
      },
      {
        "name": "Test_PerRequestRedisCacheManager_GetEditionFeatureCache",
        "body": "{| var cacheManager = LocalIocManager.Resolve<IAbpPerRequestRedisCacheManager>();| var rolePermissionCache = cacheManager.GetEditionFeatureCache();| rolePermissionCache.Name.ShouldBe(EditionfeatureCacheItem.CacheStoreName);| }"
      },
      {
        "name": "Should_Not_Change_Normal_Redis_Cache",
        "body": "{| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| MyCacheItem GetCacheValue()| {| counter++;| return new MyCacheItem { Value = cacheValue };| }| RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| var item = _normalRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>()); //redis cache tries to get value two times if value not exists see AbpCacheBase<TKey, TValue>.Get(TKey key, Func<TKey, TValue> factory)| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);| var item1 = _normalRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>());| var item2 = _normalRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(4).StringGet(Arg.Any<RedisKey>());| // Should still be one received calls| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| _normalRedisCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Should_Request_Once_For_Same_Context",
        "body": "{| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| MyCacheItem GetCacheValue()| {| counter++;| return new MyCacheItem { Value = cacheValue };| }| var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| _perRequestRedisCache.GetOrDefault(cacheKey).Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Should_Request_Again_For_Different_Contexts",
        "body": "{| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| MyCacheItem GetCacheValue()| {| counter++;| return new MyCacheItem { Value = cacheValue };| }| RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| ChangeHttpContext();| var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(1).StringGet(Arg.Any<RedisKey>());| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);| ChangeHttpContext();| var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());| ChangeHttpContext();| var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>());| // Should still be one received calls| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Should_Work_With_Null_Contexts",
        "body": "{| CurrentHttpContext = null;| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| MyCacheItem GetCacheValue()| {| counter++;| return new MyCacheItem { Value = cacheValue };| }| RedisDatabase.StringSet(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| var item = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(2).StringGet(Arg.Any<RedisKey>());| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| RedisDatabase.StringGet(Arg.Any<RedisKey>()).Returns(cachedObject);| var item1 = _perRequestRedisCache.Get(cacheKey, GetCacheValue);| RedisDatabase.Received(3).StringGet(Arg.Any<RedisKey>()); //since _currentHttpContext is null it should go to the redisdb again| var item2 = _perRequestRedisCache.Get(cacheKey, GetCacheValue); //since _currentHttpContext is null it should go to the redisdb again| RedisDatabase.Received(4).StringGet(Arg.Any<RedisKey>());| // Should still be one received calls| RedisDatabase.Received(1).StringSet(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| Task<MyCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new MyCacheItem { Value = cacheValue });| }| var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| (await _perRequestRedisCache.GetOrDefaultAsync(cacheKey)).Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| Task<MyCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new MyCacheItem { Value = cacheValue });| }| RedisDatabase.StringSetAsync(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| ChangeHttpContext();| var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(1).StringGetAsync(Arg.Any<RedisKey>());| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| RedisDatabase.StringGetAsync(Arg.Any<RedisKey>()).Returns(Task.FromResult(cachedObject));| ChangeHttpContext();| var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());| ChangeHttpContext();| var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(3).StringGetAsync(Arg.Any<RedisKey>());| // Should still be one received calls| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      },
      {
        "name": "Task",
        "body": "{| CurrentHttpContext = null;| RedisDatabase.ClearReceivedCalls();| string cacheKey = \"Test\";| int cacheValue = 1;| int counter = 0;| Task<MyCacheItem> GetCacheValue()| {| counter++;| return Task.FromResult(new MyCacheItem { Value = cacheValue });| }| RedisDatabase.StringSetAsync(Arg.Any<RedisKey>(), Arg.Any<RedisValue>(), Arg.Any<TimeSpan>()).Returns(true);| var cachedObject = RedisSerializer.Serialize(new MyCacheItem { Value = cacheValue }, typeof(MyCacheItem));| var item = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(2).StringGetAsync(Arg.Any<RedisKey>());| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| RedisDatabase.StringGetAsync(Arg.Any<RedisKey>()).Returns(Task.FromResult(cachedObject));| var item1 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue);| await RedisDatabase.Received(3).StringGetAsync(Arg.Any<RedisKey>()); //since _currentHttpContext is null it should go to the redisdb again| var item2 = await _perRequestRedisCache.GetAsync(cacheKey, GetCacheValue); //since _currentHttpContext is null it should go to the redisdb again| await RedisDatabase.Received(4).StringGetAsync(Arg.Any<RedisKey>());| // Should still be one received calls| await RedisDatabase.Received(1).StringSetAsync(Arg.Any<RedisKey>(), cachedObject, Arg.Any<TimeSpan>());| counter.ShouldBe(1);| item.ShouldNotBe(null);| item.Value.ShouldBe(cacheValue);| item1.ShouldNotBe(null);| item1.Value.ShouldBe(cacheValue);| item2.ShouldNotBe(null);| item2.Value.ShouldBe(cacheValue);| }"
      }
    ]
  },
  {
    "file": "AbpEntityFrameworkCoreEfPlusExtensions_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| // Act| await _roleRepository.BatchDeleteAsync(r => r.Id > 0);| // Assert| var roleCount = await _roleRepository.CountAsync();| roleCount.ShouldBe(0);| using (_unitOfWorkManager.Current.SetTenantId(null))| {| // Assert| roleCount = await _roleRepository.CountAsync();| roleCount.ShouldBe(1);| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| await _roleRepository.BatchDeleteAsync(e => e.Name != \"ADMIN\");| var roleCount = await _roleRepository.CountAsync();| roleCount.ShouldBe(1);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| await _roleRepository.BatchDeleteAsync(r => r.Id > 0);| using (_unitOfWorkManager.Current.SetTenantId(null))| {| var admin = await _roleRepository.FirstOrDefaultAsync(r => r.Name == \"Admin\");| admin.ShouldNotBeNull();| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))| {| await _roleRepository.BatchDeleteAsync(r => r.Id > 0);| var roleCount = await _roleRepository.CountAsync();| roleCount.ShouldBe(0);| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| // Act| await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);| // Assert| var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");| roleCount.ShouldBe(4);| using (_unitOfWorkManager.Current.SetTenantId(null))| {| // Assert| roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");| roleCount.ShouldBe(0);| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| // Act| await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), e => e.Name != \"ADMIN\");| // Assert| var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");| roleCount.ShouldBe(3);| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);| using (_unitOfWorkManager.Current.SetTenantId(null))| {| var admin = await _roleRepository.FirstOrDefaultAsync(r => r.DisplayName == \"Admin\");| admin.ShouldNotBeNull();| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))| {| await _roleRepository.BatchUpdateAsync(r => r.SetProperty(p => p.DisplayName, \"Test\"), r => r.Id > 0);| var roleCount = await _roleRepository.CountAsync(r => r.DisplayName == \"Test\");| roleCount.ShouldBe(5);| }| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "Repository_Dynamic_Entity_Registration_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var items = await _customEntityRepository.GetAllListAsync();| items.Count.ShouldBe(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var items = await _customEntityWithGuidRepository.GetAllListAsync();| items.Count.ShouldBe(0);| }"
      }
    ]
  },
  {
    "file": "Repository_Hard_Delete_Test.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var uowManager = Resolve<IUnitOfWorkManager>();| // Soft-Delete admin| using (var uow = uowManager.Begin())| {| var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");| await _roleRepository.DeleteAsync(admin);| await uow.CompleteAsync();| }| using (var uow = uowManager.Begin())| {| var roles = await _roleRepository.GetAllListAsync();| foreach (var role in roles)| {| await _roleRepository.HardDeleteAsync(role);| }| await uow.CompleteAsync();| }| using (var uow = uowManager.Begin())| {| using (uowManager.Current.DisableFilter(AbpDataFilters.SoftDelete))| {| var roles = await _roleRepository.GetAllListAsync();| roles.Count.ShouldBe(1);| roles.First().NormalizedName.ShouldBe(\"ADMIN\");| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var uowManager = Resolve<IUnitOfWorkManager>();| // Soft-Delete admin| using (var uow = uowManager.Begin())| {| var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");| await _roleRepository.DeleteAsync(admin);| await uow.CompleteAsync();| }| using (var uow = uowManager.Begin())| {| await _roleRepository.HardDeleteAsync(r => r.Id > 0);| await uow.CompleteAsync();| }| using (var uow = uowManager.Begin())| {| using (uowManager.Current.DisableFilter(AbpDataFilters.SoftDelete))| {| var roles = await _roleRepository.GetAllListAsync();| roles.Count.ShouldBe(1);| roles.First().NormalizedName.ShouldBe(\"ADMIN\");| }| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var admin = await _roleRepository.FirstOrDefaultAsync(u => u.NormalizedName == \"ADMIN\");| Assert.Throws<AbpException>(() => _roleRepository.HardDelete(admin));| Assert.Throws<AbpException>(() => _roleRepository.HardDelete(u => u.Id > 0));| await Assert.ThrowsAsync<AbpException>(async () => await _roleRepository.HardDeleteAsync(admin));| await Assert.ThrowsAsync<AbpException>(async () => await _roleRepository.HardDeleteAsync(u => u.Id > 0));| }"
      },
      {
        "name": "Task",
        "body": "{| LoginAsDefaultTenantAdmin();| var uowManager = Resolve<IUnitOfWorkManager>();| UsingDbContext(context =>| {| context.Categories.Add(new Category| {| Id = 42,| DisplayName = \"Soft Drinks\"| });| });| using (var uow = uowManager.Begin())| {| await _roleRepository.HardDeleteAsync(r => r.Id > 0);| UsingDbContext(context =>| {| var category = context.Categories.Single(e => e.Id == 42);| context.Categories.Remove(category);| });| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "RoleManager_StaticRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| LocalIocManager.Resolve<IMultiTenancyConfig>().IsEnabled = true;| await CreateTestStaticRoles();| var tenant = await GetTenantAsync(\"Tenant1\");| AbpSession.TenantId = tenant.Id;| var adminRole = await _roleManager.GetRoleByNameAsync(\"admin\");| //Default granted permissions| (await _roleManager.IsGrantedAsync(adminRole.Id, \"Permission1\")).ShouldBe(false);| (await _roleManager.IsGrantedAsync(adminRole.Id, \"Permission2\")).ShouldBe(false);| }"
      }
    ]
  },
  {
    "file": "RoleStore_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var role = await _roleStore.FindByNameAsync(\"ADMIN\");| role.ShouldNotBeNull();| var claims = await _roleStore.GetClaimsAsync(role);| claims.ShouldNotBeNull();| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "Session_Override_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| await _userStore.CreateAsync(new User| {| Name = \"john\",| Surname = \"nash\",| UserName = \"john\",| NormalizedUserName = \"JOHN\",| EmailAddress = \"john.nash@acme.com\",| NormalizedEmailAddress = \"JOHN.NASH@ACME.COM\",| Password = \"123qwe\"| });| // Arrange| using (var uowManager = LocalIocManager.ResolveAsDisposable<IUnitOfWorkManager>())| {| using (var uow = uowManager.Object.Begin(new UnitOfWorkOptions()))| {| using (AbpSession.Use(1, 3))| {| await _restaurantRepository.InsertAsync(new Restaurant| {| Name = \"Carluccio's\",| Cuisine = \"Italian\"| });| await uow.CompleteAsync();| }| }| }| // Assert| await WithUnitOfWorkAsync(async () =>| {| var restaurant = await _restaurantRepository.FirstOrDefaultAsync(r => r.Name == \"Carluccio's\");| restaurant.ShouldNotBeNull();| restaurant.TenantId.ShouldBe(1);| restaurant.CreatorUserId.ShouldBe(3);| });| }"
      }
    ]
  },
  {
    "file": "FeatureValueStoreTests.cs",
    "methods": [
      {
        "name": "GetTenantFeatureCacheItem_ShouldEnableFilterMayHaveTenant_Test",
        "body": "{| // Arrange| var tenant = new Tenant(\"TestTenant\", \"TestTenant\");| _tenantRepository.Insert(tenant);| var tenant2 = new Tenant(\"TestTenant2\", \"TestTenant2\");| _tenantRepository.Insert(tenant2);| using (var uow = _unitOfWorkManager.Begin())| {| _tenantFeatureRepository.Insert(new TenantFeatureSetting(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\"));| _unitOfWorkManager.Current.SaveChanges();| // Assert (before disable filter)| _featureValueStore.GetValueOrNull(tenant.Id, AppFeatures.SimpleBooleanFeature).ShouldBe(\"true\");| _featureValueStore.GetValueOrNull(tenant2.Id, AppFeatures.SimpleBooleanFeature).ShouldBeNull();| // Act (clear cache and disable filter)| _cacheManager.GetTenantFeatureCache().Clear();| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))| {| // Assert (after disable filter)| _featureValueStore.GetValueOrNull(tenant.Id, AppFeatures.SimpleBooleanFeature).ShouldBe(\"true\");| _featureValueStore.GetValueOrNull(tenant2.Id, AppFeatures.SimpleBooleanFeature).ShouldBeNull();| }| uow.Complete();| }| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var tenant = new Tenant(\"TestTenant\", \"TestTenant\");| await _tenantRepository.InsertAsync(tenant);| var tenant2 = new Tenant(\"TestTenant2\", \"TestTenant2\");| await _tenantRepository.InsertAsync(tenant2);| using (var uow = _unitOfWorkManager.Begin())| {| await _tenantFeatureRepository.InsertAsync(new TenantFeatureSetting(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\"));| await _unitOfWorkManager.Current.SaveChangesAsync();| // Assert (before disable filter)| (await _featureValueStore.GetValueOrNullAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBe(\"true\");| (await _featureValueStore.GetValueOrNullAsync(tenant2.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeNull();| // Act (clear cache and disable filter)| await _cacheManager.GetTenantFeatureCache().ClearAsync();| using (_unitOfWorkManager.Current.DisableFilter(AbpDataFilters.MayHaveTenant))| {| // Assert (after disable filter)| (await _featureValueStore.GetValueOrNullAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBe(\"true\");| (await _featureValueStore.GetValueOrNullAsync(tenant2.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeNull();| }| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "TenantManagerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| const int tenantId = 1;| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);| });| await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"1\");| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);| });| await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"2\");| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);| });| await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"0\");| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);| });| }"
      },
      {
        "name": "Task",
        "body": "{| const int tenantId = 1;| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);| });| await ChangeTenantFeatureValueAsync(tenantId, AppFeatures.SimpleIntFeature, \"1\");| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(1);| });| using (var uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(null))| {| await _tenantManager.ResetAllFeaturesAsync(tenantId);| }| await uow.CompleteAsync();| }| UsingDbContext(tenantId, context =>| {| context.FeatureSettings.Count(f => f.TenantId == tenantId).ShouldBe(0);| });| }"
      },
      {
        "name": "Task",
        "body": "{| var tenant = new Tenant(\"TestTenant\", \"TestTenant\");| await _tenantManager.CreateAsync(tenant);| using (var uow = _unitOfWorkManager.Begin())| {| await _tenantManager.SetFeatureValueAsync(tenant.Id, AppFeatures.SimpleBooleanFeature, \"true\");| await _unitOfWorkManager.Current.SaveChangesAsync();| (await _featureChecker.IsEnabledAsync(tenant.Id, AppFeatures.SimpleBooleanFeature)).ShouldBeTrue();| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "SecurityStampValidator_Tests.cs",
    "methods": [
      {
        "name": "Should_Resolve_AbpSecurityStampValidator",
        "body": "{| (Resolve<ISecurityStampValidator>() is AbpSecurityStampValidator<Tenant, Role, User>).ShouldBeTrue();| (Resolve<SecurityStampValidator<User>>() is AbpSecurityStampValidator<Tenant, Role, User>).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "UserAppService_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var users = await _userAppService.GetAllAsync(new PagedAndSortedResultRequestDto());| users.TotalCount.ShouldBeGreaterThan(0);| users.Items.Count.ShouldBeGreaterThan(0);| }"
      }
    ]
  },
  {
    "file": "UserLogin_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = false;| AbpSession.TenantId = 1;| var loginResult = await _logInManager.LoginAsync(\"user1\", \"123qwe\");| loginResult.Result.ShouldBe(AbpLoginResultType.Success);| loginResult.User.Name.ShouldBe(\"User\");| loginResult.Identity.ShouldNotBe(null);| UsingDbContext(context =>| {| context.UserLoginAttempts.Count().ShouldBe(1);| context.UserLoginAttempts.FirstOrDefault(a =>| a.TenantId == AbpSession.TenantId &&| a.UserId == loginResult.User.Id &&| a.UserNameOrEmailAddress == \"user1\" &&| a.Result == AbpLoginResultType.Success| ).ShouldNotBeNull();| });| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = false;| var loginResult = await _logInManager.LoginAsync(\"wrongUserName\", \"asdfgh\");| loginResult.Result.ShouldBe(AbpLoginResultType.InvalidUserNameOrEmailAddress);| loginResult.User.ShouldBe(null);| loginResult.Identity.ShouldBe(null);| UsingDbContext(context =>| {| context.UserLoginAttempts.Count().ShouldBe(1);| context.UserLoginAttempts.FirstOrDefault(a =>| a.UserNameOrEmailAddress == \"wrongUserName\" &&| a.Result == AbpLoginResultType.InvalidUserNameOrEmailAddress| ).ShouldNotBeNull();| });| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| AbpSession.TenantId = 1;| var loginResult = await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName);| loginResult.Result.ShouldBe(AbpLoginResultType.Success);| loginResult.User.Name.ShouldBe(\"User\");| loginResult.Identity.ShouldNotBe(null);| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| //Set session| AbpSession.TenantId = 1;| AbpSession.UserId = 1;| //Email confirmation is disabled as default| (await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName)).Result.ShouldBe(AbpLoginResultType.Success);| //Change configuration| await Resolve<ISettingManager>().ChangeSettingForTenantAsync(AbpSession.GetTenantId(), AbpZeroSettingNames.UserManagement.IsEmailConfirmationRequiredForLogin, \"true\");| //Email confirmation is enabled now| (await _logInManager.LoginAsync(\"user1\", \"123qwe\", Tenant.DefaultTenantName)).Result.ShouldBe(AbpLoginResultType.UserEmailIsNotConfirmed);| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| //Set session| AbpSession.TenantId = 1;| AbpSession.UserId = 1;| var loginResult = await _logInManager.LoginAsync(\"userOwner\", \"123qwe\", Tenant.DefaultTenantName);| loginResult.Result.ShouldBe(AbpLoginResultType.Success);| loginResult.User.Name.ShouldBe(\"Owner\");| loginResult.Identity.ShouldNotBe(null);| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| //Set session| AbpSession.TenantId = 1;| AbpSession.UserId = 1;| var loginResult = await _logInManager.LoginAsync(\"forbidden-user\", \"123qwe\", Tenant.DefaultTenantName);| loginResult.Result.ShouldBe(AbpLoginResultType.FailedForOtherReason);| var localizationContext = LocalIocManager.IocContainer.Resolve<ILocalizationContext>();| loginResult.GetFailReason(localizationContext).ShouldBe(\"[Forbidden user]\");| UsingDbContext(context =>| {| var count = context.UserLoginAttempts.Count(e => e.FailReason == \"[Forbidden user]\");| count.ShouldBeEquivalentTo(1);| });| }"
      }
    ]
  },
  {
    "file": "UserManager_AddToRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = new User| {| TenantId = AbpSession.TenantId,| UserName = \"user1\",| Name = \"John\",| Surname = \"Doe\",| EmailAddress = \"user1@aspnetboilerplate.com\",| IsEmailConfirmed = true,| Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe| // IsLockoutEnabled = isLockoutEnabled| };| var userManager = LocalIocManager.Resolve<UserManager>();| await userManager.CreateAsync(user);| await userManager.AddToRoleAsync(user, \"ADMIN\");| user.Roles.Count.ShouldBe(1);| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "UserManager_DeleteUser_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var user = new User| {| TenantId = AbpSession.TenantId,| UserName = \"user1\",| Name = \"John\",| Surname = \"Doe\",| EmailAddress = \"user1@aspnetboilerplate.com\",| IsEmailConfirmed = true,| Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe| };| await WithUnitOfWorkAsync(async () =>| {| //Add user| var userManager = LocalIocManager.Resolve<UserManager>();| await userManager.CreateAsync(user);| await userManager.AddToRoleAsync(user, \"ADMIN\");| user.Roles.Count.ShouldBe(1);| //Add user login| var userLoginRepository = Resolve<IRepository<UserLogin, long>>();| await userLoginRepository.InsertAsync(| new UserLogin(| user.TenantId,| user.Id,| \"TestLoginProvider\",| \"TestLoginProviderKey\"| )| );| });| await WithUnitOfWorkAsync(async () =>| {| var userManager = LocalIocManager.Resolve<UserManager>();| var userLoginRepository = Resolve<IRepository<UserLogin, long>>();| var isLoginInserted = await userLoginRepository.GetAll().AnyAsync(userLogin =>| userLogin.UserId == user.Id &&| userLogin.TenantId == user.TenantId| );| isLoginInserted.ShouldBeTrue();| //delete user| await userManager.DeleteAsync(user);| });| await WithUnitOfWorkAsync(async () =>| {| var userLoginRepository = Resolve<IRepository<UserLogin, long>>();| //user login should be deleted| var isUserLoginExists = await userLoginRepository.GetAll().AnyAsync(userLogin =>| userLogin.UserId == user.Id &&| userLogin.TenantId == user.TenantId| );| isUserLoginExists.ShouldBeFalse();| });| }"
      }
    ]
  },
  {
    "file": "UserManager_Options_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var userManager = LocalIocManager.Resolve<UserManager>();| userManager.Options.Tokens.ProviderMap.Count.ShouldBeGreaterThan(0);| await userManager.InitializeOptionsAsync(1);| userManager.Options.Tokens.ProviderMap.Count.ShouldBeGreaterThan(0);| }"
      }
    ]
  },
  {
    "file": "UserManager_Permission_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| var defaultTenantId = 1;| var user = UsingDbContext(defaultTenantId, context =>| {| return context.Users.Single(f => f.TenantId == defaultTenantId && f.UserName == AbpUserBase.AdminUserName);| });| await _userManager.GrantPermissionAsync(user, _permissionManager.GetPermission(AppPermissions.TestPermission));| var isGranted = await _permissionChecker.IsGrantedAsync(user.ToUserIdentifier(), AppPermissions.TestPermission);| isGranted.ShouldBe(true);| // Simulate background jobs| LoginAsHostAdmin();| using (var uow = _unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(user.TenantId))| {| isGranted = await _permissionChecker.IsGrantedAsync(user.ToUserIdentifier(), AppPermissions.TestPermission);| isGranted.ShouldBe(true);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| Resolve<IMultiTenancyConfig>().IsEnabled = true;| // Arrange| var defaultTenantId = 1;| var organizationUnit = UsingDbContext(defaultTenantId, context =>| {| return context.OrganizationUnits.Single(ou => ou.TenantId == defaultTenantId && ou.DisplayName == \"OU1\");| });| var permission = _permissionManager.GetPermission(AppPermissions.TestPermission);| LoginAsDefaultTenantAdmin();| using (var uow = _unitOfWorkManager.Begin())| {| var role = await _roleManager.GetRoleByNameAsync(\"MANAGER\");| await _roleManager.GrantPermissionAsync(role, permission);| await _roleManager.AddToOrganizationUnitAsync(role, organizationUnit);| await uow.CompleteAsync();| }| using (var uow = _unitOfWorkManager.Begin())| {| var newUser = new User| {| TenantId = AbpSession.TenantId,| UserName = \"user1\",| Name = \"John\",| Surname = \"Doe\",| EmailAddress = \"user1@aspnetboilerplate.com\",| IsEmailConfirmed = true,| Password = \"AM4OLBpptxBYmM79lGOX9egzZk3vIQU3d/gFCJzaBjAPXzYIK3tQ2N7X4fcrHtElTw==\", //123qwe| };| await _userManager.CreateAsync(newUser);| await uow.CompleteAsync();| }| //Actual| var user = UsingDbContext(defaultTenantId, context =>| {| return context.Users.Single(u => u.TenantId == defaultTenantId && u.UserName == \"user1\");| });| (await _userManager.IsInRoleAsync(user, \"MANAGER\")).ShouldBeFalse();| (await _userManager.IsInOrganizationUnitAsync(user, organizationUnit)).ShouldBeFalse();| (await _userManager.IsGrantedAsync(user, permission)).ShouldBeFalse();| using (var uow = _unitOfWorkManager.Begin())| {| await _userManager.AddToOrganizationUnitAsync(user, organizationUnit);| await uow.CompleteAsync();| }| //Assert| (await _userManager.IsInRoleAsync(user, \"MANAGER\")).ShouldBeTrue();| (await _userManager.IsInOrganizationUnitAsync(user, organizationUnit)).ShouldBeTrue();| (await _userManager.IsGrantedAsync(user, permission)).ShouldBeTrue();| }"
      }
    ]
  },
  {
    "file": "UserManager_RemoveFromRole_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var userManager = LocalIocManager.Resolve<UserManager>();| var roleManager = LocalIocManager.Resolve<RoleManager>();| var adminUser = await userManager.FindByNameAsync(\"admin\");| var managerRole = await roleManager.FindByNameAsync(\"MANAGER\");| await userManager.SetRolesAsync(adminUser, new[] { managerRole.Name });| await uow.CompleteAsync();| }| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var userManager = LocalIocManager.Resolve<UserManager>();| var adminUser = await userManager.FindByNameAsync(\"admin\");| await userManager.RemoveFromRolesAsync(adminUser, new[] { \"MANAGER\" });| var adminRoles = await userManager.GetRolesAsync(adminUser);| adminRoles.Count.ShouldBe(0);| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "UserManager_SetRoles_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var userManager = LocalIocManager.Resolve<UserManager>();| var roleManager = LocalIocManager.Resolve<RoleManager>();| var adminUser = await userManager.FindByNameAsync(\"admin\");| var managerRole = await roleManager.FindByNameAsync(\"MANAGER\");| await userManager.SetRolesAsync(adminUser, new[] { managerRole.Name });| await roleManager.DeleteAsync(managerRole);| await uow.CompleteAsync();| }| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var userManager = LocalIocManager.Resolve<UserManager>();| var roleManager = LocalIocManager.Resolve<RoleManager>();| var adminUser = await userManager.FindByNameAsync(\"admin\");| var useRole = await roleManager.FindByNameAsync(\"user\");| await userManager.SetRolesAsync(adminUser, new[] { useRole.Name });| var adminRoles = await userManager.GetRolesAsync(adminUser);| adminRoles.Count.ShouldBe(1);| adminRoles.ShouldContain(x => x == \"User\");| await uow.CompleteAsync();| }| }"
      }
    ]
  },
  {
    "file": "UserManager_Tokens_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| var tokenValidityKey = Guid.NewGuid().ToString();| await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow.AddDays(1));| var isTokenValidityKeyValid =| await _abpUserManager.IsTokenValidityKeyValidAsync(user, tokenValidityKey);| isTokenValidityKeyValid.ShouldBeTrue();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| var tokenValidityKey = Guid.NewGuid().ToString();| await _abpUserManager.AddTokenValidityKeyAsync(user.ToUserIdentifier(), tokenValidityKey, DateTime.UtcNow.AddDays(1));| var isTokenValidityKeyValid = await _abpUserManager.IsTokenValidityKeyValidAsync(| user,| tokenValidityKey| );| isTokenValidityKeyValid.ShouldBeTrue();| await uow.CompleteAsync();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (var uow = Resolve<IUnitOfWorkManager>().Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| var tokenValidityKey = Guid.NewGuid().ToString();| await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow);| var isTokenValidityKeyValid =| await _abpUserManager.IsTokenValidityKeyValidAsync(user, tokenValidityKey);| isTokenValidityKeyValid.ShouldBeFalse();| }| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenValidityKey = Guid.NewGuid().ToString();| using (_unitOfWorkManager.Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| await _abpUserManager.AddTokenValidityKeyAsync(user, tokenValidityKey, DateTime.UtcNow.AddDays(1));| await _unitOfWorkManager.Current.SaveChangesAsync();| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(1);| }| using (_unitOfWorkManager.Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| await _abpUserManager.RemoveTokenValidityKeyAsync(user, tokenValidityKey);| await _unitOfWorkManager.Current.SaveChangesAsync();| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(0);| }| }"
      }
    ]
  },
  {
    "file": "UserTokenExpirationWorker_Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| //Arrange| using (_unitOfWorkManager.Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow| );| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow.AddDays(1)| );| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow.AddDays(1)| );| await _unitOfWorkManager.Current.SaveChangesAsync();| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(3);| }| using (_unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(null))| {| var user = await _abpUserManager.FindByNameOrEmailAsync(AbpUserBase.AdminUserName);| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow| );| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow.AddDays(1)| );| await _abpUserManager.AddTokenValidityKeyAsync(| user,| Guid.NewGuid().ToString(),| DateTime.UtcNow.AddDays(1)| );| await _unitOfWorkManager.Current.SaveChangesAsync();| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(3);| }| }| //Act| _userTokenExpirationWorker.Start();| //Assert| using (_unitOfWorkManager.Begin())| {| var user = await _abpUserManager.GetUserByIdAsync(AbpSession.GetUserId());| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(2);| }| using (_unitOfWorkManager.Begin())| {| using (_unitOfWorkManager.Current.SetTenantId(null))| {| var user = await _abpUserManager.FindByNameOrEmailAsync(AbpUserBase.AdminUserName);| var allTokens = await _userTokenRepository.GetAllListAsync(t => t.UserId == user.Id);| allTokens.Count.ShouldBe(2);| }| }| }"
      }
    ]
  },
  {
    "file": "AbpODataDtoControllerPermissionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/ProductsDto\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(| Arg.Is<string>(permissionNames => permissionNames == \"GetAllProductsPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/ProductsDto(1)\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(| Arg.Is<string>(permissionNames => permissionNames == \"GetProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));| var response = await client.PostAsync(\"/odata/ProductsDto\",| new StringContent(content, Encoding.UTF8, \"application/json\"));| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"CreateProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));| var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/ProductsDto(1)\")| {| Content = new StringContent(content, Encoding.UTF8, \"application/json\")| });| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"UpdateProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.DeleteAsync(\"/odata/ProductsDto(1)\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"DeleteProductPermission\")| );| }"
      }
    ]
  },
  {
    "file": "AbpODataDtoControllerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/ProductsDto\");| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.OK);| var responseBody = await response.Content.ReadAsStringAsync();| responseBody.ShouldBe(\"[{\\\"name\\\":\\\"Test product\\\",\\\"price\\\":100,\\\"id\\\":1}]\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/ProductsDto(1)\");| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.OK);| var responseBody = await response.Content.ReadAsStringAsync();| responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product\\\",\\\"price\\\":100,\\\"id\\\":1}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));| var response = await client.PostAsync(\"/odata/ProductsDto\",| new StringContent(content, Encoding.UTF8, \"application/json\"));| // Assert| var responseBody2 = await response.Content.ReadAsStringAsync();| response.StatusCode.ShouldBe(HttpStatusCode.Created);| var createResponse = await client.GetAsync(\"/odata/ProductsDto(2)\");| createResponse.StatusCode.ShouldBe(HttpStatusCode.OK);| var responseBody = await createResponse.Content.ReadAsStringAsync();| responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product2\\\",\\\"price\\\":0,\\\"id\\\":2}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new ProductCreateInput| {| Name = \"Test product2\",| Price = 150| });| var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/ProductsDto(1)\")| {| Content = new StringContent(content, Encoding.UTF8, \"application/json\")| });| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.NoContent);| var createResponse = await client.GetAsync(\"/odata/ProductsDto(1)\");| createResponse.StatusCode.ShouldBe(HttpStatusCode.OK);| var responseBody = await createResponse.Content.ReadAsStringAsync();| responseBody.ShouldBe(\"{\\\"name\\\":\\\"Test product2\\\",\\\"price\\\":150,\\\"id\\\":1}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var deleteResponse = await client.DeleteAsync(\"/odata/ProductsDto(1)\");| // Assert| deleteResponse.StatusCode.ShouldBe(HttpStatusCode.NoContent);| var response = await client.GetAsync(\"/odata/ProductsDto\");| response.StatusCode.ShouldBe(HttpStatusCode.OK);| var responseBody = await response.Content.ReadAsStringAsync();| responseBody.ShouldBe(\"[]\");| }"
      }
    ]
  },
  {
    "file": "AbpODataEntityControllerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata\");| var response2 = await client.GetAsync(\"/odata/$metadata\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"200\"));| (await response.Content.ReadAsStringAsync()).ShouldNotContain(\"__abp\");| response2.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"200\"));| (await response2.Content.ReadAsStringAsync()).ShouldNotContain(\"__abp\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/Products\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(| Arg.Is<string>(permissionNames => permissionNames == \"GetAllProductsPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/odata/Products(1)\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(| Arg.Is<string>(permissionNames => permissionNames == \"GetProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));| var response = await client.PostAsync(\"/odata/Products\",| new StringContent(content, Encoding.UTF8, \"application/json\"));| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"CreateProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var content = JsonConvert.SerializeObject(new Product(\"Test product2\"));| var response = await client.SendAsync(new HttpRequestMessage(HttpMethod.Patch, \"/odata/Products(1)\")| {| Content = new StringContent(content, Encoding.UTF8, \"application/json\")| });| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"UpdateProductPermission\")| );| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.DeleteAsync(\"/odata/Products(1)\");| // Assert| response.StatusCode.ShouldBe(Enum.Parse<HttpStatusCode>(\"500\"));| _permissionChecker.Received().IsGranted(Arg.Is<string>(| permissionNames => permissionNames == \"DeleteProductPermission\")| );| }"
      }
    ]
  },
  {
    "file": "InputAndOutputDateTimeFormat_Tests.cs",
    "methods": [
      {
        "name": "InputAndOutputDateTimeFormat_Test",
        "body": "{| Clock.Provider = ClockProviders.Utc;| var resultDate = new DateTime(2016, 04, 13, 08, 58, 10, DateTimeKind.Utc);| var inputDatetimeFormat = new List<string>()| {| \"yyyy*MM*dd\",| \"yyyy-MM-dd HH:mm:ss\"| };| var outputDatetimeFormat = \"yyyy*MM-dd HH:mm:ss\";| var options = new JsonSerializerOptions();| options.Converters.Add(new AbpDateTimeConverter(inputDatetimeFormat, outputDatetimeFormat));| options.Converters.Add(new AbpNullableDateTimeConverter(inputDatetimeFormat, outputDatetimeFormat));| var json = JsonSerializer.Serialize(new DateTimeDto()| {| DateTime1 = resultDate,| DateTime2 = resultDate| }, options);| json.ShouldContain(\"\\\"DateTime1\\\":\\\"2016*04-13 08:58:10\\\"\");| json.ShouldContain(\"\\\"DateTime2\\\":\\\"2016*04-13 08:58:10\\\"\");| json = JsonConvert.SerializeObject(new DateTimeDto()| {| DateTime1 = resultDate,| DateTime2 = resultDate| }, new JsonSerializerSettings| {| ContractResolver = new AbpMvcContractResolver(inputDatetimeFormat, outputDatetimeFormat)| });| json.ShouldContain(\"\\\"DateTime1\\\":\\\"2016*04-13 08:58:10\\\"\");| json.ShouldContain(\"\\\"DateTime2\\\":\\\"2016*04-13 08:58:10\\\"\");| var dto = JsonSerializer.Deserialize<DateTimeDto>(| \"{\\\"DateTime1\\\":\\\"\" + resultDate.ToString(\"yyyy*MM*dd\") + \"\\\",\\\"DateTime2\\\":\\\"\" +| resultDate.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"\\\"}\", options);| dto.DateTime1.ShouldBe(resultDate.Date);| dto.DateTime1.Kind.ShouldBe(DateTimeKind.Utc);| dto.DateTime2.ShouldBe(resultDate);| dto.DateTime2.Value.Kind.ShouldBe(DateTimeKind.Utc);| dto = JsonConvert.DeserializeObject<DateTimeDto>(| \"{\\\"DateTime1\\\":\\\"\" + resultDate.ToString(\"yyyy*MM*dd\") + \"\\\",\\\"DateTime2\\\":\\\"\" +| resultDate.ToString(\"yyyy-MM-dd HH:mm:ss\") + \"\\\"}\", new JsonSerializerSettings| {| ContractResolver = new AbpMvcContractResolver(inputDatetimeFormat, outputDatetimeFormat)| });| dto.DateTime1.ShouldBe(resultDate.Date);| dto.DateTime1.Kind.ShouldBe(DateTimeKind.Utc);| dto.DateTime2.ShouldBe(resultDate);| dto.DateTime2.Value.Kind.ShouldBe(DateTimeKind.Utc);| }"
      }
    ]
  },
  {
    "file": "MemoryCacheOptions_Test.cs",
    "methods": [
      {
        "name": "MemoryCacheOption_Size_Test",
        "body": "{| var memoryCacheManager = _applicationFactory.Services.GetService(typeof(ICacheManager)) as ICacheManager;| memoryCacheManager.ShouldNotBeNull();| memoryCacheManager.GetType().ShouldBe(typeof(AbpMemoryCacheManager));| var memoryCache = memoryCacheManager.GetCache(\"Test\");| memoryCache.ShouldNotBeNull();| memoryCache.GetType().ShouldBe(typeof(AbpMemoryCache));| var memberPath = ReflectionHelper.GetMemberPath(typeof(AbpMemoryCache), \"_memoryCacheOptions\").First();| var memoryCacheOptions = memberPath.GetMemberValue(memoryCache) as IOptions<MemoryCacheOptions>;| memoryCacheOptions.ShouldNotBeNull();| memoryCacheOptions.Value.SizeLimit.ShouldBe(2048);| }"
      },
      {
        "name": "MemoryCacheOption_SizeLimit_Test",
        "body": "{| new AbpMemoryCache(\"test\", new MemoryCacheOptions| {| SizeLimit = 256,| }).Set(\"test\", \"test\");| }"
      }
    ]
  },
  {
    "file": "RazorAuditPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.PostAsync(\"/AuditFilterPageDemo\", new FormUrlEncodedContent(new[]| {| new KeyValuePair<string, string>(\"Message\",\"My test message\"),| }));| // Assert| response.EnsureSuccessStatusCode();|#pragma warning disable 4014| _auditingStore.Received().SaveAsync(Arg.Is<AuditInfo>(a => a.ServiceName.Contains(\"AuditFilterPageDemo\") && a.Parameters.Contains(\"My test message\")));|#pragma warning restore 4014| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| AbpAspNetCoreDemoModule.ConfigurationAction.Value = configuration =>| {| configuration.Auditing.SaveReturnValues = true;| };| var client = _factory.CreateClient();| // Act| var response = await client.PostAsync(\"/AuditFilterPageDemo5?handler=String\", null);| // Assert| response.EnsureSuccessStatusCode();|#pragma warning disable 4014| _auditingStore.Received().SaveAsync(Arg.Is<AuditInfo>(a =>| a.ServiceName.Contains(\"AuditFilterPageDemo5\") &&| a.MethodName.Contains(\"String\") &&| a.ReturnValue == \"test\"));|#pragma warning restore 4014| }"
      }
    ]
  },
  {
    "file": "RazorExceptionPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/ExceptionFilterPageDemo\");| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.InternalServerError);| var result = JsonConvert.DeserializeObject<AjaxResponse>(await response.Content.ReadAsStringAsync());| result.ShouldNotBeNull();| result.Error.Message.ShouldBe(\"OnGet\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.PostAsync(\"/ExceptionFilterPageDemo\", new StringContent(\"\"));| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.InternalServerError);| var result = await response.Content.ReadAsStringAsync();| result.IndexOf(\"UserFriendlyException: OnPost\",| StringComparison.InvariantCultureIgnoreCase).ShouldNotBe(-1);| }"
      }
    ]
  },
  {
    "file": "RazorResultPageFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.GetAsync(\"/ResultFilterPageDemo\");| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.OK);| var result = await response.Content.ReadAsStringAsync();| result.ShouldBe(\"OnGet\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var client = _factory.CreateClient();| // Act| var response = await client.PostAsync(\"/ResultFilterPageDemo\", new StringContent(\"\"));| // Assert| response.StatusCode.ShouldBe(HttpStatusCode.OK);| var result = JsonConvert.DeserializeObject<AjaxResponse>(await response.Content.ReadAsStringAsync());| result.ShouldNotBeNull();| result.Success.ShouldBeTrue();| result.Result.ShouldBe(\"OnPost\");| }"
      }
    ]
  }
]