[
  {
    "file": "SnapshotTests.cs",
    "methods": [
      {
        "name": "MatchSnapshot",
        "body": "{| new MyClass().MatchSnapshot();| }"
      },
      {
        "name": "OneSnapshot",
        "body": "{| Snapshot.Match(new MyClass());| }"
      },
      {
        "name": "OneSnapshot_Txt_Extension",
        "body": "{| Snapshot.Match(new MyClass(), extension: \".txt\");| }"
      },
      {
        "name": "OneSnapshot_Post_Fix",
        "body": "{| Snapshot.Match(new MyClass(), \"ABC\");| }"
      },
      {
        "name": "TwoSnapshot",
        "body": "{| Snapshot.Match(new MyClass(), new MyClass());| }"
      },
      {
        "name": "ThreeSnapshot",
        "body": "{| Snapshot.Match(new MyClass(), new MyClass(), new MyClass());| }"
      },
      {
        "name": "SnapshotBuilder",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass());| snapshot.Add(new MyClass { Foo = \"Bar\", });| snapshot.Add(new MyClass { Foo = \"Baz\", });| snapshot.Match();| }"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass());| snapshot.Add(new MyClass { Foo = \"Bar\", });| snapshot.Add(new MyClass { Foo = \"Baz\", });| await snapshot.MatchAsync();| }"
      },
      {
        "name": "SnapshotBuilder_Segment_Name",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass());| snapshot.Add(new MyClass { Foo = \"Bar\", }, \"Bar:\");| snapshot.Add(new MyClass { Foo = \"Baz\", });| snapshot.Match();| }"
      },
      {
        "name": "SnapshotBuilder_Segment_Name_All",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass(), \"Segment 1:\");| snapshot.Add(new MyClass { Foo = \"Bar\", }, \"Segment 2:\");| snapshot.Add(new MyClass { Foo = \"Baz\", }, \"Segment 3:\");| snapshot.Match();| }"
      },
      {
        "name": "SnapshotBuilder_Segment_Custom_Serializer_For_Segment",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass());| snapshot.Add(new MyClass { Foo = \"Baz\", }, \"Bar:\", new CustomSerializer());| snapshot.Add(new MyClass { Foo = \"Baz\", });| snapshot.Add(new MyClass { Foo = \"Baz\", });| snapshot.Match();| }"
      },
      {
        "name": "SnapshotBuilder_Segment_Custom_Global_Serializer",
        "body": "{| Snapshot.RegisterFormatter(new CustomSerializer());| var snapshot = new Snapshot();| snapshot.Add(new MyClass { Foo = \"123\", });| snapshot.Match();| }"
      },
      {
        "name": "SnapshotBuilder_GraphQL_Segment",
        "body": "{| var snapshot = new Snapshot();| snapshot.Add(new MyClass { Foo = \"def\", });| snapshot.Add(Utf8GraphQLParser.Parse(\"{ abc }\"));| snapshot.Match();| }"
      }
    ]
  },
  {
    "file": "AutoBatchSchedulerTests.cs",
    "methods": [
      {
        "name": "DispatchOnEnqueue",
        "body": "{| // arrange| var dispatched = false;| var waitHandle = new AutoResetEvent(false);| // act| AutoBatchScheduler.Default.Schedule(() =>| {| dispatched = true;| waitHandle.Set();| return default;| });| // assert| waitHandle.WaitOne(TimeSpan.FromSeconds(5));| Assert.True(dispatched);| }"
      }
    ]
  },
  {
    "file": "BatchDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var dataLoader = new CustomBatchDataLoader(| new AutoBatchScheduler(),| new DataLoaderOptions());| // act| var result = await dataLoader.LoadAsync(\"abc\");| // assert| Assert.Equal(\"Value:abc\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var dataLoader = new CustomBatchDataLoader(| new DelayDispatcher(),| new DataLoaderOptions());| // act| var result1 = dataLoader.LoadAsync(\"1abc\");| var result2 = dataLoader.LoadAsync(\"0abc\");| // assert| Assert.Equal(\"Value:1abc\", await result1);| Assert.Equal(\"Value:0abc\", await result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var dataLoader = new CustomBatchDataLoader(| new DelayDispatcher(),| new DataLoaderOptions());| // act| var result1 = dataLoader.LoadAsync(\"1abc\");| var result2 = dataLoader.LoadAsync(\"1abc\");| // assert| Assert.Same(result1, result2);| Assert.Equal(\"Value:1abc\", await result1);| Assert.Equal(\"Value:1abc\", await result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cts = new CancellationTokenSource(5000);| var dataLoader = new CustomBatchDataLoader(| new InstantDispatcher(),| new DataLoaderOptions());| // act| await dataLoader.LoadAsync([\"1abc\", \"0abc\"], cts.Token);| // assert| Assert.Equal(1, dataLoader.ExecutionCount);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cacheOwner = new PromiseCacheOwner();| var dataLoader = new EmptyBatchDataLoader(| new AutoBatchScheduler(),| new DataLoaderOptions| {| Cache = cacheOwner.Cache| });| // act| var result = await dataLoader.LoadAsync(\"1\");| // assert| Assert.Null(result);| }"
      }
    ]
  },
  {
    "file": "CacheDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cacheOwner = new PromiseCacheOwner();| var dataLoader = new CustomCacheDataLoader(| new DataLoaderOptions| {| Cache = cacheOwner.Cache| });| // act| var result = await dataLoader.LoadAsync(\"abc\");| // assert| Assert.Equal(\"Value:abc\", result);| }"
      }
    ]
  },
  {
    "file": "CancellationTokenSourceExtensionsTests.cs",
    "methods": [
      {
        "name": "CreateLinkedCancellationTokenSourceNull",
        "body": "{| // arrange| CancellationTokenSource source = null!;| var token = new CancellationTokenSource().Token;| // act| Action verify = () => source.CreateLinkedCancellationToken(token);| // assert| Assert.Throws<ArgumentNullException>(\"source\", verify);| }"
      },
      {
        "name": "CreateLinkedCancellationTokenNone",
        "body": "{| // arrange| var source = new CancellationTokenSource();| var token = CancellationToken.None;| // act| var combinedToken = source| .CreateLinkedCancellationToken(token);| // assert| Assert.Equal(source.Token, combinedToken);| }"
      },
      {
        "name": "CreateLinkedCancellationToken",
        "body": "{| // arrange| var source = new CancellationTokenSource();| var token = new CancellationTokenSource().Token;| // act| var combinedToken = source| .CreateLinkedCancellationToken(token);| // assert| Assert.NotEqual(source.Token, combinedToken);| Assert.NotEqual(token, combinedToken);| }"
      }
    ]
  },
  {
    "file": "DataLoaderExtensionsTests.cs",
    "methods": [
      {
        "name": "SetCacheEntryDataLoaderNull",
        "body": "{| // arrange| var key = \"Foo\";| var value = \"Bar\";| // act| void Verify() => default(IDataLoader<string, string>)!.SetCacheEntry(key, value);| // assert| Assert.Throws<ArgumentNullException>(\"dataLoader\", Verify);| }"
      },
      {
        "name": "SetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = \"Bar\";| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "SetCacheEntryNoException",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, null!);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cacheOwner = new PromiseCacheOwner();| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler,| new DataLoaderOptions| {| Cache = cacheOwner.Cache| });| const string key = \"Foo\";| const string value = \"Bar\";| // act| loader.SetCacheEntry(key, value);| // assert| var loadResult = await loader.LoadAsync(key);| Assert.Equal(value, loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cacheOwner = new PromiseCacheOwner();| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler,| new DataLoaderOptions| {| Cache = cacheOwner.Cache| });| const string key = \"Foo\";| const string first = \"Bar\";| const string second = \"Baz\";| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| var loadResult = await loader.LoadAsync(key);| Assert.Equal(first, loadResult);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryDataLoaderNull",
        "body": "{| // arrange| object key = \"Foo\";| object value = \"Bar\";| // act| void Verify() => default(IDataLoader)!.SetCacheEntry(key, value);| // assert| Assert.Throws<ArgumentNullException>(\"dataLoader\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryKeyNull",
        "body": "{| // arrange| using var cacheOwner = new PromiseCacheOwner();| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler,| new DataLoaderOptions| {| Cache = cacheOwner.Cache| });| object value = \"Bar\";| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryNoException",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, null!);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      }
    ]
  },
  {
    "file": "DataLoaderListBatchTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<TestDataLoader>()| .BuildServiceProvider();| var dataLoader = services.GetRequiredService<TestDataLoader>();| // act| var result = await dataLoader.LoadRequiredAsync(| Enumerable.Range(0, 5000).ToArray(),| CancellationToken.None);| // assert| Assert.Equal(5000, result.Count);| foreach (var items in result)| {| Assert.Equal(Enumerable.Range(0, 500).ToArray(), items.ToArray());| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(5000);| var ct = cts.Token;| var services = new ServiceCollection()| .AddDataLoader<TestDataLoader>()| .BuildServiceProvider();| var dataLoader = services.GetRequiredService<TestDataLoader>();| // act| List<Task> tasks = new();| foreach (var _ in Enumerable.Range(0, 10))| {| tasks.Add(| Task.Run(| async () =>| {| var result = await dataLoader.LoadAsync(Enumerable.Range(0, 5000).ToArray(), ct);| // assert| Assert.Equal(5000, result.Count);| },| ct));| }| await Task.WhenAll(tasks);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<UnresolvedTestDataLoader>()| .BuildServiceProvider();| var dataLoader = services.GetRequiredService<UnresolvedTestDataLoader>();| // act| async Task Error()| => await dataLoader.LoadRequiredAsync([1, 2], cts.Token);| // assert| var ex = await Assert.ThrowsAsync<KeyNotFoundException>(Error);| Assert.Equal(\"The key `1` could not be resolved.\", ex.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<UnresolvedTestDataLoader>()| .BuildServiceProvider();| var dataLoader = services.GetRequiredService<UnresolvedTestDataLoader>();| // act| async Task Error()| => await dataLoader.LoadRequiredAsync([1, 2, 3], cts.Token);| // assert| var ex = await Assert.ThrowsAsync<KeyNotFoundException>(Error);| Assert.Equal(\"The keys `1, 3` could not be resolved.\", ex.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<TestDataLoader>()| .BuildServiceProvider();| await using (var scope1 = services.CreateAsyncScope())| {| var dataLoader = scope1.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(| Enumerable.Range(0, 5000).ToArray(),| CancellationToken.None);| }| await using (var scope2 = services.CreateAsyncScope())| {| var dataLoader = scope2.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(| Enumerable.Range(0, 5000).ToArray(),| CancellationToken.None);| }| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<TestDataLoader>()| .BuildServiceProvider();| await using (var scope1 = services.CreateAsyncScope())| {| var dataLoader = scope1.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(1, cts.Token);| }| await using (var scope2 = services.CreateAsyncScope())| {| var dataLoader = scope2.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(2, cts.Token);| }| await using (var scope3 = services.CreateAsyncScope())| {| var dataLoader = scope3.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(1, cts.Token);| }| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5000);| var services = new ServiceCollection()| .AddDataLoader<TestDataLoader>()| .BuildServiceProvider();| await using (var scope1 = services.CreateAsyncScope())| {| var dataLoader = scope1.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(| Enumerable.Range(0, 1).ToArray(),| CancellationToken.None);| }| await using (var scope2 = services.CreateAsyncScope())| {| var dataLoader = scope2.ServiceProvider.GetRequiredService<TestDataLoader>();| await dataLoader.LoadRequiredAsync(| Enumerable.Range(0, 1).ToArray(),| CancellationToken.None);| }| }"
      }
    ]
  },
  {
    "file": "DataLoaderOptionsTests.cs",
    "methods": [
      {
        "name": "ConstructorAllProps1",
        "body": "{| // act| var options = new DataLoaderOptions| {| Cache = new PromiseCache(1),| MaxBatchSize = 1,| DiagnosticEvents = new DataLoaderDiagnosticEventListener(),| };| // assert| Assert.NotNull(options.Cache);| Assert.Equal(1, options.MaxBatchSize);| Assert.NotNull(options.DiagnosticEvents);| }"
      },
      {
        "name": "ConstructorAllProps2",
        "body": "{| // act| var options = new DataLoaderOptions| {| Cache = null,| MaxBatchSize = 10,| DiagnosticEvents = null,| };| // assert| Assert.Null(options.Cache);| Assert.Equal(10, options.MaxBatchSize);| Assert.Null(options.DiagnosticEvents);| }"
      },
      {
        "name": "ConstructorEmpty",
        "body": "{| // act| var options = new DataLoaderOptions();| // assert| Assert.Null(options.Cache);| Assert.Equal(1024, options.MaxBatchSize);| Assert.Null(options.DiagnosticEvents);| }"
      },
      {
        "name": "Copy",
        "body": "{| // arrange| var options = new DataLoaderOptions| {| Cache = new PromiseCache(1),| MaxBatchSize = 1,| DiagnosticEvents = new DataLoaderDiagnosticEventListener(),| };| // act| var copy = options.Copy();| // assert| Assert.NotNull(copy.Cache);| Assert.Equal(1, copy.MaxBatchSize);| Assert.NotNull(copy.DiagnosticEvents);| }"
      }
    ]
  },
  {
    "file": "DataLoaderStateTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(typeof(string).FullName!);| // act| await loader.SetState(\"abc\").LoadAsync(\"def\");| // assert| Assert.Equal(\"abc\", loader.State);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(\"abc\");| // act| await loader.SetState(\"abc\", \"def\").LoadAsync(\"ghi\");| // assert| Assert.Equal(\"def\", loader.State);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(typeof(string).FullName!);| // act| await loader.SetState(\"abc\").TrySetState(\"xyz\").LoadAsync(\"def\");| // assert| Assert.Equal(\"abc\", loader.State);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(\"abc\");| // act| await loader.SetState(\"abc\", \"def\").TrySetState(\"abc\", \"xyz\").LoadAsync(\"def\");| // assert| Assert.Equal(\"def\", loader.State);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(typeof(string).FullName!);| // act| await loader.AddStateEnumerable(\"abc\").AddStateEnumerable(\"xyz\").LoadAsync(\"def\");| // assert| Assert.Collection(| (IEnumerable<string>)loader.State!,| item => Assert.Equal(\"abc\", item),| item => Assert.Equal(\"xyz\", item));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var loader = new DummyDataLoader(\"abc\");| // act| await loader.AddStateEnumerable(\"abc\", \"def\").AddStateEnumerable(\"abc\", \"xyz\").LoadAsync(\"def\");| // assert| Assert.Collection(| (IEnumerable<string>)loader.State!,| item => Assert.Equal(\"def\", item),| item => Assert.Equal(\"xyz\", item));| }"
      }
    ]
  },
  {
    "file": "DataLoaderTests.cs",
    "methods": [
      {
        "name": "ClearCacheNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader(sp => new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>()));| var scope = services.BuildServiceProvider().CreateScope();| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| // act| void Verify() => dataLoader.ClearCache();| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearCacheAllEntries",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| loader.SetCacheEntry(\"Bar\", Task.FromResult<string?>(\"Baz\"));| // act| loader.ClearCache();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<string?> Verify() => loader.LoadAsync(default(string)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // first load.| (await loader.LoadAsync(key)).MatchSnapshot();| // act| var result = await loader.LoadAsync(key);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| Task<string?> Verify() => loader.LoadAsync(key, CancellationToken.None);| // assert| var task = Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify() => loader.LoadAsync(default(string[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<string>();| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers| .CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify()| => loader.LoadAsync(default(List<string>)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string>();| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| (await loader.LoadAsync(keys, CancellationToken.None)).MatchSnapshot();| // act| var result = await loader.LoadAsync(keys, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var repository = new Dictionary<string, string?>| {| { \"Foo\", \"Bar\" },| { \"Bar\", null },| { \"Baz\", \"Foo\" },| { \"Qux\", null },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string?>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| var loadResult = loader.LoadAsync(requestKeys);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = Errors.CreateKeysAndValuesMustMatch(4, 3);| var repository = new Dictionary<string, string>| {| { \"Foo\", \"Bar\" },| { \"Bar\", \"Baz\" },| { \"Baz\", \"Foo\" },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException.Message, actualException.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = new Exception(\"Foo\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| => throw expectedException;| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task = Assert.ThrowsAsync<Exception>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException, actualException);| }"
      },
      {
        "name": "RemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(default!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "RemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "RemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult<string?>(\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<string?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "SetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "SetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var value = Task.FromResult<string?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var first = Task.FromResult<string?>(\"Bar\");| var second = Task.FromResult<string?>(\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<object?> Verify() => loader.LoadAsync(default(object)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| Task<object?> Verify() => loader.LoadAsync(key);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify() => loader.LoadAsync(default(object[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new object[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify()| => loader.LoadAsync(default(List<object>)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult((object?)\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(null!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult((object?)\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<object?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| void Verify() => loader.SetCacheEntry(key, value);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderSetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| const string key = \"Foo\";| var first = Task.FromResult((object?)\"Bar\");| var second = Task.FromResult((object?)\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new PromiseCache(10);| var dataLoader1 = new TestDataLoader1(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity1 = await dataLoader1.LoadAsync(1, CancellationToken.None);| await Task.Delay(500);| // act| var dataLoader2 = new TestDataLoader2(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity2 = await dataLoader2.LoadAsync(2, CancellationToken.None);| // assert| Assert.Same(entity1, entity2);| }"
      }
    ]
  },
  {
    "file": "DataLoaderServiceCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "ImplFactoryIsCalledWhenServiceIsResolved",
        "body": "{| // arrange| var factoryCalled = false;| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader(sp =>| {| factoryCalled = true;| return new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>());| });| var scope = services.BuildServiceProvider().CreateScope();| // act| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| // assert| Assert.NotNull(dataLoader);| Assert.True(factoryCalled);| }"
      },
      {
        "name": "InterfaceImplFactoryIsCalledWhenServiceIsResolved",
        "body": "{| // arrange| var factoryCalled = false;| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader<IDataLoader<string, string>, DataLoader<string, string>>(sp =>| {| factoryCalled = true;| return new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>());| });| var scope = services.BuildServiceProvider().CreateScope();| // act| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| var asInterface = scope.ServiceProvider.GetRequiredService<IDataLoader<string, string>>();| // assert| Assert.NotNull(dataLoader);| Assert.NotNull(asInterface);| Assert.True(factoryCalled);| }"
      }
    ]
  },
  {
    "file": "GroupDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var dataLoader = new CustomBatchDataLoader(| new AutoBatchScheduler(),| new DataLoaderOptions());| // act| var result = await dataLoader.LoadRequiredAsync(\"abc\");| // assert| Assert.Collection(result, t => Assert.Equal(\"Value:abc\", t));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var dataLoader = new CustomBatchDataLoader(| new DelayDispatcher(),| new DataLoaderOptions());| // act| var result1 = dataLoader.LoadRequiredAsync(\"1abc\");| var result2 = dataLoader.LoadRequiredAsync(\"0abc\");| // assert| Assert.Collection(await result1, t => Assert.Equal(\"Value:1abc\", t));| Assert.Collection(await result2, t => Assert.Equal(\"Value:0abc\", t));| }"
      }
    ]
  },
  {
    "file": "PromiseCacheOwnerTests.cs",
    "methods": [
      {
        "name": "EnsureTaskCacheIsReused",
        "body": "{| // arrange| var pool = PromiseCachePool.Create();| var cacheOwner1 = new PromiseCacheOwner(pool);| var cache = cacheOwner1.Cache;| cacheOwner1.Dispose();| // act| using var cacheOwner2 = new PromiseCacheOwner(pool);| // assert| Assert.Same(cache, cacheOwner2.Cache);| }"
      },
      {
        "name": "EnsureNewCachesAreIssued",
        "body": "{| // arrange| var pool = PromiseCachePool.Create();| // act| using var cacheOwner1 = new PromiseCacheOwner(pool);| using var cacheOwner2 = new PromiseCacheOwner(pool);| // assert| Assert.NotSame(cacheOwner1.Cache, cacheOwner2.Cache);| }"
      },
      {
        "name": "DisposingTwoTimesWillNotThrow",
        "body": "{| var cacheOwner = new PromiseCacheOwner();| cacheOwner.Dispose();| cacheOwner.Dispose();| }"
      }
    ]
  },
  {
    "file": "PromiseCacheTests.cs",
    "methods": [
      {
        "name": "ConstructorNoException",
        "body": "{| // arrange| var cacheSize = 1;| // act| void Verify() => new PromiseCache(cacheSize);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearNoException",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| // act| void Verify() => cache.Clear();| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearEmptyCache",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| // act| cache.Clear();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "ClearAllEntries",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| cache.TryAdd(new PromiseCacheKey(\"a\", \"Foo\"), new Promise<string>(\"Bar\"));| cache.TryAdd(new PromiseCacheKey(\"a\", \"Bar\"), new Promise<string>(\"Baz\"));| // act| cache.Clear();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "RemoveNoException",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = \"Foo\";| // act| bool Verify() => cache.TryRemove(new(\"a\", key));| // assert| Assert.False(Verify());| }"
      },
      {
        "name": "RemoveEntry",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| var value = Task.FromResult(\"Bar\");| cache.TryAdd(key, new Promise<string>(value));| // act| cache.TryRemove(key);| // assert| var retrieved = cache.GetOrAddTask(key, _ => new Promise<string>(\"Baz\"));| Assert.NotSame(value, retrieved);| }"
      },
      {
        "name": "TryAddValueNull",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| // act| void Verify() => cache.TryAdd(key, default(Promise<string>));| // assert| Assert.Throws<ArgumentNullException>(\"promise\", Verify);| }"
      },
      {
        "name": "TryAddNewCacheEntry",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| var expected = new Promise<string>(\"Bar\");| // act| var added = cache.TryAdd(key, expected);| // assert| var resolved = cache.GetOrAddTask(key, _ => new Promise<string>(\"Baz\"));| Assert.True(added);| Assert.Equal(expected.Task, resolved);| }"
      },
      {
        "name": "TryAddNewCacheEntryWithFactory",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| var expected = new Promise<string>(Task.FromResult(\"Bar\"));| // act| var added = cache.TryAdd(key, () => expected);| // assert| var resolved = cache.GetOrAddTask(key, _ => new Promise<string>(Task.FromResult(\"Baz\")));| Assert.True(added);| Assert.Same(expected.Task, resolved);| }"
      },
      {
        "name": "TryAddTwice",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| var expected = Task.FromResult(\"Bar\");| var another = Task.FromResult(\"Baz\");| // act| var addedFirst = cache.TryAdd(key, new Promise<string>(expected));| var addedSecond = cache.TryAdd(key, new Promise<string>(another));| // assert| var resolved = cache.GetOrAddTask(key, _ => new Promise<string>(Task.FromResult(\"Quox\")));| Assert.True(addedFirst);| Assert.False(addedSecond);| Assert.Same(expected, resolved);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", \"Foo\");| // act| var resolved = cache.GetOrAddTask(key, _ => new Promise<string>(Task.FromResult(\"Quox\")));| // assert| Assert.Equal(\"Quox\", await resolved);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cacheSize = 10;| var cache = new PromiseCache(cacheSize);| var key = new PromiseCacheKey(\"a\", 1);| // act| var resolved = cache.GetOrAddTask(key, _ => new Promise<string>(Task.FromResult(\"Quox\")));| // assert| Assert.Equal(\"Quox\", await resolved);| }"
      }
    ]
  },
  {
    "file": "ResultTests.cs",
    "methods": [
      {
        "name": "EqualsErrorValue",
        "body": "{| // arrange| Result<string> error = new Exception(\"Foo\");| Result<string> value = \"Bar\";| // act| var result = error.Equals(value);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsDifferentError",
        "body": "{| // arrange| Result<string> errorA = new Exception(\"Foo\");| Result<string> errorB = new Exception(\"Bar\");| // act| var result = errorA.Equals(errorB);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsSameError",
        "body": "{| // arrange| Result<string> error = new Exception(\"Foo\");| // act| var result = error.Equals(error);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsDifferentValue",
        "body": "{| // arrange| Result<string> valueA = \"Foo\";| Result<string> valueB = \"Bar\";| // act| var result = valueA.Equals(valueB);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsSameValue",
        "body": "{| // arrange| Result<string> value = \"Foo\";| // act| var result = value.Equals(value);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectNull",
        "body": "{| // arrange| Result<string> value = \"Foo\";| // act| var result = value.Equals(default(object));| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectNotEqual",
        "body": "{| // arrange| object obj = \"Foo\";| Result<string> value = \"Bar\";| // act| var result = value.Equals(obj);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectValueNotEqual",
        "body": "{| // arrange| object obj = (Result<string>)\"Foo\";| Result<string> value = \"Bar\";| // act| var result = value.Equals(obj);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectValueEqual",
        "body": "{| // arrange| object obj = (Result<string>)\"Foo\";| Result<string> value = \"Foo\";| // act| var result = value.Equals(obj);| // assert| Assert.True(result);| }"
      },
      {
        "name": "GetHashCodeEmpty",
        "body": "{| // arrange| // act| Result<string?> result1 = default(string);| Result<string?> result2 = default(string);| // assert| Assert.Equal(result2.GetHashCode(), result1.GetHashCode());| }"
      },
      {
        "name": "GetHashCodeValue",
        "body": "{| // arrange| var value = \"Foo\";| // act| Result<string> result1 = value;| Result<string> result2 = value;| // assert| Assert.Equal(result2.GetHashCode(), result1.GetHashCode());| }"
      },
      {
        "name": "GetHashCodeError",
        "body": "{| // arrange| var error = new Exception();| // act| Result<string> result1 = error;| Result<string> result2 = error;| // assert| Assert.Equal(result2.GetHashCode(), result1.GetHashCode());| }"
      },
      {
        "name": "ImplicitRejectErrorIsNull",
        "body": "{| // arrange| // act| Result<object> result = default(Exception);| // assert| Assert.Equal(ResultKind.Value, result.Kind);| Assert.Null(result.Error);| Assert.Null(result.Value);| }"
      },
      {
        "name": "ImplicitReject",
        "body": "{| // arrange| var errorMessage = \"Foo\";| var error = new Exception(errorMessage);| // act| Result<string> result = error;| // assert| Assert.Equal(ResultKind.Error, result.Kind);| Assert.Equal(error, result.Error);| Assert.Null(result.Value);| }"
      },
      {
        "name": "ExplicitReject",
        "body": "{| // arrange| var errorMessage = \"Foo\";| var error = new Exception(errorMessage);| // act| var result = Result<string>.Reject(error);| // assert| Assert.Equal(ResultKind.Error, result.Kind);| Assert.Equal(\"Foo\", result.Error?.Message);| Assert.Null(result.Value);| }"
      },
      {
        "name": "ExplicitResolveList",
        "body": "{| // arrange| var value = new[] { \"Foo\", \"Bar\", \"Baz\", };| // act| var result = Result<IReadOnlyCollection<string>>.Resolve(value);| // assert| Assert.Equal(ResultKind.Value, result.Kind);| Assert.Null(result.Error);| Assert.Equal(value, result.Value);| }"
      }
    ]
  },
  {
    "file": "BuiltInTypesSharableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act/assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .AddType(typeof(ShareableDirective))| .BuildSchemaAsync();| // act/assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "CertificationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor = await SchemaSetup.CreateAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| _service {| sdl| }| }\");| // assert| Assert.IsType<ObjectResult>(| Assert.IsType<ObjectResult>(| Assert.IsType<OperationResult>(result).Data)| .GetValueOrDefault(\"_service\"))| .GetValueOrDefault(\"sdl\")| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"id\", \"apollo-federation\")),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"sku\", \"federation\"),| new ObjectFieldNode(\"package\", \"@apollo/federation\")),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"sku\", \"federation\"),| new ObjectFieldNode(\"variation\",| new ObjectValueNode(| new ObjectFieldNode(\"id\", \"OSS\")))),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($id: ID!) {| product(id: $id) {| createdBy { email totalProductsCreated }| }| }\",| new Dictionary<string, object?>| {| [\"id\"] = \"apollo-federation\",| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($id: ID!) {| product(id: $id) {| dimensions { size weight }| }| }\",| new Dictionary<string, object?>| {| [\"id\"] = \"apollo-federation\",| });| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "CertificationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor = await SchemaSetup.CreateAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| _service {| sdl| }| }\");| // assert| Assert.IsType<ObjectResult>(| Assert.IsType<ObjectResult>(| Assert.IsType<OperationResult>(result).Data)| .GetValueOrDefault(\"_service\"))| .GetValueOrDefault(\"sdl\")| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"id\", \"apollo-federation\")),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"sku\", \"federation\"),| new ObjectFieldNode(\"package\", \"@apollo/federation\")),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($representations: [_Any!]!) {| _entities(representations: $representations) {| ... on Product {| sku| }| }| }\",| new Dictionary<string, object?>| {| [\"representations\"] = new List<object?>| {| new ObjectValueNode(| new ObjectFieldNode(\"__typename\", \"Product\"),| new ObjectFieldNode(\"sku\", \"federation\"),| new ObjectFieldNode(\"variation\",| new ObjectValueNode(| new ObjectFieldNode(\"id\", \"OSS\")))),| },| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($id: ID!) {| product(id: $id) {| createdBy { email totalProductsCreated }| }| }\",| new Dictionary<string, object?>| {| [\"id\"] = \"apollo-federation\",| });| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await SchemaSetup.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"query ($id: ID!) {| product(id: $id) {| dimensions { size weight }| }| }\",| new Dictionary<string, object?>| {| [\"id\"] = \"apollo-federation\",| });| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ComposeDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType()| .AddType<Address>()| .ExportDirective<Custom>()| .BuildSchemaAsync();| var entityType = schema.GetType<ObjectType>(FederationTypeNames.ServiceType_Name);| var sdlResolver = entityType.Fields[WellKnownFieldNames.Sdl].Resolver!;| // act| var value = await sdlResolver(TestHelper.CreateResolverContext(schema));| Utf8GraphQLParser| .Parse((string)value!)| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ExternalDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"entity\")| .Argument(\"id\", a => a.Type<IntType>())| .Type(\"User\")| .Resolve(_ => new { Id = 1 })| )| .AddObjectType(| o =>| {| o.Name(\"User\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"idCode\")| .Type<StringType>()| .Resolve(_ => default!)| .External();| o.Field(\"address\")| .Type(\"Address\")| .Resolve(_ => default!)| .External();| })| .AddObjectType(| o =>| {| o.Name(\"Address\");| o.External();| o.Field(\"street\")| .Type<StringType>()| .Resolve(_ => default!);| o.Field(\"city\")| .Type<StringType>()| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var query = schema.GetType<ObjectType>(\"User\");| var address = schema.GetType<ObjectType>(\"Address\");| // assert| Assert.Collection(| query.Fields[\"idCode\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| query.Fields[\"address\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| address.Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var query = schema.GetType<ObjectType>(\"User\");| var address = schema.GetType<ObjectType>(\"Address\");| // assert| Assert.Collection(| query.Fields[\"idCode\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| query.Fields[\"address\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| address.Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "KeyDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"TestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"ITestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddInterfaceType(| o =>| {| o.Name(\"ITestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>();| o.Field(\"name\")| .Type<StringType>();| })| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Implements(\"ITestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypeClassDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirectives>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirectives\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id name\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .AddInterfaceType<ITestTypeInterfaceDirective>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestTypeInterfaceDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ExternalDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"entity\")| .Argument(\"id\", a => a.Type<IntType>())| .Type(\"User\")| .Resolve(_ => new { Id = 1 })| )| .AddObjectType(| o =>| {| o.Name(\"User\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"idCode\")| .Type<StringType>()| .Resolve(_ => default!)| .External();| o.Field(\"address\")| .Type(\"Address\")| .Resolve(_ => default!)| .External();| })| .AddObjectType(| o =>| {| o.Name(\"Address\");| o.External();| o.Field(\"street\")| .Type<StringType>()| .Resolve(_ => default!);| o.Field(\"city\")| .Type<StringType>()| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var query = schema.GetType<ObjectType>(\"User\");| var address = schema.GetType<ObjectType>(\"Address\");| // assert| Assert.Collection(| query.Fields[\"idCode\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| query.Fields[\"address\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| address.Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var query = schema.GetType<ObjectType>(\"User\");| var address = schema.GetType<ObjectType>(\"Address\");| // assert| Assert.Collection(| query.Fields[\"idCode\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| query.Fields[\"address\"].Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| Assert.Collection(| address.Directives,| item => Assert.Equal(FederationTypeNames.ExternalDirective_Name, item.Type.Name));| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "KeyDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"TestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"ITestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddInterfaceType(| o =>| {| o.Name(\"ITestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>();| o.Field(\"name\")| .Type<StringType>();| })| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Implements(\"ITestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypeClassDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirectives>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirectives\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id name\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .AddInterfaceType<ITestTypeInterfaceDirective>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestTypeInterfaceDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| Assert.Equal(\"fields\", item.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", item.AsSyntaxNode().Arguments[0].Value.ToString());| });| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ProvidesDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddObjectType(o =>| {| o.Name(\"Product\");| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => default!);| })| .AddObjectType(o =>| {| o.Name(\"Review\").Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => default!);| o.Field(\"product\")| .Provides(\"name\")| .Type(\"Product\")| .Resolve(_ => default!);| })| .AddQueryType(o =>| {| o.Name(\"Query\");| o.Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"Review\")| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var providesDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| Assert.Equal(| FederationTypeNames.ProvidesDirective_Name,| providesDirective.Type.Name);| Assert.Equal(| \"fields\",| providesDirective.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(| \"\\\"name\\\"\",| providesDirective.AsSyntaxNode().Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var providesDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| Assert.Equal(| FederationTypeNames.ProvidesDirective_Name,| providesDirective.Type.Name);| Assert.Equal(| \"fields\",| providesDirective.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(| \"\\\"name\\\"\",| providesDirective.AsSyntaxNode().Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequiresDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddObjectType(o =>| {| o.Name(\"Product\");| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => default!);| })| .AddObjectType(o =>| {| o.Name(\"Review\").Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => default!);| o.Field(\"product\")| .Requires(\"id\")| .Type(\"Product\")| .Resolve(_ => default!);| })| .AddQueryType(o =>| {| o.Name(\"Query\");| o.Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"Review\")| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var requiresDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| var directiveNode = requiresDirective.AsSyntaxNode();| Assert.Equal(FederationTypeNames.RequiresDirective_Name, requiresDirective.Type.Name);| Assert.Equal(\"fields\", directiveNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", directiveNode.Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var requiresDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| var directiveNode = requiresDirective.AsSyntaxNode();| Assert.Equal(FederationTypeNames.RequiresDirective_Name, requiresDirective.Type.Name);| Assert.Equal(\"fields\", directiveNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", directiveNode.Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonResolvableKeyDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"TestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddObjectType(| o =>| {| o.Name(\"TestTypeResolvableKey\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Key(\"id\", resolvable: false);| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypeClassDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirective>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypePropertyDirectives>>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"TestTypePropertyDirectives\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id name\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // act| var ex = await Assert.ThrowsAsync<SchemaException>(| async () => await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeInconsistentResolvablePropertyDirectives>>()| .BuildSchemaAsync());| // assert| Assert.Collection(ex.Errors,| item => Assert.Contains(| \"The specified key attributes must share the same resolvable \"| + \"values when annotated on multiple fields.\", item.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<TestTypeClassDirective>>()| .AddInterfaceType<ITestTypeInterfaceDirective>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestTypeInterfaceDirective\");| // assert| Assert.Collection(testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType(o => o| .Name(\"Query\")| .Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"ITestType\")| .Resolve(_ => new { Id = 1, Name = \"bar\" })| )| .AddInterfaceType(| o =>| {| o.Name(\"ITestType\")| .Key(\"id\", resolvable: false);| o.Field(\"id\")| .Type<IntType>();| o.Field(\"name\")| .Type<StringType>();| })| .AddObjectType(| o =>| {| o.Name(\"TestTypeResolvableKey\")| .Implements(\"ITestType\")| .Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .AddObjectType(| o =>| {| o.Name(\"TestType\")| .Implements(\"ITestType\")| .Key(\"id\", resolvable: false);| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => 1);| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => \"bar\");| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<InterfaceType>(\"ITestType\");| // assert| Assert.Collection(| testType.Directives,| item =>| {| Assert.Equal(FederationTypeNames.KeyDirective_Name, item.Type.Name);| var syntaxNode = item.AsSyntaxNode();| Assert.Equal(\"fields\", syntaxNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", syntaxNode.Arguments[0].Value.ToString());| Assert.Equal(\"resolvable\", syntaxNode.Arguments[1].Name.ToString());| Assert.Equal(\"false\", syntaxNode.Arguments[1].Value.ToString());| });| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "OverrideDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation20)| .AddQueryType()| .AddType<Foo>()| .BuildSchemaAsync();| var entityType = schema.GetType<ObjectType>(FederationTypeNames.ServiceType_Name);| var sdlResolver = entityType.Fields[WellKnownFieldNames.Sdl].Resolver!;| // act| var value = await sdlResolver(TestHelper.CreateResolverContext(schema));| value!.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation27)| .AddQueryType()| .AddType<Foo>()| .BuildSchemaAsync();| var entityType = schema.GetType<ObjectType>(FederationTypeNames.ServiceType_Name);| var sdlResolver = entityType.Fields[WellKnownFieldNames.Sdl].Resolver!;| // act| var value = await sdlResolver(TestHelper.CreateResolverContext(schema));| value!.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "PolicyDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| CheckReviewType(schema);| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var reviewType = new ObjectType<Review>(d =>| {| d.Name(nameof(Review));| d.Key(\"id\");| {| var id = d.Field(\"id\");| id.Type<NonNullType<IntType>>();| id.Resolve(_ => default);| }| });| var queryType = new ObjectType(d =>| {| d.Name(nameof(Query));| d.Field(\"someField\")| .Type(new NonNullType(reviewType))| .Policy([\"p1,p1_1\", \"p2\"])| .Resolve(_ => default);| });| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddType(reviewType)| .AddQueryType(queryType)| .BuildSchemaAsync();| CheckReviewType(schema);| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ProvidesDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddObjectType(o =>| {| o.Name(\"Product\");| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => default!);| })| .AddObjectType(o =>| {| o.Name(\"Review\").Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => default!);| o.Field(\"product\")| .Provides(\"name\")| .Type(\"Product\")| .Resolve(_ => default!);| })| .AddQueryType(o =>| {| o.Name(\"Query\");| o.Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"Review\")| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var providesDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| Assert.Equal(| FederationTypeNames.ProvidesDirective_Name,| providesDirective.Type.Name);| Assert.Equal(| \"fields\",| providesDirective.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(| \"\\\"name\\\"\",| providesDirective.AsSyntaxNode().Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var providesDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| Assert.Equal(| FederationTypeNames.ProvidesDirective_Name,| providesDirective.Type.Name);| Assert.Equal(| \"fields\",| providesDirective.AsSyntaxNode().Arguments[0].Name.ToString());| Assert.Equal(| \"\\\"name\\\"\",| providesDirective.AsSyntaxNode().Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequiresDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddObjectType(o =>| {| o.Name(\"Product\");| o.Field(\"name\")| .Type<StringType>()| .Resolve(_ => default!);| })| .AddObjectType(o =>| {| o.Name(\"Review\").Key(\"id\");| o.Field(\"id\")| .Type<IntType>()| .Resolve(_ => default!);| o.Field(\"product\")| .Requires(\"id\")| .Type(\"Product\")| .Resolve(_ => default!);| })| .AddQueryType(o =>| {| o.Name(\"Query\");| o.Field(\"someField\")| .Argument(\"a\", a => a.Type<IntType>())| .Type(\"Review\")| .Resolve(_ => default!);| })| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var requiresDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| var directiveNode = requiresDirective.AsSyntaxNode();| Assert.Equal(FederationTypeNames.RequiresDirective_Name, requiresDirective.Type.Name);| Assert.Equal(\"fields\", directiveNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", directiveNode.Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation10)| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var testType = schema.GetType<ObjectType>(\"Review\");| // assert| var requiresDirective = Assert.Single(testType.Fields.Single(field => field.Name == \"product\").Directives);| var directiveNode = requiresDirective.AsSyntaxNode();| Assert.Equal(FederationTypeNames.RequiresDirective_Name, requiresDirective.Type.Name);| Assert.Equal(\"fields\", directiveNode.Arguments[0].Name.ToString());| Assert.Equal(\"\\\"id\\\"\", directiveNode.Arguments[0].Value.ToString());| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequiresScopesDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| CheckReviewType(schema);| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var reviewType = new ObjectType<Review>(d =>| {| d.Name(nameof(Review));| d.Key(\"id\");| {| var id = d.Field(\"id\");| id.Type<NonNullType<IntType>>();| id.Resolve(_ => default);| }| });| var queryType = new ObjectType(d =>| {| d.Name(nameof(Query));| d.Field(\"someField\")| .Type(new NonNullType(reviewType))| .RequiresScopes([\"s1,s1_1\", \"s2\"])| .Resolve(_ => default);| });| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddType(reviewType)| .AddQueryType(queryType)| .BuildSchemaAsync();| CheckReviewType(schema);| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| CheckQueryType(schema);| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EntitiesResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| // act| var representations = RepresentationsOf(| nameof(ForeignType),| new| {| id = \"1\",| someExternalField = \"someExternalField\",| });| var result =| await EntitiesResolver.ResolveAsync(schema, representations, context);| // assert| var obj = Assert.IsType<ForeignType>(result[0]);| Assert.Equal(\"1\", obj.Id);| Assert.Equal(\"someExternalField\", obj.SomeExternalField);| Assert.Equal(\"InternalValue\", obj.InternalField);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| // act| var representations = new List<Representation>| {| new(\"MixedFieldTypes\",| new ObjectValueNode(| new ObjectFieldNode(\"id\", \"1\"),| new ObjectFieldNode(\"intField\", 25))),| };| // assert| var result =| await EntitiesResolver.ResolveAsync(schema, representations, context);| var obj = Assert.IsType<MixedFieldTypes>(result[0]);| Assert.Equal(\"1\", obj.Id);| Assert.Equal(25, obj.IntField);| Assert.Equal(\"InternalValue\", obj.InternalField);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| // act| var representations = new List<Representation>| {| new(\"TypeWithReferenceResolver\",| new ObjectValueNode(new ObjectFieldNode(\"Id\", \"1\"))),| };| // assert| var result = await EntitiesResolver.ResolveAsync(schema, representations, context);| var obj = Assert.IsType<TypeWithReferenceResolver>(result[0]);| Assert.Equal(\"1\", obj.Id);| Assert.Equal(\"SomeField\", obj.SomeField);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var batchScheduler = new ManualBatchScheduler();| var dataLoader = new FederatedTypeDataLoader(batchScheduler, new DataLoaderOptions());| var serviceProviderMock = new Mock<IServiceProvider>();| serviceProviderMock.Setup(c => c.GetService(typeof(FederatedTypeDataLoader))).Returns(dataLoader);| var context = CreateResolverContext(| schema,| null,| mock => mock.Setup(c => c.Services).Returns(serviceProviderMock.Object));| var representations = RepresentationsOf(| nameof(FederatedType),| new { Id = \"1\" },| new { Id = \"2\" },| new { Id = \"3\" });| // act| var resultTask = EntitiesResolver.ResolveAsync(schema, representations, context);| batchScheduler.Dispatch();| var results = await resultTask;| // assert| Assert.Equal(1, dataLoader.TimesCalled);| Assert.Equal(3, results.Count);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| // act| var representations = new List<Representation>| {| new(\"NonExistingTypeName\", new ObjectValueNode()),| };| // assert| Task ShouldThrow() => EntitiesResolver.ResolveAsync(schema, representations, context);| await Assert.ThrowsAsync<SchemaException>(ShouldThrow);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| // act| var representations = new List<Representation>| {| new(\"TypeWithoutRefResolver\", new ObjectValueNode()),| };| // assert| Task ShouldThrow() => EntitiesResolver.ResolveAsync(schema, representations, context);| await Assert.ThrowsAsync<SchemaException>(ShouldThrow);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .AddType<FederatedTypeWithRequiredDetail>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| var representations = new List<Representation>| {| new(\"FederatedTypeWithRequiredDetail\",| new ObjectValueNode(new[]| {| new ObjectFieldNode(\"detail\",| new ObjectValueNode(new[] { new ObjectFieldNode(\"id\", \"testId\") })),| })),| };| var result = await EntitiesResolver.ResolveAsync(schema, representations, context);| var single = Assert.Single(result);| var obj = Assert.IsType<FederatedTypeWithRequiredDetail>(single);| Assert.Equal(\"testId\", obj.Id);| Assert.Equal(\"testId\", obj.Detail.Id);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .AddType<FederatedTypeWithOptionalDetail>()| .BuildSchemaAsync();| var context = CreateResolverContext(schema);| var representations = new List<Representation>| {| new(\"FederatedTypeWithOptionalDetail\",| new ObjectValueNode(new[]| {| new ObjectFieldNode(\"detail\",| new ObjectValueNode(new[]| {| new ObjectFieldNode(\"id\", \"testId\"),| })),| })),| };| var result = await EntitiesResolver.ResolveAsync(schema, representations, context);| var single = Assert.Single(result);| var obj = Assert.IsType<FederatedTypeWithOptionalDetail>(single);| Assert.Equal(\"testId\", obj.Id);| Assert.Equal(\"testId\", obj.Detail!.Id);| }"
      }
    ]
  },
  {
    "file": "EntityTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<Address>>()| .BuildSchemaAsync();| // act/assert| Assert.False(schema.TryGetType<_EntityType>(\"_Entity\", out _));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<Review>>()| .BuildSchemaAsync();| // act| var entityType = schema.GetType<_EntityType>(\"_Entity\");| // assert| Assert.Collection(entityType.Types.Values, t => Assert.Equal(\"Review\", t.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<UserWithClassAttribute>>()| .BuildSchemaAsync();| // act| var entityType = schema.GetType<_EntityType>(\"_Entity\");| // assert| Assert.Collection(| entityType.Types.Values,| t => Assert.Equal(\"UserWithClassAttribute\", t.Name),| t => Assert.Equal(\"Review\", t.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<UserWithPropertyAttributes>>()| .BuildSchemaAsync();| // act| var entityType = schema.GetType<_EntityType>(\"_Entity\");| // assert| Assert.Collection(| entityType.Types.Values,| t => Assert.Equal(\"UserWithPropertyAttributes\", t.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query<UserWithNestedKeyClassAttribute>>()| .BuildSchemaAsync();| // act| var entityType = schema.GetType<_EntityType>(\"_Entity\");| // assert| Assert.Collection(entityType.Types.Values,| t => Assert.Equal(\"UserWithNestedKeyClassAttribute\", t.Name));| }"
      }
    ]
  },
  {
    "file": "FieldSetTypeTests.cs",
    "methods": [
      {
        "name": "Ensure_Type_Name_Is_Correct",
        "body": "{| // arrange| // act| var type = new FieldSetType();| // assert| Assert.Equal(FieldSetType_Name, type.Name);| }"
      },
      {
        "name": "Deserialize",
        "body": "{| // arrange| var type = new FieldSetType();| const string serialized = \"a b c d e(d: $b)\";| // act| var selectionSet = type.Deserialize(serialized);| // assert| Assert.IsType<SelectionSetNode>(selectionSet);| }"
      },
      {
        "name": "Deserialize_Invalid_Format",
        "body": "{| // arrange| var type = new FieldSetType();| const string serialized = \"1\";| // act| void Action() => type.Deserialize(serialized);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "TryDeserialize",
        "body": "{| // arrange| var type = new FieldSetType();| const string serialized = \"a b c d e(d: $b)\";| // act| var success = type.TryDeserialize(serialized, out var selectionSet);| // assert| Assert.True(success);| Assert.IsType<SelectionSetNode>(selectionSet);| }"
      },
      {
        "name": "TryDeserialize_Null",
        "body": "{| // arrange| var type = new FieldSetType();| // act| var success = type.TryDeserialize(null, out var selectionSet);| // assert| Assert.True(success);| Assert.Null(selectionSet);| }"
      },
      {
        "name": "TryDeserialize_Invalid_Syntax",
        "body": "{| // arrange| var type = new FieldSetType();| const string serialized = \"1\";| // act| var success = type.TryDeserialize(serialized, out var selectionSet);| // assert| Assert.False(success);| Assert.Null(selectionSet);| }"
      },
      {
        "name": "TryDeserialize_Invalid_Type",
        "body": "{| // arrange| var type = new FieldSetType();| const int serialized = 1;| // act| var success = type.TryDeserialize(serialized, out var selectionSet);| // assert| Assert.False(success);| Assert.Null(selectionSet);| }"
      },
      {
        "name": "Serialize",
        "body": "{| // arrange| var type = new FieldSetType();| const string selection = \"a b c d e(d: $b)\";| var selectionSet = Syntax.ParseSelectionSet(Braces(selection));| // act| var serialized = type.Serialize(selectionSet);| // assert| Assert.Equal(selection, serialized);| }"
      },
      {
        "name": "Serialize_Invalid_Format",
        "body": "{| // arrange| var type = new FieldSetType();| // act| void Action() => type.Serialize(1);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "TrySerialize",
        "body": "{| // arrange| var type = new FieldSetType();| const string selection = \"a b c d e(d: $b)\";| var selectionSet = Syntax.ParseSelectionSet(Braces(selection));| // act| var success = type.TrySerialize(selectionSet, out var serialized);| // assert| Assert.True(success);| Assert.Equal(selection, serialized);| }"
      },
      {
        "name": "TrySerialize_Invalid_Format",
        "body": "{| // arrange| var type = new FieldSetType();| // act| var success = type.TrySerialize(1, out var serialized);| // assert| Assert.False(success);| Assert.Null(serialized);| }"
      },
      {
        "name": "ParseValue",
        "body": "{| // arrange| var type = new FieldSetType();| const string selection = \"a b c d e(d: $b)\";| var selectionSet = Syntax.ParseSelectionSet(Braces(selection));| // act| var valueSyntax = type.ParseValue(selectionSet);| // assert| Assert.Equal(| selection,| Assert.IsType<StringValueNode>(valueSyntax).Value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new FieldSetType();| // act| var valueSyntax = type.ParseValue(null);| // assert| Assert.IsType<NullValueNode>(valueSyntax);| }"
      },
      {
        "name": "ParseValue_InvalidValue",
        "body": "{| // arrange| var type = new FieldSetType();| // act| void Action() => type.ParseValue(1);| // assert| Assert.Throws<SerializationException>(Action);| }"
      }
    ]
  },
  {
    "file": "ReferenceResolverAttributeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(InClassRefResolver));| // assert| var result = await ResolveRef(schema, type);| Assert.Equal(| nameof(InClassRefResolver),| Assert.IsType<InClassRefResolver>(result).Id);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(ExternalRefResolver));| // assert| var result = await ResolveRef(schema, type);| Assert.Equal(| nameof(ExternalRefResolver),| Assert.IsType<ExternalRefResolver>(result).Id);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<QueryWithSingleKeyResolver>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(ExternalSingleKeyResolver));| // assert| var result = await ResolveRef(schema, type);| Assert.Equal(\"abc\", Assert.IsType<ExternalSingleKeyResolver>(result).Id);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<QueryWithExternalField>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(ExternalFields));| var representation = new ObjectValueNode(| new ObjectFieldNode(\"id\", \"id_123\"),| new ObjectFieldNode(\"foo\", \"bar\"));| // assert| var result = await ResolveRef(schema, type, representation);| Assert.Equal(\"bar\", Assert.IsType<ExternalFields>(result).Foo);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<QueryWithExternalField>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(ExternalFields));| var representation = new ObjectValueNode(new ObjectFieldNode(\"id\", \"id_123\"));| // assert| var result = await ResolveRef(schema, type, representation);| Assert.Null(Assert.IsType<ExternalFields>(result).Foo);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<QueryWithMultiKeyResolver>()| .BuildSchemaAsync();| var type = schema.GetType<ObjectType>(nameof(ExternalMultiKeyResolver));| // act| var resultId = await ResolveRef(schema, type, new(new ObjectFieldNode(\"id\", \"id_123\")));| var resultSku = await ResolveRef(schema, type, new(new ObjectFieldNode(\"sku\", \"sku_123\")));| // assert| Assert.Equal(\"id_123\", Assert.IsType<ExternalMultiKeyResolver>(resultId).Id);| Assert.Equal(\"sku_123\", Assert.IsType<ExternalMultiKeyResolver>(resultSku).Sku);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query>()| .BuildSchemaAsync();| // act| var type = schema.GetType<ObjectType>(nameof(ExternalRefResolverRenamedMethod));| // assert| var result = await ResolveRef(schema, type);| Assert.Equal(| nameof(ExternalRefResolverRenamedMethod),| Assert.IsType<ExternalRefResolver>(result).Id);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| async Task SchemaCreation()| {| await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query_InClass_Invalid>()| .BuildSchemaAsync();| }| // act| // assert| await Assert.ThrowsAsync<SchemaException>(SchemaCreation);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| async Task SchemaCreation()| {| await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType<Query_ExternalClass_Invalid>()| .BuildSchemaAsync();| }| // act| // assert| await Assert.ThrowsAsync<SchemaException>(SchemaCreation);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddType<Product>()| .AddQueryType()| .BuildSchemaAsync();| // act| var result = await schema.MakeExecutable().ExecuteAsync(| \"\"\"| query {| _entities(representations: [| { id: \"00000000-0000-0000-0000-000000000000\", __typename: \"Product\" }| ]) { ... on Product { id } }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ServiceTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation()| .AddQueryType()| .AddType<Address>()| .BuildSchemaAsync();| var entityType = schema.GetType<ObjectType>(ServiceType_Name);| var sdlResolver = entityType.Fields[WellKnownFieldNames.Sdl].Resolver!;| // act| var value = await sdlResolver(CreateResolverContext(schema));| // assert| Utf8GraphQLParser| .Parse((string)value!)| .MatchInlineSnapshot(| \"\"\"| schema @link(url: \"https:\\/\\/specs.apollo.dev\\/federation\\/v2.6\", import: [ \"@key\", \"@tag\", \"FieldSet\" ]) {| query: Query| }| type Address @key(fields: \"matchCode\") {| matchCode: String| }| type Query {| _service: _Service!| _entities(representations: [_Any!]!): [_Entity]!| }| \"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec.\"| type _Service {| sdl: String!| }| \"Union of all types that key directive applied. This information is needed by the Apollo federation gateway.\"| union _Entity = Address| \"Used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface.\"| directive @key(fields: FieldSet! resolvable: Boolean = true) repeatable on OBJECT | INTERFACE| \"Links definitions within the document to external schemas.\"| directive @link(\"Gets imported specification url.\" url: String! \"Gets optional list of imported element names.\" import: [String!]) repeatable on SCHEMA| \"Scalar representing a set of fields.\"| scalar FieldSet| \"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema.\"| scalar _Any| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddApolloFederation(FederationVersion.Federation22)| .AddQueryType<Query>()| .BuildSchemaAsync();| var entityType = schema.GetType<ObjectType>(ServiceType_Name);| var sdlResolver = entityType.Fields[WellKnownFieldNames.Sdl].Resolver!;| // act| var value = await sdlResolver(CreateResolverContext(schema));| // assert| Utf8GraphQLParser| .Parse((string)value!)| .MatchInlineSnapshot(| \"\"\"| schema @link(url: \"https:\\/\\/specs.apollo.dev\\/federation\\/v2.2\", import: [ \"@key\", \"@tag\", \"FieldSet\" ]) {| query: Query| }| type Address @key(fields: \"matchCode\") {| matchCode: String| }| type Query {| address(id: Int!): Address!| _service: _Service!| _entities(representations: [_Any!]!): [_Entity]!| }| \"This type provides a field named sdl: String! which exposes the SDL of the service's schema. This SDL (schema definition language) is a printed version of the service's schema including the annotations of federation directives. This SDL does not include the additions of the federation spec.\"| type _Service {| sdl: String!| }| \"Union of all types that key directive applied. This information is needed by the Apollo federation gateway.\"| union _Entity = Address| \"Used to indicate a combination of fields that can be used to uniquely identify and fetch an object or interface.\"| directive @key(fields: FieldSet! resolvable: Boolean = true) repeatable on OBJECT | INTERFACE| \"Links definitions within the document to external schemas.\"| directive @link(\"Gets imported specification url.\" url: String! \"Gets optional list of imported element names.\" import: [String!]) repeatable on SCHEMA| \"Scalar representing a set of fields.\"| scalar FieldSet| \"The _Any scalar is used to pass representations of entities from external services into the root _entities field for execution. Validation of the _Any scalar is done by matching the __typename and @external fields defined in the schema.\"| scalar _Any| \"\"\");| }"
      }
    ]
  },
  {
    "file": "_AnyTypeTests.cs",
    "methods": [
      {
        "name": "Ensure_Type_Name_Is_Correct",
        "body": "{| // arrange| // act| var type = new AnyType();| // assert| Assert.Equal(FederationTypeNames.AnyType_Name, type.Name);| }"
      },
      {
        "name": "Deserialize",
        "body": "{| // arrange| var type = new AnyType();| var serialized = new ObjectValueNode(| new ObjectFieldNode(AnyType.TypeNameField, \"test\"),| new ObjectFieldNode(\"faa\", \"foo\"),| new ObjectFieldNode(\"foo\", \"bar\")| );| // act| var representationObject = type.Deserialize(serialized);| // assert| var representation = Assert.IsType<Representation>(representationObject);| Assert.Equal(\"test\", representation.TypeName);| Assert.Collection(representation.Data.Fields,| node =>| {| Assert.Equal(| AnyType.TypeNameField,| node.Name.Value);| Assert.Equal(| \"test\",| node.Value.Value);| },| node =>| {| Assert.Equal(| \"faa\",| node.Name.Value);| Assert.Equal(| \"foo\",| node.Value.Value);| },| node =>| {| Assert.Equal(| \"foo\",| node.Name.Value);| Assert.Equal(| \"bar\",| node.Value.Value);| }| );| }"
      },
      {
        "name": "Deserialize_Invalid_Format",
        "body": "{| // arrange| var type = new AnyType();| var serialized = new ObjectValueNode();| // act| void Action() => type.Deserialize(serialized);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "TryDeserialize",
        "body": "{| // arrange| var type = new AnyType();| var serialized = new ObjectValueNode(| new ObjectFieldNode(AnyType.TypeNameField, \"test\"),| new ObjectFieldNode(\"foo\", \"bar\"));| // act| var success = type.TryDeserialize(serialized, out var representation);| // assert| Assert.True(success);| Assert.IsType<Representation>(representation);| }"
      },
      {
        "name": "TryDeserialize_Null",
        "body": "{| // arrange| var type = new AnyType();| // act| var success = type.TryDeserialize(null, out var representation);| // assert| Assert.True(success);| Assert.Null(representation);| }"
      },
      {
        "name": "TryDeserialize_Invalid_Type",
        "body": "{| // arrange| var type = new AnyType();| const int serialized = 1;| // act| var success = type.TryDeserialize(serialized, out var representation);| // assert| Assert.False(success);| Assert.Null(representation);| }"
      },
      {
        "name": "Serialize",
        "body": "{| // arrange| var type = new AnyType();| var objectValueNode = new ObjectValueNode(| new ObjectFieldNode(| AnyType.TypeNameField,| \"test\"| ),| new ObjectFieldNode(| \"foo\",| \"bar\"| )| );| var representation = new Representation(\"test\", objectValueNode);| // act| var serialized = (ISyntaxNode)type.Serialize(representation)!;| // assert| Assert.Equal(| objectValueNode,| serialized,| SyntaxComparer.BySyntax);| }"
      },
      {
        "name": "Serialize_Invalid_Format",
        "body": "{| // arrange| var type = new AnyType();| // act| void Action() => type.Serialize(1);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "TrySerialize",
        "body": "{| // arrange| var type = new AnyType();| var objectValueNode = new ObjectValueNode(| new ObjectFieldNode(| AnyType.TypeNameField,| \"test\"| ),| new ObjectFieldNode(| \"foo\",| \"bar\"| )| );| var representation = new Representation(\"test\", objectValueNode);| // act| var success = type.TrySerialize(representation, out var serialized);| // assert| Assert.True(success);| Assert.Equal(| objectValueNode,| (ISyntaxNode)serialized!,| SyntaxComparer.BySyntax);| }"
      },
      {
        "name": "TrySerialize_Invalid_Type",
        "body": "{| // arrange| var type = new AnyType();| // act| var success = type.TrySerialize(1, out var serialized);| // assert| Assert.False(success);| Assert.Null(serialized);| }"
      },
      {
        "name": "TrySerialize_Invalid_Null",
        "body": "{| // arrange| var type = new AnyType();| // act| var success = type.TrySerialize(null, out var serialized);| // assert| Assert.True(success);| Assert.Null(serialized);| }"
      },
      {
        "name": "ParseValue",
        "body": "{| // arrange| var type = new AnyType();| var objectValueNode = new ObjectValueNode(| new ObjectFieldNode(| AnyType.TypeNameField,| \"test\"| ),| new ObjectFieldNode(| \"foo\",| \"bar\"| )| );| var representation = new Representation(\"test\", objectValueNode);| // act| var valueSyntax = type.ParseValue(representation);| // assert| Assert.Equal(| objectValueNode,| Assert.IsType<ObjectValueNode>(valueSyntax),| SyntaxComparer.BySyntax);| }"
      },
      {
        "name": "ParseLiteral",
        "body": "{| // arrange| var type = new AnyType();| var objectValueNode = new ObjectValueNode(| new ObjectFieldNode(| AnyType.TypeNameField,| \"test\"| ),| new ObjectFieldNode(| \"foo\",| \"bar\"| )| );| // act| var valueSyntax = type.ParseLiteral(objectValueNode);| // assert| var parsedRepresentation = Assert.IsType<Representation>(valueSyntax);| Assert.Equal(\"test\", parsedRepresentation.TypeName);| Assert.Equal(objectValueNode, parsedRepresentation.Data);| }"
      },
      {
        "name": "ParseLiteral_InvalidValue",
        "body": "{| // arrange| var type = new AnyType();| // act| void Action() => type.ParseLiteral(new ObjectValueNode());| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ParseResult",
        "body": "{| // arrange| var type = new AnyType();| var objectValueNode = new ObjectValueNode(| new ObjectFieldNode(| AnyType.TypeNameField,| \"test\"| ),| new ObjectFieldNode(| \"foo\",| \"bar\"| )| );| var representation = new Representation(\"test\", objectValueNode);| // act| var parsedResult = type.ParseResult(representation);| // assert| Assert.Equal(| objectValueNode,| Assert.IsType<ObjectValueNode>(parsedResult),| SyntaxComparer.BySyntax);| }"
      },
      {
        "name": "ParseResult_Null",
        "body": "{| // arrange| var type = new AnyType();| // act| var parsedResult = type.ParseResult(null);| // assert| Assert.Equal(NullValueNode.Default, parsedResult);| }"
      },
      {
        "name": "ParseResult_InvalidValue",
        "body": "{| // arrange| var type = new AnyType();| // act| void Action() => type.ParseResult(new ObjectValueNode());| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new AnyType();| // act| var valueSyntax = type.ParseValue(null);| // assert| Assert.IsType<NullValueNode>(valueSyntax);| }"
      },
      {
        "name": "ParseValue_InvalidValue",
        "body": "{| // arrange| var type = new AnyType();| // act| void Action() => type.ParseValue(1);| // assert| Assert.Throws<SerializationException>(Action);| }"
      }
    ]
  },
  {
    "file": "PolicyHandlerMatchingTests.cs",
    "methods": [
      {
        "name": "ThrowsWhenNoMatchingHandlerFound",
        "body": "{| // arrange| var options = new OpaOptions();| // act| ParseResult FindHandler() => options.GetPolicyResultParser(\"graphql/policy\");| // assert| Assert.Throws<InvalidOperationException>(FindHandler);| }"
      },
      {
        "name": "MatchesExact",
        "body": "{| // arrange| var options = new OpaOptions();| var parser = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"my/policy\", parser);| // act| var foundHandler = options.GetPolicyResultParser(\"my/policy\");| // assert| Assert.Equal(parser, foundHandler);| }"
      },
      {
        "name": "MatchesRegex",
        "body": "{| // arrange| var options = new OpaOptions();| var parser = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"graphql\\\\/.*\", parser);| // act| var foundHandler = options.GetPolicyResultParser(\"graphql/policy\");| // assert| Assert.Equal(parser, foundHandler);| }"
      },
      {
        "name": "ExactMatchTakesPriorityOverRegex",
        "body": "{| // arrange| var options = new OpaOptions();| var regexHandler = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"graphql\\\\/.*\", regexHandler);| var exactHandler = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"graphql/policy\", exactHandler);| // act| var foundHandler = options.GetPolicyResultParser(\"graphql/policy\");| // assert| Assert.Equal(exactHandler, foundHandler);| }"
      },
      {
        "name": "OnlySingleRegexMatchIsAllowed",
        "body": "{| // arrange| var options = new OpaOptions();| var regexHandler = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"graphql\\\\/.*\", regexHandler);| var exactHandler = new ParseResult(_ => AuthorizeResult.Allowed);| options.PolicyResultHandlers.Add(\"graphql\\\\/p.*\", exactHandler);| // act| ParseResult FindHandler() => options.GetPolicyResultParser(\"graphql/policy\");| // assert| Assert.Throws<InvalidOperationException>(FindHandler);| }"
      }
    ]
  },
  {
    "file": "AuthorizeDirectiveTests.cs",
    "methods": [
      {
        "name": "CreateInstance_PolicyRoles_PolicyIsNullRolesHasItems",
        "body": "{| // arrange| // act| var authorizeDirective = new AuthorizeDirective(| null,| new[] { \"a\", \"b\", });| // assert| Assert.Null(authorizeDirective.Policy);| Assert.Collection(| authorizeDirective.Roles!,| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t));| }"
      },
      {
        "name": "CreateInstance_PolicyRoles_PolicyIsSetRolesIsEmpty",
        "body": "{| // arrange| // act| var authorizeDirective = new AuthorizeDirective(| \"abc\",| Array.Empty<string>());| // assert| Assert.Equal(\"abc\", authorizeDirective.Policy);| Assert.Empty(authorizeDirective.Roles!);| }"
      },
      {
        "name": "CreateInstance_PolicyRoles_PolicyIsSetRolesIsNull",
        "body": "{| // arrange| // act| var authorizeDirective = new AuthorizeDirective(| \"abc\",| Array.Empty<string>());| // assert| Assert.Equal(\"abc\", authorizeDirective.Policy);| Assert.Empty(authorizeDirective.Roles!);| }"
      },
      {
        "name": "CreateInstance_Policy_PolicyIsSet",
        "body": "{| // arrange| // act| var authorizeDirective = new AuthorizeDirective(\"abc\");| // assert| Assert.Equal(\"abc\", authorizeDirective.Policy);| Assert.Null(authorizeDirective.Roles);| }"
      },
      {
        "name": "CreateInstance_Roles_RolesHasItems",
        "body": "{| // arrange| // act| var authorizeDirective = new AuthorizeDirective(| new[] { \"a\", \"b\", });| // assert| Assert.Null(authorizeDirective.Policy);| Assert.Collection(| authorizeDirective.Roles!,| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t));| }"
      },
      {
        "name": "CacheKey_Policy_NoRoles",
        "body": "{| // arrange| var authorizeDirective = new AuthorizeDirective(| policy: \"policy\");| // act| var cacheKey = authorizeDirective.GetPolicyCacheKey();| // assert| Assert.Equal(\"policy;\", cacheKey);| }"
      },
      {
        "name": "CacheKey_NoPolicy_Roles",
        "body": "{| // arrange| var authorizeDirective = new AuthorizeDirective(| policy: null,| roles: [\"a\", \"b\"]);| // act| var cacheKey = authorizeDirective.GetPolicyCacheKey();| // assert| Assert.Equal(\";a,b\", cacheKey);| }"
      },
      {
        "name": "CacheKey_Policy_And_Roles",
        "body": "{| // arrange| var authorizeDirective = new AuthorizeDirective(| policy: \"policy\",| roles: [\"a\", \"b\"]);| // act| var cacheKey = authorizeDirective.GetPolicyCacheKey();| // assert| Assert.Equal(\"policy;a,b\", cacheKey);| }"
      },
      {
        "name": "CacheKey_NoPolicy_NoRoles",
        "body": "{| // arrange| var authorizeDirective = new AuthorizeDirective(| policy: null,| roles: null);| // act| var cacheKey = authorizeDirective.GetPolicyCacheKey();| // assert| Assert.Equal(\"\", cacheKey);| }"
      },
      {
        "name": "CacheKey_Policy_And_Role_Naming_Does_Not_Conflict",
        "body": "{| // arrange| var authorizeDirective1 = new AuthorizeDirective(| policy: \"policy\",| roles: null);| var authorizeDirective2 = new AuthorizeDirective(| policy: null,| roles: [\"policy\"]);| // act| var cacheKey1 = authorizeDirective1.GetPolicyCacheKey();| var cacheKey2 = authorizeDirective2.GetPolicyCacheKey();| // assert| Assert.NotEqual(cacheKey1, cacheKey2);| }"
      },
      {
        "name": "CacheKey_Same_Roles_Albeit_Sorted_Differently_Have_Same_Cache_Key",
        "body": "{| // arrange| var authorizeDirective1 = new AuthorizeDirective(| policy: null,| roles: [\"a\", \"c\", \"b\"]);| var authorizeDirective2 = new AuthorizeDirective(| policy: null,| roles: [\"c\", \"b\", \"a\"]);| // act| var cacheKey1 = authorizeDirective1.GetPolicyCacheKey();| var cacheKey2 = authorizeDirective2.GetPolicyCacheKey();| // assert| Assert.Equal(cacheKey1, cacheKey2);| }"
      },
      {
        "name": "TypeAuth_DefaultPolicy",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Authorize(ApplyPolicy.BeforeResolver)| .Field(\"foo\")| .Resolve(\"bar\"))| .AddAuthorizeDirectiveType()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "TypeAuth_DefaultPolicy_DescriptorNull",
        "body": "{| // arrange| // act| Action action = () =>| AuthorizeObjectTypeDescriptorExtensions.Authorize(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "TypeAuth_WithPolicy",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Authorize(\"MyPolicy\", ApplyPolicy.BeforeResolver)| .Field(\"foo\")| .Resolve(\"bar\"))| .AddAuthorizeDirectiveType()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "TypeAuth_WithPolicy_DescriptorNull",
        "body": "{| // arrange| // act| Action action = () =>| AuthorizeObjectTypeDescriptorExtensions| .Authorize(null!, \"MyPolicy\");| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "TypeAuth_WithRoles",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Authorize([\"MyRole\",])| .Field(\"foo\")| .Resolve(\"bar\"))| .AddAuthorizeDirectiveType()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "TypeAuth_WithRoles_DescriptorNull",
        "body": "{| // arrange| // act| void Action()| => AuthorizeObjectTypeDescriptorExtensions.Authorize(null!, [\"MyRole\",]);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(ApplyPolicy.BeforeResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(apply: ApplyPolicy.AfterResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(apply: ApplyPolicy.BeforeResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(apply: ApplyPolicy.Validation)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FieldAuth_DefaultPolicy_DescriptorNull",
        "body": "{| // arrange| // act| Action action = () =>| AuthorizeObjectFieldDescriptorExtensions| .Authorize(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(\"MyPolicy\", ApplyPolicy.BeforeResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(\"MyPolicy\", apply: ApplyPolicy.AfterResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(\"MyPolicy\", apply: ApplyPolicy.BeforeResolver)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize(\"MyPolicy\", apply: ApplyPolicy.Validation)| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FieldAuth_WithPolicy_DescriptorNull",
        "body": "{| // arrange| // act| Action action = () =>| AuthorizeObjectFieldDescriptorExtensions| .Authorize(null!, \"MyPolicy\");| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQL()| .AddQueryType(| c => c| .Name(\"Query\")| .Field(\"foo\")| .Authorize([\"MyRole\",])| .Resolve(\"bar\"))| .AddAuthorization()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FieldAuth_WithRoles_DescriptorNull",
        "body": "{| // arrange| // act| Action action = () =>| AuthorizeObjectFieldDescriptorExtensions| .Authorize(null!, [\"MyRole\",]);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "AuthorizeSchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddLogging()| .AddAuthorizationCore()| .AddGraphQLServer()| .AddQueryType()| .AddTypeExtension<QueryExtensions>()| .AddAuthorization()| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ bar }\")| .SetUser(new ClaimsPrincipal())| .Build());| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RootCommandTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var host = new Mock<IHost>().Object;| var console = new TestConsole();| var app = new App(host).Build();| // act| await app.InvokeAsync(\"-h\", console);| // assert| console.Out.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaCommandTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var host = new Mock<IHost>().Object;| var console = new TestConsole();| var app = new App(host).Build();| // act| await app.InvokeAsync(\"schema -h\", console);| // assert| console.Out.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaExportCommandTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var host = new Mock<IHost>().Object;| var console = new TestConsole();| var app = new App(host).Build();| // act| await app.InvokeAsync(\"schema export -h\", console);| // assert| console.Out.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = new ServiceCollection();| services.AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"));| var hostMock = new Mock<IHost>();| hostMock| .Setup(x => x.Services)| .Returns(services.BuildServiceProvider());| var host = hostMock.Object;| var console = new TestConsole();| var app = new App(host).Build();| // act| await app.InvokeAsync(\"schema export\", console);| // assert| console.Out.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = new ServiceCollection();| services.AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"));| var hostMock = new Mock<IHost>();| hostMock| .Setup(x => x.Services)| .Returns(services.BuildServiceProvider());| var host = hostMock.Object;| var console = new TestConsole();| var app = new App(host).Build();| var tempFile = System.IO.Path.GetTempFileName();| // act| await app.InvokeAsync($\"schema export --output {tempFile}\", console);| // assert| (await File.ReadAllTextAsync(tempFile)).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = new ServiceCollection();| services.AddGraphQL(\"Foo\")| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"));| var hostMock = new Mock<IHost>();| hostMock| .Setup(x => x.Services)| .Returns(services.BuildServiceProvider());| var host = hostMock.Object;| var console = new TestConsole();| var app = new App(host).Build();| // act| await app.InvokeAsync(\"schema export --schema-name Foo\", console);| // assert| console.Out.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "CostTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var uri = new Uri(\"http://localhost:5000/graphql\");| var requestBody =| \"\"\"| {| \"query\" : \"query Test($id: String!){human(id: $id){name}}\"| \"variables\" : { \"id\" : \"1000\" }| }| \"\"\";| var content = new StringContent(requestBody, Encoding.UTF8, \"application/json\");| // act| using var httpClient = server.CreateClient();| var response = await httpClient.PostAsync(uri, content);| // assert| response.EnsureSuccessStatusCode();| var result = await response.Content.ReadFromJsonAsync<JsonDocument>();| Assert.NotNull(response);| result?.RootElement.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var uri = new Uri(\"http://localhost:5000/graphql\");| var requestBody =| \"\"\"| {| \"query\" : \"query Test($id: String!){human(id: $id){name}}\"| \"variables\" : { \"id\" : \"1000\" }| }| \"\"\";| var content = new StringContent(requestBody, Encoding.UTF8, \"application/json\");| content.Headers.Add(HttpHeaderKeys.Cost, HttpHeaderValues.ReportCost);| // act| using var httpClient = server.CreateClient();| var response = await httpClient.PostAsync(uri, content);| // assert| response.EnsureSuccessStatusCode();| var result = await response.Content.ReadFromJsonAsync<JsonDocument>();| Assert.NotNull(response);| result?.RootElement.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var uri = new Uri(\"http://localhost:5000/graphql\");| var requestBody =| \"\"\"| {| \"query\" : \"query Test($id: String!){human(id: $id){name}}\"| \"variables\" : { \"id\" : \"1000\" }| }| \"\"\";| var content = new StringContent(requestBody, Encoding.UTF8, \"application/json\");| content.Headers.Add(HttpHeaderKeys.Cost, HttpHeaderValues.ValidateCost);| // act| using var httpClient = server.CreateClient();| var response = await httpClient.PostAsync(uri, content);| // assert| response.EnsureSuccessStatusCode();| var result = await response.Content.ReadFromJsonAsync<JsonDocument>();| Assert.NotNull(response);| result?.RootElement.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DefaultValueTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var services = new ServiceCollection();| services| .AddGraphQLServer()| .AddQueryType<Queries>()| .AddMutationType<Mutations>();| var serviceProvider = services.BuildServiceProvider();| var executorResolver = serviceProvider.GetRequiredService<IRequestExecutorResolver>();| var executor = await executorResolver.GetRequestExecutorAsync();| // Act| var result = await executor.ExecuteAsync(\"mutation{ doSomething(input: { }) { result } }\");| // Extract the data from the result| var jsonResult = result.ToJson();| // Parse the JSON result and extract the 'result' value| var jObject = JObject.Parse(jsonResult);| var actualResult = jObject[\"data\"]![\"doSomething\"]![\"result\"]!.Value<int>();| // Assert| Assert.Equal(500, actualResult);| }"
      }
    ]
  },
  {
    "file": "EvictSchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var time1 = await server.GetAsync(| new ClientQueryRequest { Query = \"{ time }\", });| // act| await server.GetAsync(| new ClientQueryRequest { Query = \"{ evict }\", });| // assert| var time2 = await server.GetAsync(| new ClientQueryRequest { Query = \"{ time }\", });| Assert.False(((long)time1.Data![\"time\"]!).Equals((long)time2.Data![\"time\"]!));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var time1 = await server.GetAsync(| new ClientQueryRequest { Query = \"{ time }\", },| \"/evict\");| // act| await server.GetAsync(| new ClientQueryRequest { Query = \"{ evict }\", },| \"/evict\");| // assert| var time2 = await server.GetAsync(| new ClientQueryRequest { Query = \"{ time }\", },| \"/evict\");| Assert.False(((long)time1.Data![\"time\"]!).Equals((long)time2.Data![\"time\"]!));| }"
      }
    ]
  },
  {
    "file": "ServiceCollectionExtensionTests.cs",
    "methods": [
      {
        "name": "AddHttpRequestSerializer_OfT",
        "body": "{| // arrange| var serviceCollection = new ServiceCollection();| // act| serviceCollection.AddHttpResponseFormatter<DefaultHttpResponseFormatter>();| // assert| Assert.Collection(| serviceCollection,| t =>| {| Assert.Equal(typeof(IHttpResponseFormatter), t.ServiceType);| Assert.Equal(typeof(DefaultHttpResponseFormatter), t.ImplementationType);| });| }"
      }
    ]
  },
  {
    "file": "GraphQLOverHttpSpecTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ __typename }\", }),| };| request.Headers.TryAddWithoutValidation(\"Accept\", \"unsupported\");| using var response = await client.SendAsync(request);| // assert| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: BadRequest| -------------------------->| {\"\"errors\"\":[{\"\"message\"\":\"\"Unable to parse the accept header value \" +| @\"`unsupported`.\"\",\"\"extensions\"\":{\"\"headerValue\"\":\"\"unsupported\"\",\" +| @\"\"\"code\"\":\"\"HC0064\"\"}}]}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ __typename }\", }),| };| request.Headers.TryAddWithoutValidation(\"Accept\", \"application/unsupported\");| using var response = await client.SendAsync(request);| // assert| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: NotAcceptable| -------------------------->| {\"\"errors\"\":[{\"\"message\"\":\"\"None of the `Accept` header values is supported.\"\",\" +| @\"\"\"extensions\"\":{\"\"code\"\":\"\"HC0063\"\"}}]}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ ... @defer { __typename } }\", }),| Headers = { { \"Accept\", ContentType.GraphQLResponse }, },| };| using var response = await client.SendAsync(request, ResponseHeadersRead);| // assert| // we are rejecting the request since we have a streamed result and| // the user requests a json payload.| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: MethodNotAllowed| -------------------------->| {\"\"errors\"\":[{\"\"message\"\":\"\"The specified operation kind is not allowed.\"\"}]}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.Timeout = TimeSpan.FromSeconds(30);| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url);| request.Content = JsonContent.Create(| new ClientQueryRequest| {| Query = \"subscription {delay(count: 2, delay:15000)}\",| });| request.Headers.Add(\"Accept\", \"text/event-stream\");| using var response = await client.SendAsync(request, ResponseHeadersRead);| // assert| Snapshot| .Create()| .Add(response)| .MatchInline(| \"\"\"| Headers:| Cache-Control: no-cache| Content-Type: text/event-stream; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: complete| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.Timeout = TimeSpan.FromSeconds(30);| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url);| request.Content = JsonContent.Create(| new ClientQueryRequest| {| Query = \"subscription {delay(count: 2, delay:15000)}\",| });| request.Headers.Add(\"Accept\", \"*/*\");| using var response = await client.SendAsync(request, ResponseHeadersRead);| // assert| Snapshot| .Create()| .Add(response)| .MatchInline(| \"\"\"| Headers:| Cache-Control: no-cache| Content-Type: text/event-stream; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: complete| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.Timeout = TimeSpan.FromSeconds(30);| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url);| request.Content = JsonContent.Create(| new ClientQueryRequest| {| Query = \"subscription foo @foo(bar: 1) {delay(count: 2, delay:15000)}\",| });| request.Headers.Add(\"Accept\", \"*/*\");| using var response = await client.SendAsync(request, ResponseHeadersRead);| // assert| Snapshot| .Create()| .Add(response)| .MatchInline(| \"\"\"| Headers:| Cache-Control: no-cache| Content-Type: text/event-stream; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: next| data: {\"data\":{\"delay\":\"next\"}}| :| event: complete| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = new DefaultGraphQLHttpClient(server.CreateClient());| var snapshot = new Snapshot();| // act| var request = new GraphQLHttpRequest(| new OperationBatchRequest(| [| new OperationRequest(| \"\"\"| {| hero(episode: NEW_HOPE) {| name| }| }| \"\"\"),| new OperationRequest(| \"\"\"| {| hero(episode: EMPIRE) {| name| }| }| \"\"\"),| ]),| new Uri(\"http://localhost:5000/graphql\"));| using var response = await client.SendAsync(request);| // assert| Assert.Equal(OK, response.StatusCode);| var sortedResults = new SortedList<(int?, int?), OperationResult>();| await foreach (var result in response.ReadAsResultStreamAsync())| {| sortedResults.Add((result.RequestIndex, result.VariableIndex), result);| }| foreach (var result in sortedResults.Values)| {| snapshot.Add(result);| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = new DefaultGraphQLHttpClient(server.CreateClient());| var snapshot = new Snapshot();| // act| var request = new GraphQLHttpRequest(| new VariableBatchRequest(| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\",| variables:| [| new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| new Dictionary<string, object?> { { \"episode\", \"EMPIRE\" }, },| ]),| new Uri(\"http://localhost:5000/graphql\"));| using var response = await client.SendAsync(request);| // assert| Assert.Equal(OK, response.StatusCode);| await foreach (var result in response.ReadAsResultStreamAsync())| {| snapshot.Add(result);| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = new DefaultGraphQLHttpClient(server.CreateClient());| // act| var request = new GraphQLHttpRequest(| new OperationRequest(\"{ error }\"),| new Uri(\"http://localhost:5000/notnull\"));| using var response = await client.SendAsync(request);| // assert| Assert.Equal(OK, response.StatusCode);| }"
      }
    ]
  },
  {
    "file": "HttpGetMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.GetAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer(endpoint => endpoint.MapGraphQLHttp());| // act| var result = await server.GetAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer(endpoint => endpoint.MapGraphQLHttp(\"/foo/bar\"));| // act| var result = await server.GetAsync(| new ClientQueryRequest { Query = \"{ __typename }\", },| \"/foo/bar\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(\"/foo\");| // act| var result = await server.GetAsync(| new ClientQueryRequest { Query = \"{ __typename }\", },| \"/foo\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| {| HERO: hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", 1.539 }, },| },| \"/arguments\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", double.MaxValue }, },| },| \"/arguments\");| // assert| new| {| double.MaxValue,| result,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", double.MinValue }, },| },| \"/arguments\");| // assert| new| {| double.MinValue,| result,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Decimal) {| decimal_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", decimal.MaxValue }, },| },| \"/arguments\");| // assert| new| {| decimal.MaxValue,| result,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Decimal) {| decimal_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", decimal.MinValue }, },| },| \"/arguments\");| // assert| new| {| decimal.MinValue,| result,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?>| {| { \"episode\", \"NEW_HOPE\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| query h($id: String!) {| human(id: $id) {| name| }| }\",| Variables = new Dictionary<string, object?>| {| { \"id\", \"1000\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions| {| AllowedGetOperations = AllowedGetOperations.QueryAndMutation,| }));| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| {| \"review\",| new Dictionary<string, object?>| {| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions| {| AllowedGetOperations = AllowedGetOperations.QueryAndMutation,| }));| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| {| \"review\",| new Dictionary<string, object?>| {| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions| {| AllowedGetOperations = AllowedGetOperations.QueryAndMutation,| }));| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $stars: Int!| $commentary: String!) {| createReview(episode: $ep, review: {| stars: $stars| commentary: $commentary| } ) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $stars: Int!| $commentary: String!| $foo: Float) {| createReview(episode: $ep, review: {| stars: $stars| commentary: $commentary| } ) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| {| ähero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| {| \"review\",| new Dictionary<string, object?>| {| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions| {| AllowedGetOperations = AllowedGetOperations.QueryAndMutation,| }));| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| {| \"review\",| new Dictionary<string, object?>| {| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions| {| EnableGetRequests = false,| Tool = { Enable = false, },| }));| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.GetActivePersistedQueryAsync(\"md5Hash\", \"60ddx_GGk4FDObSa6eK0sg\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.GetActivePersistedQueryAsync(\"md5Hash\", \"60ddx/GGk4FDObSa6eK0sg==\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.GetActivePersistedQueryAsync(\"md5Hash\", \"abc\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var document = Utf8GraphQLParser.Parse(\"{ __typename }\");| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var hash = hashProvider.ComputeHash(| Encoding.UTF8.GetBytes(document.ToString(false)));| // act| var resultA =| await server.GetStoreActivePersistedQueryAsync(| document.ToString(false),| \"md5Hash\",| hash);| var resultB = await server.GetActivePersistedQueryAsync(\"md5Hash\", hash);| // assert| new[]| {| resultA,| resultB,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| const string query = \"{__typename}\";| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var hash = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| // act| var resultA =| await server.GetStoreActivePersistedQueryAsync(| query,| \"md5Hash\",| hash);| var resultB = await server.GetActivePersistedQueryAsync(\"md5Hash\", hash);| // assert| new[] { resultA, resultB, }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s.AddGraphQLServer()| .AddHttpRequestInterceptor<ErrorRequestInterceptor>());| // act| var result =| await server.GetAsync(| new ClientQueryRequest| {| Query =| \"\"\"| {| hero {| name| }| }| \"\"\",| });| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HttpGetSchemaMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl&types=Query\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl&types=Character,Query\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl&types=Xyz\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl&types=\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl&types=Xyz.Abc\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer(b => b.MapGraphQLSchema());| var url = TestServerExtensions.CreateUrl(\"/graphql/sdl\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer(b => b.MapGraphQLSchema(\"/foo/bar\"));| var url = TestServerExtensions.CreateUrl(\"/foo/bar\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureConventions: e => e.WithOptions(| new GraphQLServerOptions { EnableSchemaRequests = false, Tool = { Enable = false, }, }));| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.NotFound, response.StatusCode);| var result = await response.Content.ReadAsStringAsync();| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HttpMultipartMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent();| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent();| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"\"), \"operations\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"{}\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"map\" },| { new StringContent(\"{}\"), \"operations\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"data\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.file\\\"] }\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"{ \\\"\\\": [\\\"variables.file\\\"] }\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var form = new MultipartFormDataContent| {| { new StringContent(\"{}\"), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [] }\"), \"map\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($upload: Upload!) {| singleUpload(file: $upload)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"upload\", null },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.upload\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($upload: Upload) {| optionalUpload(file: $upload)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"upload\", null },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.upload\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($input: InputWithOptionalFileInput!) {| optionalObjectUpload(input: $input)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"input\", new Dictionary<string, object?> { { \"file\", null }, } },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.input.file\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($upload: Upload!) {| optionalObjectUpload(input: { file: $upload })| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"upload\", null },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.upload\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($input: InputWithFileInput!) {| objectUpload(input: $input)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"input\", new Dictionary<string, object?> { { \"file\", null }, } },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.input.file\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($upload: Upload!) {| objectUpload(input: { file: $upload })| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"upload\", null },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.upload\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| const string query =| @\"query ($input: [[InputWithFileInput!]!]!) {| listUpload(input: $input)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| {| \"input\",| new List<object>| {| new List<object>| {| new Dictionary<string, object?> { { \"file\", null }, },| },| }| },| },| });| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.input.0.0.file\\\"] }\"), \"map\" },| { new StringContent(\"abc\"), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var query = @\"| query ($upload: Upload!) {| singleUpload(file: $upload)| }\";| var request = JsonConvert.SerializeObject(| new ClientQueryRequest| {| Query = query,| Variables = new Dictionary<string, object?>| {| { \"upload\", null },| },| });| var count = 1024 * 1024 * 129;| var buffer = new byte[count];| for (var i = 0; i < buffer.Length; i++)| {| buffer[i] = 0xFF;| }| // act| var form = new MultipartFormDataContent| {| { new StringContent(request), \"operations\" },| { new StringContent(\"{ \\\"1\\\": [\\\"variables.upload\\\"] }\"), \"map\" },| { new ByteArrayContent(buffer), \"1\", \"foo.bar\" },| };| form.Headers.Add(HttpHeaderKeys.Preflight, \"1\");| var result = await server.PostMultipartAsync(form, path: \"/upload\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HttpPostMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .ModifyParserOptions(o => o.MaxAllowedNodes = 6));| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = \"{ s: __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQLServer()| .ModifyParserOptions(o => o.MaxAllowedNodes = 6));| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = \"{ s: __typename t: __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer(endpoint => endpoint.MapGraphQLHttp());| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: sc => sc.AddHttpResponseFormatter(indented: true));| // act| var result = await server.PostRawAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: sc => sc.AddHttpResponseFormatter(indented: false));| // act| var result = await server.PostRawAsync(| new ClientQueryRequest { Query = \"{ __typename }\", });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(\"/foo\");| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = \"{ __typename }\", },| \"/foo\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| {| HERO: hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s.AddHttpResponseFormatter<CustomFormatter>());| // act| var result =| await server.PostHttpAsync(| new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| result.MatchInlineSnapshot(| \"\"\"| Headers:| abc: def| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| {\"data\":{\"hero\":{\"name\":\"R2-D2\"}}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query h($id: String!) {| human(id: $id) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"id\", \"1000\" }, },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostRawAsync(| new ClientQueryRequest| {| Query = @\"| {| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\")| {| id| }| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var listenerA = new TestListener();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQLServer()| .AddDiagnosticEventListener(_ => listenerA));| // act| await server.PostRawAsync(| new ClientQueryRequest| {| Query = @\"| {| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\")| {| id| }| }| }\",| });| // assert| Assert.True(listenerA.Triggered);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var listenerA = new TestListener();| var listenerB = new TestListener();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQLServer()| .AddDiagnosticEventListener(_ => listenerA)| .AddDiagnosticEventListener(_ => listenerB));| // act| await server.PostRawAsync(| new ClientQueryRequest| {| Query = @\"| {| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\")| {| id| }| }| }\",| });| // assert| Assert.True(listenerA.Triggered);| Assert.True(listenerB.Triggered);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostHttpAsync(| new ClientQueryRequest| {| Query = @\"| {| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\")| {| id| }| }| }\",| });| // assert| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"hero\": {| \"name\": \"R2-D2\",| \"id\": \"2001\"| },| \"wait\": true| }| }| \"\"\",| formatter: SnapshotValueFormatters.GraphQLHttp);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostRawAsync(| new ClientQueryRequest| {| Query = @\"| query ($if: Boolean!){| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\", if: $if)| {| id| }| }| }\",| Variables = new Dictionary<string, object?> { [\"if\"] = true, },| });| // assert| result.Content.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostRawAsync(| new ClientQueryRequest| {| Query = @\"| query ($if: Boolean!){| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\", if: $if)| {| id| }| }| }\",| Variables = new Dictionary<string, object?> { [\"if\"] = false, },| });| // assert| result.Content.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.PostHttpAsync(| new ClientQueryRequest| {| Query = @\"| {| ... @defer {| wait(m: 300)| }| hero(episode: NEW_HOPE)| {| name| friends(first: 10) {| nodes @stream(initialCount: 1 label: \"\"foo\"\") {| name| }| }| }| }\",| });| // assert| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"hero\": {| \"name\": \"R2-D2\",| \"friends\": {| \"nodes\": [| {| \"name\": \"Luke Skywalker\"| },| {| \"name\": \"Han Solo\"| },| {| \"name\": \"Leia Organa\"| }| ]| }| },| \"wait\": true| }| }| \"\"\",| formatter: SnapshotValueFormatters.GraphQLHttp);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| {| \"review\",| new Dictionary<string, object>| {| { \"stars\", 5 }, { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| {| \"review\",| new Dictionary<string, object?>| {| { \"stars\", 5 }, { \"commentary\", \"This is a great movie!\" },| }| },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $stars: Int!| $commentary: String!) {| createReview(episode: $ep, review: {| stars: $stars| commentary: $commentary| } ) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| mutation CreateReviewForEpisode(| $ep: Episode!| $stars: Int!| $commentary: String!| $foo: Float) {| createReview(episode: $ep, review: {| stars: $stars| commentary: $commentary| } ) {| stars| commentary| }| }\",| Variables = new Dictionary<string, object?>| {| { \"ep\", \"EMPIRE\" },| { \"stars\", 5 },| { \"commentary\", \"This is a great movie!\" },| },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| {| ähero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", 1.539 }, },| },| \"/arguments\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", double.MaxValue }, },| },| \"/arguments\");| // assert| new { double.MaxValue, result, }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Float) {| double_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", double.MinValue }, },| },| \"/arguments\");| // assert| new { double.MinValue, result, }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Decimal) {| decimal_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", decimal.MaxValue }, },| },| \"/arguments\");| // assert| new { decimal.MaxValue, result, }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| query ($d: Decimal) {| decimal_arg(d: $d)| }\",| Variables = new Dictionary<string, object?> { { \"d\", decimal.MinValue }, },| },| \"/arguments\");| // assert| new { decimal.MinValue, result, }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.PostAsync(\"{ \\\"query\\\": \");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await server.PostAsync(string.Empty);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(\"/foo\");| // act| var result = await server.PostAsync(string.Empty);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s.AddGraphQLServer()| .AddHttpRequestInterceptor<ErrorRequestInterceptor>());| // act| var result =| await server.PostAsync(| new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s.AddHttpResponseFormatter(| _ => new DefaultHttpResponseFormatter(| new HttpResponseFormatterOptions| {| Json = new JsonResultFormatterOptions| {| NullIgnoreCondition = Fields,| }| })));| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ __schema { description } }\", }),| };| using var response = await client.SendAsync(request);| // assert| // expected response content-type: application/json| // expected status code: 200| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| {\"\"data\"\":{\"\"__schema\"\":{}}}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s.AddHttpResponseFormatter(| new HttpResponseFormatterOptions| {| Json = new JsonResultFormatterOptions { NullIgnoreCondition = Fields, },| }));| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, _url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ __schema { description } }\", }),| };| using var response = await client.SendAsync(request);| // assert| // expected response content-type: application/json| // expected status code: 200| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| {\"\"data\"\":{\"\"__schema\"\":{}}}\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var url = new Uri(\"http://localhost:5000/test\");| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQLServer(\"test\")| .AddQueryType<NullListQuery>()| .Services| .AddHttpResponseFormatter(| new HttpResponseFormatterOptions| {| Json = new JsonResultFormatterOptions { NullIgnoreCondition = Lists, },| }));| var client = server.CreateClient();| // act| using var request = new HttpRequestMessage(HttpMethod.Post, url)| {| Content = JsonContent.Create(| new ClientQueryRequest { Query = \"{ nullValues }\", }),| };| using var response = await client.SendAsync(request);| // assert| // expected response content-type: application/json| // expected status code: 200| Snapshot| .Create()| .Add(response)| .MatchInline(| @\"Headers:| Content-Type: application/graphql-response+json; charset=utf-8| -------------------------->| Status Code: OK| -------------------------->| {\"\"data\"\":{\"\"nullValues\"\":[\"\"abc\"\"]}}\");| }"
      }
    ]
  },
  {
    "file": "IntrospectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var client = GetClient(Environments.Development);| // act| var response = await client.PostAsync(| \"\"\"| {| __type(name: \"Query\") {| name| }| }| \"\"\",| Url);| // assert| response.HttpResponseMessage.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1)| .Services| .AddValidation()| .ConfigureValidation(b => b.Modifiers.Add(o => o.DisableDepthRule = true)));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .DisableIntrospection());| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 2,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      }
    ]
  },
  {
    "file": "PersistedOperationMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var result = await client.GetAsync(\"/graphql/persisted/60ddx_GGk4FDObSa6eK0sg/GetHeroName\");| // assert| Assert.Equal(HttpStatusCode.OK, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var result = await client.GetAsync(\"/graphql/persisted/60ddx_GGk4FDObSa6eK0s1/GetHeroName\");| // assert| Assert.Equal(HttpStatusCode.BadRequest, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var result = await client.GetAsync(\"/graphql/persisted/60ddx_GG+k4FDObSa6eK0s1/GetHeroName\");| // assert| Assert.Equal(HttpStatusCode.BadRequest, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/60ddx_GGk4FDObSa6eK0sg/GetHeroName\",| body);| // assert| Assert.Equal(HttpStatusCode.OK, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(requireOperationName: true);| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/60ddx_GGk4FDObSa6eK0sg\",| body);| // assert| Assert.Equal(HttpStatusCode.BadRequest, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(requireOperationName: false);| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/60ddx_GGk4FDObSa6eK0sg\",| body);| // assert| Assert.Equal(HttpStatusCode.OK, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/60ddx_GGk4FDObSa6eK0sg1/GetHeroName\",| body);| // assert| Assert.Equal(HttpStatusCode.BadRequest, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/60ddx_GGk4+FDObSa6eK0sg1/GetHeroName\",| body);| // assert| Assert.Equal(HttpStatusCode.BadRequest, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| var body = new StringContent(| \"\"\"| {| \"variables\": {| \"if\": false| }| }| \"\"\",| Encoding.UTF8,| \"application/json\");| var result = await client.PostAsync(| \"/graphql/persisted/abc123/Test\",| body);| // assert| Assert.Equal(HttpStatusCode.OK, result.StatusCode);| var json = await result.Content.ReadFromJsonAsync<JsonDocument>();| json!.RootElement.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "PersistedOperationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| new ClientQueryRequest { Id = key, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| // we are not adding the query to the store so the server request should fail| // storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| new ClientQueryRequest { Id = key, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new Sha1DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddSha1DocumentHashProvider(HashFormat.Hex)| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| new ClientQueryRequest { Id = key, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new Sha256DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddSha256DocumentHashProvider(HashFormat.Hex)| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| new ClientQueryRequest { Id = key, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new Sha256DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddSha256DocumentHashProvider(HashFormat.Hex)| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| new ClientQueryRequest| {| Id = key,| Query = string.Empty| },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| CreateApolloStyleRequest(hashProvider.Name, key),| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| // we are not adding the query to the store so the server request should fail| // storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| CreateApolloStyleRequest(hashProvider.Name, key),| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new Sha1DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddSha1DocumentHashProvider(HashFormat.Hex)| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| CreateApolloStyleRequest(hashProvider.Name, key),| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var hashProvider = new Sha256DocumentHashProvider(HashFormat.Hex);| var server = CreateStarWarsServer(| configureServices: s => s| .AddSha256DocumentHashProvider(HashFormat.Hex)| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| var key = hashProvider.ComputeHash(Encoding.UTF8.GetBytes(query));| storage.AddOperation(key, query);| // act| var result = await server.PostAsync(| CreateApolloStyleRequest(hashProvider.Name, key),| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o => o.PersistedOperations.OnlyAllowPersistedDocuments = true)| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| storage.AddOperation(| \"a73defcdf38e5891e91b9ba532cf4c36\",| \"query GetHeroName { hero { name } }\");| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o => o.PersistedOperations.OnlyAllowPersistedDocuments = true)| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"query GetHeroName { hero { name } }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| storage.AddOperation(| \"a73defcdf38e5891e91b9ba532cf4c36\",| \"query GetHeroName { hero { name } }\");| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o =>| {| o.PersistedOperations.OnlyAllowPersistedDocuments = true;| o.PersistedOperations.AllowDocumentBody = true;| })| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"query GetHeroName { hero { name } }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o =>| {| o.PersistedOperations.OnlyAllowPersistedDocuments = true;| o.PersistedOperations.OperationNotAllowedError =| ErrorBuilder.New()| .SetMessage(\"Not allowed!\")| .Build();| })| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| var query = \"{ __typename }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new OperationStorage();| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o =>| {| o.PersistedOperations.OnlyAllowPersistedDocuments = true;| })| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline()| .AddHttpRequestInterceptor<AllowNonPersistedOperationInterceptor>());| var query = \"{ __typename }\";| // act| var result = await server.PostAsync(| new ClientQueryRequest { Query = query, },| path: \"/starwars\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // we have one operation in our storage that is allowed.| var storage = new OperationStorage();| storage.AddOperation(| \"a73defcdf38e5891e91b9ba532cf4c36\",| \"query GetHeroName { hero { name } }\");| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL(\"StarWars\")| .ModifyRequestOptions(o =>| {| // we only allow persisted operations but we also allow standard requests| // as long as they match a persisted operation.| o.PersistedOperations.OnlyAllowPersistedDocuments = true;| o.PersistedOperations.AllowDocumentBody = true;| })| .ConfigureSchemaServices(c => c.AddSingleton<IOperationDocumentStorage>(storage))| .UsePersistedOperationPipeline());| // act| var result1ShouldBeOk = await server.PostAsync(| new ClientQueryRequest { Id = \"a73defcdf38e5891e91b9ba532cf4c36\" },| path: \"/starwars\");| var result2ShouldBeOk = await server.PostAsync(| new ClientQueryRequest { Query = \"query GetHeroName { hero { name } }\"},| path: \"/starwars\");| var result3ShouldFail = await server.PostAsync(| new ClientQueryRequest { Query = \"{ __typename }\" },| path: \"/starwars\");| // assert| await Snapshot.Create()| .Add(result1ShouldBeOk, \"Result 1 - Should be OK\")| .Add(result2ShouldBeOk, \"Result 2 - Should be OK\")| .Add(result3ShouldFail, \"Result 3 - Should fail\")| .MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "DefaultHttpRequestParserTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| const string json =| \"\"\"| {| \"id\": \"abc1213_5164-ABC-123\"| }| \"\"\";| using var stream = new MemoryStream(Encoding.UTF8.GetBytes(json));| // act| var parser = new DefaultHttpRequestParser(| new DefaultDocumentCache(),| new Sha256DocumentHashProvider(),| 256,| ParserOptions.Default);| var request = await parser.ParseRequestAsync(stream, CancellationToken.None);| // assert| Assert.Collection(| request.Select(r => r.QueryId),| id => Assert.Equal(\"abc1213_5164-ABC-123\", id));| }"
      },
      {
        "name": "ParseRequest_Valid_QueryId",
        "body": "{| // arrange| const string json =| \"\"\"| {| \"id\": \"abc1213_5164-ABC-123\"| }| \"\"\";| // act| var parser = new DefaultHttpRequestParser(| new DefaultDocumentCache(),| new Sha256DocumentHashProvider(),| 256,| ParserOptions.Default);| var request = parser.ParseRequest(json);| // assert| Assert.Collection(| request.Select(r => r.QueryId),| id => Assert.Equal(\"abc1213_5164-ABC-123\", id));| }"
      },
      {
        "name": "ParseRequestFromParams_Valid_QueryId",
        "body": "{| // arrange| var queryParams = new MockQueryParams(\"abc1213_5164-ABC-123\");| // act| var parser = new DefaultHttpRequestParser(| new DefaultDocumentCache(),| new Sha256DocumentHashProvider(),| 256,| ParserOptions.Default);| var request = parser.ParseRequestFromParams(queryParams);| // assert| Assert.Equal(\"abc1213_5164-ABC-123\", request.QueryId);| }"
      }
    ]
  },
  {
    "file": "VariablePathTests.cs",
    "methods": [
      {
        "name": "PathHasNoFields",
        "body": "{| // arrange| const string path = \"variables\";| // act| void Parse() => VariablePath.Parse(path);| // assert| Assert.Equal(| ErrorCodes.Server.MultiPartInvalidPath,| Assert.Throws<GraphQLRequestException>(Parse).Errors.Single().Code);| }"
      },
      {
        "name": "InvalidRoot",
        "body": "{| // arrange| const string path = \"foo.bar\";| // act| void Parse() => VariablePath.Parse(path);| // assert| Assert.Equal(| ErrorCodes.Server.MultiPartPathMustStartWithVariable,| Assert.Throws<GraphQLRequestException>(Parse).Errors.Single().Code);| }"
      },
      {
        "name": "PathMustStartWithKey",
        "body": "{| // arrange| const string path = \"variables.1.foo.bar\";| // act| void Parse() => VariablePath.Parse(path);| // assert| Assert.Throws<InvalidOperationException>(Parse);| }"
      },
      {
        "name": "ValidPath",
        "body": "{| // arrange| const string s = \"variables.foo.bar.1.baz\";| // act| var path = VariablePath.Parse(s);| // assert| Assert.Equal(\"foo\", path.Key.Value);| Assert.Equal(\"bar\", Assert.IsType<KeyPathSegment>(path.Key.Next).Value);| Assert.Equal(1, Assert.IsType<IndexPathSegment>(path.Key.Next!.Next).Value);| Assert.Equal(\"baz\", Assert.IsType<KeyPathSegment>(path.Key.Next!.Next!.Next).Value);| }"
      }
    ]
  },
  {
    "file": "WebSocketProtocolTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| var webSocket = await ConnectToServerAsync(client, ct);| var document = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(document);| const string subscriptionId = \"abc\";| // act| await webSocket.SendSubscriptionStartAsync(subscriptionId, request);| // assert| await testServer.SendPostRequestAsync(| new ClientQueryRequest| {| Query =| \"\"\"| mutation {| createReview(episode: NEW_HOPE review: {| commentary: \"foo\"| stars: 5| }) {| stars| }| }| \"\"\"| });| var message = await WaitForMessage(webSocket, \"data\", ct);| Assert.NotNull(message);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(| async ct =>| {| // arrange| snapshot.Clear();| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| using var webSocket = await ConnectToServerAsync(client, ct);| // act| await webSocket.SendMessageAsync(| @\"{| \"\"type\"\": \"\"start\"\",| \"\"id\"\": \"\"abc\"\",| \"\"payload\"\": {| \"\"query\"\": \"\"}\"\"| }| }\",| ct);| // assert| var message = await WaitForMessage(webSocket, \"error\", ct);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| var webSocket = await ConnectToServerAsync(client, ct);| var document = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { _stars } }\");| var request = new GraphQLRequest(document);| const string subscriptionId = \"abc\";| // act| await webSocket.SendSubscriptionStartAsync(subscriptionId, request);| // assert| var message = await WaitForMessage(webSocket, \"error\", ct);| Assert.NotNull(message);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "WebSocketProtocolTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| var webSocket = await ConnectToServerAsync(client, ct);| var document = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(document);| const string subscriptionId = \"abc\";| // act| await webSocket.SendSubscriptionStartAsync(subscriptionId, request);| // assert| await testServer.SendPostRequestAsync(| new ClientQueryRequest| {| Query =| \"\"\"| mutation {| createReview(episode: NEW_HOPE review: {| commentary: \"foo\"| stars: 5| }) {| stars| }| }| \"\"\"| });| var message = await WaitForMessage(webSocket, \"data\", ct);| Assert.NotNull(message);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(| async ct =>| {| // arrange| snapshot.Clear();| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| using var webSocket = await ConnectToServerAsync(client, ct);| // act| await webSocket.SendMessageAsync(| @\"{| \"\"type\"\": \"\"start\"\",| \"\"id\"\": \"\"abc\"\",| \"\"payload\"\": {| \"\"query\"\": \"\"}\"\"| }| }\",| ct);| // assert| var message = await WaitForMessage(webSocket, \"error\", ct);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| using var testServer = CreateStarWarsServer();| var client = CreateWebSocketClient(testServer);| var webSocket = await ConnectToServerAsync(client, ct);| var document = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { _stars } }\");| var request = new GraphQLRequest(document);| const string subscriptionId = \"abc\";| // act| await webSocket.SendSubscriptionStartAsync(subscriptionId, request);| // assert| var message = await WaitForMessage(webSocket, \"error\", ct);| Assert.NotNull(message);| await snapshot.Add(message).MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "OperationManagerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var session = new Mock<ISocketSession>();| var interceptor = new Mock<ISocketSessionInterceptor>();| var subscriptions = new OperationManager(session.Object, interceptor.Object, executor);| // act| void Action() => subscriptions.Enqueue(null!, new GraphQLRequest(null, queryId: \"123\"));| // assert| Assert.Equal(| \"sessionId\",| Assert.Throws<ArgumentException>(Action).ParamName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var session = new Mock<ISocketSession>();| var interceptor = new Mock<ISocketSessionInterceptor>();| var subscriptions = new OperationManager(session.Object, interceptor.Object, executor);| // act| void Action() => subscriptions.Enqueue(\"\", new GraphQLRequest(null, queryId: \"123\"));| // assert| Assert.Equal(| \"sessionId\",| Assert.Throws<ArgumentException>(Action).ParamName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var session = new Mock<ISocketSession>();| var interceptor = new Mock<ISocketSessionInterceptor>();| var subscriptions = new OperationManager(session.Object, interceptor.Object, executor);| // act| void Action() => subscriptions.Enqueue(\"abc\", null!);| // assert| Assert.Equal(| \"request\",| Assert.Throws<ArgumentNullException>(Action).ParamName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| var query = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(query);| subscriptions.Dispose();| // act| void Fail() => subscriptions.Enqueue(\"abc\", request);| // assert| Assert.Throws<ObjectDisposedException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| var query = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(query);| // act| var success = subscriptions.Enqueue(\"abc\", request);| var registered = subscriptions.ToArray();| // assert| Assert.True(success);| Assert.Collection(registered, t => Assert.Equal(\"abc\", t.Id));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| var query = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(query);| var success1 = subscriptions.Enqueue(\"abc\", request);| var registered1 = subscriptions.ToArray();| // act| var success2 = subscriptions.Enqueue(\"abc\", request);| var registered2 = subscriptions.ToArray();| // assert| Assert.True(success1);| Assert.Collection(registered1, t => Assert.Equal(\"abc\", t.Id));| Assert.False(success2);| Assert.Collection(registered2, t => Assert.Equal(\"abc\", t.Id));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| var query = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(query);| var success1 = subscriptions.Enqueue(\"abc\", request);| var registered1 = subscriptions.ToArray();| // act| var success2 = subscriptions.Complete(\"abc\");| var registered2 = subscriptions.ToArray();| // assert| Assert.True(success1);| Assert.Collection(registered1, t => Assert.Equal(\"abc\", t.Id));| Assert.True(success2);| Assert.Empty(registered2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var session = new Mock<ISocketSession>();| var interceptor = new Mock<ISocketSessionInterceptor>();| var subscriptions = new OperationManager(session.Object, interceptor.Object, executor);| // act| void Action() => subscriptions.Complete(null!);| // assert| Assert.Equal(| \"sessionId\",| Assert.Throws<ArgumentException>(Action).ParamName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var session = new Mock<ISocketSession>();| var interceptor = new Mock<ISocketSessionInterceptor>();| var subscriptions = new OperationManager(session.Object, interceptor.Object, executor);| // act| void Action() => subscriptions.Complete(\"\");| // assert| Assert.Equal(| \"sessionId\",| Assert.Throws<ArgumentException>(Action).ParamName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| subscriptions.Dispose();| // act| void Fail() => subscriptions.Complete(\"abc\");| // assert| Assert.Throws<ObjectDisposedException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddStarWars()| .BuildRequestExecutorAsync();| var socketSession = new TestSocketSession();| var mockSession = new Mock<IOperationSession>();| mockSession.SetupGet(t => t.Id).Returns(\"abc\");| using var subscriptions = new OperationManager(| socketSession,| new DefaultSocketSessionInterceptor(),| executor,| _ => mockSession.Object);| var query = Utf8GraphQLParser.Parse(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| var request = new GraphQLRequest(query);| var success = subscriptions.Enqueue(\"abc\", request);| Assert.True(success);| // act| subscriptions.Dispose();| var registered = subscriptions.ToArray();| // assert| Assert.Empty(registered);| }"
      }
    ]
  },
  {
    "file": "ToolConfigurationFileMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| // act| var result = await GetNitroConfigAsync(server);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLToolOptions { ServeMode = GraphQLToolServeMode.Embedded, };| var server = CreateServer(builder => builder.MapNitroApp().WithOptions(options));| // act| var result = await GetNitroConfigAsync(server, \"/graphql/ui\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLToolOptions { ServeMode = GraphQLToolServeMode.Embedded, };| var server = CreateServer(builder =>| {| builder.MapGraphQLHttp();| builder.MapNitroApp().WithOptions(options);| });| // act| var result = await GetNitroConfigAsync(server, \"/graphql/ui\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLToolOptions { ServeMode = GraphQLToolServeMode.Embedded, };| var server = CreateServer(b => b.MapNitroApp(\"/foo/bar\").WithOptions(options));| // act| var result = await GetNitroConfigAsync(server, \"/foo/bar\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLServerOptions| {| Tool =| {| ServeMode = GraphQLToolServeMode.Embedded,| Document = \"# foo\",| IncludeCookies = true,| HttpHeaders =| new HeaderDictionary { { \"Content-Type\", \"application/json\" }, },| HttpMethod = DefaultHttpMethod.Get,| Enable = true,| Title = \"Hello\",| GaTrackingId = \"GA-FOO\",| GraphQLEndpoint = \"/foo/bar\",| UseBrowserUrlAsGraphQLEndpoint = true,| DisableTelemetry = true,| },| };| var server = CreateStarWarsServer(\"/graphql\", configureConventions: builder => builder.WithOptions(options));| // act| var result = await GetNitroConfigAsync(server);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLToolOptions { ServeMode = GraphQLToolServeMode.Embedded, };| var server = CreateServer(endpoint => endpoint.MapNitroApp().WithOptions(options));| // act| var result = await GetNitroConfigAsync(server, \"/graphql/ui\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var options = new GraphQLToolOptions| {| ServeMode = GraphQLToolServeMode.Version(\"5.0.8\"),| };| var server = CreateServer(endpoint => endpoint.MapNitroApp().WithOptions(options));| // act| var result = await GetAsync(server, \"/graphql/ui/index.html\");| // assert| Assert.Contains(\"static/js/main.98391269.js\", result.Content);| }"
      }
    ]
  },
  {
    "file": "GraphQLHttpClientConfigurationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var httpClient = new HttpClient(new TestHttpMessageHandler(| request =>| {| Assert.Equal(HttpVersion.Version20, request.Version);| Assert.Equal(HttpVersionPolicy.RequestVersionOrHigher, request.VersionPolicy);| return new();| }| ))| {| DefaultRequestVersion = HttpVersion.Version20,| DefaultVersionPolicy = HttpVersionPolicy.RequestVersionOrHigher,| };| var client = GraphQLHttpClient.Create(httpClient, true);| await client.SendAsync(new(\"{ __typename }\", new(CreateUrl(default))), default);| }"
      }
    ]
  },
  {
    "file": "GraphQLHttpClientTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var httpClient = new HttpClient(new CustomHttpClientHandler(HttpStatusCode.OK));| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| var response = await client.PostAsync(query, \"http://localhost:5000/graphql\");| async Task Error() => await response.ReadAsResultAsync();| // assert| var exception = await Assert.ThrowsAsync<InvalidOperationException>(Error);| Assert.Equal(\"Received a successful response with an unexpected content type.\", exception.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| var httpClient = new HttpClient(new CustomHttpClientHandler(HttpStatusCode.NotFound));| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| var response = await client.PostAsync(query, \"http://localhost:5000/graphql\");| async Task Error() => await response.ReadAsResultAsync();| // assert| await Assert.ThrowsAsync<HttpRequestException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| var httpClient = new HttpClient(new CustomHttpClientHandler());| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| async Task Error() => await client.PostAsync(query, \"http://localhost:5000/graphql\");| // assert| var exception = await Assert.ThrowsAsync<Exception>(Error);| Assert.Equal(\"Something went wrong\", exception.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.PostAsync(query, new Uri(CreateUrl(\"/graphql\")), cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.PostAsync(query, CreateUrl(\"/graphql\"), cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.PostAsync(query, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var response = await client.PostAsync(query, variables, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var requestUri = CreateUrl(\"/graphql\");| // act| var response = await client.PostAsync(query, variables, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($traits: JSON!) {| heroByTraits(traits: $traits) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"traits\"] = JsonSerializer.SerializeToElement(new { lastJedi = true, }),| };| var requestUri = CreateUrl(\"/graphql\");| // act| var response = await client.PostAsync(query, variables, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"heroByTraits\":{\"name\":\"Luke Skywalker\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| // act| var response = await client.PostAsync(query, variables, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var operation = new OperationRequest(| \"\"\"| query A($episode: Episode!) {| hero(episode: $episode) {| A: name| }| }| query B($episode: Episode!) {| hero(episode: $episode) {| B: name| }| }| \"\"\",| variables: new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| },| operationName: \"B\");| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var response = await client.PostAsync(operation, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"B\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.GetAsync(query, new Uri(CreateUrl(\"/graphql\")), cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.GetAsync(query, CreateUrl(\"/graphql\"), cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var query =| \"\"\"| query {| hero(episode: JEDI) {| name| }| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| using var response = await client.GetAsync(query, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var response = await client.GetAsync(query, variables, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var requestUri = CreateUrl(\"/graphql\");| // act| var response = await client.GetAsync(query, variables, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| // act| var response = await client.GetAsync(query, variables, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"name\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var operation = new OperationRequest(| \"\"\"| query A($episode: Episode!) {| hero(episode: $episode) {| A: name| }| }| query B($episode: Episode!) {| hero(episode: $episode) {| B: name| }| }| \"\"\",| variables: new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| },| operationName: \"B\");| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var response = await client.GetAsync(operation, requestUri, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"hero\":{\"B\":\"R2-D2\"}}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var subscriptionRequest =| \"\"\"| subscription {| onReview(episode: JEDI) {| stars| }| }| \"\"\";| var mutationRequest = new OperationRequest(| \"\"\"| mutation CreateReviewForEpisode(| $ep: Episode!, $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }| \"\"\",| variables: new Dictionary<string, object?>| {| [\"ep\"] = \"JEDI\",| [\"review\"] = new Dictionary<string, object?>| {| [\"stars\"] = 5,| [\"commentary\"] = \"This is a great movie!\",| },| });| var client = new DefaultGraphQLHttpClient(httpClient);| // act| var subscriptionResponse = await client.PostAsync(subscriptionRequest, cts.Token);| var mutationResponse = await client.PostAsync(mutationRequest, cts.Token);| mutationResponse.EnsureSuccessStatusCode();| // assert| await foreach (var result in subscriptionResponse.ReadAsResultStreamAsync(cts.Token))| {| result.MatchInlineSnapshot(| \"\"\"| Data: {\"onReview\":{\"stars\":5}}| \"\"\");| cts.Cancel();| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| var subscriptionRequest =| \"\"\"| subscription {| onReview(episode: JEDI) {| stars| }| }| \"\"\";| var mutationRequest = new OperationRequest(| \"\"\"| mutation CreateReviewForEpisode(| $ep: Episode!, $review: ReviewInput!) {| createReview(episode: $ep, review: $review) {| stars| commentary| }| }| \"\"\",| variables: new Dictionary<string, object?>| {| [\"ep\"] = \"JEDI\",| [\"review\"] = new Dictionary<string, object?>| {| [\"stars\"] = 5,| [\"commentary\"] = \"This is a great movie!\",| },| });| var client = new DefaultGraphQLHttpClient(httpClient);| // act| var subscriptionResponse = await client.GetAsync(subscriptionRequest, cts.Token);| var mutationResponse = await client.PostAsync(mutationRequest, cts.Token);| mutationResponse.EnsureSuccessStatusCode();| // assert| await foreach (var result in subscriptionResponse.ReadAsResultStreamAsync(cts.Token))| {| result.MatchInlineSnapshot(| \"\"\"| Data: {\"onReview\":{\"stars\":5}}| \"\"\");| cts.Cancel();| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| using var cts = TestEnvironment.CreateCancellationTokenSource();| using var server = ServerFactory.Create(| services => services| .AddRouting()| .AddHttpResponseFormatter()| .AddGraphQLServer()| .AddQueryType(desc =>| {| desc.Name(\"Query\");| desc.Field(\"foo\")| .Type<StringType>()| .Resolve(_ => new ValueTask<object?>(\"bar\"));| })| .AddSubscriptionType<ErrorSubscription>(),| app => app| .UseRouting()| .UseEndpoints(e => e.MapGraphQL()));| var httpClient = server.CreateClient();| httpClient.BaseAddress = new Uri(CreateUrl(\"/graphql\"));| const string subscriptionRequest =| \"\"\"| subscription {| onError| }| \"\"\";| var client = new DefaultGraphQLHttpClient(httpClient);| // act| var subscriptionResponse = await client.PostAsync(subscriptionRequest, cts.Token);| // assert| await foreach (var result in subscriptionResponse.ReadAsResultStreamAsync(cts.Token))| {| snapshot.Add(result);| }| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5000));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var stream = new MemoryStream(\"abc\"u8.ToArray());| var operation = new OperationRequest(| \"\"\"| query ($upload: Upload!) {| singleUpload(file: $upload)| }| \"\"\",| variables: new Dictionary<string, object?>| {| [\"upload\"] = new FileReference(() => stream, \"test.txt\"),| });| var requestUri = new Uri(CreateUrl(\"/upload\"));| var request = new GraphQLHttpRequest(operation, requestUri)| {| Method = GraphQLHttpMethod.Post,| EnableFileUploads = true,| };| // act| var response = await client.SendAsync(request, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"singleUpload\":\"abc\"}| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(5000));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var stream = new MemoryStream(\"abc\"u8.ToArray());| var operation = new OperationRequest(| \"\"\"| query ($upload: Upload!) {| singleUpload(file: $upload)| }| \"\"\",| null,| null,| variables: new ObjectValueNode(| new ObjectFieldNode(| \"upload\",| new FileReferenceNode(() => stream, \"test.txt\"))),| extensions: null);| var requestUri = new Uri(CreateUrl(\"/upload\"));| var request = new GraphQLHttpRequest(operation, requestUri)| {| Method = GraphQLHttpMethod.Post,| EnableFileUploads = true,| };| // act| var response = await client.SendAsync(request, cts.Token);| // assert| using var body = await response.ReadAsResultAsync(cts.Token);| body.MatchInlineSnapshot(| \"\"\"| Data: {\"singleUpload\":\"abc\"}| \"\"\");| }"
      }
    ]
  },
  {
    "file": "OperationRequestTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var request = new OperationRequest(| null,| \"abc\",| \"myOperation\",| variables: new Dictionary<string, object?>()| {| [\"abc\"] = \"def\",| [\"hij\"] = null,| });| using var memory = new MemoryStream();| await using var writer = new Utf8JsonWriter(memory);| // act| request.WriteTo(writer);| await writer.FlushAsync();| // assert| var result = Encoding.UTF8.GetString(memory.ToArray());| Assert.Equal(| \"\"\"{\"id\":\"abc\",\"operationName\":\"myOperation\",\"variables\":{\"abc\":\"def\",\"hij\":null}}\"\"\",| result);| }"
      }
    ]
  },
  {
    "file": "VariableBatchRequestTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var request = new VariableBatchRequest(| null,| \"abc\",| \"myOperation\",| variables:| [| new Dictionary<string, object?>| {| [\"abc\"] = \"def\",| [\"hij\"] = null,| },| new Dictionary<string, object?>| {| [\"abc\"] = \"xyz\",| [\"hij\"] = null,| },| ]);| using var memory = new MemoryStream();| await using var writer = new Utf8JsonWriter(memory);| // act| request.WriteTo(writer);| await writer.FlushAsync();| // assert| var result = JsonDocument.Parse(Encoding.UTF8.GetString(memory.ToArray())).RootElement;| result.MatchInlineSnapshot(| \"\"\"| {| \"id\": \"abc\",| \"operationName\": \"myOperation\",| \"variables\": [| {| \"abc\": \"def\",| \"hij\": null| },| {| \"abc\": \"xyz\",| \"hij\": null| }| ]| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(10));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables1 = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var variables2 = new Dictionary<string, object?>| {| [\"episode\"] = \"EMPIRE\",| };| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var request = new VariableBatchRequest(| query,| variables: new[] { variables1, variables2 });| var response = await client.PostAsync(request, requestUri, cts.Token);| // assert| var snapshot = new Snapshot();| await foreach(var result in response.ReadAsResultStreamAsync(cts.Token))| {| snapshot.Add(result);| }| snapshot.MatchInline(| \"\"\"| ---------------| VariableIndex: 0| Data: {\"hero\":{\"name\":\"R2-D2\"}}| ---------------| ---------------| VariableIndex: 1| Data: {\"hero\":{\"name\":\"Luke Skywalker\"}}| ---------------| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(1000));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables1 = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var variables2 = new Dictionary<string, object?>| {| [\"episode\"] = \"EMPIRE\",| };| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var nestedVariableBatchRequest = new VariableBatchRequest(| query,| variables: new[] { variables1, variables2 });| var nestedSingleRequest = new OperationRequest(| \"\"\"| {| __typename| }| \"\"\");| var batch = new OperationBatchRequest([nestedVariableBatchRequest, nestedSingleRequest]);| var response = await client.PostAsync(batch, requestUri, cts.Token);| // assert| response.EnsureSuccessStatusCode();| var sortedResults = new SortedList<(int?, int?), OperationResult>();| await foreach(var result in response.ReadAsResultStreamAsync(cts.Token))| {| sortedResults.Add((result.RequestIndex, result.VariableIndex), result);| }| var snapshot = new Snapshot();| foreach (var item in sortedResults.Values)| {| snapshot.Add(item);| }| snapshot.MatchInline(| \"\"\"| ---------------| RequestIndex: 0| VariableIndex: 0| Data: {\"hero\":{\"name\":\"R2-D2\"}}| ---------------| ---------------| RequestIndex: 0| VariableIndex: 1| Data: {\"hero\":{\"name\":\"Luke Skywalker\"}}| ---------------| ---------------| RequestIndex: 1| Data: {\"__typename\":\"Query\"}| ---------------| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(TimeSpan.FromSeconds(1000));| using var testServer = CreateStarWarsServer();| var httpClient = testServer.CreateClient();| var client = new DefaultGraphQLHttpClient(httpClient);| var query =| \"\"\"| query($episode: Episode!) {| hero(episode: $episode) {| name| }| }| \"\"\";| var variables1 = new Dictionary<string, object?>| {| [\"episode\"] = \"JEDI\",| };| var variables2 = new Dictionary<string, object?>| {| [\"episode\"] = \"EMPIRE\",| };| var requestUri = new Uri(CreateUrl(\"/graphql\"));| // act| var request1 = new OperationRequest(| query,| variables: variables1);| var request2 = new OperationRequest(| query,| variables: variables2);| var request3 = new OperationRequest(| \"\"\"| {| __typename| }| \"\"\");| var batch = new OperationBatchRequest([request1, request2, request3]);| var response = await client.PostAsync(batch, requestUri, cts.Token);| // assert| response.EnsureSuccessStatusCode();| var sortedResults = new SortedList<(int?, int?), OperationResult>();| await foreach(var result in response.ReadAsResultStreamAsync(cts.Token))| {| sortedResults.Add((result.RequestIndex, result.VariableIndex), result);| }| var snapshot = new Snapshot();| snapshot.Add(response.ContentHeaders.ContentType?.ToString(), \"ContentType\");| foreach (var item in sortedResults.Values)| {| snapshot.Add(item);| }| snapshot.MatchInline(| \"\"\"| ContentType| ---------------| text/event-stream; charset=utf-8| ---------------| ---------------| RequestIndex: 0| Data: {\"hero\":{\"name\":\"R2-D2\"}}| ---------------| ---------------| RequestIndex: 1| Data: {\"hero\":{\"name\":\"Luke Skywalker\"}}| ---------------| ---------------| RequestIndex: 2| Data: {\"__typename\":\"Query\"}| ---------------| \"\"\");| }"
      }
    ]
  },
  {
    "file": "WebSocketClientProtocolTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| return TryTest(async ct =>| {| // arrange| var subscriptionRequest = new OperationRequest(| \"subscription { onReview(episode: NEW_HOPE) { stars } }\");| using var testServer = CreateStarWarsServer(output: output);| var webSocketClient = CreateWebSocketClient(testServer);| using var webSocket = await webSocketClient.ConnectAsync(SubscriptionUri, ct);| var client = await SocketClient.ConnectAsync(webSocket, ct);| // act| // ... subscribe| using var socketResult = await client.ExecuteAsync(subscriptionRequest, ct);| // ... disconnect| webSocket.Abort();| // assert| // ... try iterate| await foreach (var unused in socketResult.ReadResultsAsync().WithCancellation(ct))| {| Assert.Fail(\"Stream should have been aborted\");| }| });| }"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| var subscriptionRequest = new OperationRequest(| \"subscription { onReview(episode: NEW_HOPE) { 123 } }\");| using var testServer = CreateStarWarsServer(output: output);| var webSocketClient = CreateWebSocketClient(testServer);| using var webSocket = await webSocketClient.ConnectAsync(SubscriptionUri, ct);| var client = await SocketClient.ConnectAsync(webSocket, ct);| // act| var socketResult = await client.ExecuteAsync(subscriptionRequest, ct);| // assert| await foreach (var result in socketResult.ReadResultsAsync().WithCancellation(ct))| {| Assert.Equal(JsonValueKind.Undefined, result.Data.ValueKind);| Assert.Equal(JsonValueKind.Array, result.Errors.ValueKind);| Assert.Equal(JsonValueKind.Undefined, result.Extensions.ValueKind);| snapshot.Add(result.Errors);| }| await snapshot.MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| return TryTest(async ct =>| {| // arrange| var subscriptionRequest = new OperationRequest(| \"subscription { onReview(episode: NEW_HOPE) { ____ } }\");| using var testServer = CreateStarWarsServer(output: output);| var webSocketClient = CreateWebSocketClient(testServer);| using var webSocket = await webSocketClient.ConnectAsync(SubscriptionUri, ct);| var client = await SocketClient.ConnectAsync(webSocket, ct);| // act| var socketResult = await client.ExecuteAsync(subscriptionRequest, ct);| // assert| await foreach (var result in socketResult.ReadResultsAsync().WithCancellation(ct))| {| Assert.Equal(JsonValueKind.Undefined, result.Data.ValueKind);| Assert.Equal(JsonValueKind.Array, result.Errors.ValueKind);| Assert.Equal(JsonValueKind.Undefined, result.Extensions.ValueKind);| snapshot.Add(result.Errors);| }| await snapshot.MatchAsync(ct);| });| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "IsolatedProcessEndToEndTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var host = new MockIsolatedProcessHostBuilder()| .AddGraphQLFunction(graphQL =>| {| graphQL.AddQueryType(| d => d.Name(\"Query\").Field(\"person\").Resolve(\"Luke Skywalker\"));| })| .Build();| // The executor should resolve without error as a Required service...| var requestExecutor = host.Services.GetRequiredService<IGraphQLRequestExecutor>();| // Build an HttpRequestData that is valid for the Isolated Process to execute with...| var request = TestHttpRequestDataHelper.NewGraphQLHttpRequestData(| host.Services,| @\"query {| person| }\");| // Execute Query Test for end-to-end validation...| // NOTE: This uses the new Az Func Isolated Process extension to execute| // via HttpRequestData...| var response = await requestExecutor.ExecuteAsync(request);| // Read, Parse & Validate the response...| var resultContent = await ReadResponseAsStringAsync(response);| Assert.False(string.IsNullOrWhiteSpace(resultContent));| dynamic json = JObject.Parse(resultContent!);| Assert.Null(json.errors);| Assert.Equal(\"Luke Skywalker\",json.data.person.ToString());| }"
      },
      {
        "name": "Task",
        "body": "{| const string DarkSideLeaderKey = \"DarkSideLeader\";| var host = new MockIsolatedProcessHostBuilder()| .AddGraphQLFunction(graphQL =>| {| graphQL.AddQueryType(| d => d.Name(\"Query\").Field(\"person\").Resolve(ctx =>| {| var darkSideLeader = ctx.ContextData.TryGetValue(| nameof(HttpContext),| out var httpContext)| ? (httpContext as HttpContext)?.Items[DarkSideLeaderKey] as string| : default;| return darkSideLeader;| }));| })| .Build();| // The executor should resolve without error as a Required service...| var requestExecutor = host.Services.GetRequiredService<IGraphQLRequestExecutor>();| // Build an HttpRequestData that is valid for the Isolated Process to execute with...| var request = TestHttpRequestDataHelper.NewGraphQLHttpRequestData(| host.Services,| @\"query {| person| }\");| //Set Up our global Items now available from the Functions Context...| request.FunctionContext.Items.Add(DarkSideLeaderKey, \"Darth Vader\");| // Execute Query Test for end-to-end validation...| // NOTE: This uses the new Az Func Isolated Process extension to execute| // via HttpRequestData...| var response = await requestExecutor.ExecuteAsync(request);| // Read, Parse & Validate the response...| var resultContent = await ReadResponseAsStringAsync(response);| Assert.False(string.IsNullOrWhiteSpace(resultContent));| dynamic json = JObject.Parse(resultContent!);| Assert.Null(json.errors);| Assert.Equal(\"Darth Vader\", json.data.person.ToString());| }"
      },
      {
        "name": "Task",
        "body": "{| var host = new MockIsolatedProcessHostBuilder()| .AddGraphQLFunction(| b => b.AddQueryType(| d => d.Name(\"Query\").Field(\"person\").Resolve(\"Luke Skywalker\")))| .Build();| // The executor should resolve without error as a Required service...| var requestExecutor = host.Services.GetRequiredService<IGraphQLRequestExecutor>();| // Build an HttpRequestData that is valid for the Isolated Process to execute with...| var httpRequestData = TestHttpRequestDataHelper.NewNitroHttpRequestData(host.Services, \"index.html\");| // Execute Query Test for end-to-end validation...| // NOTE: This uses the new Az Func Isolated Process extension to execute| // via HttpRequestData...| var httpResponseData = await requestExecutor.ExecuteAsync(httpRequestData);| // Read, Parse & Validate the response...| var resultContent = await ReadResponseAsStringAsync(httpResponseData);| Assert.NotNull(resultContent);| Assert.False(string.IsNullOrWhiteSpace(resultContent));| Assert.True(resultContent!.Contains(\"<html\") && resultContent.Contains(\"</html>\"));| }"
      }
    ]
  },
  {
    "file": "IsolatedProcessHostBuilderTests.cs",
    "methods": [
      {
        "name": "AzFuncIsolatedProcess_HostBuilderSetupWithPortableConfigMatchingIsolatedProcess",
        "body": "{| var hostBuilder = new MockIsolatedProcessHostBuilder();| // Register using the config func that matches the Isolated Process configuration| // so the config code is portable...| hostBuilder.AddGraphQLFunction(| b => b.AddQueryType(| d => d.Name(\"Query\").Field(\"test\").Resolve(\"test\")));| AssertFunctionsHostBuilderIsValid(hostBuilder);| }"
      }
    ]
  },
  {
    "file": "CustomBindingTests.cs",
    "methods": [
      {
        "name": "AzFuncGraphQLCustomBindings_RegisterBindingConfigProvider",
        "body": "{| var serviceProvider =| CreateTestServiceCollectionWithGraphQLFunction()| .BuildServiceProvider();| // the Binding Config Provider should resolve without error and be the expected type...| var extensionConfigProvider =| serviceProvider.GetRequiredService<IExtensionConfigProvider>();| Assert.Equal(nameof(GraphQLExtensions), extensionConfigProvider.GetType().Name);| }"
      }
    ]
  },
  {
    "file": "FunctionsHostBuilderTests.cs",
    "methods": [
      {
        "name": "AzFuncInProcess_OriginalHostBuilderSetup",
        "body": "{| var hostBuilder = new MockInProcessFunctionsHostBuilder();| hostBuilder| .AddGraphQLFunction()| .AddQueryType(d => d.Name(\"Query\").Field(\"test\").Resolve(\"test\"));| AssertFunctionsHostBuilderIsValid(hostBuilder);| }"
      },
      {
        "name": "AzFuncInProcess_HostBuilderSetupWithPortableConfigMatchingIsolatedProcess",
        "body": "{| var hostBuilder = new MockInProcessFunctionsHostBuilder();| // Register using the config func that matches the Isolated Process| // configuration so the config code is portable...| hostBuilder.AddGraphQLFunction(| b => b.AddQueryType(| d => d.Name(\"Query\").Field(\"test\").Resolve(\"test\")));| AssertFunctionsHostBuilderIsValid(hostBuilder);| }"
      }
    ]
  },
  {
    "file": "InProcessEndToEndTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var hostBuilder = new MockInProcessFunctionsHostBuilder();| hostBuilder| .AddGraphQLFunction()| .AddQueryType(d => d.Name(\"Query\").Field(\"person\").Resolve(\"Luke Skywalker\"));| var serviceProvider = hostBuilder.BuildServiceProvider();| // The executor should resolve without error as a Required service...| var requestExecutor = serviceProvider.GetRequiredService<IGraphQLRequestExecutor>();| var httpContext = TestHttpContextHelper.NewGraphQLHttpContext(| @\"query {| person| }\");| // Execute Query Test for end-to-end validation...| await requestExecutor.ExecuteAsync(httpContext.Request);| // Read, Parse & Validate the response...| var resultContent = await httpContext.ReadResponseContentAsync();| Assert.False(string.IsNullOrWhiteSpace(resultContent));| dynamic json = JObject.Parse(resultContent!);| Assert.Null(json.errors);| Assert.Equal(\"Luke Skywalker\",json.data.person.ToString());| }"
      },
      {
        "name": "Task",
        "body": "{| var hostBuilder = new MockInProcessFunctionsHostBuilder();| hostBuilder.Services.AddHttpContextAccessor();| hostBuilder| .AddGraphQLFunction()| .AddQueryType(| d => d.Name(\"Query\")| .Field(\"NitroTest\")| .Resolve(\"This is a test for Nitro File Serving...\"));| var serviceProvider = hostBuilder.BuildServiceProvider();| // The executor should resolve without error as a Required service...| var requestExecutor = serviceProvider.GetRequiredService<IGraphQLRequestExecutor>();| var httpContext = TestHttpContextHelper.NewNitroHttpContext();| // Execute Query Test for end-to-end validation...| await requestExecutor.ExecuteAsync(httpContext.Request);| // Read, Parse & Validate the response...| var resultContent = await httpContext.ReadResponseContentAsync();| Assert.NotNull(resultContent);| Assert.False(string.IsNullOrWhiteSpace(resultContent));| Assert.True(resultContent!.Contains(\"<html\") && resultContent.Contains(\"</html>\"));| }"
      }
    ]
  },
  {
    "file": "ServiceTests.cs",
    "methods": [
      {
        "name": "AddGraphQLFunction_RegisterExecutor",
        "body": "{| var serviceProvider =| CreateTestServiceCollectionWithGraphQLFunction()| .BuildServiceProvider();| // The executor should resolve without error as a Required service...| var requestExecutor = serviceProvider.GetRequiredService<IGraphQLRequestExecutor>();| Assert.Equal(nameof(DefaultGraphQLRequestExecutor), requestExecutor.GetType().Name);| }"
      },
      {
        "name": "AddGraphQLFunction_ServicesIsNull",
        "body": "{| void Fail() => ((ServiceCollection)default!)| .AddGraphQLFunction()| .AddQueryType(d => d.Name(\"Query\").Field(\"test\").Resolve(\"test\"));| Assert.Throws<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "CacheControlDirectiveTypeTests.cs",
    "methods": [
      {
        "name": "CreateCacheControlDirective",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CacheControlDirectiveType>()| .ModifyOptions(o => o.RemoveUnusedTypeSystemDirectives = false)| .Use(_ => _)| .Create();| var directive =| schema.DirectiveTypes.OfType<CacheControlDirectiveType>().FirstOrDefault()!;| Assert.NotNull(directive);| Assert.IsType<CacheControlDirectiveType>(directive);| Assert.Equal(\"cacheControl\", directive.Name);| Assert.Collection(directive.Arguments,| t =>| {| Assert.Equal(\"maxAge\", t.Name);| Assert.IsType<IntType>(t.Type);| },| t =>| {| Assert.Equal(\"sharedMaxAge\", t.Name);| Assert.IsType<IntType>(t.Type);| },| t =>| {| Assert.Equal(\"inheritMaxAge\", t.Name);| Assert.IsType<BooleanType>(t.Type);| },| t =>| {| Assert.Equal(\"scope\", t.Name);| Assert.IsType<CacheControlScopeType>(t.Type);| },| t =>| {| Assert.Equal(\"vary\", t.Name);| Assert.IsType<ListType>(t.Type);| Assert.IsType<StringType>(t.Type.ElementType());| });| Assert.Collection(| directive.Locations.AsEnumerable(),| t => Assert.Equal(Types.DirectiveLocation.Object, t),| t => Assert.Equal(Types.DirectiveLocation.FieldDefinition, t),| t => Assert.Equal(Types.DirectiveLocation.Interface, t),| t => Assert.Equal(Types.DirectiveLocation.Union, t));| }"
      },
      {
        "name": "CacheControlDirective_Cannot_Be_Applied_Multiple_Times",
        "body": "{| var builder = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"ObjectType\")| .Field(\"field\")| .Type<StringType>()| .CacheControl(500)| .CacheControl(1000))| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _);| var act = () => builder.Create();| var expectedException = Assert.Throws<SchemaException>(act);| expectedException.Message.MatchSnapshot();| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectField_CodeFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"ObjectType\")| .Field(\"field\")| .Type<StringType>()| .CacheControl(500, CacheControlScope.Private, true))| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectField_SchemaFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| field: ObjectType| }| type ObjectType {| field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)| }| \")| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectField_Annotation",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType<ObjectQuery>()| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Fields[\"field\"].Directives| .Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectType_CodeFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"ObjectType\")| .CacheControl(500, CacheControlScope.Private)| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectType_SchemaFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| field: ObjectType| }| type ObjectType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {| field: String| }| \")| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_ObjectType_Annotation",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType<ObjectQuery>()| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<ObjectType>(\"ObjectType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_InterfaceField_SchemaFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| field: InterfaceType| }| interface InterfaceType {| field: String @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true)| }| type ObjectType implements InterfaceType {| field: String| }| \")| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<InterfaceType>(\"InterfaceType\");| var directive = type.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_InterfaceField_Annotation",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType<InterfaceQuery>()| .AddType<InterfaceObjectType>()| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<InterfaceType>(\"InterfaceType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_InterfaceType_CodeFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"field\")| .Type<StringType>())| .AddInterfaceType(d => d| .Name(\"InterfaceType\")| .CacheControl(500, CacheControlScope.Private)| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<InterfaceType>(\"InterfaceType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_InterfaceType_SchemaFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| field: InterfaceType| }| interface InterfaceType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) {| field: String| }| type ObjectType implements InterfaceType {| field: String| }| \")| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<InterfaceType>(\"InterfaceType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_InterfaceType_Annotation",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType<InterfaceQuery>()| .AddType<InterfaceObjectType>()| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<InterfaceType>(\"InterfaceType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_UnionType_CodeFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"field\")| .Type<StringType>())| .AddUnionType(d => d| .Name(\"UnionType\")| .CacheControl(500, CacheControlScope.Private)| .Type(new NamedTypeNode(\"ObjectType\")))| .AddObjectType(d => d| .Name(\"ObjectType\")| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<UnionType>(\"UnionType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_UnionType_SchemaFirst",
        "body": "{| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| field: UnionType| }| union UnionType @cacheControl(maxAge: 500 scope: PRIVATE inheritMaxAge: true) = ObjectType| type ObjectType {| field: String| }| \")| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<UnionType>(\"UnionType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Equal(true, obj.InheritMaxAge);| }"
      },
      {
        "name": "CacheControlDirectiveType_UnionType_Annotation",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType<UnionQuery>()| .AddType<UnionObjectType>()| .AddDirectiveType<CacheControlDirectiveType>()| .Use(_ => _)| .Create();| var type = schema.GetType<UnionType>(\"UnionType\");| var directive = type.Directives.Single(d => d.Type.Name == \"cacheControl\");| var obj = directive.AsValue<CacheControlDirective>();| Assert.Equal(500, obj.MaxAge);| Assert.Equal(CacheControlScope.Private, obj.Scope);| Assert.Null(obj.InheritMaxAge);| }"
      }
    ]
  },
  {
    "file": "CacheControlTypeInterceptorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| field1: String| field2: String @cacheControl(maxAge: 200)| }| \")| .UseField(_ => _)| .AddCacheControl()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| field1: String| field2: String @cacheControl(maxAge: 200)| }| \")| .UseField(_ => _)| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultMaxAge = 100)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| field1: String| field2: String @cacheControl(maxAge: 200, scope: PUBLIC)| }| \")| .UseField(_ => _)| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultScope = CacheControlScope.Private)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| field1: String| field2: String @cacheControl(maxAge: 200)| }| \")| .UseField(_ => _)| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| field1: String| field2: String @cacheControl(maxAge: 200)| }| \")| .UseField(_ => _)| .AddCacheControl()| .ModifyCacheControlOptions(o => o.Enable = false)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddCacheControl()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultMaxAge = 100)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultScope = CacheControlScope.Private)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.Enable = false)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "NegativeMaxAge",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: String @cacheControl(maxAge: -10)| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "MaxAgeAndInheritMaxAgeOnSameField",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: NestedType| }| type NestedType {| field: String @cacheControl(maxAge: 10 inheritMaxAge: true)| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "SharedMaxAgeAndInheritMaxAgeOnSameField",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: NestedType| }| type NestedType {| field: String @cacheControl(sharedMaxAge: 10 inheritMaxAge: true)| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "CacheControlOnInterfaceField",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: Interface!| }| interface Interface {| field: String @cacheControl(maxAge: 10)| }| type Object implements Interface {| field: String| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "InheritMaxAgeOnObjectType",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: ObjectType| }| type ObjectType @cacheControl(inheritMaxAge: true) {| field: String| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "InheritMaxAgeOnInterfaceType",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: InterfaceType| }| type InterfaceType @cacheControl(inheritMaxAge: true) {| field: String| }| type ObjectType {| field: String| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "InheritMaxAgeOnUnionType",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: UnionType| }| union UnionType @cacheControl(inheritMaxAge: true) = ObjectType| type ObjectType {| field: String| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      },
      {
        "name": "InheritMaxAgeOnQueryTypeField",
        "body": "{| ExpectErrors(builder => builder| .AddDocumentFromString(@\"| type Query {| field: String @cacheControl(inheritMaxAge: true)| }| \")| .Use(_ => _ => default)| .AddCacheControl());| }"
      }
    ]
  },
  {
    "file": "HttpCachingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(2000));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(0));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| {| var o = d.Name(\"Query\");| o.Field(\"field1\")| .Resolve(\"\")| .CacheControl(30);| o.Field(\"field2\")| .Resolve(\"\")| .CacheControl(60, CacheControlScope.Private);| });| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field1, field2 }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| {| var o = d.Name(\"Query\");| o.Field(\"field1\")| .Resolve(\"\")| .CacheControl(sharedMaxAge:60);| o.Field(\"field2\")| .Resolve(\"\")| .CacheControl(scope:CacheControlScope.Private, sharedMaxAge:30);| });| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field1, field2 }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| {| var o = d.Name(\"Query\");| o.Field(\"field1\")| .Resolve(\"\")| .CacheControl(maxAge: 0, sharedMaxAge:60);| o.Field(\"field2\")| .Resolve(\"\")| .CacheControl(maxAge:30);| });| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field1, field2 }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| {| var o = d.Name(\"Query\");| o.Field(\"field1\")| .Resolve(\"\")| .CacheControl(maxAge: 30);| o.Field(\"field2\")| .Resolve(\"\")| .CacheControl(maxAge: 0, sharedMaxAge:60);| });| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field1, field2 }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\"));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\"));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultMaxAge = 1000)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\"));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.DefaultScope = CacheControlScope.Private)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\"));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(scope: CacheControlScope.Private));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(2000, CacheControlScope.Private));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Type<StringType>()| .Resolve(_ => throw new Exception()));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(sharedMaxAge: 2000, scope: CacheControlScope.Public));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| d.Name(\"Query\")| .Field(\"field\")| .Resolve(\"\")| .CacheControl(sharedMaxAge: 2000, vary: new[] { \"X-foo\", \"X-BaR\" }));| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var server = CreateServer(services =>| {| services.AddGraphQLServer()| .UseQueryCachePipeline()| .AddCacheControl()| .ModifyCacheControlOptions(o => o.ApplyDefaults = false)| .AddQueryType(d =>| {| var o = d.Name(\"Query\");| o.Field(\"field1\")| .Resolve(\"\")| .CacheControl(sharedMaxAge: 2000, vary: new[] {\"X-foo\", \"X-BaR\"});| o.Field(\"field2\")| .Resolve(\"\")| .CacheControl(sharedMaxAge: 1000, vary: new[] {\"X-FAR\", \"X-BaR\"});| });| });| var client = server.CreateClient();| var result = await client.PostQueryAsync(\"{ field1, field2 }\");| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer(disableDefaultSecurity: true)| .AddTypeExtension(typeof(Query))| .ConfigureSchema(| b => b.TryAddRootType(| () => new ObjectType(| d => d.Name(OperationTypeNames.Query)),| Language.OperationType.Query)| .ModifyOptions(o => o.RemoveUnusedTypeSystemDirectives = false))| .AddCacheControl()| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"\"| schema {| query: Query| }| type Book {| title: String! @cacheControl(maxAge: 5000)| description: String!| }| type Query {| book: Book! @cacheControl(maxAge: 0)| }| \"The scope of a cache hint.\"| enum CacheControlScope {| \"The value to cache is not tied to a single user.\"| PUBLIC| \"The value to cache is specific to a single user.\"| PRIVATE| }| \"The `@cacheControl` directive may be provided for individual fields or entire object, interface or union types to provide caching hints to the executor.\"| directive @cacheControl(\"The maximum amount of time this field's cached value is valid, in seconds.\" maxAge: Int \"The maximum amount of time this field's cached value is valid in shared caches like CDNs, in seconds.\" sharedMaxAge: Int \"If `true`, the field inherits the `maxAge` of its parent field.\" inheritMaxAge: Boolean \"If `PRIVATE`, the field's value is specific to a single user. The default value is `PUBLIC`, which means the field's value is not tied to a single user.\" scope: CacheControlScope \"The Vary HTTP response header describes the parts of the request message aside from the method and URL that influenced the content of the response it occurs in. Most often, this is used to create a cache key when content negotiation is in use.\" vary: [String]) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION| \"\"\"| The `@oneOf` directive is used within the type system definition language| to indicate:| - an Input Object is a Oneof Input Object, or| - an Object Type's Field is a Oneof Field.| \"\"\"| directive @oneOf on INPUT_OBJECT| \"\"\"| The @tag directive is used to apply arbitrary string| metadata to a schema location. Custom tooling can use| this metadata during any step of the schema delivery flow,| including composition, static analysis, and documentation.| interface Book {| id: ID! @tag(name: \"your-value\")| title: String!| author: String!| }| \"\"\"| directive @tag(\"The name of the tag.\" name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION| \"\"\"\");| }"
      }
    ]
  },
  {
    "file": "AsyncEnumerableExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new EmptyAsyncEnumerable();| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new EmptyAsyncEnumerable();| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new ListAsyncEnumerable([\"a\"]);| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| async Task Error() => await Executable.From(query).SingleOrDefaultAsync();| // assert| await Assert.ThrowsAsync<InvalidOperationException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = await Executable.From(query).ToListAsync();| // assert| Assert.Collection(| result,| r => Assert.Equal(\"a\", r),| r => Assert.Equal(\"b\", r));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IAsyncEnumerable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = Executable.From(query).ToAsyncEnumerable();| // assert| await foreach (var item in result)| {| Assert.True(item is \"a\" or \"b\");| }| }"
      }
    ]
  },
  {
    "file": "ErrorBuilderTests.cs",
    "methods": [
      {
        "name": "FromError",
        "body": "{| // arrange| IError error = new Error (\"123\");| // act| error = ErrorBuilder.FromError(error).Build();| // assert| Assert.Equal(\"123\", error.Message);| }"
      },
      {
        "name": "FromError_WithExtensions",
        "body": "{| // arrange| IError error = new Error (| \"123\",| extensions: new OrderedDictionary<string, object?>| {| {\"foo\", \"bar\"},| });| // act| var builder = ErrorBuilder.FromError(error);| error = builder.Build();| // assert| Assert.Equal(\"123\", error.Message);| Assert.Collection(error.Extensions!,| t => Assert.Equal(\"bar\", t.Value));| }"
      },
      {
        "name": "FromError_ClearExtensions",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| extensions: new OrderedDictionary<string, object?>| {| {\"foo\", \"bar\"},| }| );| // act| error = ErrorBuilder.FromError(error).ClearExtensions().Build();| // assert| Assert.Equal(\"123\", error.Message);| Assert.Null(error.Extensions);| }"
      },
      {
        "name": "FromError_RemoveExtension",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| extensions: new OrderedDictionary<string, object?>| {| {\"foo\", \"bar\"},| {\"bar\", \"foo\"},| }| );| // act| error = ErrorBuilder.FromError(error)| .RemoveExtension(\"bar\")| .Build();| // assert| Assert.Equal(\"123\", error.Message);| Assert.Collection(error.Extensions!,| t => Assert.Equal(\"bar\", t.Value));| }"
      },
      {
        "name": "FromError_WithLocations",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| locations: ImmutableList<Location>| .Empty| .Add(new Location(1, 2))| );| // act| var builder = ErrorBuilder.FromError(error);| error = builder.Build();| // assert| Assert.Equal(\"123\", error.Message);| Assert.Collection(| error.Locations!,| t => Assert.Equal(1, t.Line));| }"
      },
      {
        "name": "FromError_ClearLocations",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| locations: ImmutableList<Location>| .Empty| .Add(new Location(1, 2))| );| // act| error = ErrorBuilder.FromError(error).ClearLocations().Build();| // assert| Assert.Equal(\"123\", error.Message);| Assert.Null(error.Locations);| }"
      },
      {
        "name": "FromError_ErrorNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => ErrorBuilder.FromError(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "SetMessage_MessageNull_ArgumentException",
        "body": "{| // arrange| // act| Action action = () => ErrorBuilder.New().SetMessage(null!);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "SetMessage_Bar_ErrorCodeIsFoo",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .Build();| // assert| Assert.Equal(\"bar\", error.Message);| }"
      },
      {
        "name": "SetCode_Foo_ErrorCodeIsFoo",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .SetCode(\"foo\")| .Build();| // assert| Assert.Equal(\"foo\", error.Code);| Assert.Collection(error.Extensions!,| t => Assert.Equal(\"foo\", t.Value));| }"
      },
      {
        "name": "SetPath_Foo_PathIsFooWithCount1",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .SetPath(new List<object> { \"foo\", })| .Build();| // assert| Assert.Equal(\"/foo\", error.Path?.Print());| }"
      },
      {
        "name": "SetPathObject_Foo_PathIsFooWithCount1",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .SetPath(Path.FromList(\"foo\"))| .Build();| // assert| Assert.Equal(\"/foo\", error.Path?.Print());| }"
      },
      {
        "name": "AddLocation",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .AddLocation(new Location(2, 3))| .Build();| // assert| Assert.Collection(| error.Locations!,| t => Assert.Equal(2, t.Line));| }"
      },
      {
        "name": "AddLocation2",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .AddLocation(new Location(2, 3))| .AddLocation(new Location(4, 5))| .Build();| // assert| Assert.Collection(| error.Locations!,| t => Assert.Equal(2, t.Line),| t => Assert.Equal(4, t.Line));| }"
      },
      {
        "name": "AddLocation3",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .AddLocation(2, 3)| .AddLocation(new Location(4, 5))| .Build();| // assert| Assert.Collection(| error.Locations!,| t => Assert.Equal(2, t.Line),| t => Assert.Equal(4, t.Line));| }"
      },
      {
        "name": "AddLocation_From_SyntaxNode",
        "body": "{| // arrange| var syntaxNode = new StringValueNode(| new HotChocolate.Language.Location(1, 2, 3, 4),| \"abc\",| false);| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .AddLocation(syntaxNode)| .Build();| // assert| Assert.Collection(| error.Locations!,| t => Assert.Equal(3, t.Line));| }"
      },
      {
        "name": "AddLocation_From_SyntaxNode_No_Location",
        "body": "{| // arrange| var syntaxNode = new StringValueNode(\"abc\");| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .AddLocation(syntaxNode)| .Build();| // assert| Assert.Null(error.Locations);| }"
      },
      {
        "name": "AddLocation_LineSmallerThan1_ArgumentException",
        "body": "{| // arrange| // act| Action action = () => ErrorBuilder.New()| .AddLocation(0, 3);| // assert| Assert.Throws<ArgumentOutOfRangeException>(action);| }"
      },
      {
        "name": "AddLocation_ColumnSmallerThan1_ArgumentException",
        "body": "{| // arrange| // act| Action action = () => ErrorBuilder.New()| .AddLocation(2, 0);| // assert| Assert.Throws<ArgumentOutOfRangeException>(action);| }"
      },
      {
        "name": "SetException",
        "body": "{| // arrange| var exception = new Exception();| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .SetException(exception)| .Build();| // assert| Assert.Equal(exception, error.Exception);| }"
      },
      {
        "name": "SetExtension",
        "body": "{| // arrange| // act| var error = ErrorBuilder.New()| .SetMessage(\"bar\")| .SetExtension(\"a\", \"b\")| .SetExtension(\"a\", \"c\")| .SetExtension(\"c\", \"d\")| .Build();| // assert| Assert.Collection(| error.Extensions!.OrderBy(t => t.Key),| t => Assert.Equal(\"c\", t.Value),| t => Assert.Equal(\"d\", t.Value));| }"
      },
      {
        "name": "Build_NoMessage_InvalidOperationException",
        "body": "{| // arrange| // act| Action action = () => ErrorBuilder.New().Build();| // assert| Assert.Throws<InvalidOperationException>(action);| }"
      }
    ]
  },
  {
    "file": "ErrorTests.cs",
    "methods": [
      {
        "name": "WithCode",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithCode(\"foo\");| // assert| Assert.Equal(\"foo\", error.Code);| }"
      },
      {
        "name": "RemoveCode",
        "body": "{| // arrange| IError error = new Error(\"123\", code: \"foo\");| // act| error = error.RemoveCode();| // assert| Assert.Null(error.Code);| }"
      },
      {
        "name": "WithException",
        "body": "{| // arrange| IError error = new Error| (| \"123\"| );| var exception = new Exception();| // act| error = error.WithException(exception);| // assert| Assert.Equal(exception, error.Exception);| }"
      },
      {
        "name": "RemoveException",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| exception: new Exception()| );| Assert.NotNull(error.Exception);| // act| error = error.RemoveException();| // assert| Assert.Null(error.Exception);| }"
      },
      {
        "name": "WithExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithExtensions(| new Dictionary<string, object?> { { \"a\", \"b\" }, });| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| });| }"
      },
      {
        "name": "AddExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.SetExtension(\"a\", \"b\").SetExtension(\"c\", \"d\");| // assert| Assert.Collection(| error.Extensions!.OrderBy(t => t.Key),| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| },| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "RemoveExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| error = error.WithExtensions(| new Dictionary<string, object?>| {| { \"a\", \"b\" },| { \"c\", \"d\" },| });| // act| error = error.RemoveExtension(\"a\");| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "WithLocations",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithLocations(new List<Location> { new(1, 2), });| // assert| Assert.Collection(| error.Locations!,| t =>| {| Assert.Equal(1, t.Line);| Assert.Equal(2, t.Column);| });| }"
      },
      {
        "name": "WithMessage",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithMessage(\"456\");| // assert| Assert.Equal(\"456\", error.Message);| }"
      },
      {
        "name": "WithMessage_MessageNull_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(null!);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithMessage_MessageEmpty_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(string.Empty);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithPath",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithPath(Path.FromList(\"foo\"));| // assert| Assert.Equal(\"/foo\", error.Path!.Print());| }"
      }
    ]
  },
  {
    "file": "OperationDocumentTests.cs",
    "methods": [
      {
        "name": "Create_Document_IsNull",
        "body": "{| // arrange| // act| void Action() => new OperationDocument(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_Document",
        "body": "{| // arrange| var document = Utf8GraphQLParser.Parse(\"{ a }\");| // act| var query = new OperationDocument(document);| // assert| Assert.Equal(document, query.Document);| }"
      },
      {
        "name": "QueryDocument_ToString",
        "body": "{| // arrange| var document = Utf8GraphQLParser.Parse(\"{ a }\");| // act| var query = new OperationDocument(document);| // assert| query.Document.ToString(false).MatchSnapshot();| }"
      },
      {
        "name": "QueryDocument_ToSource",
        "body": "{| // arrange| var document = Utf8GraphQLParser.Parse(\"{ a }\");| // act| var query = new OperationDocument(document);| // assert| Utf8GraphQLParser| .Parse(query.AsSpan())| .Print(true)| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var query = new OperationDocument(document);| byte[] buffer;| // act| using (var stream = new MemoryStream())| {| await query.WriteToAsync(stream);| buffer = stream.ToArray();| }| // assert| Utf8GraphQLParser| .Parse(buffer)| .Print(true)| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "OperationResultBuilderTests.cs",
    "methods": [
      {
        "name": "Create_Result_Without_Data_And_Errors",
        "body": "{| // arrange| // act| Action result = () => OperationResultBuilder.New().Build();| // assert| Assert.Throws<ArgumentException>(result);| }"
      },
      {
        "name": "Create_Result_Set_Data",
        "body": "{| // arrange| var builder = new OperationResultBuilder();| // act| builder.SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, });| // assert| builder.Build().MatchSnapshot();| }"
      },
      {
        "name": "Create_Result_Set_Items",
        "body": "{| // arrange| var builder = new OperationResultBuilder();| // act| builder.SetItems(new List<object> { 1, });| // assert| builder.Build().MatchSnapshot();| }"
      },
      {
        "name": "ExpectOperationResult",
        "body": "{| // arrange| IExecutionResult result = OperationResultBuilder.New()| .SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, })| .Build();| // act| var queryResult = result.ExpectOperationResult();| // assert| Assert.NotNull(queryResult);| }"
      },
      {
        "name": "ExpectResponseStream",
        "body": "{| // arrange| IExecutionResult result = OperationResultBuilder.New()| .SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, })| .Build();| // act| void Fail() => result.ExpectResponseStream();| // assert| Assert.Throws<ArgumentException>(Fail);| }"
      }
    ]
  },
  {
    "file": "QueryRequestBuilderTests.cs",
    "methods": [
      {
        "name": "BuildRequest_OnlyQueryIsSet_RequestHasOnlyQuery",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_OnlyQueryDocIsSet_RequestHasOnlyQuery",
        "body": "{| // arrange| var query = Utf8GraphQLParser.Parse(\"{ foo }\");| // act| var request =| OperationRequestBuilder.New()| .SetDocument(query)| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_Empty_OperationRequestBuilderException",
        "body": "{| // arrange| // act| Action action = () =>| OperationRequestBuilder.New()| .Build();| // assert| Assert.Throws<InvalidOperationException>(action).Message.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndSetNewVariable_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetVariableValues(new Dictionary<string, object?> { [\"one\"] = \"bar\", })| .Build();| // assert| // one should be bar| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndResetVariables_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetVariableValues(new Dictionary<string, object?> { [\"one\"] = \"bar\", })| .SetVariableValues(null)| .Build();| // assert| // no variable should be in the request| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndAddProperties_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .AddGlobalState(\"one\", \"foo\")| .AddGlobalState(\"two\", \"bar\")| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndSetProperties_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .AddGlobalState(\"one\", \"foo\")| .AddGlobalState(\"two\", \"bar\")| .SetGlobalState(| new Dictionary<string, object?>| {| { \"three\", \"baz\" },| })| .Build();| // assert| // only three should exist| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndSetProperty_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .AddGlobalState(\"one\", \"foo\")| .SetGlobalState(\"one\", \"bar\")| .Build();| // assert| // one should be bar| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndSetNewProperty_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetGlobalState(\"one\", \"bar\")| .Build();| // assert| // one should be bar| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndResetProperties_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .AddGlobalState(\"one\", \"foo\")| .AddGlobalState(\"two\", \"bar\")| .SetGlobalState(null)| .Build();| // assert| // no property should be in the request| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndInitialValue_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetGlobalState(WellKnownContextData.InitialValue, new { a = \"123\", })| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndOperation_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetOperationName(\"bar\")| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndResetOperation_RequestIsCreated",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetOperationName(\"bar\")| .SetOperationName(null)| .Build();| // assert| // the operation should be null| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndServices_RequestIsCreated",
        "body": "{| // arrange| var service = new { a = \"123\", };| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetServices(| new DictionaryServiceProvider(| service.GetType(),| service))| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_SetAll_RequestIsCreated",
        "body": "{| // arrange| var service = new { a = \"123\", };| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetOperationName(\"bar\")| .AddGlobalState(\"one\", \"foo\")| .SetVariableValues(new Dictionary<string, object?> { { \"two\", \"bar\" }, })| .SetServices(new DictionaryServiceProvider(service.GetType(), service))| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndTryAddProperties_PropertyIsSet",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .TryAddGlobalState(\"one\", \"bar\")| .Build();| // assert| request.MatchSnapshot();| }"
      },
      {
        "name": "BuildRequest_QueryAndTryAddProperties_PropertyIsNotSet",
        "body": "{| // arrange| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .AddGlobalState(\"one\", \"foo\")| .TryAddGlobalState(\"one\", \"bar\")| .Build();| // assert| request.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ResponseStreamTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| var disposable = new TestDisposable();| // act| result.RegisterForCleanup(disposable);| // assert| await result.DisposeAsync();| Assert.True(disposable.IsDisposed);| }"
      },
      {
        "name": "Register_Disposable_Result_Is_null",
        "body": "{| // arrange| var disposable = new TestDisposable();| // act| void Fail() => default(ResponseStream)!.RegisterForCleanup(disposable);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Register_Disposable_Disposable_Is_Null",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| // act| void Fail() => result.RegisterForCleanup(default(IDisposable)!);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| var disposed = false;| // act| result.RegisterForCleanup(| () =>| {| disposed = true;| return default;| });| // assert| await result.DisposeAsync();| Assert.True(disposed);| }"
      },
      {
        "name": "Register_One_Async_Cleanup_Func_Func_is_Null",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| // act| void Fail() => result.RegisterForCleanup(default!);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| var disposed = false;| // act| result.RegisterForCleanup(() => disposed = true);| // assert| await result.DisposeAsync();| Assert.True(disposed);| }"
      },
      {
        "name": "Register_One_Cleanup_Func_Func_is_Null",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| // act| void Fail() => result.RegisterForCleanup(default(Action)!);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| var asyncDisposable = new TestAsyncDisposable();| var disposable = new TestDisposable();| // act| result.RegisterForCleanup(asyncDisposable);| result.RegisterForCleanup(disposable);| // assert| await result.DisposeAsync();| Assert.True(asyncDisposable.IsDisposed);| Assert.True(disposable.IsDisposed);| }"
      },
      {
        "name": "Register_One_Async_Disposable_Disposable_Is_Null",
        "body": "{| // arrange| var result = new ResponseStream(() => default!);| // act| void Fail() => result.RegisterForCleanup(default(IAsyncDisposable)!);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "ExpectOperationResult",
        "body": "{| // arrange| IExecutionResult result = new ResponseStream(() => default!);| // act| var responseStream = result.ExpectResponseStream();| // assert| Assert.NotNull(responseStream);| }"
      },
      {
        "name": "ExpectResponseStream",
        "body": "{| // arrange| IExecutionResult result = new ResponseStream(() => default!);| // act| void Fail() => result.ExpectOperationResult();| // assert| Assert.Throws<ArgumentException>(Fail);| }"
      }
    ]
  },
  {
    "file": "FieldErrorTests.cs",
    "methods": [
      {
        "name": "Constructor_SingleError_Null_ThrowsArgumentNullException",
        "body": "{| // Arrange & Act & Assert| Assert.Throws<ArgumentNullException>(() => new FieldError(((object?)null)!));| }"
      },
      {
        "name": "Constructor_ErrorList_Null_ThrowsArgumentNullException",
        "body": "{| // Arrange & Act & Assert| Assert.Throws<ArgumentNullException>(() => new FieldError(null!));| }"
      },
      {
        "name": "Constructor_SingleError_Valid_DoesNotThrow",
        "body": "{| // Arrange| var error = new object();| // Act & Assert| var mutationError = new FieldError(error);| Assert.Single(mutationError.Errors);| Assert.Equal(error, mutationError.Errors[0]);| }"
      },
      {
        "name": "Constructor_ErrorList_Valid_DoesNotThrow",
        "body": "{| // Arrange| var errors = new List<object> { new object(), new object(), };| // Act| var mutationError = new FieldError(errors);| // Assert| Assert.Equal(2, mutationError.Errors.Count);| }"
      },
      {
        "name": "Constructor_ErrorList_Empty_ThrowsArgumentException",
        "body": "{| // Arrange| var errors = new List<object>();| // Act & Assert| Assert.Throws<ArgumentException>(() => new FieldError(errors));| }"
      },
      {
        "name": "IsSuccess_ReturnsFalse",
        "body": "{| // Arrange| var mutationError = new FieldError(new object());| // Act| var isSuccess = mutationError.IsSuccess;| // Assert| Assert.False(isSuccess);| }"
      },
      {
        "name": "IsError_ReturnsTrue",
        "body": "{| // Arrange| var mutationError = new FieldError(new object());| // Act| var isError = mutationError.IsError;| // Assert| Assert.True(isError);| }"
      }
    ]
  },
  {
    "file": "OptionalTests.cs",
    "methods": [
      {
        "name": "Optional_Is_Not_Set",
        "body": "{| // arrange| // act| var optional = new Optional<string>();| // assert| Assert.False(optional.HasValue);| Assert.True(optional.IsEmpty);| Assert.Null(optional.Value);| }"
      },
      {
        "name": "Optional_Is_Set_To_Value",
        "body": "{| // arrange| // act| Optional<string> optional = \"abc\";| // assert| Assert.True(optional.HasValue);| Assert.False(optional.IsEmpty);| Assert.Equal(\"abc\", optional.Value);| }"
      },
      {
        "name": "Optional_Is_Set_To_Null",
        "body": "{| // arrange| // act| Optional<string?> optional = null;| // assert| Assert.True(optional.HasValue);| Assert.False(optional.IsEmpty);| Assert.Null(optional.Value);| }"
      },
      {
        "name": "Optional_Equals_True",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"abc\";| // act| var result = a.Equals(b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Optional_Equals_True_2",
        "body": "{| // arrange| Optional<string> a = \"abc\";| var b = \"abc\";| // act| var result = a.Equals(b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Optional_Equals_False",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"def\";| // act| var result = a.Equals(b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Optional_Equals_Operator_True",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"abc\";| // act| var result = a == b;| // assert| Assert.True(result);| }"
      },
      {
        "name": "Optional_Equals_Operator_True_2",
        "body": "{| // arrange| Optional<string> a = \"abc\";| var b = \"abc\";| // act| var result = a == b;| // assert| Assert.True(result);| }"
      },
      {
        "name": "Optional_Equals_Operator_False",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"def\";| // act| var result = a == b;| // assert| Assert.False(result);| }"
      },
      {
        "name": "Optional_Not_Equals_Operator_True",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"abc\";| // act| var result = a != b;| // assert| Assert.False(result);| }"
      },
      {
        "name": "Optional_Not_Equals_Operator_True_2",
        "body": "{| // arrange| Optional<string> a = \"abc\";| var b = \"abc\";| // act| var result = a != b;| // assert| Assert.False(result);| }"
      },
      {
        "name": "Optional_Not_Equals_Operator_False",
        "body": "{| // arrange| Optional<string> a = \"abc\";| Optional<string> b = \"def\";| // act| var result = a != b;| // assert| Assert.True(result);| }"
      },
      {
        "name": "Optional_From_Value_Equals",
        "body": "{| Optional<int> a = 1;| var b = Optional<int>.From(a);| Assert.True(a.HasValue);| Assert.True(b.HasValue);| Assert.Equal(a.Value, b.Value);| }"
      },
      {
        "name": "Optional_From_Struct_Is_Not_Set",
        "body": "{| var emptyOptional = new Optional<int?>();| var fromEmptyOptional = Optional<int>.From(emptyOptional);| Assert.False(fromEmptyOptional.HasValue);| Assert.True(fromEmptyOptional.IsEmpty);| }"
      },
      {
        "name": "Optional_From_DefaultValueAttribute_Provided",
        "body": "{| const int defaultValue = 500;| var a = Optional<int>.Empty(defaultValue);| var b = Optional<int>.From(a);| Assert.False(a.HasValue);| Assert.False(b.HasValue);| Assert.Equal(defaultValue, b.Value);| }"
      }
    ]
  },
  {
    "file": "PathTests.cs",
    "methods": [
      {
        "name": "GetHashCode_Test",
        "body": "{| var path = Path.Root.Append(\"hero\");| Assert.NotEqual(0, path.GetHashCode());| }"
      },
      {
        "name": "GetHashCode_Root_Test",
        "body": "{| Assert.Equal(0, Path.Root.GetHashCode());| }"
      },
      {
        "name": "Path_ToString",
        "body": "{| // arrange| var path = Path.Root.Append(\"hero\");| path = path.Append(\"friends\");| path = path.Append(0);| path = path.Append(\"name\");| // act| var result = path.ToString();| // assert| Assert.Equal(\"/hero/friends[0]/name\", result);| }"
      },
      {
        "name": "Path_ToList",
        "body": "{| // arrange| var path = Path.Root.Append(\"hero\");| path = path.Append(\"friends\");| path = path.Append(0);| path = path.Append(\"name\");| // act| var result = path.ToList();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Path_Equals_Null",
        "body": "{| // arrange| var hero = Path.Root.Append(\"hero\");| Path? friends = null;| // act| var areEqual = hero.Equals(friends);| // assert| Assert.False(areEqual);| }"
      },
      {
        "name": "Path_Equals_False",
        "body": "{| // arrange| var hero = Path.Root.Append(\"hero\");| var friends = Path.Root.Append(\"hero\");| friends = friends.Append(\"friends\");| // act| var areEqual = hero.Equals(friends);| // assert| Assert.False(areEqual);| }"
      },
      {
        "name": "Path_Equals_True",
        "body": "{| // arrange| var friends1 = Path.Root.Append(\"hero\");| friends1 = friends1.Append(\"friends\");| var friends2 = Path.Root.Append(\"hero\");| friends2 = friends2.Append(\"friends\");| // act| var areEqual = friends1.Equals(friends2);| // assert| Assert.True(areEqual);| }"
      }
    ]
  },
  {
    "file": "QueryableExecutableTests.cs",
    "methods": [
      {
        "name": "Queryable_Is_Null_Throws_ArgumentNullException",
        "body": "{| Assert.Throws<ArgumentNullException>(() => Executable.From(((IQueryable<string>?)null)!));| }"
      },
      {
        "name": "Queryable_Print",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| // act| var executable = Executable.From(query, _ => \"foo\");| // assert| Assert.Equal(\"foo\", executable.Print());| }"
      },
      {
        "name": "Queryable_Print_Snapshot",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| // act| var executable = Executable.From(query);| // assert| executable.Print()| .MatchInlineSnapshot(| \"\"\"| System.String[]| \"\"\");| }"
      },
      {
        "name": "Queryable_Source_Is_Queryable",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| var executable = Executable.From(query);| // act| var source = executable.Source;| // assert| Assert.Equal(query, source);| }"
      },
      {
        "name": "Queryable_Source_T_Is_Queryable",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| var executable = Executable.From(query);| // act| // ReSharper disable once RedundantCast| var source = ((IQueryableExecutable<string>)executable).Source;| // assert| Assert.Equal(query, source);| }"
      },
      {
        "name": "Queryable_IsInMemory_True",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| var executable = Executable.From(query);| // act| var isInMemory = executable.IsInMemory;| // assert| Assert.True(isInMemory);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\", \"b\" };| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new EmptyAsyncEnumerable();| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = Array.Empty<string>().AsQueryable();| // act| var result = await Executable.From(query).SingleOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\" };| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\", \"b\" };| // act| async Task Error() => await Executable.From(query).SingleOrDefaultAsync();| // assert| await Assert.ThrowsAsync<InvalidOperationException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new EmptyAsyncEnumerable();| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new ListAsyncEnumerable([\"a\"]);| // act| var result = await Executable.From(query).FirstOrDefaultAsync();| // assert| Assert.Equal(\"a\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| async Task Error() => await Executable.From(query).SingleOrDefaultAsync();| // assert| await Assert.ThrowsAsync<InvalidOperationException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\", \"b\" }.AsQueryable();| // act| var result = await Executable.From(query).ToListAsync();| // assert| Assert.Collection(| result,| r => Assert.Equal(\"a\", r),| r => Assert.Equal(\"b\", r));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = await Executable.From(query).ToListAsync();| // assert| Assert.Collection(| result,| r => Assert.Equal(\"a\", r),| r => Assert.Equal(\"b\", r));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\", \"b\" }.AsQueryable();| // act| var result = Executable.From(query).ToAsyncEnumerable();| // assert| await foreach (var item in result)| {| Assert.True(item is \"a\" or \"b\");| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IQueryable<string> query = new ListAsyncEnumerable([\"a\", \"b\"]);| // act| var result = Executable.From(query).ToAsyncEnumerable();| // assert| await foreach (var item in result)| {| Assert.True(item is \"a\" or \"b\");| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query = new[] { \"a\", \"b\" }.AsQueryable();| var executableA = Executable.From(query);| // act| var executableB = executableA.WithSource(new[] { \"a\", \"b\", \"c\" }.AsQueryable());| // assert| Assert.NotEqual(executableA, executableB);| Assert.Collection(| await executableA.ToListAsync(),| r => Assert.Equal(\"a\", r),| r => Assert.Equal(\"b\", r));| Assert.Collection(| await executableB.ToListAsync(),| r => Assert.Equal(\"a\", r),| r => Assert.Equal(\"b\", r),| r => Assert.Equal(\"c\", r));| }"
      }
    ]
  },
  {
    "file": "SchemaCoordinateTests.cs",
    "methods": [
      {
        "name": "Create_Type_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\", \"ghi\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate_Without_MemberName",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", argumentName: \"def\");| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"argumentName\", ex.ParamName);| Assert.StartsWith(| \"A argument name without a member name is only allowed on directive coordinates\",| ex.Message);| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", argumentName: \"def\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate_With",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", memberName: \"def\", ofDirective: true);| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"memberName\", ex.ParamName);| Assert.StartsWith(\"A directive cannot contain a member name.\", ex.Message);| }"
      },
      {
        "name": "Parse_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = SchemaCoordinate.Parse(\"Abc.def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Parse_Invalid_SchemaCoordinate",
        "body": "{| // arrange & act| void Fail() => SchemaCoordinate.Parse(\"...\");| // assert| Assert.Throws<SyntaxException>(Fail);| }"
      },
      {
        "name": "TryParse_SchemaCoordinate",
        "body": "{| // arrange & act| var success = SchemaCoordinate.TryParse(\"Abc.def\", out var coordinate);| // assert| Assert.True(success);| Assert.Equal(\"Abc\", coordinate?.Name);| Assert.Equal(\"def\", coordinate?.MemberName);| Assert.Equal(\"Abc.def\", coordinate?.ToString());| }"
      },
      {
        "name": "FromSyntax_Type_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, new(\"def\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      }
    ]
  },
  {
    "file": "CodeFirstAuthorizationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: AuthorizeResult.NotAllowed,| validation: AuthorizeResult.Allowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ person { name } }\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"locations\": [| {| \"line\": 1,| \"column\": 3| }| ],| \"path\": [| \"person\"| ],| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ],| \"data\": {| \"person\": null| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: AuthorizeResult.Allowed,| validation: AuthorizeResult.NotAllowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ person { name } }\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (context, _) => context.Result is Street| ? AuthorizeResult.Allowed| : AuthorizeResult.NotAllowed,| validation: (_, _) => AuthorizeResult.Allowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| cityOrStreet(street: true) {| __typename| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"data\": {| \"cityOrStreet\": {| \"__typename\": \"Street\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (context, _) => context.Result is Street| ? AuthorizeResult.Allowed| : AuthorizeResult.NotAllowed,| validation: (_, _) => AuthorizeResult.Allowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| cityOrStreet(street: false) {| __typename| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"locations\": [| {| \"line\": 2,| \"column\": 3| }| ],| \"path\": [| \"cityOrStreet\"| ],| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ],| \"data\": {| \"cityOrStreet\": null| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.NotAllowed,| validation: (_, _) => AuthorizeResult.Allowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| thisIsAuthorized| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"locations\": [| {| \"line\": 2,| \"column\": 3| }| ],| \"path\": [| \"thisIsAuthorized\"| ],| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ],| \"data\": {| \"thisIsAuthorized\": null| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.Allowed,| validation: (_, d) => d.Policy.EqualsOrdinal(\"READ_AUTH\")| ? AuthorizeResult.NotAllowed| : AuthorizeResult.Allowed);| var services = CreateServices(handler);| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| thisIsAuthorizedOnValidation| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.Allowed,| validation: (_, d) => d.Policy.EqualsOrdinal(\"READ_INTRO\")| ? AuthorizeResult.NotAllowed| : AuthorizeResult.Allowed);| var services = CreateServices(| handler,| options =>| {| options.ConfigureSchemaField =| descriptor =>| {| descriptor.Authorize(\"READ_INTRO\", ApplyPolicy.Validation);| };| });| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| __schema {| description| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.Allowed,| validation: (_, d) => d.Policy.EqualsOrdinal(\"READ_INTRO\")| ? AuthorizeResult.NotAllowed| : AuthorizeResult.Allowed);| var services = CreateServices(| handler,| options =>| {| options.ConfigureTypeField =| descriptor =>| {| descriptor.Authorize(\"READ_INTRO\", ApplyPolicy.Validation);| };| });| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| __type(name: \"Query\") {| name| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.Allowed,| validation: (_, d) => d.Policy.EqualsOrdinal(\"READ_NODE\")| ? AuthorizeResult.NotAllowed| : AuthorizeResult.Allowed);| var services = CreateServices(| handler,| options =>| {| options.ConfigureNodeFields =| descriptor =>| {| descriptor.Authorize(\"READ_NODE\", ApplyPolicy.Validation);| };| });| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"abc\") {| __typename| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var handler = new AuthHandler(| resolver: (_, _) => AuthorizeResult.Allowed,| validation: (_, d) => d.Policy.EqualsOrdinal(\"READ_NODE\")| ? AuthorizeResult.NotAllowed| : AuthorizeResult.Allowed);| var services = CreateServices(| handler,| options =>| {| options.ConfigureNodeFields =| descriptor =>| {| descriptor.Authorize(\"READ_NODE\", ApplyPolicy.Validation);| };| });| var executor = await services.GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| nodes(ids: \"abc\") {| __typename| }| }| \"\"\");| // assert| Snapshot| .Create()| .Add(result)| .MatchInline(| \"\"\"| {| \"errors\": [| {| \"message\": \"The current user is not authorized to access this resource.\",| \"extensions\": {| \"code\": \"AUTH_NOT_AUTHORIZED\"| }| }| ]| }| \"\"\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData!.TryGetValue(HttpStatusCode, out var value));| Assert.Equal(401, value);| }"
      }
    ]
  },
  {
    "file": "ArgumentNonNullValidatorTests.cs",
    "methods": [
      {
        "name": "Validate_Input_With_Non_Null_Props_That_Have_No_Value_But_A_DefaultValue",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(@\"| type Query {| test(bar: Bar): String| }| input Bar {| a: String! = \"\"bar\"\"| }| \")| .Use(_ => _ => default)| .Create();| IInputField field = schema.QueryType.Fields[\"test\"].Arguments[\"bar\"];| // act| var report =| ArgumentNonNullValidator.Validate(| field,| new ObjectValueNode(), Path.Root.Append(\"root\"));| // assert| Assert.False(report.HasErrors);| }"
      },
      {
        "name": "Validate_Input_With_Non_Null_Props_That_Have_No_Value_And_No_DefaultValue",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(@\"| type Query {| test(bar: Bar): String| }| input Bar {| a: String!| }| \")| .Use(_ => _ => default)| .Create();| IInputField field = schema.QueryType.Fields[\"test\"].Arguments[\"bar\"];| // act| var report = ArgumentNonNullValidator.Validate(| field,| new ObjectValueNode(), Path.Root.Append(\"root\"));| // assert| Assert.True(report.HasErrors);| Assert.Equal(\"/root/a\", report.Path.ToString());| }"
      }
    ]
  },
  {
    "file": "AutoUpdateRequestExecutorProxyTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var resolver =| new ServiceCollection()| .AddGraphQL()| .AddStarWarsRepositories()| .AddStarWarsTypes()| .Services| .BuildServiceProvider()| .GetRequiredService<IRequestExecutorResolver>();| var innerProxy = new RequestExecutorProxy(resolver, Schema.DefaultName);| // act| var proxy = await AutoUpdateRequestExecutorProxy.CreateAsync(innerProxy);| var a = proxy.InnerExecutor;| var b = proxy.InnerExecutor;| // assert| Assert.Same(a, b);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var resolver =| new ServiceCollection()| .AddGraphQL()| .AddStarWarsRepositories()| .AddStarWarsTypes()| .Services| .BuildServiceProvider()| .GetRequiredService<IRequestExecutorResolver>();| var evicted = false;| var updated = false;| var innerProxy = new RequestExecutorProxy(resolver, Schema.DefaultName);| innerProxy.ExecutorEvicted += (_, _) =>| {| evicted = true;| updated = false;| };| innerProxy.ExecutorUpdated += (_, _) => updated = true;| var proxy = await AutoUpdateRequestExecutorProxy.CreateAsync(innerProxy);| // act| var a = proxy.InnerExecutor;| resolver.EvictRequestExecutor();| var i = 0;| var b = proxy.InnerExecutor;| while (ReferenceEquals(a, b))| {| await Task.Delay(100);| b = proxy.InnerExecutor;| if (i++ > 10)| {| break;| }| }| // assert| Assert.NotSame(a, b);| Assert.True(evicted);| Assert.True(updated);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| async Task Action() => await AutoUpdateRequestExecutorProxy.CreateAsync(null!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "CodeFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithProperty>()| .Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(\"{ test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedTokens: 5))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedTokens: 5))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test b: test }\");| // assert| Assert.Collection(| Assert.IsType<OperationResult>(result).Errors!,| e => Assert.Equal(\"Document contains more than 5 tokens. Parsing aborted.\", e.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedNodes: 6))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedNodes: 6))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test b: test }\");| // assert| Assert.Collection(| Assert.IsType<OperationResult>(result).Errors!,| e => Assert.Equal(\"Document contains more than 6 nodes. Parsing aborted.\", e.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithMethod>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(\"{ test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithMethod>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(\"{ query }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable()| .ExecuteAsync(| @\"| {| fooOrBar {| ... on Bar { nameBar }| ... on Foo { nameFoo }| }| }| \");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "UnionTypeResolveType",
        "body": "{| // arrange| var schema = CreateSchema();| var context = new Mock<IResolverContext>(| MockBehavior.Strict);| // act| var fooBar = schema.GetType<UnionType>(\"FooBar\");| var teaType = fooBar.ResolveConcreteType(context.Object, \"tea\");| var barType = fooBar.ResolveConcreteType(context.Object, \"bar\");| // assert| Assert.Null(teaType);| Assert.NotNull(barType);| }"
      },
      {
        "name": "UnionType_Contains_TypeName",
        "body": "{| // arrange| var schema = CreateSchema();| var fooBar = schema.GetType<UnionType>(\"FooBar\");| // act| var shouldBeFalse = fooBar.ContainsType(\"Tea\");| var shouldBeTrue = fooBar.ContainsType(\"Bar\");| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "UnionType_Contains_ObjectType",
        "body": "{| // arrange| var schema = CreateSchema();| var fooBar = schema.GetType<UnionType>(\"FooBar\");| var bar = schema.GetType<ObjectType>(\"Bar\");| var tea = schema.GetType<ObjectType>(\"Tea\");| // act| var shouldBeTrue = fooBar.ContainsType(bar);| var shouldBeFalse = fooBar.ContainsType(tea);| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "UnionType_Contains_IObjectType",
        "body": "{| // arrange| var schema = CreateSchema();| IUnionType fooBar = schema.GetType<UnionType>(\"FooBar\");| IObjectType tea = schema.GetType<ObjectType>(\"Tea\");| IObjectType bar = schema.GetType<ObjectType>(\"Bar\");| // act| var shouldBeFalse = fooBar.ContainsType(tea);| var shouldBeTrue = fooBar.ContainsType(bar);| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ drink { ... on Tea { kind } } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "InterfaceTypeResolveType",
        "body": "{| // arrange| var schema = CreateSchema();| var context = new Mock<IResolverContext>(| MockBehavior.Strict);| // act| var drink = schema.GetType<InterfaceType>(\"Drink\");| var teaType = drink.ResolveConcreteType(context.Object, \"tea\");| var barType = drink.ResolveConcreteType(context.Object, \"bar\");| // assert| Assert.NotNull(teaType);| Assert.Null(barType);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { name } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { desc } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { name2 } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { names } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryPrivateConstructor>()| .ExecuteRequestAsync(\"{ hello }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryFieldCasing>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var request =| OperationRequestBuilder.New()| .SetDocument(\"query($v: String) { foo(value: $v) }\")| .Build();| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithDefaultValue>()| .ExecuteRequestAsync(request)| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QueryLists>()| .BuildRequestExecutorAsync();| var query =| \"\"\"| query {| input(arg: [[1], null])| }| \"\"\";| await executor.ExecuteAsync(query).MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "TypeModuleTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddSingleton<DummyTypeModule>()| .AddGraphQLServer()| .AddTypeModule<DummyTypeModule>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddSingleton<DummyTypeModule>()| .AddGraphQLServer()| .AddTypeModule<DummyTypeModule>()| .ExecuteRequestAsync(\"{ hello }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddSingleton<DummyTypeModule>()| .AddGraphQLServer()| .AddTypeExtension<Query>()| .AddTypeModule<DummyTypeModule>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddSingleton<DummyTypeModule>()| .AddGraphQLServer()| .AddTypeExtension<Query>()| .AddTypeModule<DummyTypeModule>()| .ExecuteRequestAsync(\"{ hello person { name dynamic } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddTypeModule(_ => new DummyTypeModule())| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "DeferTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... @defer {| person(id: \"UGVyc29uOjE=\") {| id| }| }| }| \"\"\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... @defer {| person(id: \"UGVyc29uOjE=\") {| id| ... @defer {| name| }| }| }| }| \"\"\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| ... @defer(label: \"\"abc\"\") {| person(id: \"\"UGVyc29uOjE=\"\") {| id| }| }| }\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... @defer(if: false) {| person(id: \"UGVyc29uOjE=\") {| id| }| }| }| \"\"\");| Assert.IsType<OperationResult>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| query($defer: Boolean!) {| ... @defer(if: $defer) {| person(id: \"UGVyc29uOjE=\") {| id| }| }| }| \"\"\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"defer\", false },| })| .Build());| Assert.IsType<OperationResult>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... Foo @defer| }| fragment Foo on Query {| person(id: \"UGVyc29uOjE=\") {| id| }| }| \"\"\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... Foo @defer| }| fragment Foo on Query {| person(id: \"UGVyc29uOjE=\") {| id| ... @defer {| name| }| }| }| \"\"\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... Foo @defer(label: \"abc\")| }| fragment Foo on Query {| person(id: \"UGVyc29uOjE=\") {| id| }| }| \"\"\");| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| ... Foo @defer(if: false)| }| fragment Foo on Query {| person(id: \"UGVyc29uOjE=\") {| id| }| }| \"\"\");| Assert.IsType<OperationResult>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| query ($defer: Boolean!) {| ... Foo @defer(if: $defer)| }| fragment Foo on Query {| person(id: \"UGVyc29uOjE=\") {| id| }| }| \"\"\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"defer\", false },| })| .Build());| Assert.IsType<OperationResult>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| {| ... @defer {| ensureState {| ... @defer {| state| }| }| }| }| \"\"\")| .SetGlobalState(\"requestState\", \"state 123\")| .Build());| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| await using var response = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| {| ... @defer {| e: ensureState {| ... @defer {| more {| ... @defer {| stuff| }| }| }| }| }| }| \"\"\")| .SetGlobalState(\"requestState\", \"state 123\")| .Build());| Assert.IsType<ResponseStream>(response).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // this test ensures that the request context is not recycled until the| // a stream is fully processed when no outer DI scope exists.| // arrange| var executor = await DeferAndStreamTestSchema.CreateAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| {| ensureState {| ... @defer {| state| }| }| }| \"\"\")| .SetGlobalState(\"requestState\", \"state 123\")| .Build());| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // this test ensures that the request context is not recycled until the| // a stream is fully processed when an outer DI scope exists.| // arrange| var services = DeferAndStreamTestSchema.CreateServiceProvider();| var executor = await services.GetRequestExecutorAsync();| await using var scope = services.CreateAsyncScope();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(| \"\"\"| {| ... @defer {| ensureState {| state| }| }| }| \"\"\")| .SetGlobalState(\"requestState\", \"state 123\")| .SetServices(scope.ServiceProvider)| .Build());| Assert.IsType<ResponseStream>(result).MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderExtensions_SchemaOptionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var interceptor = new OptionsInterceptor();| await new ServiceCollection()| .AddGraphQLServer()| .AddType<Query>()| .ModifyOptions(o => o.ValidatePipelineOrder = false)| .TryAddTypeInterceptor(interceptor)| .BuildRequestExecutorAsync();| Assert.False(interceptor.Options.ValidatePipelineOrder);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderExtensions_Services.Tests.cs",
    "methods": [
      {
        "name": "AddScopedServiceInitializer_1_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddScopedServiceInitializer<string>(null!, (_, _) => { });| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddScopedServiceInitializer_1_Initializer_Is_Null",
        "body": "{| var mock = new Mock<IRequestExecutorBuilder>();| void Fail() => RequestExecutorBuilderExtensions| .AddScopedServiceInitializer<string>(mock.Object, null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderExtensions_TypeDiscovery.Tests.cs",
    "methods": [
      {
        "name": "AddTypeDiscoveryHandler_1_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddTypeDiscoveryHandler(null!, _ => new MockHandler());| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddTypeDiscoveryHandler_1_Factory_Is_Null",
        "body": "{| var mock = new Mock<IRequestExecutorBuilder>();| void Fail() => mock.Object.AddTypeDiscoveryHandler<MockHandler>(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderExtensions_Validation.Tests.cs",
    "methods": [
      {
        "name": "AddValidationVisitor_1_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddValidationVisitor<MockVisitor>(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddValidationVisitor_2_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddValidationVisitor<MockVisitor>(| null!,| (_, _) => throw new NotImplementedException());| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddValidationVisitor_2_Factory_Is_Null",
        "body": "{| void Fail() => new ServiceCollection()| .AddGraphQL()| .AddValidationVisitor<MockVisitor>(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddValidationRuler_1_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddValidationRule<MockRule>(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddValidationRule_2_Builder_Is_Null",
        "body": "{| void Fail() => RequestExecutorBuilderExtensions| .AddValidationRule<MockRule>(| null!,| (_, _) => throw new NotImplementedException());| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddValidationRule_2_Factory_Is_Null",
        "body": "{| void Fail() => new ServiceCollection()| .AddGraphQL()| .AddValidationRule<MockRule>(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AddIntrospectionAllowedRule()| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AllowIntrospection(false)| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AllowIntrospection(true)| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AllowIntrospection(false)| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .SetIntrospectionNotAllowedMessage(\"Bar\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AddIntrospectionAllowedRule()| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .SetIntrospectionNotAllowedMessage(() => \"Bar\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AddIntrospectionAllowedRule()| .ExecuteRequestAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .SetIntrospectionNotAllowedMessage(\"Baz\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Name(\"Query\").Field(\"foo\").Resolve(\"bar\"))| .AddIntrospectionAllowedRule()| .BuildRequestExecutorAsync();| var results = new List<string>();| var result =| await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .AllowIntrospection()| .Build());| results.Add(result.ToJson());| result =| await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ __schema { description } }\")| .Build());| results.Add(result.ToJson());| results.MatchSnapshot();| }"
      },
      {
        "name": "SetMaxAllowedValidationErrors_Builder_Is_Null",
        "body": "{| void Fail()| => RequestExecutorBuilderExtensions.SetMaxAllowedValidationErrors(null!, 6);| Assert.Throws<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "SchemaRequestExecutorBuilderExtensions.Conventions.Tests.cs",
    "methods": [
      {
        "name": "AddConventionWithFactory_BuilderNull",
        "body": "{| void Verify() => default(ServiceCollection)!| .AddGraphQL()| .AddConvention(typeof(Foo), _ => new Foo());| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "AddConventionWithFactory_TypeNull",
        "body": "{| void Verify() => new ServiceCollection()| .AddGraphQL()| .AddConvention(default!, _ => new Foo());| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "AddConventionWithFactory_FactoryNull",
        "body": "{| void Verify() => new ServiceCollection()| .AddGraphQL()| .AddConvention(typeof(Foo), default(CreateConvention)!);| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "AddConventionWithType_BuilderNull",
        "body": "{| void Verify() => default(ServiceCollection)!| .AddGraphQL()| .AddConvention<IConvention>(typeof(Foo));| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "AddConventionWithType_TypeNull",
        "body": "{| void Verify() => new ServiceCollection()| .AddGraphQL()| .AddConvention<IConvention>(default(Type)!);| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "TryAddConventionWithFactory_BuilderNull",
        "body": "{| void Verify() => default(ServiceCollection)!| .AddGraphQL()| .TryAddConvention(typeof(Foo), _ => new Foo());| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "TryAddConventionWithFactory_TypeNull",
        "body": "{| void Verify() => new ServiceCollection()| .AddGraphQL()| .TryAddConvention(default!, _ => new Foo());| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "TryAddConventionWithFactory_FactoryNull",
        "body": "{| void Verify() => new ServiceCollection()| .AddGraphQL()| .TryAddConvention(typeof(Foo), default(CreateConvention)!);| Assert.Throws<ArgumentNullException>(Verify);| }"
      }
    ]
  },
  {
    "file": "SchemaRequestExecutorBuilderExtensions.Types.Tests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddObjectType<ObjectType>()| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddObjectType<ObjectType>(d => { })| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddInterfaceType<ObjectType>()| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddInterfaceType<ObjectType>(d => { })| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddUnionType<ObjectType>()| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddObjectType<ObjectType>(d => { })| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddEnumType<ObjectType>()| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddEnumType<ObjectType>(d => { })| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddInputObjectType<ObjectType>()| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| (await Assert.ThrowsAsync<InvalidOperationException>(async () =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddInputObjectType<ObjectType>(d => { })| .BuildSchemaAsync()))| .Message| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DependencyInjectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // this test ensures that we inject services into type instances without the need of| // registering the type into the dependency container.| var executor =| await new ServiceCollection()| .AddSingleton<SomeService>()| .AddGraphQL()| .AddQueryType<Query1>()| .AddType<ExtendQuery1>()| .BuildRequestExecutorAsync();| new| {| result1 = await executor| .ExecuteAsync(\"{ hello }\")| .ToJsonAsync(),| result2 = await executor| .ExecuteAsync(\"{ hello }\")| .ToJsonAsync(),| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| IServiceProvider services =| new ServiceCollection()| .AddScoped<SomeService>()| .AddScoped<ExtendQuery1>()| .AddGraphQL()| .AddQueryType<Query1>()| .AddType<ExtendQuery1>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| var result = new string[2];| using (var scope = services.CreateScope())| {| result[0] = await executor| .ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ hello }\")| .SetServices(scope.ServiceProvider)| .Build())| .ToJsonAsync();| }| using (var scope = services.CreateScope())| {| result[1] = await executor| .ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ hello }\")| .SetServices(scope.ServiceProvider)| .Build())| .ToJsonAsync();| }| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // this test ensures that we inject services into type instances without the need of| // registering the type into the dependency container.| var executor =| await new ServiceCollection()| .AddSingleton<SomeService>()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| new| {| result1 = await executor| .ExecuteAsync(\"{ hello }\")| .ToJsonAsync(),| result2 = await executor| .ExecuteAsync(\"{ hello }\")| .ToJsonAsync(),| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| IServiceProvider services =| new ServiceCollection()| .AddScoped<SomeService>()| .AddScoped<Query2>()| .AddGraphQL()| .AddQueryType<Query2>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| var result = new string[2];| using (var scope = services.CreateScope())| {| result[0] = await executor| .ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ hello }\")| .SetServices(scope.ServiceProvider)| .Build())| .ToJsonAsync();| }| using (var scope = services.CreateScope())| {| result[1] = await executor| .ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ hello }\")| .SetServices(scope.ServiceProvider)| .Build())| .ToJsonAsync();| }| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var services =| new ServiceCollection()| .AddKeyedScoped<Query1>(\"abc\")| .AddScoped<SomeService>()| .AddScoped<Query2>()| .AddGraphQL()| .AddQueryType<Query2>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| using var scope = services.CreateScope();| await executor| .ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ hello }\")| .SetServices(scope.ServiceProvider)| .Build())| .ToJsonAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ErrorBehaviorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor = await CreateExecutorAsync();| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddErrorFilter(error => error.SetExtension(\"foo\", \"bar\"))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ error14 }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Field(\"foo\")| .Type<ObjectType<Foo>>()| .Extend()| // in the pure resolver we will return the wrong type| .Definition.Resolver = _ => new ValueTask<object?>(new Baz()))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo { bar } }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Field(\"foo\")| .Type<ObjectType<Foo>>()| .Extend()| // in the pure resolver we will return the wrong type| .Definition.PureResolver = _ => new Baz())| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo { bar } }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Field(\"foo\")| .Type<ObjectType<Foo>>()| .Extend()| // in the pure resolver we will return the wrong type| .Definition.PureResolver = _ => new Baz())| .SetMaxAllowedValidationErrors(1)| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a b c d }\");| // assert| snapshot.Add(result);| }"
      }
    ]
  },
  {
    "file": "ErrorHandlerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // error filter configuration| .AddErrorFilter(error => error.WithCode(\"Foo123\"))| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String }\")| .UseField(_ => _ => throw new Exception(\"Foo\"))| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String bar: String }\")| .AddResolver(\"Query\", \"foo\", _ => throw new Exception(\"Foo\"))| .AddResolver(\"Query\", \"bar\", _ => throw new NullReferenceException(\"Foo\"))| // error filter configuration| .AddErrorFilter(| error =>| {| if (error.Exception is NullReferenceException)| {| return error.WithCode(\"NullRef\");| }| return error;| })| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo bar }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // error filter configuration| .AddErrorFilter<DummyErrorFilter>()| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", _ => throw new Exception(\"Foo\"))| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // general graphql configuration| .AddGraphQL()| .AddQueryType<Query>()| // error filter configuration| .AddErrorFilter<DummyErrorFilter>()| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // service configuration| .AddSingleton<SomeService>()| // general graphql configuration| .AddGraphQL()| .AddQueryType<Query>()| // error filter configuration| .AddErrorFilter<DummyErrorFilterWithDependency>()| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // general graphql configuration| .AddGraphQL()| .AddQueryType<Query>()| // error filter configuration| .AddErrorFilter(_ => new DummyErrorFilter())| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // error filter configuration| .AddErrorFilter(_ => new DummyErrorFilter())| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", _ => throw new Exception(\"Foo\"))| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // error filter configuration| .AddErrorFilter(_ => new AggregateErrorFilter())| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", _ => throw new Exception(\"Foo\"))| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = StartResultSnapshot();| var executor = await new ServiceCollection()| // general graphql configuration| .AddGraphQL()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(| \"Query\",| \"foo\",| ctx =>| {| ctx.ReportError(new AggregateError(new Error(\"abc\"), new Error(\"def\")));| return \"Hello\";| })| // build graphql executor| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo }\");| // assert| snapshot.Add(result);| }"
      }
    ]
  },
  {
    "file": "NullErrorPropagationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var snapshot = SnapshotHelpers.StartResultSnapshot();| var executor = await CreateExecutorAsync();| var request =| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| foo {| nullable_list_nullable_element| {| a| b| }| nonnull_list_nullable_element| {| a| b| }| nullable_list_nonnull_element| {| a| b| }| nonnull_list_nonnull_element| {| a| b| }| }| }| \"\"\")| .AddGlobalState(\"a\", null)| .AddGlobalState(\"b\", \"not_null\")| .Build();| // act| var result = await executor.ExecuteAsync(request);| // assert| snapshot.Add(result);| }"
      }
    ]
  },
  {
    "file": "DiagnosticListenerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var listener = new TestListener();| var executor = await CreateExecutorAsync(c => c| .AddDiagnosticEventListener(_ => listener)| .AddStarWarsTypes()| .Services| .AddStarWarsRepositories());| // act| var result = await executor.ExecuteAsync(\"{ hero { name } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| Assert.Collection(listener.Results, r => Assert.IsType<Droid>(r));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = new ServiceCollection()| .AddSingleton<Touched>()| .AddGraphQL()| .AddDiagnosticEventListener<TouchedListener>()| .AddStarWars()| .Services| .BuildServiceProvider();| // act| await services.ExecuteRequestAsync(\"{ hero { name } }\");| // assert| Assert.True(services.GetRequiredService<Touched>().Signal);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var listenerA = new TestListener();| var listenerB = new TestListener();| var executor = await CreateExecutorAsync(c => c| .AddDiagnosticEventListener(_ => listenerA)| .AddDiagnosticEventListener(_ => listenerB)| .AddStarWarsTypes()| .Services| .AddStarWarsRepositories());| // act| var result = await executor.ExecuteAsync(\"{ hero { name } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| Assert.Collection(listenerA.Results, r => Assert.IsType<Droid>(r));| Assert.Collection(listenerB.Results, r => Assert.IsType<Droid>(r));| }"
      }
    ]
  },
  {
    "file": "CancellationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var query = new Query1();| var executor =| await new ServiceCollection()| .AddSingleton(query)| .AddGraphQL()| .AddQueryType<Query1>()| .BuildRequestExecutorAsync();| using var cts = new CancellationTokenSource(150);| // act| await executor.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ task1 task2 }\")| .Build(),| cts.Token);| // assert| // the first task is completed| Assert.True(query.Task1);| Assert.True(query.Task1Done);| // the second never started| Assert.False(query.Task2);| Assert.False(query.Task2Done);| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "VariableCoercionIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode(| new ObjectFieldNode(\"name\", \"Oliver\"),| new ObjectFieldNode(\"surname\", \"Smith\"));| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode(| new ObjectFieldNode(\"name\", \"Oliver\"));| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode(| new ObjectFieldNode(\"name\", NullValueNode.Default),| new ObjectFieldNode(\"surname\", \"Smith\"));| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode(| new ObjectFieldNode(\"surname\", \"Smith\"));| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode();| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", null }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await CreateSchemaAsync();| var user = new ObjectValueNode(| new ObjectFieldNode(\"name\", \"Oliver\"),| new ObjectFieldNode(\"surname\", \"Smith\"),| new ObjectFieldNode(\"foo\", \"bar\"));| var request =| OperationRequestBuilder| .New()| .SetDocument(\"mutation($user: UserInput!) { addUser(user: $user) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"user\", user }, })| .Build();| await executor.ExecuteAsync(request).MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "DataLoaderTests.cs",
    "methods": [
      {
        "name": "ClearCacheNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader(sp => new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>()));| var scope = services.BuildServiceProvider().CreateScope();| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| // act| void Verify() => dataLoader.ClearCache();| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearCacheAllEntries",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| loader.SetCacheEntry(\"Bar\", Task.FromResult<string?>(\"Baz\"));| // act| loader.ClearCache();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<string?> Verify() => loader.LoadAsync(default(string)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // first load.| (await loader.LoadAsync(key)).MatchSnapshot();| // act| var result = await loader.LoadAsync(key);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| Task<string?> Verify() => loader.LoadAsync(key, CancellationToken.None);| // assert| var task = Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify() => loader.LoadAsync(default(string[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<string>();| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers| .CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify()| => loader.LoadAsync(default(List<string>)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string>();| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| (await loader.LoadAsync(keys, CancellationToken.None)).MatchSnapshot();| // act| var result = await loader.LoadAsync(keys, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var repository = new Dictionary<string, string?>| {| { \"Foo\", \"Bar\" },| { \"Bar\", null },| { \"Baz\", \"Foo\" },| { \"Qux\", null },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string?>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| var loadResult = loader.LoadAsync(requestKeys);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = Errors.CreateKeysAndValuesMustMatch(4, 3);| var repository = new Dictionary<string, string>| {| { \"Foo\", \"Bar\" },| { \"Bar\", \"Baz\" },| { \"Baz\", \"Foo\" },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException.Message, actualException.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = new Exception(\"Foo\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| => throw expectedException;| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task = Assert.ThrowsAsync<Exception>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException, actualException);| }"
      },
      {
        "name": "RemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(default!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "RemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "RemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult<string?>(\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<string?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "SetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "SetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var value = Task.FromResult<string?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var first = Task.FromResult<string?>(\"Bar\");| var second = Task.FromResult<string?>(\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<object?> Verify() => loader.LoadAsync(default(object)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| Task<object?> Verify() => loader.LoadAsync(key);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify() => loader.LoadAsync(default(object[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new object[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify()| => loader.LoadAsync(default(List<object>)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult((object?)\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(null!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult((object?)\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<object?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| void Verify() => loader.SetCacheEntry(key, value);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderSetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| const string key = \"Foo\";| var first = Task.FromResult((object?)\"Bar\");| var second = Task.FromResult((object?)\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new PromiseCache(10);| var dataLoader1 = new TestDataLoader1(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity1 = await dataLoader1.LoadAsync(1, CancellationToken.None);| await Task.Delay(500);| // act| var dataLoader2 = new TestDataLoader2(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity2 = await dataLoader2.LoadAsync(2, CancellationToken.None);| // assert| Assert.Same(entity1, entity2);| }"
      }
    ]
  },
  {
    "file": "UseDataLoaderTests.cs",
    "methods": [
      {
        "name": "UseDataLoader_Should_ThrowException_When_NotADataLoader",
        "body": "{| // arrange| // act| var exception =| Assert.Throws<SchemaException>(| () => SchemaBuilder.New()| .AddQueryType<Query>(x => x| .BindFieldsExplicitly()| .Field(y => y.Single)| .UseDataLoader(typeof(Foo)))| .Create());| // assert| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoader_Schema_BatchDataloader_Single",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>(x => x| .BindFieldsExplicitly()| .Field(y => y.Single)| .UseDataLoader<TestBatchLoader>())| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoader_Schema_BatchDataloader_Many",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>(x => x| .BindFieldsExplicitly()| .Field(y => y.Multiple)| .UseDataLoader<TestBatchLoader>())| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoader_Schema_GroupedDataloader_Single",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>(x => x| .BindFieldsExplicitly()| .Field(y => y.Single)| .UseDataLoader<TestGroupedLoader>())| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoader_Schema_GroupedDataloader_Many",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>(x => x| .BindFieldsExplicitly()| .Field(y => y.Multiple)| .UseDataLoader<TestGroupedLoader>())| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoaderAttribute_Schema_BatchDataloader_Single",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<BatchQuery>(| x => x.BindFieldsExplicitly()| .Field(y => y.Single))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoaderAttribute_Schema_BatchDataloader_Many",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<BatchQuery>(| x => x.BindFieldsExplicitly()| .Field(y => y.Multiple))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoaderAttribute_Schema_GroupedDataloader_Single",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<GroupedQuery>(| x => x.BindFieldsExplicitly()| .Field(y => y.Single))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UseDataLoaderAttribute_Schema_GroupedDataloader_Many",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<GroupedQuery>(| x => x.BindFieldsExplicitly()| .Field(y => y.Multiple))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = SchemaBuilder.New()| .AddQueryType<Query>(| x => x.BindFieldsExplicitly()| .Field(y => y.Single)| .UseDataLoader<TestBatchLoader>())| .Create()| .MakeExecutable();| // act| var result = await executor.ExecuteAsync(| OperationRequest.FromSourceText(\"{ single { id }}\"));| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = SchemaBuilder.New()| .AddQueryType<Query>(| x => x.BindFieldsExplicitly()| .Field(y => y.Multiple)| .UseDataLoader<TestBatchLoader>())| .Create()| .MakeExecutable();| // act| var result = await executor.ExecuteAsync(| OperationRequest.FromSourceText(\"{ multiple { id }}\"));| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = SchemaBuilder.New()| .AddQueryType<Query>(| x => x.BindFieldsExplicitly()| .Field(y => y.Single)| .UseDataLoader<TestGroupedLoader>())| .Create()| .MakeExecutable();| // act| var result = await executor.ExecuteAsync(| OperationRequest.FromSourceText(\"{ single { id }}\"));| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = SchemaBuilder.New()| .AddQueryType<Query>(| x => x.BindFieldsExplicitly()| .Field(y => y.Multiple)| .UseDataLoader<TestGroupedLoader>())| .Create()| .MakeExecutable();| // act| var result = await executor.ExecuteAsync(| OperationRequest.FromSourceText(\"{ multiple { id }}\"));| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EmbeddedResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ foo { bar { baz }}}\",| configure: c => c.AddQueryType<QueryType>())| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "HelloWorldCodeFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello state }\",| configure: c => c| .AddQueryType<QueryHelloWorld>()| .AddMutationType<MutationHelloWorld>()| .Services| .AddSingleton<DataStoreHelloWorld>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello(to: \\\"me\\\") state }\",| configure: c => c| .AddQueryType<QueryHelloWorld>()| .AddMutationType<MutationHelloWorld>()| .Services| .AddSingleton<DataStoreHelloWorld>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello state }\",| configure: c => c| .AddQueryType<QueryHelloWorldClr>()| .Services| .AddSingleton<DataStoreHelloWorld>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello(to: \\\"me\\\") state }\",| configure: c => c| .AddQueryType<QueryHelloWorldClr>()| .Services| .AddSingleton<DataStoreHelloWorld>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"mutation { newState(state:\\\"1234567\\\") }\",| configure: c => c| .AddQueryType<QueryHelloWorld>()| .AddMutationType<MutationHelloWorld>()| .Services| .AddSingleton<DataStoreHelloWorld>())| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "HelloWorldSchemaFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello }\",| c => c| .AddDocumentFromString(| @\"| type Query {| hello: String| }\")| .AddResolver(\"Query\", \"hello\", () => \"world\"))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello(a: \\\"foo\\\") }\",| c => c| .AddDocumentFromString(| @\"| type Query {| hello(a: String!): String| }\")| .AddResolver(\"Query\", \"hello\", ctx => ctx.ArgumentValue<string>(\"a\")))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello world }\",| c => c| .AddDocumentFromString(| @\"| type Query {| hello: String| world: String| }\")| .AddResolver<QueryA>(\"Query\")| .AddResolver<QueryB>(\"Query\"))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ hello(a: \\\"foo_\\\") }\",| c => c| .AddDocumentFromString(| @\"type Query {| hello(a: String!): String| }\")| .AddResolver<QueryC>(\"Query\"))| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ArgumentCoercionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ sayHello(name: null) }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ sayHello }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"query ($a: String!) { sayHello(name: $a) }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| var variables = new Dictionary<string, object?> { { \"a\", null }, };| // act| var result = await executor.ExecuteAsync(| \"query ($a: String!) { sayHello(name: $a) }\",| variables);| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| var variables = new Dictionary<string, object?> { { \"a\", \"Sydney\" }, };| // act| var result = await executor.ExecuteAsync(| \"query ($a: String!) { sayHello(name: $a) }\",| variables);| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InputObjectsCanBeVariablesTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"\"\"| query ($a: String! $b: String!) {| anything(foo: {| a: $a| b: $b| }) {| a| b| }| }| \"\"\",| r => r.AddQueryType<Query>(),| r => r.SetVariableValues(| new Dictionary<string, object?>| {| { \"a\", \"a\" },| { \"b\", \"b\" },| }))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"\"\"| query ($a: String!) {| anything(foo: {| a: $a| b: \"b\"| }) {| a| b| }| }| \"\"\",| r => r.AddQueryType<Query>(),| r => r.SetVariableValues(new Dictionary<string, object?> { { \"a\", \"a\" }, }))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| {| anything(foo: {| a: \"\"a\"\"| b: \"\"b\"\"| }) {| a| b| }| }| \",| r => r.AddQueryType<Query>(),| r => { }| ).MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ListTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"\"\"| query ($a: String! $b: String!) {| list(items: [$a $b])| }| \"\"\",| b => b.AddQueryType<Query>(),| r => r.SetVariableValues(new Dictionary<string, object?> { {\"a\", \"a\" }, {\"b\", \"b\" }, }))| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "MutationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Field(\"a\").Resolve(\"b\"))| .AddMutationType<Mutation1>()| .ExecuteRequestAsync(| \"\"\"| mutation {| a| b| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"a\": 1,| \"b\": 2| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5_000);| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d => d.Field(\"a\").Resolve(\"b\"))| .AddMutationType<Mutation2>()| .ExecuteRequestAsync(| \"\"\"| mutation {| a { a b }| b { a b }| }| \"\"\",| cancellationToken: cts.Token);| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"a\": {| \"a\": true,| \"b\": true| },| \"b\": {| \"a\": true,| \"b\": true| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "TypeConverterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| query foo($a: FooInput!) {| foo(foo: $a) {| id| time| number| }| }\",| request: r => r.SetVariableValues(| new Dictionary<string, object?>| {| {| \"a\",| new Dictionary<string, object>| {| { \"id\", \"934b987bc0d842bbabfd8a3b3f8b476e\" },| { \"time\", \"2018-05-29T01:00:00Z\" },| { \"number\", (byte)123 },| }| }| }),| configure: c => c.AddQueryType<Query>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| query foo($time: DateTime) {| time(time: $time)| }\",| request: r => r.SetVariableValues(| new Dictionary<string, object?> { { \"time\", \"2018-05-29T01:00:00Z\" }, }),| configure: c => c.AddQueryType<QueryType>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var time = new DateTime(2018, 01, 01, 12, 10, 10, DateTimeKind.Utc);| await ExpectValid(| @\"| query foo($time: DateTime) {| time(time: $time)| }\",| request: r => r.SetVariableValues(new Dictionary<string, object?> { { \"time\", time }, }),| configure: c => c.AddQueryType<QueryType>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| query foo($a: FooInput!) {| foo(foo: $a) {| id| time| number| }| }\",| request: r => r.SetVariableValues(| new Dictionary<string, object?>| {| {| \"a\",| new Dictionary<string, object>| {| { \"id\", \"934b987bc0d842bbabfd8a3b3f8b476e\" },| { \"time\", \"2018-05-29T01:00:00Z\" },| { \"number\", (byte)123 },| }| },| }),| configure: c => c.AddQueryType<QueryType>())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Register_TypeConverter_As_Service",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddGraphQL().AddTypeConverter<IntToStringConverter>();| // assert| var conversion =| services.BuildServiceProvider().GetService<ITypeConverter>();| Assert.Equal(\"123\", conversion.Convert<int, string>(123));| }"
      },
      {
        "name": "Register_DelegateTypeConverter_As_Service",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddGraphQL().AddTypeConverter<int, string>(| from => from.ToString() + \"_123\");| // assert| var conversion =| services.BuildServiceProvider().GetService<ITypeConverter>();| Assert.Equal(\"123_123\", conversion.Convert<int, string>(123));| }"
      },
      {
        "name": "Register_Multiple_TypeConverters_As_Service",
        "body": "{| // arrange| var services = new ServiceCollection();| services.AddGraphQLCore();| // act| services.AddTypeConverter<int, string>(| from => from.ToString() + \"_123\");| services.AddTypeConverter<char, string>(| from => from + \"_123\");| // assert| var conversion =| services.BuildServiceProvider().GetService<ITypeConverter>();| Assert.Equal(\"123_123\", conversion.Convert<int, string>(123));| Assert.Equal(\"a_123\", conversion.Convert<char, string>('a'));| }"
      },
      {
        "name": "Convert_Null_To_Value_Type_Default",
        "body": "{| var empty = TypeConverterExtensions.Convert<object, Guid>(| DefaultTypeConverter.Default,| null);| Assert.Equal(Guid.Empty, empty);| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QuerySet>()| .ExecuteRequestAsync(\"{ set(set: [\\\"abc\\\", \\\"abc\\\"]) }\");| CookieCrumble.SnapshotExtensions.MatchInlineSnapshot(| result,| \"\"\"| {| \"data\": {| \"set\": [| \"abc\"| ]| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QuerySet>()| .ExecuteRequestAsync(\"{ set2(set: [\\\"abc\\\", \\\"abc\\\"]) }\");| CookieCrumble.SnapshotExtensions.MatchInlineSnapshot(| result,| \"\"\"| {| \"data\": {| \"set2\": [| \"abc\"| ]| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "IntrospectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var client = GetClient(Environments.Development);| // act| var response = await client.PostAsync(| \"\"\"| {| __type(name: \"Query\") {| name| }| }| \"\"\",| Url);| // assert| response.HttpResponseMessage.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1)| .Services| .AddValidation()| .ConfigureValidation(b => b.Modifiers.Add(o => o.DisableDepthRule = true)));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .DisableIntrospection());| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 2,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      }
    ]
  },
  {
    "file": "MiddlewareContextTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| \"type Query { foo(bar: String) : String }\")| .AddResolver(| \"Query\",| \"foo\",| ctx =>| ctx.Variables.GetVariable<string>(\"abc\"))| .Create();| var request = OperationRequestBuilder.New()| .SetDocument(\"query abc($abc: String){ foo(bar: $abc) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"abc\", \"def\" }, })| .Build();| // act| var result = await schema.MakeExecutable().ExecuteAsync(request);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| \"type Query { foo(bar: String) : String }\")| .AddResolver(| \"Query\",| \"foo\",| ctx =>| ctx.Variables.GetVariable<string>(\"abc\"))| .Create();| var request = OperationRequestBuilder.New()| .SetDocument(\"query abc($def: String){ foo(bar: $def) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"def\", \"ghi\" }, })| .Build();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(request);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<ISelection>();| var schema = SchemaBuilder.New()| .AddDocumentFromString(| \"\"\"| type Query {| foo: Foo| }| type Foo {| bar: Bar| }| type Bar {| baz: String| }| \"\"\")| .Use(| _ => context =>| {| if (context.Selection.Type.NamedType() is ObjectType type)| {| foreach (var selection in context.GetSelections(type))| {| CollectSelections(context, selection, list);| }| }| return default;| })| .Create();| // act| await schema.MakeExecutable().ExecuteAsync(| @\"{| foo {| bar {| baz| }| }| }\");| // assert| list.Select(t => t.SyntaxNode.Name.Value).ToList().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = new DictionaryServiceProvider(typeof(string), \"hello\");| // assert| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Name(OperationTypeNames.Query);| d.Field(\"foo\")| .Resolve(ctx => ctx.Service<string>())| .Use(| next => async context =>| {| context.Services = services;| await next(context);| });| })| .ExecuteRequestAsync(\"{ foo }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| var original =| context.ReplaceArguments(| current =>| {| var arguments = new Dictionary<string, ArgumentValue>();| foreach (var argumentValue in current.Values)| {| if (argumentValue.Type.RuntimeType ==| typeof(string) &&| argumentValue| .ValueLiteral is StringValueNode sv)| {| sv = sv.WithValue(sv.Value.Trim());| var trimmedArgument = new ArgumentValue(| argumentValue,| ValueKind.String,| false,| false,| null,| sv);| arguments.Add(| argumentValue.Name,| trimmedArgument);| }| else| {| arguments.Add(| argumentValue.Name,| argumentValue);| }| }| return arguments;| });| await next(context);| context.ReplaceArguments(original);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc \\\") }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| var original = context.ReplaceArguments(_ => null!);| await next(context);| context.ReplaceArguments(original);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc \\\") }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetResultState(\"abc\", \"def\");| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData.TryGetValue(\"abc\", out var value));| Assert.Equal(\"def\", value);| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetResultState(\"abc\", 1);| context.OperationResult.SetResultState(\"abc\",| (_, c) =>| {| if (c is int i)| {| return ++i;| }| return 0;| });| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData.TryGetValue(\"abc\", out var value));| Assert.Equal(2, value);| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5000);| var ct = cts.Token;| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetResultState(\"abc\", 1);| context.OperationResult.SetResultState(\"abc\",| (_, c) =>| {| if (c is int i)| {| return ++i;| }| return 0;| });| await next(context);| });| })| .ModifyOptions(| o =>| {| o.EnableDefer = true;| o.EnableStream = true;| })| .ExecuteRequestAsync(\"{ ... @defer { abc(a: \\\"abc\\\") } }\", cancellationToken: ct);| var first = true;| await foreach (var queryResult in result.ExpectResponseStream()| .ReadResultsAsync().WithCancellation(cancellationToken: ct))| {| if (first)| {| first = false;| continue;| }| Assert.NotNull(queryResult.Incremental?[0].ContextData);| Assert.True(queryResult.Incremental[0].ContextData!.TryGetValue(\"abc\", out var value));| Assert.Equal(2, value);| }| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetResultState(\"abc\", 1);| context.OperationResult.SetResultState(\"abc\", 5,| (_, c, s) =>| {| if (c is int i)| {| return i + s;| }| return 0;| });| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Assert.NotNull(result.ContextData);| Assert.True(result.ContextData.TryGetValue(\"abc\", out var value));| Assert.Equal(6, value);| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension(\"abc\", 1);| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Snapshot| .Create()| .Add(result)| .MatchInline(| @\"{| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": 1| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension(\"abc\", 1);| context.OperationResult.SetExtension<int>(\"abc\", (_, v) => 1 + v);| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Snapshot| .Create()| .Add(result)| .MatchInline(| @\"{| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": 2| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension(\"abc\", 1);| context.OperationResult.SetExtension<int, int>(| key: \"abc\",| state: 5,| (_, v, s) => s + v);| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Snapshot| .Create()| .Add(result)| .MatchInline(| @\"{| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": 6| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension<int>(\"abc\", (_, v) => 1 + v);| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Snapshot| .Create()| .Add(result)| .MatchInline(| @\"{| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": 1| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension(\"abc\", new SomeData(\"def\"));| await next(context);| });| })| .ExecuteRequestAsync(\"{ abc(a: \\\"abc\\\") }\");| Snapshot| .Create()| .Add(result)| .MatchInline(| @\"{| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": {| \"\"someField\"\": \"\"def\"\"| }| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(5000);| var ct = cts.Token;| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d =>| {| d.Field(\"abc\")| .Argument(\"a\", t => t.Type<StringType>())| .Resolve(ctx => ctx.ArgumentValue<string>(\"a\"))| .Use(| next => async context =>| {| context.OperationResult.SetExtension(\"abc\", new SomeData(\"def\"));| await next(context);| });| })| .ModifyOptions(| o =>| {| o.EnableDefer = true;| o.EnableStream = true;| })| .ExecuteRequestAsync(\"{ ... @defer { abc(a: \\\"abc\\\") } }\", cancellationToken: ct);| var first = true;| await foreach (var queryResult in result.ExpectResponseStream()| .ReadResultsAsync().WithCancellation(ct))| {| if (first)| {| first = false;| continue;| }| Snapshot| .Create()| .AddResult(queryResult)| .MatchInline(| @\"{| \"\"incremental\"\": [| {| \"\"data\"\": {| \"\"abc\"\": \"\"abc\"\"| },| \"\"extensions\"\": {| \"\"abc\"\": {| \"\"someField\"\": \"\"def\"\"| }| },| \"\"path\"\": []| }| ],| \"\"hasNext\"\": false| }\");| }| }"
      }
    ]
  },
  {
    "file": "DocumentCacheMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new Caching.DefaultDocumentCache();| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentCacheMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| cache,| hashProvider);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| cache.TryAddDocument(\"a\", new CachedDocument(document, false));| var requestContext = new Mock<IRequestContext>();| var schema = new Mock<ISchema>();| requestContext.SetupGet(t => t.Schema).Returns(schema.Object);| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.ValidationResult);| schema.Setup(s => s.Name).Returns(\"SchemaName\");| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(document, requestContext.Object.Document);| Assert.Equal(\"a\", requestContext.Object.DocumentId);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new Caching.DefaultDocumentCache();| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentCacheMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| cache,| hashProvider);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentHash(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| cache.TryAddDocument(\"a\", new CachedDocument(document, false));| var requestContext = new Mock<IRequestContext>();| var schema = new Mock<ISchema>();| requestContext.SetupGet(t => t.Schema).Returns(schema.Object);| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.ValidationResult);| schema.Setup(s => s.Name).Returns(\"SchemaName\");| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(document, requestContext.Object.Document);| Assert.Equal(\"a\", requestContext.Object.DocumentId);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new Caching.DefaultDocumentCache();| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentCacheMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| cache,| hashProvider);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| cache.TryAddDocument(\"b\", new CachedDocument(document, false));| var requestContext = new Mock<IRequestContext>();| var schema = new Mock<ISchema>();| requestContext.SetupGet(t => t.Schema).Returns(schema.Object);| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.DocumentHash);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.ValidationResult);| schema.Setup(s => s.Name).Returns(\"SchemaName\");| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Null(requestContext.Object.Document);| Assert.Null(requestContext.Object.DocumentId);| Assert.Equal(\"1_4JnW9GhGu3YdhGeMefaA\", requestContext.Object.DocumentHash);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new Caching.DefaultDocumentCache();| var hashProvider = new MD5DocumentHashProvider();| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var middleware = DocumentCacheMiddleware.Create(| context =>| {| context.Document = document;| context.DocumentId = \"a\";| return default;| },| new NoopExecutionDiagnosticEvents(),| cache,| hashProvider);| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.DocumentHash);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.ValidationResult);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(document, requestContext.Object.Document);| Assert.Equal(\"a\", requestContext.Object.DocumentId);| Assert.Equal(\"1_4JnW9GhGu3YdhGeMefaA\", requestContext.Object.DocumentHash);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new Caching.DefaultDocumentCache();| var hashProvider = new MD5DocumentHashProvider();| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .Build();| var parserMiddleware = DocumentParserMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| hashProvider,| new ParserOptions());| var middleware = DocumentCacheMiddleware.Create(| context => parserMiddleware.InvokeAsync(context),| new NoopExecutionDiagnosticEvents(),| cache,| hashProvider);| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.DocumentHash);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.ValidationResult);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.NotNull(requestContext.Object.Document);| Assert.Equal(requestContext.Object.DocumentHash, requestContext.Object.DocumentId);| Assert.Equal(\"1_4JnW9GhGu3YdhGeMefaA\", requestContext.Object.DocumentHash);| }"
      }
    ]
  },
  {
    "file": "DocumentParserMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentParserMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| hashProvider,| new ParserOptions());| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.Document, document);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(document, requestContext.Object.Document);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentParserMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| hashProvider,| new ParserOptions());| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.DocumentId);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.NotNull(requestContext.Object.Document);| Assert.NotNull(requestContext.Object.DocumentId);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var hashProvider = new MD5DocumentHashProvider();| var middleware = DocumentParserMiddleware.Create(| _ => throw new Exception(\"Should not be invoked.\"),| new NoopExecutionDiagnosticEvents(),| hashProvider,| new ParserOptions());| var request = OperationRequestBuilder.New()| .SetDocument(\"{\")| .SetDocumentId(\"a\")| .Build();| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupGet(t => t.ErrorHandler).Returns(| new DefaultErrorHandler(| Array.Empty<IErrorFilter>(),| new RequestExecutorOptions()));| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.DocumentId);| requestContext.SetupProperty(t => t.Exception);| requestContext.SetupProperty(t => t.Result);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Null(requestContext.Object.Document);| Assert.NotNull(requestContext.Object.DocumentId);| Assert.NotNull(requestContext.Object.Exception);| Assert.NotNull(requestContext.Object.Result);| }"
      }
    ]
  },
  {
    "file": "DocumentValidationMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var validator = new Mock<IDocumentValidator>();| validator.SetupGet(t => t.HasDynamicRules).Returns(false);| validator.Setup(t => t.ValidateAsync(| It.IsAny<ISchema>(),| It.IsAny<DocumentNode>(),| It.IsAny<OperationDocumentId>(),| It.IsAny<IDictionary<string, object?>>(),| It.Is<bool>(b => true),| It.IsAny<CancellationToken>()))| .Returns(new ValueTask<DocumentValidatorResult>(DocumentValidatorResult.Ok));| var middleware = DocumentValidationMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| validator.Object);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var validationResult = new DocumentValidatorResult(Array.Empty<IError>());| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.Document, document);| requestContext.SetupProperty(t => t.ValidationResult, validationResult);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(validationResult, requestContext.Object.ValidationResult);| Assert.False(requestContext.Object.ValidationResult!.HasErrors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var validator = new Mock<IDocumentValidator>();| validator.SetupGet(t => t.HasDynamicRules).Returns(true);| validator.Setup(t => t.ValidateAsync(| It.IsAny<ISchema>(),| It.IsAny<DocumentNode>(),| It.IsAny<OperationDocumentId>(),| It.IsAny<IDictionary<string, object?>>(),| It.Is<bool>(b => true),| It.IsAny<CancellationToken>()))| .Returns(new ValueTask<DocumentValidatorResult>(DocumentValidatorResult.Ok));| var middleware = DocumentValidationMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| validator.Object);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var validationResult = new DocumentValidatorResult(Array.Empty<IError>());| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupGet(t => t.ContextData).Returns(new Dictionary<string, object?>());| requestContext.SetupProperty(t => t.Document, document);| requestContext.SetupProperty(t => t.DocumentId, \"abc\");| requestContext.SetupProperty(t => t.ValidationResult, validationResult);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.NotEqual(validationResult, requestContext.Object.ValidationResult);| Assert.False(requestContext.Object.ValidationResult!.HasErrors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var validator = new Mock<IDocumentValidator>();| validator.Setup(t => t.ValidateAsync(| It.IsAny<ISchema>(),| It.IsAny<DocumentNode>(),| It.IsAny<OperationDocumentId>(),| It.IsAny<IDictionary<string, object?>>(),| It.Is<bool>(b => true),| It.IsAny<CancellationToken>()))| .Returns(new ValueTask<DocumentValidatorResult>(DocumentValidatorResult.Ok));| var middleware = DocumentValidationMiddleware.Create(| _ => default,| new NoopExecutionDiagnosticEvents(),| validator.Object);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupGet(t => t.ContextData).Returns(new Dictionary<string, object?>());| requestContext.SetupProperty(t => t.Document, document);| requestContext.SetupProperty(t => t.DocumentId, \"abc\");| requestContext.SetupProperty(t => t.ValidationResult);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.Equal(DocumentValidatorResult.Ok, requestContext.Object.ValidationResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var validationResult = new DocumentValidatorResult(| new[] { ErrorBuilder.New().SetMessage(\"Foo\").Build(), });| var validator = new Mock<IDocumentValidator>();| validator.Setup(t => t.ValidateAsync(| It.IsAny<ISchema>(),| It.IsAny<DocumentNode>(),| It.IsAny<OperationDocumentId>(),| It.IsAny<IDictionary<string, object?>>(),| It.Is<bool>(b => true),| It.IsAny<CancellationToken>()))| .Returns(new ValueTask<DocumentValidatorResult>(validationResult));| var middleware = DocumentValidationMiddleware.Create(| _ => throw new Exception(\"Should not be called.\"),| new NoopExecutionDiagnosticEvents(),| validator.Object);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var document = Utf8GraphQLParser.Parse(\"{ a }\");| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupGet(t => t.ContextData).Returns(new Dictionary<string, object?>());| requestContext.SetupProperty(t => t.Document, document);| requestContext.SetupProperty(t => t.DocumentId, \"abc\");| requestContext.SetupProperty(t => t.ValidationResult);| requestContext.SetupProperty(t => t.Result);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.NotNull(requestContext.Object.ValidationResult);| Assert.NotNull(requestContext.Object.Result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var validator = new Mock<IDocumentValidator>();| validator.Setup(t => t.ValidateAsync(| It.IsAny<ISchema>(),| It.IsAny<DocumentNode>(),| It.IsAny<OperationDocumentId>(),| It.IsAny<IDictionary<string, object?>>(),| It.Is<bool>(b => true),| It.IsAny<CancellationToken>()))| .Returns(new ValueTask<DocumentValidatorResult>(DocumentValidatorResult.Ok));| var middleware = DocumentValidationMiddleware.Create(| _ => throw new Exception(\"Should not be called.\"),| new NoopExecutionDiagnosticEvents(),| validator.Object);| var request = OperationRequestBuilder.New()| .SetDocument(\"{ a }\")| .SetDocumentId(\"a\")| .Build();| var requestContext = new Mock<IRequestContext>();| requestContext.SetupGet(t => t.Request).Returns(request);| requestContext.SetupProperty(t => t.Document);| requestContext.SetupProperty(t => t.Result);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| Assert.NotNull(requestContext.Object.Result);| }"
      }
    ]
  },
  {
    "file": "ExceptionMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var errorHandler = new DefaultErrorHandler(| Array.Empty<IErrorFilter>(),| new RequestExecutorOptions());| var middleware = ExceptionMiddleware.Create(| _ => throw new Exception(\"Something is wrong.\"),| errorHandler);| var requestContext = new Mock<IRequestContext>();| requestContext.SetupProperty(t => t.Result);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| requestContext.Object.Result!.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var errorHandler = new DefaultErrorHandler(| Array.Empty<IErrorFilter>(),| new RequestExecutorOptions());| var middleware = ExceptionMiddleware.Create(| _ => throw new GraphQLException(\"Something is wrong.\"),| errorHandler);| var requestContext = new Mock<IRequestContext>();| requestContext.SetupProperty(t => t.Result);| // act| await middleware.InvokeAsync(requestContext.Object);| // assert| requestContext.Object.Result!.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequestClassMiddlewareFactoryTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var middleware = Create<StubMiddleware<IEnumerable<IOperationCompilerOptimizer>>>();| var applicationServices = new ServiceCollection().BuildServiceProvider();| var schemaServices = new ServiceCollection()| .AddSingleton<IOperationCompilerOptimizer, StubOptimizer>()| .BuildServiceProvider();| var schemaName = \"_Default\";| IRequestExecutorOptionsAccessor optionsAccessor = new RequestExecutorOptions();| var factoryContext = new RequestCoreMiddlewareContext(| schemaName,| applicationServices,| schemaServices,| optionsAccessor);| var context = new RequestContext(| new Mock<ISchema>().Object,| 1,| new Mock<IErrorHandler>().Object,| new Mock<IExecutionDiagnosticEvents>().Object);| context.Initialize(| new Mock<IOperationRequest>().Object,| new Mock<IServiceProvider>().Object);| // act| var compiledMiddleware = middleware(factoryContext, _ => default);| await compiledMiddleware(context);| // assert| Assert.Single((context.ContextData[\"result\"] as IEnumerable<IOperationCompilerOptimizer>)!);| }"
      }
    ]
  },
  {
    "file": "TimeoutMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| (await new ServiceCollection()| .AddGraphQL()| .AddQueryType<TimeoutQuery>()| .ModifyRequestOptions(o => o.ExecutionTimeout = TimeSpan.FromMilliseconds(100))| .ExecuteRequestAsync(\"{ timeout }\"))| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource();| var result = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<TimeoutQuery>()| .AddSubscriptionType<Subscriptions>()| .ExecuteRequestAsync(\"subscription { onFoo }\", cancellationToken: cts.Token);| var responseStream = Assert.IsType<ResponseStream>(result);| var enumerable = responseStream.ReadResultsAsync();| var enumerator = enumerable.GetAsyncEnumerator(| CancellationToken.None);| // we should get the first result!| await enumerator.MoveNextAsync();| enumerator.Current.ToJson().MatchSnapshot();| cts.Cancel();| Assert.False(await enumerator.MoveNextAsync(), \"the stream should be canceled.\");| }"
      }
    ]
  },
  {
    "file": "TransactionScopeHandlerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var completed = false;| var disposed = false;| void Complete() => completed = true;| void Dispose() => disposed = true;| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddMutationType<Mutation>()| .ModifyRequestOptions(o => o.ExecutionTimeout = TimeSpan.FromMilliseconds(100))| .AddTransactionScopeHandler(_ => new MockTransactionScopeHandler(Complete, Dispose))| .ExecuteRequestAsync(\"mutation { doNothing }\");| Assert.True(completed, \"transaction must be completed\");| Assert.True(disposed, \"transaction must be disposed\");| }"
      },
      {
        "name": "Task",
        "body": "{| var completed = false;| var disposed = false;| void Complete() => completed = true;| void Dispose() => disposed = true;| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddMutationType<Mutation>()| .AddTransactionScopeHandler(_ => new MockTransactionScopeHandler(Complete, Dispose))| .ExecuteRequestAsync(\"mutation { doError }\");| Assert.False(completed, \"transaction was not completed due to error\");| Assert.True(disposed, \"transaction must be disposed\");| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddMutationType<Mutation>()| .AddDefaultTransactionScopeHandler()| .ExecuteRequestAsync(\"mutation { foundTransactionScope }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddMutationType<Mutation>()| .ExecuteRequestAsync(\"mutation { foundTransactionScope }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "DisposeExecutablesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executable = new AsyncDisposableExecutable([\"a\", \"b\", \"c\"]);| // act| await using var result =| await new ServiceCollection()| .AddSingleton<IExecutable<string>>(executable)| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| items| }| \"\"\");| // assert| Assert.True(executable.IsDisposed);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executable = new DisposableExecutable([\"a\", \"b\", \"c\"]);| // act| await using var result =| await new ServiceCollection()| .AddSingleton<IExecutable<string>>(executable)| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| items| }| \"\"\");| // assert| Assert.True(executable.IsDisposed);| }"
      }
    ]
  },
  {
    "file": "ObjectFieldResultTests.cs",
    "methods": [
      {
        "name": "SetNullable",
        "body": "{| // arrange| var field = new ObjectFieldResult();| // act| field.Set(\"abc\", \"def\", true);| // assert| Assert.Equal(\"abc\", field.Name);| Assert.Equal(\"def\", field.Value);| Assert.True(field.IsNullable);| Assert.True(field.IsInitialized);| }"
      },
      {
        "name": "SetNonNullable",
        "body": "{| // arrange| var field = new ObjectFieldResult();| // act| field.Set(\"abc\", \"def\", false);| // assert| Assert.Equal(\"abc\", field.Name);| Assert.Equal(\"def\", field.Value);| Assert.False(field.IsNullable);| Assert.True(field.IsInitialized);| }"
      },
      {
        "name": "NewInstance",
        "body": "{| // arrange| // act| var field = new ObjectFieldResult();| // assert| Assert.Null(field.Name);| Assert.Null(field.Value);| Assert.True(field.IsNullable);| Assert.False(field.IsInitialized);| }"
      },
      {
        "name": "ResetInstance",
        "body": "{| // arrange| var field = new ObjectFieldResult();| field.Set(\"abc\", \"def\", false);| // act| field.Reset();| // assert| Assert.Null(field.Name);| Assert.Null(field.Value);| Assert.True(field.IsNullable);| Assert.False(field.IsInitialized);| }"
      }
    ]
  },
  {
    "file": "ObjectResultTests.cs",
    "methods": [
      {
        "name": "SetValue",
        "body": "{| // arrange| var objectResult = new ObjectResult();| objectResult.EnsureCapacity(1);| // act| objectResult.SetValueUnsafe(0, \"abc\", \"def\");| // assert| Assert.Collection(| (IEnumerable<ObjectFieldResult>)objectResult,| t =>| {| Assert.Equal(\"abc\", t.Name);| Assert.Equal(\"def\", t.Value);| });| }"
      },
      {
        "name": "EnumerateResultValue",
        "body": "{| // arrange| var objectResult = new ObjectResult();| objectResult.EnsureCapacity(5);| // act| objectResult.SetValueUnsafe(0, \"abc1\", \"def\");| objectResult.SetValueUnsafe(2, \"abc2\", \"def\");| objectResult.SetValueUnsafe(4, \"abc3\", \"def\");| // assert| Assert.Collection(| (IEnumerable<ObjectFieldResult>)objectResult,| t =>| {| Assert.Equal(\"abc1\", t.Name);| Assert.Equal(\"def\", t.Value);| },| t =>| {| Assert.Equal(\"abc2\", t.Name);| Assert.Equal(\"def\", t.Value);| },| t =>| {| Assert.Equal(\"abc3\", t.Name);| Assert.Equal(\"def\", t.Value);| });| }"
      },
      {
        "name": "EnumerateKeys",
        "body": "{| // arrange| var objectResult = new ObjectResult();| objectResult.EnsureCapacity(5);| // act| objectResult.SetValueUnsafe(0, \"abc1\", \"def\");| objectResult.SetValueUnsafe(2, \"abc2\", \"def\");| objectResult.SetValueUnsafe(4, \"abc3\", \"def\");| // assert| Assert.Collection(| ((IReadOnlyDictionary<string, object?>)objectResult).Keys,| t => Assert.Equal(\"abc1\", t),| t => Assert.Equal(\"abc2\", t),| t => Assert.Equal(\"abc3\", t));| }"
      },
      {
        "name": "EnumerateValues",
        "body": "{| // arrange| var objectResult = new ObjectResult();| objectResult.EnsureCapacity(5);| // act| objectResult.SetValueUnsafe(0, \"abc1\", \"def\");| objectResult.SetValueUnsafe(2, \"abc2\", \"def\");| objectResult.SetValueUnsafe(4, \"abc3\", \"def\");| // assert| Assert.Collection(| ((IReadOnlyDictionary<string, object?>)objectResult).Values,| t => Assert.Equal(\"def\", t),| t => Assert.Equal(\"def\", t),| t => Assert.Equal(\"def\", t));| }"
      }
    ]
  },
  {
    "file": "ResultBuilderTests.cs",
    "methods": [
      {
        "name": "BuildResult_SimpleResultSet_SnapshotMatches",
        "body": "{| // arrange| var helper = new ResultBuilder(CreatePool());| var map = helper.RentObject(1);| map.SetValueUnsafe(0, \"abc\", \"def\", false);| helper.SetData(map);| // act| var result = helper.BuildResult();| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SelectionIncludeConditionTests.cs",
    "methods": [
      {
        "name": "Skip_True_Is_Visible_False",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var visibility = new SelectionIncludeCondition(skip: new BooleanValueNode(true));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.False(visible);| }"
      },
      {
        "name": "Skip_Var_True_Is_Visible_False",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| variableValues.Setup(t => t.GetVariable<bool>(\"b\")).Returns(true);| var visibility = new SelectionIncludeCondition(skip: new VariableNode(\"b\"));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.False(visible);| }"
      },
      {
        "name": "Skip_False_Is_Visible_True",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var visibility = new SelectionIncludeCondition(skip: new BooleanValueNode(false));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "Skip_Var_False_Is_Visible_True",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| variableValues.Setup(t => t.GetVariable<bool>(\"b\")).Returns(false);| var visibility = new SelectionIncludeCondition(skip: new VariableNode(\"b\"));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "Include_True_Is_Visible_True",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var visibility = new SelectionIncludeCondition(include: new BooleanValueNode(true));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "Include_Var_True_Is_Visible_True",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| variableValues.Setup(t => t.GetVariable<bool>(\"b\")).Returns(true);| var visibility = new SelectionIncludeCondition(include: new VariableNode(\"b\"));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "Include_False_Is_Visible_False",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var visibility = new SelectionIncludeCondition(include: new BooleanValueNode(false));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.False(visible);| }"
      },
      {
        "name": "Include_Var_False_Is_Visible_False",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| variableValues.Setup(t => t.GetVariable<bool>(\"b\")).Returns(false);| var visibility = new SelectionIncludeCondition(include: new VariableNode(\"b\"));| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.False(visible);| }"
      },
      {
        "name": "Parent_Visible_True",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var parent = new SelectionIncludeCondition(| include: new BooleanValueNode(true));| var visibility = new SelectionIncludeCondition(| include: new BooleanValueNode(true),| parent: parent);| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "Parent_Visible_False",
        "body": "{| // arrange| var variableValues = new Mock<IVariableValueCollection>();| var parent = new SelectionIncludeCondition(| include: new BooleanValueNode(false));| var visibility = new SelectionIncludeCondition(| include: new BooleanValueNode(true),| parent: parent);| // act| var visible = visibility.IsTrue(variableValues.Object);| // assert| Assert.False(visible);| }"
      },
      {
        "name": "Include_Is_String_GraphQLException",
        "body": "{| // arrange| // act| void Action()| => new SelectionIncludeCondition(| include: new StringValueNode(\"abc\"));| // assert| Assert.Throws<ArgumentException>(Action);| }"
      },
      {
        "name": "Skip_Is_String_GraphQLException",
        "body": "{| // arrange| // act| void Action()| => new SelectionIncludeCondition(| skip: new StringValueNode(\"abc\"));| // assert| Assert.Throws<ArgumentException>(Action);| }"
      },
      {
        "name": "Equals_Include_True_vs_True",
        "body": "{| // arrange| var a = new SelectionIncludeCondition(| include: new BooleanValueNode(true));| var b = new SelectionIncludeCondition(| include: new BooleanValueNode(true));| // act| var equals = a.Equals(b);| // assert| Assert.True(equals);| }"
      },
      {
        "name": "Equals_Include_True_vs_False",
        "body": "{| // arrange| var a = new SelectionIncludeCondition(| include: new BooleanValueNode(true));| var b = new SelectionIncludeCondition(| include: new BooleanValueNode(false));| // act| var equals = a.Equals(b);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "Equals_Include_True_vs_Variable",
        "body": "{| // arrange| var a = new SelectionIncludeCondition(| include: new BooleanValueNode(true));| var b = new SelectionIncludeCondition(| include: new VariableNode(\"b\"));| // act| var equals = a.Equals(b);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "Equals_Include_Variable_A_vs_Variable_B",
        "body": "{| // arrange| var a = new SelectionIncludeCondition(| include: new VariableNode(\"a\"));| var b = new SelectionIncludeCondition(| include: new VariableNode(\"b\"));| // act| var equals = a.Equals(b);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "Equals_Include_Variable_A_vs_Variable_A",
        "body": "{| // arrange| var a = new SelectionIncludeCondition(| include: new VariableNode(\"a\"));| var b = new SelectionIncludeCondition(| include: new VariableNode(\"a\"));| // act| var equals = a.Equals(b);| // assert| Assert.True(equals);| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| person @skip(if: true) @include(if: true) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", true }, { \"include\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($shouldSkip: Boolean! = true) {| person @skip(if: $shouldSkip) {| a: name| }| person @skip(if: $shouldSkip) {| b: name| }| person @skip(if: $shouldSkip) {| c: name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"shouldSkip\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($shouldSkip: Boolean! = true) {| person @skip(if: $shouldSkip) {| a: name| }| person @skip(if: $shouldSkip) {| b: name| }| person @skip(if: $shouldSkip) {| c: name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"shouldSkip\", false }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"person\": {| \"a\": \"hello\",| \"b\": \"hello\",| \"c\": \"hello\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($skip: Boolean! $include: Boolean!) {| person @skip(if: $skip) @include(if: $include) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", true }, { \"include\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| person @skip(if: true) @include(if: false) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", true }, { \"include\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($skip: Boolean! $include: Boolean!) {| person @skip(if: $skip) @include(if: $include) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", true }, { \"include\", false }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| person @skip(if: false) @include(if: false) {| name| }| }| \"\"\")| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($skip: Boolean! $include: Boolean!) {| person @skip(if: $skip) @include(if: $include) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", false }, { \"include\", false }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| person @skip(if: false) @include(if: true) {| name| }| }| \"\"\")| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"person\": {| \"name\": \"hello\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($skip: Boolean! $include: Boolean!) {| person @skip(if: $skip) @include(if: $include) {| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", false }, { \"include\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"person\": {| \"name\": \"hello\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| person @skip(if: true) {| name| }| }| \"\"\")| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($skip: Boolean!) {| person @skip(if: $skip){| name| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"skip\", true }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query {| persons @skip(if: true) {| nodes @include(if: true) @skip(if: false) {| name| }| }| }| \"\"\")| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {}| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($permission: Boolean!) {| person {| ...A| ...B @include(if: $permission)| __typename| }| }| fragment A on Person {| name| __typename| }| fragment B on Person {| address| __typename| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { { \"permission\", false }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"person\": {| \"name\": \"hello\",| \"__typename\": \"Person\"| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "VisibilityTests.cs",
    "methods": [
      {
        "name": "TryExtract_Skip_With_Literal",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @skip(if: true)\");| // act| var includeCondition = IncludeCondition.FromSelection(field);| // assert| Assert.False(includeCondition.IsIncluded(variables.Object));| }"
      },
      {
        "name": "Equals_Skip_With_Literal_True",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: true)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: true)\");| // act| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // assert| Assert.True(includeConditionA.Equals(includeConditionB));| }"
      },
      {
        "name": "Equals_Skip_With_Variable_True",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: $a)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: $a)\");| // act| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // assert| Assert.True(includeConditionA.Equals(includeConditionB));| }"
      },
      {
        "name": "Equals_Skip_With_Literal_False",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: true)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: false)\");| // act| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // assert| Assert.False(includeConditionA.Equals(includeConditionB));| }"
      },
      {
        "name": "Equals_Skip_With_Variable_False",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: true)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: $a)\");| // act| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // assert| Assert.False(includeConditionA.Equals(includeConditionB));| }"
      },
      {
        "name": "TryExtract_False",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @test(test: true)\");| // act| var includeCondition = IncludeCondition.FromSelection(field);| // assert| Assert.True(includeCondition.IsIncluded(variables.Object));| }"
      },
      {
        "name": "TryExtract_False_2",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| var field = Utf8GraphQLParser.Syntax.ParseField(\"field\");| // act| var includeCondition = IncludeCondition.FromSelection(field);| // assert| Assert.True(includeCondition.IsIncluded(variables.Object));| }"
      },
      {
        "name": "TryExtract_True",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @skip(if: true)\");| // act| var includeCondition = IncludeCondition.FromSelection(field);| // assert| Assert.False(includeCondition.IsIncluded(variables.Object));| }"
      },
      {
        "name": "GetHashCode_Skip_With_Literal_Equal",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: true)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: true)\");| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // act| var hashCodeA = includeConditionA.GetHashCode();| var hashCodeB = includeConditionB.GetHashCode();| // assert| Assert.Equal(hashCodeA, hashCodeB);| }"
      },
      {
        "name": "GetHashCode_Skip_With_Literal_NotEqual",
        "body": "{| // arrange| var fieldA = Utf8GraphQLParser.Syntax.ParseField(\"fieldA @skip(if: true)\");| var fieldB = Utf8GraphQLParser.Syntax.ParseField(\"fieldB @skip(if: false)\");| var includeConditionA = IncludeCondition.FromSelection(fieldA);| var includeConditionB = IncludeCondition.FromSelection(fieldB);| // act| var hashCodeA = includeConditionA.GetHashCode();| var hashCodeB = includeConditionB.GetHashCode();| // assert| Assert.NotEqual(hashCodeA, hashCodeB);| }"
      },
      {
        "name": "IsVisible_Skip_Variables_True",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| variables.Setup(t => t.GetVariable<bool>(It.IsAny<string>())).Returns(false);| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @skip(if: $a)\");| var includeCondition = IncludeCondition.FromSelection(field);| // act| var visible = includeCondition.IsIncluded(variables.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "IsVisible_Include_Variables_True",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| variables.Setup(t => t.GetVariable<bool>(It.IsAny<string>())).Returns(true);| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @include(if: $a)\");| var includeCondition = IncludeCondition.FromSelection(field);| // act| var visible = includeCondition.IsIncluded(variables.Object);| // assert| Assert.True(visible);| }"
      },
      {
        "name": "IsVisible_Include_Literal_True",
        "body": "{| // arrange| var variables = new Mock<IVariableValueCollection>();| var field = Utf8GraphQLParser.Syntax.ParseField(\"field @include(if: true)\");| var includeCondition = IncludeCondition.FromSelection(field);| // act| var visible = includeCondition.IsIncluded(variables.Object);| // assert| Assert.True(visible);| }"
      }
    ]
  },
  {
    "file": "WorkQueueTests.cs",
    "methods": [
      {
        "name": "Enqueue_One",
        "body": "{| // arrange| var queue = new WorkQueue();| var task = new MockExecutionTask();| // act| queue.Push(task);| // assert| Assert.False(queue.HasRunningTasks);| Assert.False(queue.IsEmpty);| }"
      },
      {
        "name": "Enqueue_Two",
        "body": "{| // arrange| var queue = new WorkQueue();| var task1 = new MockExecutionTask();| var task2 = new MockExecutionTask();| // act| queue.Push(task1);| queue.Push(task2);| // assert| Assert.False(queue.HasRunningTasks);| Assert.False(queue.IsEmpty);| }"
      },
      {
        "name": "Take_One",
        "body": "{| // arrange| var queue = new WorkQueue();| var task1 = new MockExecutionTask();| var task2 = new MockExecutionTask();| queue.Push(task1);| queue.Push(task2);| // act| var success = queue.TryTake(out var task);| // assert| Assert.Same(task2, task);| Assert.True(success);| Assert.True(queue.HasRunningTasks);| Assert.False(queue.IsEmpty);| }"
      },
      {
        "name": "Take_All",
        "body": "{| // arrange| var queue = new WorkQueue();| var task1 = new MockExecutionTask();| var task2 = new MockExecutionTask();| queue.Push(task1);| queue.Push(task2);| // act| queue.TryTake(out var task);| var success = queue.TryTake(out task);| // assert| Assert.Same(task1, task);| Assert.True(success);| Assert.True(queue.HasRunningTasks);| Assert.True(queue.IsEmpty);| }"
      },
      {
        "name": "Complete_All",
        "body": "{| // arrange| var queue = new WorkQueue();| var task1 = new MockExecutionTask();| var task2 = new MockExecutionTask();| queue.Push(task1);| queue.Push(task2);| // act| queue.TryTake(out var task);| queue.Complete();| queue.TryTake(out task);| queue.Complete();| // assert| Assert.Same(task1, task);| Assert.False(queue.HasRunningTasks);| Assert.True(queue.IsEmpty);| }"
      },
      {
        "name": "Clear",
        "body": "{| // arrange| var queue = new WorkQueue();| var task1 = new MockExecutionTask();| var task2 = new MockExecutionTask();| queue.Push(task1);| queue.Push(task2);| // act| queue.Clear();| // assert| Assert.False(queue.HasRunningTasks);| Assert.True(queue.IsEmpty);| }"
      },
      {
        "name": "New",
        "body": "{| var queue = new WorkQueue();| Assert.False(queue.HasRunningTasks);| Assert.True(queue.IsEmpty);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorProxyTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var resolver =| new ServiceCollection()| .AddGraphQL()| .AddStarWarsRepositories()| .AddStarWarsTypes()| .Services| .BuildServiceProvider()| .GetRequiredService<IRequestExecutorResolver>();| // act| var proxy = new RequestExecutorProxy(resolver, Schema.DefaultName);| var a = await proxy.GetRequestExecutorAsync(CancellationToken.None);| var b = await proxy.GetRequestExecutorAsync(CancellationToken.None);| // assert| Assert.Same(a, b);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var resolver =| new ServiceCollection()| .AddGraphQL()| .AddStarWarsRepositories()| .AddStarWarsTypes()| .Services| .BuildServiceProvider()| .GetRequiredService<IRequestExecutorResolver>();| var evicted = false;| var updated = false;| var proxy = new RequestExecutorProxy(resolver, Schema.DefaultName);| proxy.ExecutorEvicted += (sender, args) =>| {| evicted = true;| updated = false;| };| proxy.ExecutorUpdated += (sender, args) => updated = true;| // act| var a = await proxy.GetRequestExecutorAsync(CancellationToken.None);| resolver.EvictRequestExecutor();| var b = await proxy.GetRequestExecutorAsync(CancellationToken.None);| // assert| Assert.NotSame(a, b);| Assert.True(evicted);| Assert.True(updated);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"bar\"))| .Create();| var executor = schema.MakeExecutable();| // act| Task Action() => executor.ExecuteAsync(null!, default);| // assert| ArgumentException exception = await Assert.ThrowsAsync<ArgumentNullException>(Action);| Assert.Equal(\"request\", exception.ParamName);| }"
      },
      {
        "name": "Schema_Property_IsCorrectly_Set",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"bar\"))| .Create();| // act| var executor = schema.MakeExecutable();| // assert| Assert.Equal(schema, executor.Schema);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tokenWasCorrectlyPassedToResolver = false;| var cts = new CancellationTokenSource();| void Cancel() => cts.Cancel();| var schema = SchemaBuilder.New()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"foo\")| .Resolve(ctx =>| {| // we cancel the cts in the resolver so we are sure| // that we reach this point and the passed in ct was correctly| // passed.| Cancel();| try| {| ctx.RequestAborted.ThrowIfCancellationRequested();| return \"bar\";| }| catch (OperationCanceledException)| {| tokenWasCorrectlyPassedToResolver = true;| throw new GraphQLException(\"CancellationRaised\");| }| }))| .Create();| var executor = schema.MakeExecutable();| var request = OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .Build();| // act| var result = await executor.ExecuteAsync(request, cts.Token);| // assert| // match snapshot ... in case of a cancellation the whole result is canceled| // and we return there error result without any data.| result.MatchSnapshot();| // the cancellation token was correctly passed to the resolver.| Assert.True(tokenWasCorrectlyPassedToResolver);| }"
      },
      {
        "name": "Task",
        "body": "{| using var cts = new CancellationTokenSource(1000);| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d.Name(\"abc\").Field(\"a\").Resolve(\"a\"))| .AddMutationType<Mutation>()| .ExecuteRequestAsync(@\"| mutation| {| test| {| test| {| bar| __typename| }| __typename| }| }\",| cancellationToken: cts.Token)| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ScalarExecutionErrorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ stringToName(name: \\\" \\\") }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ stringToFoo(name: \\\" \\\") }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ nameToString(name: \\\" \\\") }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"query a($a: Foo) { fooToString(name: $a) }\",| new Dictionary<string, object?>| {| {\"a\", \" \"},| });| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaDirectiveTests.cs",
    "methods": [
      {
        "name": "DirectivesOnObjectType",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result = schema.MakeExecutable().Execute(\"{ person { phone } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "DirectivesOnFieldDefinition",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result = schema.MakeExecutable().Execute(\"{ person { name } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "DirectivesOnFieldSelection",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result = schema.MakeExecutable().Execute(\"{ person { name @c(append:\\\"Baz\\\") } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "ExecDirectiveOrderIsSignificant",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { a: String }\")| .AddDirectiveType<UpperCaseDirectiveType>()| .AddDirectiveType<LowerCaseDirectiveType>()| .AddResolver(\"Query\", \"a\", () => \"hello\")| .Create();| // act| var result = schema.MakeExecutable().Execute(\"{ a @lower @upper b: a @upper @lower }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| test: String| testProp: String| }\")| .AddResolver<Query>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ test testProp }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"schema {| query: FooQuery| }| type FooQuery {| foo(bar: Bar): String| }| input Bar| {| baz: String| }\")| .AddResolver<FooQuery>()| .AddResolver<Bar>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ foo(bar: { baz: \\\"hello\\\"}) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| enumValue: FooEnum| }| enum FooEnum {| BAR| BAZ| }\")| .AddResolver<EnumQuery>(\"Query\")| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ enumValue }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| setEnumValue(value:FooEnum) : String| }| enum FooEnum {| BAR| BAZ_BAR| }\")| .AddResolver<EnumQuery>(\"Query\")| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ setEnumValue(value:BAZ_BAR) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| \"\"\"| type Query {| enumInInputObject(payload: Payload) : String| }| input Payload {| value: FooEnum| }| enum FooEnum {| BAR| BAZ| }| \"\"\")| .AddResolver<EnumQuery>(\"Query\")| .AddResolver<Payload>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ enumInInputObject(payload: { value:BAZ } ) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddDocumentFromString(| \"\"\"| schema {| query: Query| mutation: Mutation| }| type Query {| dummy: String!| }| type Mutation {| changeChannelParameters(| input: ChangeChannelParameterInput!)| : ChangeChannelParameterPayload!| }| input ChangeChannelParameterInput {| parameterChangeInfo: [ParameterValuePair!]!| }| input ParameterValuePair {| value: Any| }| type ChangeChannelParameterPayload {| message: String!| }| scalar Any| \"\"\")| .AddResolver<Query5730>(\"Query\")| .AddResolver<Mutation5730>(\"Mutation\")| .ExecuteRequestAsync(| \"\"\"| mutation {| changeChannelParameters(input: {| parameterChangeInfo: [ { value: { a: \"b\" } } ]| }) {| message| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"changeChannelParameters\": {| \"message\": \"b\"| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "ScopedContextDataTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| root: Level1| }| type Level1 {| a: Level2| b: Level2| }| type Level2| {| foo: String| }\")| .Use(_ => context =>| {| if (context.ScopedContextData.TryGetValue(\"field\", out var o) &&| o is string s)| {| s += \"/\" + context.Selection.Field.Name;| }| else| {| s = \"./\" + context.Selection.Field.Name;| }| context.ScopedContextData = context.ScopedContextData| .SetItem(\"field\", s);| context.Result = s;| return default;| })| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ root { a { foo } b { foo } } }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SemanticNonNullTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListItemThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListItemThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListItemThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListItemThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.StrictValidation = false;| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddMutationType<Mutation>()| .ExecuteRequestAsync(\"\"\"| mutation {| someMutationReturningNull {| scalarReturningNull| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarConnection {| edges {| node| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarConnection {| edges {| node| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nestedScalarArrayNullableOuterItems| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nestedScalarArrayNullableMiddleItem| }| \"\"\");| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "MultiPartResponseStreamSerializerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var result =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWarsTypes()| .ModifyOptions(| o =>| {| o.EnableDefer = true;| o.EnableStream = true;| })| .ExecuteRequestAsync(| @\"{| hero(episode: NEW_HOPE) {| id| ... @defer(label: \"\"friends\"\") {| friends {| nodes {| id| name| }| }| }| }| }\");| IResponseStream stream = Assert.IsType<ResponseStream>(result);| var memoryStream = new MemoryStream();| var serializer = new MultiPartResultFormatter();| // act| await serializer.FormatAsync(stream, memoryStream, CancellationToken.None);| // assert| memoryStream.Seek(0, SeekOrigin.Begin);| (await new StreamReader(memoryStream).ReadToEndAsync()).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var serializer = new MultiPartResultFormatter();| var stream = new Mock<Stream>();| // act| ValueTask Action() => serializer.FormatAsync(null!, stream.Object, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(async () => await Action());| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var serializer = new MultiPartResultFormatter();| var stream = new Mock<IResponseStream>();| // act| ValueTask Action() => serializer.FormatAsync(stream.Object, null!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(async () => await Action());| }"
      }
    ]
  },
  {
    "file": "SourceObjectConversionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var conversionTriggered = false;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddTypeConverter<Foo, Baz>(input =>| {| conversionTriggered = true;| return new Baz(qux: input.Bar);| })| .Services| .BuildServiceProvider()| .GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ foo { qux } }\");| // assert| Assert.True(| Assert.IsType<OperationResult>(result).Errors is null,| \"There should be no errors.\");| Assert.True(| conversionTriggered,| \"The custom converter should have been hit.\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create();| // act| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ foo { qux } }\")| .Build();| var result =| await schema.MakeExecutable().ExecuteAsync(request);| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FeatureCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "AddedFeatureGetsReturned",
        "body": "{| // Arrange| var features = new FeatureCollection();| var thing = new Thing();| features.Set<IThing>(thing);| // Act| var retrievedThing = features.GetRequired<IThing>();| // Assert| Assert.NotNull(retrievedThing);| Assert.Equal(retrievedThing, thing);| }"
      },
      {
        "name": "ExceptionThrown_WhenAskedForUnknownFeature",
        "body": "{| // Arrange| var features = new FeatureCollection();| var thing = new Thing();| features.Set<IThing>(thing);| // Assert| Assert.Throws<InvalidOperationException>(() => features.GetRequired<object>());| }"
      }
    ]
  },
  {
    "file": "FeatureCollectionTests.cs",
    "methods": [
      {
        "name": "AddedInterfaceIsReturned",
        "body": "{| var interfaces = new FeatureCollection();| var thing = new Thing();| interfaces[typeof(IThing)] = thing;| var thing2 = interfaces[typeof(IThing)];| Assert.Equal(thing2, thing);| }"
      },
      {
        "name": "IndexerAlsoAddsItems",
        "body": "{| var interfaces = new FeatureCollection();| var thing = new Thing();| interfaces[typeof(IThing)] = thing;| Assert.Equal(interfaces[typeof(IThing)], thing);| }"
      },
      {
        "name": "SetNullValueRemoves",
        "body": "{| var interfaces = new FeatureCollection();| var thing = new Thing();| interfaces[typeof(IThing)] = thing;| Assert.Equal(interfaces[typeof(IThing)], thing);| interfaces[typeof(IThing)] = null;| var thing2 = interfaces[typeof(IThing)];| Assert.Null(thing2);| }"
      },
      {
        "name": "GetMissingStructFeatureThrows",
        "body": "{| var interfaces = new FeatureCollection();| // Regression test: Used to throw NullReferenceException because it tried to unbox a null object to a struct| var ex = Assert.Throws<InvalidOperationException>(() => interfaces.Get<int>());| Assert.Equal(| \"System.Int32 does not exist in the feature collection and because it is \" +| \"a struct the method can't return null. Use 'featureCollection[typeof(System.Int32)] \" +| \"is not null' to check if the feature exists.\", ex.Message);| }"
      },
      {
        "name": "GetMissingFeatureReturnsNull",
        "body": "{| var interfaces = new FeatureCollection();| Assert.Null(interfaces.Get<Thing>());| }"
      },
      {
        "name": "GetStructFeature",
        "body": "{| var interfaces = new FeatureCollection();| var value = 20;| interfaces.Set(value);| Assert.Equal(value, interfaces.Get<int>());| }"
      },
      {
        "name": "GetNullableStructFeatureWhenSetWithNonNullableStruct",
        "body": "{| var interfaces = new FeatureCollection();| var value = 20;| interfaces.Set(value);| Assert.Null(interfaces.Get<int?>());| }"
      },
      {
        "name": "GetNullableStructFeatureWhenSetWithNullableStruct",
        "body": "{| var interfaces = new FeatureCollection();| var value = 20;| interfaces.Set<int?>(value);| Assert.Equal(value, interfaces.Get<int?>());| }"
      },
      {
        "name": "GetFeature",
        "body": "{| var interfaces = new FeatureCollection();| var thing = new Thing();| interfaces.Set(thing);| Assert.Equal(thing, interfaces.Get<Thing>());| }"
      }
    ]
  },
  {
    "file": "AutoBatchSchedulerTests.cs",
    "methods": [
      {
        "name": "DispatchOnEnqueue",
        "body": "{| // arrange| var dispatched = false;| var waitHandle = new AutoResetEvent(false);| // act| AutoBatchScheduler.Default.Schedule(() =>| {| dispatched = true;| waitHandle.Set();| return default;| });| // assert| waitHandle.WaitOne(TimeSpan.FromSeconds(5));| Assert.True(dispatched);| }"
      }
    ]
  },
  {
    "file": "AutoCacheDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType(typeof(CatExtensions))| .AddDataLoader<CatDataLoader>()| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(| \"\"\"| {| cats(first: 10) {| nodes {| name| counter| friend {| name| counter| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "BatchSchedulerTests.cs",
    "methods": [
      {
        "name": "Dispatch_OneAction_ShouldDispatchOneAction",
        "body": "{| // arrange| var context = new Mock<IExecutionTaskContext>();| context.Setup(t => t.Register(It.IsAny<IExecutionTask>()));| var hasTask = false;| var scheduler = new BatchScheduler();| scheduler.TaskEnqueued += (_, _) => hasTask = true;| ValueTask Dispatch() => default;| scheduler.Schedule(Dispatch);| Assert.True(hasTask);| hasTask = false;| // act| scheduler.BeginDispatch();| // assert| Assert.False(hasTask);| }"
      },
      {
        "name": "Initialize_Nothing_ShouldMatchSnapshot",
        "body": "{| // act| var scheduler = new BatchScheduler();| // assert| scheduler.MatchSnapshot();| }"
      },
      {
        "name": "Schedule_OneAction_HasTasksShouldReturnTrue",
        "body": "{| // arrange| var hasTask = false;| var scheduler = new BatchScheduler();| scheduler.TaskEnqueued += (_, _) => hasTask = true;| ValueTask Dispatch() => default;| // act| scheduler.Schedule(Dispatch);| // assert| Assert.True(hasTask);| }"
      },
      {
        "name": "Schedule_OneAction_ShouldRaiseTaskEnqueued",
        "body": "{| // arrange| var hasBeenRaised = false;| var scheduler = new BatchScheduler();| ValueTask Dispatch() => default;| scheduler.TaskEnqueued += (_, _) => hasBeenRaised = true;| // act| scheduler.Schedule(Dispatch);| // assert| Assert.True(hasBeenRaised);| }"
      }
    ]
  },
  {
    "file": "InlineBatchDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      }
    ]
  },
  {
    "file": "InlineCacheDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query3>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      }
    ]
  },
  {
    "file": "InlineGroupDataLoaderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"def\\\") }\").ToJsonAsync();| // assert| Assert.NotEqual(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildRequestExecutorAsync();| // act| var result1 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| var result2 = await executor.ExecuteAsync(\"{ byKey(key: \\\"abc\\\") }\").ToJsonAsync();| // assert| Assert.Equal(result1, result2);| }"
      }
    ]
  },
  {
    "file": "InMemoryIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(5000);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage2(arg1: \\\"a\\\", arg2: \\\"b\\\") }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| // act| async Task Send() => await sender.SendAsync(\"OnMessage2_a_b\", 1, cts.Token).ConfigureAwait(false);| // assert| var exception = await Assert.ThrowsAsync<InvalidMessageTypeException>(Send);| Assert.Equal(typeof(string), exception.TopicMessageType);| Assert.Equal(typeof(int), exception.RequestedMessageType);| }"
      }
    ]
  },
  {
    "file": "NatsIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "AsyncAutoResetEventTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| // Act| var waitTask = autoResetEvent.WaitAsync(CancellationToken.None);| autoResetEvent.Set();| await waitTask;| // Assert| Assert.True(waitTask.IsCompleted);| }"
      },
      {
        "name": "Set_Should_Throw_When_Disposed",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| autoResetEvent.Dispose();| // Act & Assert| Assert.Throws<ObjectDisposedException>(() => autoResetEvent.Set());| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| autoResetEvent.Dispose();| // Act & Assert| await Assert.ThrowsAsync<ObjectDisposedException>(()| => autoResetEvent.WaitAsync(CancellationToken.None));| }"
      },
      {
        "name": "WaitAsync_Should_ReturnCompletedTask_When_PreviouslySet",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| autoResetEvent.Set();| // Act| var task = autoResetEvent.WaitAsync(CancellationToken.None);| // Assert| Assert.Equal(TaskStatus.RanToCompletion, task.Status);| }"
      },
      {
        "name": "Set_Should_NotThrow_When_MultipleSetsCalled",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| // Act & Assert| autoResetEvent.Set();| autoResetEvent.Set();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| // Act| var task1 = autoResetEvent.WaitAsync(CancellationToken.None);| var task2 = autoResetEvent.WaitAsync(CancellationToken.None);| autoResetEvent.Set();| await Task.Delay(100); // Delay to allow the event to propagate| // Assert| Assert.True(task1.IsCompleted ^ task2.IsCompleted);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| // Act| var task1 = autoResetEvent.WaitAsync(CancellationToken.None);| var task2 = autoResetEvent.WaitAsync(CancellationToken.None);| autoResetEvent.Set();| autoResetEvent.Set();| await Task.Delay(100); // Delay to allow the event to propagate| // Assert| Assert.True(task1.IsCompleted && task2.IsCompleted);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| // Act| var task = autoResetEvent.WaitAsync(CancellationToken.None);| autoResetEvent.Dispose();| await Task.Delay(100); // Delay to allow the event to propagate| // Assert| Assert.True(task.IsCanceled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var autoResetEvent = new AsyncAutoResetEvent();| var cancellationTokenSource = new CancellationTokenSource();| cancellationTokenSource.Cancel();| // Act| var task = autoResetEvent.WaitAsync(cancellationTokenSource.Token);| // Assert| await Assert.ThrowsAsync<TaskCanceledException>(() => task);| }"
      }
    ]
  },
  {
    "file": "AsyncTaskDispatcherTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var wasHandlerCalled = false;| Func<CancellationToken, Task> handler = _ =>| {| wasHandlerCalled = true;| return Task.CompletedTask;| };| var asyncEventHandler = new AsyncTaskDispatcher(handler);| await asyncEventHandler.Initialize(CancellationToken.None);| wasHandlerCalled = false;| // Act| asyncEventHandler.Dispatch();| SpinWait.SpinUntil(() => wasHandlerCalled, TimeSpan.FromSeconds(1));| // Assert| Assert.True(wasHandlerCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var asyncEventHandler = new AsyncTaskDispatcher(_ => Task.CompletedTask);| await asyncEventHandler.Initialize(CancellationToken.None);| // Act| await asyncEventHandler.DisposeAsync();| // Assert| Assert.Throws<ObjectDisposedException>(() => asyncEventHandler.Dispatch());| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| Func<CancellationToken, Task> handler = _ => Task.CompletedTask;| var asyncEventHandler = new AsyncTaskDispatcher(handler);| await asyncEventHandler.Initialize(CancellationToken.None);| // Act| // Assert| await asyncEventHandler.DisposeAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var taskCompletionSource = new TaskCompletionSource<bool>();| Func<CancellationToken, Task> handler = _ => taskCompletionSource.Task;| var asyncEventHandler = new AsyncTaskDispatcher(handler);| var handlerTask = asyncEventHandler.Initialize(CancellationToken.None);| // Act| await asyncEventHandler.DisposeAsync();| // Assert| await Assert.ThrowsAsync<TaskCanceledException>(async () => await handlerTask);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var asyncEventHandler = new AsyncTaskDispatcher(_ => Task.CompletedTask);| // Act| await asyncEventHandler.DisposeAsync();| // Assert| await Assert.ThrowsAsync<ObjectDisposedException>(| async () => await asyncEventHandler.Initialize(CancellationToken.None));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var wasHandlerCalled = false;| Func<CancellationToken, Task> handler = _ =>| {| wasHandlerCalled = true;| return Task.CompletedTask;| };| var asyncEventHandler = new AsyncTaskDispatcher(handler);| // Act| await asyncEventHandler.Initialize(CancellationToken.None);| // Assert| Assert.True(wasHandlerCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var asyncEventHandler = new AsyncTaskDispatcher(_ => Task.CompletedTask);| await asyncEventHandler.Initialize(CancellationToken.None);| // Act| await asyncEventHandler.DisposeAsync();| // Assert| await Assert.ThrowsAsync<ObjectDisposedException>(| async () => await asyncEventHandler.Initialize(CancellationToken.None));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| Func<CancellationToken, Task> handler = _ => Task.CompletedTask;| var asyncEventHandler = new AsyncTaskDispatcher(handler);| // Act| await asyncEventHandler.Initialize(CancellationToken.None);| // Assert| var exception = await Record.ExceptionAsync(async ()| => await asyncEventHandler.Initialize(CancellationToken.None));| Assert.Null(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var initializeCount = 0;| Func<CancellationToken, Task> handler = _ =>| {| Interlocked.Increment(ref initializeCount);| return Task.CompletedTask;| };| var asyncEventHandler = new AsyncTaskDispatcher(handler);| // Act| var task1 = asyncEventHandler.Initialize(CancellationToken.None);| var task2 = asyncEventHandler.Initialize(CancellationToken.None);| await Task.WhenAll(task1, task2);| // Assert| Assert.Equal(1, initializeCount);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var neverEnding = new TaskCompletionSource();| var cancellationTokenSource = new CancellationTokenSource();| Func<CancellationToken, Task> handler = _ => neverEnding.Task;| var asyncEventHandler = new AsyncTaskDispatcher(handler);| // Act| cancellationTokenSource.Cancel();| var task = asyncEventHandler.Initialize(cancellationTokenSource.Token);| // Assert| await Assert.ThrowsAsync<TaskCanceledException>(async () => await task);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var neverEnding = new TaskCompletionSource();| Func<CancellationToken, Task> handler = _ => neverEnding.Task;| var asyncEventHandler = new AsyncTaskDispatcher(handler);| // Act| var task = asyncEventHandler.Initialize(CancellationToken.None);| await asyncEventHandler.DisposeAsync();| // Assert| await Assert.ThrowsAsync<TaskCanceledException>(async () => await task);| }"
      }
    ]
  },
  {
    "file": "BackgroundTaskTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| CancellationToken cancellationRequested = default;| var handler = new Func<CancellationToken, Task>((token) =>| {| cancellationRequested = token;| return Task.CompletedTask;| });| var backgroundTask = new ContinuousTask(handler, TimeProvider.System);| // Act| await backgroundTask.DisposeAsync();| // Assert| Assert.True(cancellationRequested.IsCancellationRequested);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var handlerCalled = false;| var handler = new Func<CancellationToken, Task>(_ =>| {| handlerCalled = true;| return Task.CompletedTask;| });| var backgroundTask = new ContinuousTask(handler, TimeProvider.System);| // Act| await backgroundTask.DisposeAsync();| // Assert| Assert.True(handlerCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var handlerCalled = false;| var handler = new Func<CancellationToken, Task>(_ =>| {| handlerCalled = true;| return Task.CompletedTask;| });| var backgroundTask = new ContinuousTask(handler, TimeProvider.System);| // Act| SpinWait.SpinUntil(() => handlerCalled, TimeSpan.FromSeconds(1));| // Assert| Assert.True(handlerCalled);| // Cleanup| await backgroundTask.DisposeAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var handlerCalled = false;| var handler = new Func<CancellationToken, Task>(_ =>| {| handlerCalled = true;| return Task.CompletedTask;| });| var backgroundTask = new ContinuousTask(handler, TimeProvider.System);| await backgroundTask.DisposeAsync();| handlerCalled = false;| // Act| await Task.Delay(100); // Give some time to start the background task| // Assert| Assert.False(handlerCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var hitCount = 0;| var handler = new Func<CancellationToken, Task>(_ =>| {| hitCount++;| throw new Exception(\"First call exception\");| });| var mockTimeProvider = new Mock<TimeProvider>();| var backgroundTask = new ContinuousTask(handler, mockTimeProvider.Object);| // Act| SpinWait.SpinUntil(() => hitCount == 1, TimeSpan.FromSeconds(5));| // Assert| mockTimeProvider.Verify(| tp => tp.CreateTimer(| It.IsAny<TimerCallback>(),| It.IsAny<object>(),| TimeSpan.FromSeconds(1),| Timeout.InfiniteTimeSpan),| Times.Once);| // Cleanup| await backgroundTask.DisposeAsync();| }"
      }
    ]
  },
  {
    "file": "CopyOnWriteListTests.cs",
    "methods": [
      {
        "name": "Add_Should_IncreaseItemCount_When_NewItemAdded",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd = new Item(5);| // Act| cowList.Add(itemToAdd);| // Assert| Assert.Single(cowList.Items);| Assert.Equal(itemToAdd, cowList.Items[0]);| }"
      },
      {
        "name": "Add_Should_MaintainOrder_When_MultipleItemsAdded",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd1 = new Item(5);| var itemToAdd2 = new Item(7);| // Act| cowList.Add(itemToAdd1);| cowList.Add(itemToAdd2);| // Assert| Assert.Equal(2, cowList.Items.Length);| Assert.Equal(itemToAdd1, cowList.Items[0]);| Assert.Equal(itemToAdd2, cowList.Items[1]);| }"
      },
      {
        "name": "Add_Should_CreateNewArray_When_ItemAdded",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| cowList.Add(new Item(1));| var initialArray = cowList.Items;| // Act| cowList.Add(new Item(2));| // Assert| Assert.NotSame(initialArray, cowList.Items);| }"
      },
      {
        "name": "Remove_Should_DecreaseItemCount_When_ItemRemoved",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd = new Item(5);| var itemToRemove = new Item(7);| cowList.Add(itemToAdd);| cowList.Add(itemToRemove);| // Act| cowList.Remove(itemToRemove);| // Assert| Assert.Single(cowList.Items);| Assert.DoesNotContain(itemToRemove, cowList.Items);| }"
      },
      {
        "name": "Remove_Should_NotChangeItemCount_When_ItemNotInList",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd1 = new Item(5);| var itemToAdd2 = new Item(8);| var itemToRemove = new Item(7);| cowList.Add(itemToAdd1);| cowList.Add(itemToAdd2);| // Act| cowList.Remove(itemToRemove);| // Assert| Assert.Equal(2, cowList.Items.Length);| Assert.Contains(itemToAdd1, cowList.Items);| Assert.Contains(itemToAdd2, cowList.Items);| }"
      },
      {
        "name": "Remove_Should_RemoveLastItem_When_InList",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd1 = new Item(5);| var itemToRemove = new Item(7);| cowList.Add(itemToAdd1);| cowList.Add(itemToRemove);| // Act| cowList.Remove(itemToRemove);| // Assert| Assert.Single(cowList.Items);| Assert.Contains(itemToAdd1, cowList.Items);| Assert.DoesNotContain(itemToRemove, cowList.Items);| }"
      },
      {
        "name": "Remove_Should_RemoveFirstItem_When_InList",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd1 = new Item(5);| var itemToRemove = new Item(7);| cowList.Add(itemToRemove);| cowList.Add(itemToAdd1);| // Act| cowList.Remove(itemToRemove);| // Assert| Assert.Single(cowList.Items);| Assert.Contains(itemToAdd1, cowList.Items);| Assert.DoesNotContain(itemToRemove, cowList.Items);| }"
      },
      {
        "name": "Remove_Should_KeepArraySame_When_NonExistingItemRemoved",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| cowList.Add(new(1));| var initialArray = cowList.Items;| // Act| cowList.Remove(new(2));| // Assert| Assert.Same(initialArray, cowList.Items);| }"
      },
      {
        "name": "Items_Should_ReturnEmpty_When_ListIsEmpty",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| // Act| var items = cowList.Items;| // Assert| Assert.Empty(items);| }"
      },
      {
        "name": "Items_Should_ReturnExactItems_When_ListIsNotEmpty",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var itemToAdd1 = new Item(5);| var itemToAdd2 = new Item(7);| cowList.Add(itemToAdd1);| cowList.Add(itemToAdd2);| // Act| var items = cowList.Items;| // Assert| Assert.Equal(2, items.Length);| Assert.Contains(itemToAdd1, items);| Assert.Contains(itemToAdd2, items);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var cowList = new CopyOnWriteList<Item>();| var tasks = new List<Task>();| var itemsToAdd = Enumerable.Range(1, 1000).Select(i => new Item(i)).ToArray();| // Act| foreach (var item in itemsToAdd)| {| tasks.Add(Task.Run(() => cowList.Add(item)));| }| await Task.WhenAll(tasks);| // Assert| Assert.Equal(itemsToAdd.Length, cowList.Items.Length);| foreach (var item in itemsToAdd)| {| Assert.Contains(item, cowList.Items);| }| }"
      }
    ]
  },
  {
    "file": "PostgresChannelTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new List<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| // Act| channel.Subscribe(listener);| using var testChannel = new TestChannel(SyncConnectionFactory, _options.ChannelName);| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count > 0, TimeSpan.FromSeconds(5));| Assert.Equal(\"foobar\", Assert.Single(receivedMessages));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| // Act| var message =| PostgresMessageEnvelope.Create(\"test\", \"foobar\", _options.MaxMessagePayloadSize);| await channel.SendAsync(message, CancellationToken.None);| // Assert| await testChannel.WaitForNotificationAsync();| Assert.Equal(\"dGVzdA==:foobar\", Assert.Single(testChannel.ReceivedMessages)[25..]);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| const int messageCount = 20;| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| // Act| channel.Subscribe(listener);| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| for (var i = 0; i < messageCount; i++)| {| var messageId = i.ToString();| messageId = messageId.PadLeft(24, '0');| await testChannel.SendMessageAsync($\"{messageId}:dGVzdA==:foobar\");| }| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == messageCount, TimeSpan.FromSeconds(5));| Assert.Equal(messageCount, receivedMessages.Count);| Assert.All(receivedMessages, m => Assert.Equal(\"foobar\", m));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| // Act| channel.Subscribe(listener);| await Parallel.ForEachAsync(| Enumerable.Range(0, 1000),| new ParallelOptions { MaxDegreeOfParallelism = 10, },| async (i, _) =>| {| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| var messageId = i.ToString();| messageId = messageId.PadLeft(24, '0');| await testChannel.SendMessageAsync($\"{messageId}:dGVzdA==:foobar\");| });| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1000, TimeSpan.FromSeconds(5));| Assert.Equal(1000, receivedMessages.Count);| Assert.All(receivedMessages, m => Assert.Equal(\"foobar\", m));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| // Act| channel.Subscribe(listener);| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| await Parallel.ForEachAsync(| Enumerable.Range(0, 1000),| new ParallelOptions { MaxDegreeOfParallelism = 10, },| async (i, _) =>| {| var messageId = i.ToString();| messageId = messageId.PadLeft(24, '0');| await testChannel.SendMessageAsync($\"{messageId}:dGVzdA==:foobar\");| });| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1000, TimeSpan.FromSeconds(5));| Assert.Equal(1000, receivedMessages.Count);| Assert.All(receivedMessages, m => Assert.Equal(\"foobar\", m));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| channel.Subscribe(listener);| // Act| var message =| PostgresMessageEnvelope.Create(\"test\", \"foobar\", _options.MaxMessagePayloadSize);| await channel.SendAsync(message, CancellationToken.None);| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1, TimeSpan.FromSeconds(1));| Assert.Equal(\"foobar\", Assert.Single(receivedMessages));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var listener = new PostgresChannelObserver(topicName, e => receivedMessages.Add(e));| channel.Subscribe(listener);| // Act| await Parallel.ForEachAsync(| Enumerable.Range(0, 1000),| new ParallelOptions { MaxDegreeOfParallelism = 10, },| async (_, ct) =>| {| var message = PostgresMessageEnvelope| .Create(\"test\", \"foobar\", _options.MaxMessagePayloadSize);| await channel.SendAsync(message, ct);| });| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1000, TimeSpan.FromSeconds(1));| Assert.Equal(1000, receivedMessages.Count);| Assert.All(receivedMessages, m => Assert.Equal(\"foobar\", m));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| for (var i = 0; i < 100; i++)| {| channel.Subscribe(new PostgresChannelObserver(topicName, e => receivedMessages.Add(e)));| }| // Act| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 100, TimeSpan.FromSeconds(1));| Assert.Equal(100, receivedMessages.Count);| Assert.All(receivedMessages, m => Assert.Equal(\"foobar\", m));| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var channel = new PostgresChannel(_events, _options);| await channel.EnsureInitialized(CancellationToken.None);| var receivedMessages = new ConcurrentBag<string>();| var disposable =| channel.Subscribe(new PostgresChannelObserver(topicName, e => receivedMessages.Add(e)));| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| SpinWait.SpinUntil(() => receivedMessages.Count == 1, TimeSpan.FromSeconds(1));| // Act| disposable.Dispose();| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| // Assert| await Task.Delay(1000);| Assert.Single(receivedMessages);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var reconnected = false;| NpgsqlConnection? connection = null;| var options = new PostgresSubscriptionOptions()| {| ConnectionFactory = async ct =>| {| if (connection is null)| {| connection = await ConnectionFactory(ct);| return connection;| }| reconnected = true;| return await ConnectionFactory(ct);| },| ChannelName = _channelName,| };| var channel = new PostgresChannel(_events, options);| await channel.EnsureInitialized(CancellationToken.None);| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| var receivedMessages = new ConcurrentBag<string>();| channel.Subscribe(new PostgresChannelObserver(topicName, e => receivedMessages.Add(e)));| // Act| SpinWait.SpinUntil(() => connection is not null, TimeSpan.FromSeconds(1));| try| {| await connection!.DisposeAsync();| }| catch| {| // we will get a connection is waiting exception here| }| SpinWait.SpinUntil(() => reconnected, TimeSpan.FromSeconds(1));| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1, TimeSpan.FromSeconds(1));| Assert.Single(receivedMessages);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var topicName = \"test\";| var reconnected = false;| var tries = 0;| NpgsqlConnection? connection = null;| var options = new PostgresSubscriptionOptions()| {| ConnectionFactory = async ct =>| {| if (connection is null)| {| connection = await ConnectionFactory(ct);| return connection;| }| tries++;| if (tries < 3)| {| throw new Exception(\"Test\");| }| reconnected = true;| return await ConnectionFactory(ct);| },| ChannelName = _channelName,| };| var channel = new PostgresChannel(_events, options);| await channel.EnsureInitialized(CancellationToken.None);| using var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| var receivedMessages = new ConcurrentBag<string>();| channel.Subscribe(new PostgresChannelObserver(topicName, e => receivedMessages.Add(e)));| // Act| SpinWait.SpinUntil(() => connection is not null, TimeSpan.FromSeconds(1));| try| {| await connection!.DisposeAsync();| }| catch| {| // we will get a connection is waiting exception here| }| SpinWait.SpinUntil(() => reconnected, TimeSpan.FromSeconds(1));| await testChannel.SendMessageAsync(\"aaaaaaaaaaaaaaaaaaaaaaaa:dGVzdA==:foobar\");| // Assert| SpinWait.SpinUntil(() => receivedMessages.Count == 1, TimeSpan.FromSeconds(1));| Assert.Single(receivedMessages);| }"
      }
    ]
  },
  {
    "file": "PostgresChannelWriterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var postgresChannelWriter = new PostgresChannelWriter(_events, _options);| await postgresChannelWriter.Initialize(CancellationToken.None);| var message =| PostgresMessageEnvelope.Create(\"test\", \"test\", _options.MaxMessagePayloadSize);| var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| // Act| await postgresChannelWriter.SendAsync(message, CancellationToken.None);| // Assert| await testChannel.WaitForNotificationAsync();| var result = Assert.Single(testChannel.ReceivedMessages);| Assert.Equal(\"dGVzdA==:test\", result[25..]);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var postgresChannelWriter = new PostgresChannelWriter(_events, _options);| await postgresChannelWriter.Initialize(CancellationToken.None);| var testChannel = new TestChannel(SyncConnectionFactory, _channelName);| // Act| await Parallel.ForEachAsync(Enumerable.Range(0, 1000),| new ParallelOptions { MaxDegreeOfParallelism = 10, },| async (_, _) =>| {| var message =| PostgresMessageEnvelope.Create(\"test\", \"test\", _options.MaxMessagePayloadSize);| await postgresChannelWriter.SendAsync(message, CancellationToken.None);| });| // Assert| while (testChannel.ReceivedMessages.Count < 1000)| {| await testChannel.WaitForNotificationAsync().WaitAsync(TimeSpan.FromSeconds(10));| }| Assert.Equal(1000, testChannel.ReceivedMessages.Count);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connected = false;| var options = new PostgresSubscriptionOptions()| {| ConnectionFactory = async ct =>| {| connected = true;| return await ConnectionFactory(ct);| },| ChannelName = _channelName,| };| var postgresChannelWriter = new PostgresChannelWriter(_events, options);| // Act| await postgresChannelWriter.Initialize(CancellationToken.None);| // Assert| SpinWait.SpinUntil(() => connected, TimeSpan.FromSeconds(5));| Assert.True(connected);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var reconnected = false;| NpgsqlConnection? connection = null;| var options = new PostgresSubscriptionOptions| {| ConnectionFactory = async ct =>| {| if (connection is null)| {| connection = await ConnectionFactory(ct);| return connection;| }| reconnected = true;| return await ConnectionFactory(ct);| },| ChannelName = _channelName,| };| var postgresChannelWriter = new PostgresChannelWriter(_events, options);| await postgresChannelWriter.Initialize(CancellationToken.None);| // Act| await connection!.CloseAsync();| // Assert| SpinWait.SpinUntil(() => reconnected, TimeSpan.FromSeconds(5));| Assert.True(reconnected);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| NpgsqlConnection? connection = null;| var options = new PostgresSubscriptionOptions()| {| ConnectionFactory = async ct =>| {| connection = await ConnectionFactory(ct);| return connection;| },| ChannelName = _channelName,| };| var postgresChannelWriter = new PostgresChannelWriter(_events, options);| await postgresChannelWriter.Initialize(CancellationToken.None);| Assert.True(SpinWait.SpinUntil(| () => connection!.State == ConnectionState.Open,| TimeSpan.FromSeconds(5)));| // Act| await postgresChannelWriter.DisposeAsync();| // Assert| SpinWait.SpinUntil(| () => connection!.State == ConnectionState.Closed,| TimeSpan.FromSeconds(5));| Assert.Equal(ConnectionState.Closed, connection!.State);| }"
      }
    ]
  },
  {
    "file": "PostgresMessageEnvelopeTests.cs",
    "methods": [
      {
        "name": "Format_Should_GenerateACorrectId",
        "body": "{| var hitCharacters = new bool[26];| var uniqueIds = new HashSet<string>();| for (var i = 0; i < 10_000; i++)| {| // arrange| var envelope =| PostgresMessageEnvelope.Create(\"test\", \"test\", _options.MaxMessagePayloadSize);| // act| var id = envelope.FormattedPayload[..24];| // assert| var bytes = Encoding.UTF8.GetBytes(id);| Assert.Equal(24, bytes.Length);| Assert.All(bytes, b => Assert.InRange(b, 97, 122));| Assert.All(id, c => Assert.InRange(c, 'a', 'z'));| for (var j = 0; j < id.Length; j++)| {| hitCharacters[id[j] - 'a'] = true;| }| uniqueIds.Add(id);| }| Assert.Equal(10_000, uniqueIds.Count);| Assert.All(hitCharacters, Assert.True);| }"
      },
      {
        "name": "Format_ShouldThrow_WithBigPayload",
        "body": "{| // arrange| var topic = \"test\";| var payload = new string('a', 100_000);| // act, assert| Assert.Throws<ArgumentException>(() =>| PostgresMessageEnvelope.Create(topic, payload, _options.MaxMessagePayloadSize));| }"
      },
      {
        "name": "Format_ShouldThrow_WithBigTopic",
        "body": "{| // arrange| var topic = new string('a', 100_000);| var payload = \"test\";| // act, assert| Assert.Throws<ArgumentException>(() =>| PostgresMessageEnvelope.Create(topic, payload, _options.MaxMessagePayloadSize));| }"
      },
      {
        "name": "Format_ShouldThrow_WithBigTopicAndPayload",
        "body": "{| // arrange| var topic = new string('a', 100_000);| var payload = new string('a', 100_000);| // act, assert| Assert.Throws<ArgumentException>(() =>| PostgresMessageEnvelope.Create(topic, payload, _options.MaxMessagePayloadSize));| }"
      }
    ]
  },
  {
    "file": "PostgresPubSubIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ResilientNpgsqlConnectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var onConnectCalled = false;| var onDisconnectCalled = false;| Func<CancellationToken, ValueTask> onConnect = _ =>| {| onConnectCalled = true;| return ValueTask.CompletedTask;| };| Func<CancellationToken, ValueTask> onDisconnect = _ =>| {| onDisconnectCalled = true;| return ValueTask.CompletedTask;| };| var resilientNpgsqlConnection =| new ResilientNpgsqlConnection(_events, ConnectionFactory, onConnect, onDisconnect);| // Act| await resilientNpgsqlConnection.Initialize(CancellationToken.None);| // Assert| Assert.True(onConnectCalled);| Assert.False(onDisconnectCalled);| Assert.NotNull(resilientNpgsqlConnection.Connection);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var onConnectCalled = false;| Func<CancellationToken, ValueTask> onConnect = _ =>| {| onConnectCalled = true;| return ValueTask.CompletedTask;| };| Func<CancellationToken, ValueTask> onDisconnect = _ => ValueTask.CompletedTask;| var resilientNpgsqlConnection = new ResilientNpgsqlConnection(| _events,| ConnectionFactoryAlreadyOpen,| onConnect,| onDisconnect);| // Act| await resilientNpgsqlConnection.Initialize(CancellationToken.None);| // Assert| Assert.True(onConnectCalled);| Assert.NotNull(resilientNpgsqlConnection.Connection);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var onDisconnectCalled = false;| Func<CancellationToken, ValueTask> onConnect = _ => ValueTask.CompletedTask;| Func<CancellationToken, ValueTask> onDisconnect = _ =>| {| onDisconnectCalled = true;| return ValueTask.CompletedTask;| };| var resilientNpgsqlConnection =| new ResilientNpgsqlConnection(_events, ConnectionFactory, onConnect, onDisconnect);| await resilientNpgsqlConnection.Initialize(CancellationToken.None);| // Act| await resilientNpgsqlConnection.DisposeAsync();| // Assert| Assert.True(onDisconnectCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| Func<CancellationToken, ValueTask> onConnect = _ => ValueTask.CompletedTask;| Func<CancellationToken, ValueTask> onDisconnect = _ => ValueTask.CompletedTask;| var resilientNpgsqlConnection =| new ResilientNpgsqlConnection(_events, ConnectionFactory, onConnect, onDisconnect);| await resilientNpgsqlConnection.Initialize(CancellationToken.None);| var connection = resilientNpgsqlConnection.Connection;| // Act| await connection!.CloseAsync();| // Assert| SpinWait.SpinUntil(| () => connection != resilientNpgsqlConnection.Connection,| TimeSpan.FromSeconds(1));| Assert.NotEqual(connection, resilientNpgsqlConnection.Connection);| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var onConnectCalled = 0;| var onDisconnectCalled = 0;| Func<CancellationToken, ValueTask> onConnect = _ =>| {| onConnectCalled++;| return ValueTask.CompletedTask;| };| Func<CancellationToken, ValueTask> onDisconnect = _ =>| {| onDisconnectCalled++;| return ValueTask.CompletedTask;| };| var resilientNpgsqlConnection =| new ResilientNpgsqlConnection(_events, ConnectionFactory, onConnect, onDisconnect);| await resilientNpgsqlConnection.Initialize(CancellationToken.None);| // Act| await resilientNpgsqlConnection.Connection!.CloseAsync();| // Assert| SpinWait.SpinUntil(| () => onDisconnectCalled == 1 && onConnectCalled == 2,| TimeSpan.FromSeconds(1));| Assert.Equal(1, onDisconnectCalled);| Assert.Equal(2, onConnectCalled);| }"
      }
    ]
  },
  {
    "file": "RabbitMQIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "RedisIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "DefaultJsonMessageSerializerTests.cs",
    "methods": [
      {
        "name": "DeserializeDefaultMessage",
        "body": "{| // arrange| var serializer = new DefaultJsonMessageSerializer();| var message = \"{\\\"body\\\":\\\"abc\\\",\\\"kind\\\":0}\";| // act| var messageEnvelope = serializer.Deserialize<string>(message);| // assert| Assert.Equal(MessageKind.Default, messageEnvelope.Kind);| Assert.Equal(\"abc\", messageEnvelope.Body);| }"
      },
      {
        "name": "DeserializeCompleteMessage",
        "body": "{| // arrange| var serializer = new DefaultJsonMessageSerializer();| var message = \"{\\\"kind\\\":1}\";| // act| var messageEnvelope = serializer.Deserialize<string>(message);| // assert| Assert.Equal(MessageKind.Completed, messageEnvelope.Kind);| }"
      },
      {
        "name": "DeserializeCompleteMessage_With_Enum_Body",
        "body": "{| // arrange| var serializer = new DefaultJsonMessageSerializer();| var message = \"{\\\"kind\\\":1}\";| // act| var messageEnvelope = serializer.Deserialize<Foo>(message);| // assert| Assert.Equal(MessageKind.Completed, messageEnvelope.Kind);| }"
      },
      {
        "name": "DeserializeCompleteMessage_With_Int_Body",
        "body": "{| // arrange| var serializer = new DefaultJsonMessageSerializer();| var message = \"{\\\"kind\\\":1}\";| // act| var messageEnvelope = serializer.Deserialize<int>(message);| // assert| Assert.Equal(MessageKind.Completed, messageEnvelope.Kind);| }"
      },
      {
        "name": "SerializeDefaultMessage",
        "body": "{| // arrange| var serializer = new DefaultJsonMessageSerializer();| var message = \"abc\";| // act| var serializedMessage = serializer.Serialize(message);| // assert| Snapshot| .Create()| .Add(serializedMessage)| .MatchInline(\"{\\\"body\\\":\\\"abc\\\",\\\"kind\\\":0}\");| }"
      }
    ]
  },
  {
    "file": "MessageEnvelopeTests.cs",
    "methods": [
      {
        "name": "CreateDefaultMessage",
        "body": "{| var message = new MessageEnvelope<string>(\"abc\");| Assert.Equal(\"abc\", message.Body);| Assert.Equal(MessageKind.Default, message.Kind);| }"
      },
      {
        "name": "CreateCompletedMessage",
        "body": "{| var message = new MessageEnvelope<string>(kind: MessageKind.Completed);| Assert.Null(message.Body);| Assert.Equal(MessageKind.Completed, message.Kind);| }"
      },
      {
        "name": "CreateDefaultMessage_Body_Null",
        "body": "{| Assert.Throws<ArgumentException>(| () => new MessageEnvelope<string>(null));| }"
      },
      {
        "name": "CreateCompletedMessage_Body_Not_Null",
        "body": "{| var envelope = new MessageEnvelope<string>(\"abc\", MessageKind.Completed);| Assert.Null(envelope.Body);| }"
      },
      {
        "name": "CreateCompletedMessage_Body_Not_Null_ValueType",
        "body": "{| var envelope = new MessageEnvelope<int>(5, MessageKind.Completed);| Assert.Equal(default, envelope.Body);| }"
      }
    ]
  },
  {
    "file": "NewtonsoftJsonMessageSerializerTests.cs",
    "methods": [
      {
        "name": "DeserializeCacheCompletedMessage",
        "body": "{| // arrange| var serializer = new NewtonsoftJsonMessageSerializer();| // act| var message = serializer.Deserialize<object>(| serializer.CompleteMessage);| // assert| Assert.Equal(MessageKind.Completed, message.Kind);| Assert.Null(message.Body);| }"
      },
      {
        "name": "SerializeDefaultMessage",
        "body": "{| // arrange| var serializer = new NewtonsoftJsonMessageSerializer();| var message = \"abc\";| // act| var serializedMessage = serializer.Serialize(message);| // assert| Snapshot| .Create()| .Add(serializedMessage)| .MatchInline(| \"{\\\"$type\\\":\\\"HotChocolate.Subscriptions.MessageEnvelope`1[[System.String, \" +| \"System.Private.CoreLib]], HotChocolate.Subscriptions\\\",\" +| \"\\\"Body\\\":\\\"abc\\\",\\\"Kind\\\":0}\");| }"
      }
    ]
  },
  {
    "file": "SubscriptionIntegrationTestBase.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage\", \"bar\", cts.Token);| await sender.CompleteAsync(\"OnMessage\");| var snapshot = new Snapshot();| await foreach (var response in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response);| }| snapshot.MatchInline(| @\"{| \"\"data\"\": {| \"\"onMessage\"\": \"\"bar\"\"| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription2>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage { bar } }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage\", new Foo { Bar = \"Hello\", }, cts.Token);| await sender.CompleteAsync(\"OnMessage\");| var snapshot = new Snapshot();| await foreach (var response in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response);| }| snapshot.MatchInline(| @\"{| \"\"data\"\": {| \"\"onMessage\"\": {| \"\"bar\"\": \"\"Hello\"\"| }| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage(arg: \\\"a\\\") }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage_a\", \"abc\", cts.Token);| await sender.CompleteAsync(\"OnMessage_a\");| var snapshot = new Snapshot();| await foreach (var response in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream A\");| }| snapshot.MatchInline(| @\"{| \"\"data\"\": {| \"\"onMessage\"\": \"\"abc\"\"| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result1 = await services.ExecuteRequestAsync(| \"subscription { onMessage(arg: \\\"a\\\") }\",| cancellationToken: cts.Token);| var result2 = await services.ExecuteRequestAsync(| \"subscription { onMessage(arg: \\\"a\\\") }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream1 = result1.ExpectResponseStream();| var results1 = responseStream1.ReadResultsAsync().ConfigureAwait(false);| await using var responseStream2 = result2.ExpectResponseStream();| var results2 = responseStream2.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage_a\", \"abc\", cts.Token);| await sender.CompleteAsync(\"OnMessage_a\");| var snapshot = new Snapshot();| await foreach (var response in results1.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream 1\");| }| await foreach (var response in results2.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream 2\");| }| snapshot.MatchInline(| @\"From Stream 1| ---------------| {| \"\"data\"\": {| \"\"onMessage\"\": \"\"abc\"\"| }| }| ---------------| From Stream 2| ---------------| {| \"\"data\"\": {| \"\"onMessage\"\": \"\"abc\"\"| }| }| ---------------| \");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result1 = await services.ExecuteRequestAsync(| \"subscription { onMessage(arg: \\\"a\\\") }\",| cancellationToken: cts.Token);| var result2 = await services.ExecuteRequestAsync(| \"subscription { onMessage(arg: \\\"b\\\") }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream1 = result1.ExpectResponseStream();| var results1 = responseStream1.ReadResultsAsync().ConfigureAwait(false);| await using var responseStream2 = result2.ExpectResponseStream();| var results2 = responseStream2.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage_a\", \"abc\", cts.Token);| await sender.CompleteAsync(\"OnMessage_a\");| await sender.SendAsync(\"OnMessage_b\", \"def\", cts.Token);| await sender.CompleteAsync(\"OnMessage_b\");| var snapshot = new Snapshot();| await foreach (var response in results1.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream 1\");| }| await foreach (var response in results2.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream 2\");| }| snapshot.MatchInline(| @\"From Stream 1| ---------------| {| \"\"data\"\": {| \"\"onMessage\"\": \"\"abc\"\"| }| }| ---------------| From Stream 2| ---------------| {| \"\"data\"\": {| \"\"onMessage\"\": \"\"def\"\"| }| }| ---------------| \");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage2(arg1: \\\"a\\\", arg2: \\\"b\\\") }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await sender.SendAsync(\"OnMessage2_a_b\", \"abc\", cts.Token);| await sender.CompleteAsync(\"OnMessage2_a_b\");| var snapshot = new Snapshot();| await foreach (var response in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| snapshot.Add(response, name: \"From Stream A\");| }| snapshot.MatchInline(| @\"{| \"\"data\"\": {| \"\"onMessage2\"\": \"\"abc\"\"| }| }\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription2>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage { bar } }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await Task.Delay(2000, cts.Token);| await sender.CompleteAsync(\"OnMessage\");| await foreach (var unused in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| Assert.Fail(\"Should not have any messages.\");| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(_timeout);| await using var services = CreateServer<Subscription3>();| var sender = services.GetRequiredService<ITopicEventSender>();| // act| var result = await services.ExecuteRequestAsync(| \"subscription { onMessage3 }\",| cancellationToken: cts.Token);| // we need to execute the read for the subscription to start receiving.| await using var responseStream = result.ExpectResponseStream();| var results = responseStream.ReadResultsAsync().ConfigureAwait(false);| // assert| await Task.Delay(2000, cts.Token);| await sender.CompleteAsync(\"OnMessage3\");| await foreach (var unused in results.WithCancellation(cts.Token).ConfigureAwait(false))| {| Assert.Fail(\"Should not have any messages.\");| }| }"
      }
    ]
  },
  {
    "file": "TopicFormatterTests.cs",
    "methods": [
      {
        "name": "Format_Topic_Without_Prefix",
        "body": "No body available"
      },
      {
        "name": "Format_Topic_With_Prefix",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "DataLoaderTests.cs",
    "methods": [
      {
        "name": "ClearCacheNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader(sp => new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>()));| var scope = services.BuildServiceProvider().CreateScope();| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| // act| void Verify() => dataLoader.ClearCache();| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearCacheAllEntries",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| loader.SetCacheEntry(\"Bar\", Task.FromResult<string?>(\"Baz\"));| // act| loader.ClearCache();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<string?> Verify() => loader.LoadAsync(default(string)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // first load.| (await loader.LoadAsync(key)).MatchSnapshot();| // act| var result = await loader.LoadAsync(key);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| Task<string?> Verify() => loader.LoadAsync(key, CancellationToken.None);| // assert| var task = Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify() => loader.LoadAsync(default(string[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<string>();| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers| .CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify()| => loader.LoadAsync(default(List<string>)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string>();| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| (await loader.LoadAsync(keys, CancellationToken.None)).MatchSnapshot();| // act| var result = await loader.LoadAsync(keys, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var repository = new Dictionary<string, string?>| {| { \"Foo\", \"Bar\" },| { \"Bar\", null },| { \"Baz\", \"Foo\" },| { \"Qux\", null },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string?>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| var loadResult = loader.LoadAsync(requestKeys);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = Errors.CreateKeysAndValuesMustMatch(4, 3);| var repository = new Dictionary<string, string>| {| { \"Foo\", \"Bar\" },| { \"Bar\", \"Baz\" },| { \"Baz\", \"Foo\" },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException.Message, actualException.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = new Exception(\"Foo\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| => throw expectedException;| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task = Assert.ThrowsAsync<Exception>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException, actualException);| }"
      },
      {
        "name": "RemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(default!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "RemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "RemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult<string?>(\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<string?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "SetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "SetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var value = Task.FromResult<string?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var first = Task.FromResult<string?>(\"Bar\");| var second = Task.FromResult<string?>(\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<object?> Verify() => loader.LoadAsync(default(object)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| Task<object?> Verify() => loader.LoadAsync(key);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify() => loader.LoadAsync(default(object[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new object[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify()| => loader.LoadAsync(default(List<object>)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult((object?)\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(null!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult((object?)\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<object?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| void Verify() => loader.SetCacheEntry(key, value);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderSetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| const string key = \"Foo\";| var first = Task.FromResult((object?)\"Bar\");| var second = Task.FromResult((object?)\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new PromiseCache(10);| var dataLoader1 = new TestDataLoader1(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity1 = await dataLoader1.LoadAsync(1, CancellationToken.None);| await Task.Delay(500);| // act| var dataLoader2 = new TestDataLoader2(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity2 = await dataLoader2.LoadAsync(2, CancellationToken.None);| // assert| Assert.Same(entity1, entity2);| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using System;| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| public sealed class Author| {| public int Id { get; set; }| public string Name { get; set; }| }| public sealed class Book| {| public int Id { get; set; }| public string Title { get; set; }| public int AuthorId { get; set; }| }| [ObjectType<Book>]| internal static partial class BookNode| {| [BindMember(nameof(Book.AuthorId))]| public static Task<Author?> GetAuthorAsync(| [Parent] Book book,| CancellationToken cancellationToken)| => default;| }| \"\"\").MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "ResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([LocalState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([ScopedState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([GlobalState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([LocalState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([ScopedState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([GlobalState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "TypeModuleSyntaxGeneratorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| [| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| internal class ATestBType: ObjectType<ATestB>;| internal record ATestB(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| internal class ATestAType : ObjectType<ATestA>;| internal record ATestA(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<ATestBAttr>]| internal static partial class ATestBAttrType;| internal record ATestBAttr(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<ATestAAttr>]| internal static partial class ATestAAttrType;| internal record ATestAAttr(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| internal class ATestBExtType : ObjectTypeExtension<ATestBExt>;| internal record ATestBExt(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| internal class ATestAExtType : ObjectTypeExtension<ATestAExt>;| internal record ATestAExt(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| [ExtendObjectType<ATestBExtAttr>]| internal class ATestBExtAttrType;| internal record ATestBExtAttr(int Id);| \"\"\",| \"\"\"| using HotChocolate.Types;| namespace TestNamespace;| [ExtendObjectType<ATestAExtAttr>]| internal class ATestAExtAttrType;| internal record ATestAExtAttr(int Id);| \"\"\",| \"\"\"| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using GreenDonut;| namespace TestNamespace;| internal class TestBDataLoader(| IBatchScheduler batchScheduler,| DataLoaderOptions options)| : BatchDataLoader<int, object>(batchScheduler, options)| {| protected override async Task<IReadOnlyDictionary<int, object>> LoadBatchAsync(| IReadOnlyList<int> ids,| CancellationToken cancellationToken)| {| return await Task.FromResult(new Dictionary<int, object>());| }| }| \"\"\",| \"\"\"| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using GreenDonut;| namespace TestNamespace;| internal class TestADataLoader(| IBatchScheduler batchScheduler,| DataLoaderOptions options)| : BatchDataLoader<int, object>(batchScheduler, options)| {| protected override async Task<IReadOnlyDictionary<int, object>> LoadBatchAsync(| IReadOnlyList<int> ids,| CancellationToken cancellationToken)| {| return await Task.FromResult(new Dictionary<int, object>());| }| }| \"\"\",| \"\"\"| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using GreenDonut;| namespace TestNamespace;| internal static class TestBDataLoaderAttr| {| [DataLoader]| public static async Task<IReadOnlyDictionary<int, object>> GetObjectByIdBAsync(| IReadOnlyList<int> ids,| CancellationToken cancellationToken)| {| return await Task.FromResult(new Dictionary<int, object>());| }| }| \"\"\",| \"\"\"| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using GreenDonut;| namespace TestNamespace;| internal static class TestADataLoaderAttr| {| [DataLoader]| public static async Task<IReadOnlyDictionary<int, object>> GetObjectByIdAAsync(| IReadOnlyList<int> ids,| CancellationToken cancellationToken)| {| return await Task.FromResult(new Dictionary<int, object>());| }| }| \"\"\"| ]).MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "ConnectionTests.cs",
    "methods": [
      {
        "name": "CreateConnection_PageInfoAndEdges_PassedCorrectly",
        "body": "{| // arrange| var pageInfo = new ConnectionPageInfo(true, true, \"a\", \"b\");| var edges = new List<Edge<string>>();| // act| var connection = new Connection(| edges,| pageInfo,| 1);| // assert| Assert.Equal(pageInfo, connection.Info);| Assert.Equal(edges, connection.Edges);| }"
      },
      {
        "name": "CreateConnection_PageInfoNull_ArgumentNullException",
        "body": "{| // arrange| var edges = new List<Edge<string>>();| // act| void Action() => new Connection<string>(| edges,| null!,| 1);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "CreateConnection_EdgesNull_ArgumentNullException",
        "body": "{| // arrange| var pageInfo = new ConnectionPageInfo(true, true, \"a\", \"b\");| // act| void Action() => new Connection<string>(| null!,| pageInfo,| 1);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "TotalCount_ReturnTotalCount",
        "body": "{| // arrange| var pageInfo = new ConnectionPageInfo(true, true, \"a\", \"b\");| var edges = new List<Edge<string>>();| // act| var connection = new Connection(edges, pageInfo, 2);| // assert| Assert.Equal(2, connection.TotalCount);| }"
      }
    ]
  },
  {
    "file": "CursorPagingQueryableExtensionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var mock = new Mock<IResolverContext>();| async Task Fail()| => await default(IQueryable<Person>)!.ApplyCursorPaginationAsync(mock.Object);| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| var mock = new Mock<IQueryable<Person>>();| async Task Fail() => await mock.Object.ApplyCursorPaginationAsync(default!);| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"{ persons { nodes { name } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"{ persons(first: 1) { nodes { name } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var mock = new Mock<IResolverContext>();| async Task Fail()| => await default(IEnumerable<Person>)!.ApplyCursorPaginationAsync(mock.Object);| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| var mock = new Mock<IEnumerable<Person>>();| async Task Fail() => await mock.Object.ApplyCursorPaginationAsync(default!);| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryEnumerable>()| .ExecuteRequestAsync(\"{ persons { nodes { name } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryEnumerable>()| .ExecuteRequestAsync(\"{ persons(first: 1) { nodes { name } } }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "CustomCursorHandlerTests.cs",
    "methods": [
      {
        "name": "Infer_Schema_Correctly_When_Connection_IsUsed",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ items { nodes } }\")| .Build();| // act| // assert| await SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .MakeExecutable()| .ExecuteAsync(request)| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "EdgeTests.cs",
    "methods": [
      {
        "name": "CreateEdge_CursorIsNull_ArgumentNullException_1",
        "body": "{| // arrange| // act| void Action() => new Edge<string>(\"abc\", default(string)!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "CreateEdge_CursorIsNull_ArgumentNullException_2",
        "body": "{| // arrange| // act| void Action() => new Edge<string>(\"abc\", default(Func<string, string>)!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "CreateEdge_CursorIsEmpty_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => new Edge<string>(\"abc\", string.Empty);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<UsersEdgeExtensions>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<UsersEdgeExtensions>()| .ExecuteRequestAsync(\"{ users { edges { test } } }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableCursorPagingProviderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(2);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"a\", t.Node);| Assert.Equal(0, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"b\", t.Node);| Assert.Equal(1, GetPositionFromCursor(t.Cursor));| });| Assert.False(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.True(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string> { \"f\", \"g\", };| var pagingDetails = new CursorPagingArguments(last: 1);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"g\", t.Node);| Assert.Equal(1, GetPositionFromCursor(t.Cursor));| });| Assert.True(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.False(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(last: 2);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"f\", t.Node);| Assert.Equal(5, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"g\", t.Node);| Assert.Equal(6, GetPositionFromCursor(t.Cursor));| });| Assert.True(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.False(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments();| var context = await MockContext.CreateContextAsync(pagingDetails);| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| pagingDetails = new CursorPagingArguments(after: connection.Info.StartCursor, first: 2);| context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"b\", t.Node);| Assert.Equal(1, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"c\", t.Node);| Assert.Equal(2, GetPositionFromCursor(t.Cursor));| });| Assert.True(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.True(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(first: 5);| var context = await MockContext.CreateContextAsync(pagingDetails);| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| pagingDetails = new CursorPagingArguments(before: connection.Info.EndCursor, last: 2);| context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"c\", t.Node);| Assert.Equal(2, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"d\", t.Node);| Assert.Equal(3, GetPositionFromCursor(t.Cursor));| });| Assert.True(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.True(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(first: 5);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.True(connection.Info.HasNextPage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(first: 7);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.False(connection.Info.HasNextPage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(first: 1);| var context = await MockContext.CreateContextAsync(pagingDetails);| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| pagingDetails = new CursorPagingArguments(after: connection.Info.EndCursor, first: 2);| context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.True(connection.Info.HasPreviousPage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = new List<string>| {| \"a\",| \"b\",| \"c\",| \"d\",| \"e\",| \"f\",| \"g\",| };| var pagingDetails = new CursorPagingArguments(first: 1);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.False(connection.Info.HasPreviousPage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = HotChocolate.Executable.From(| new[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", }.AsQueryable());| var pagingDetails = new CursorPagingArguments(2);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"a\", t.Node);| Assert.Equal(0, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"b\", t.Node);| Assert.Equal(1, GetPositionFromCursor(t.Cursor));| });| Assert.False(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.True(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var sourceType = typeInspector.GetType(typeof(List<string>));| IPagingProvider pagingProvider = new QueryableCursorPagingProvider();| var pagingHandler = pagingProvider.CreateHandler(sourceType, new());| var list = HotChocolate.Executable.From(| new[] { \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", }.AsQueryable());| var pagingDetails = new CursorPagingArguments(2);| var context = await MockContext.CreateContextAsync(pagingDetails);| // act| pagingHandler.PublishPagingArguments(context);| var connection = (Connection)await pagingHandler.SliceAsync(context, list);| // assert| Assert.Collection(connection.Edges,| t =>| {| Assert.Equal(\"a\", t.Node);| Assert.Equal(0, GetPositionFromCursor(t.Cursor));| },| t =>| {| Assert.Equal(\"b\", t.Node);| Assert.Equal(1, GetPositionFromCursor(t.Cursor));| });| Assert.False(| connection.Info.HasPreviousPage,| \"HasPreviousPage\");| Assert.True(| connection.Info.HasNextPage,| \"HasNextPage\");| }"
      }
    ]
  },
  {
    "file": "UsePagingAttributeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .Services| .BuildServiceProvider()| .GetSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .Services| .BuildServiceProvider()| .ExecuteRequestAsync(\"{ foos(first: 1) { nodes { bar } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddType<IHasFoos>()| .ModifyOptions(o => o.StrictValidation = false)| .Services| .BuildServiceProvider()| .GetSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddType<QueryExtension>()| .Services| .BuildServiceProvider()| .GetSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddType<QueryExtension>()| .Services| .BuildServiceProvider()| .ExecuteRequestAsync(\"{ foos(first: 1) { nodes { bar } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query1>()| .AddType<Query1Extensions>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query1>()| .AddType<Query1Extensions>()| .ExecuteRequestAsync(\"{ foos(first: 1) { nodes { bar } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| try| {| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddType<NoNodeType>()| .BuildSchemaAsync();| }| catch (SchemaException ex)| {| new| {| ex.Errors[0].Message,| ex.Errors[0].Code,| }.MatchSnapshot();| }| }"
      },
      {
        "name": "UsePagingAttribute_Can_Use_Defaults",
        "body": "{| var attr = new UsePagingAttribute();| Assert.True(attr.AllowBackwardPagination);| Assert.True(attr.InferConnectionNameFromField);| Assert.False(attr.RequirePagingBoundaries);| }"
      }
    ]
  },
  {
    "file": "FromJsonDescriptorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"bar\").Type<StringType>().FromJson();| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { bar } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"bar\": \"abc\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<StringType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": \"abc\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<StringType>()| .FromJson(t => t.GetProperty(\"bar\").GetString());| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": \"abc\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "FromJson_1_Descriptor_Is_Null",
        "body": "{| void Fail() => JsonObjectTypeExtensions.FromJson(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "FromJson_2_Descriptor_Is_Null",
        "body": "{| void Fail() => JsonObjectTypeExtensions.FromJson(null!, element => \"\");| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "FromJson_2_Resolver_Is_Null",
        "body": "{| var mock = new Mock<IObjectFieldDescriptor>();| void Fail() => JsonObjectTypeExtensions.FromJson(| mock.Object,| default(Func<JsonElement, string>)!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddJsonSupport_Builder_Is_Null",
        "body": "{| void Fail() => JsonRequestExecutorBuilderExtensions.AddJsonSupport(null!);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<DateTimeType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<DateType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<LongType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<IntType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<ShortType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<UrlType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<UuidType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<FloatType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<DecimalType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNullProp>()| .AddObjectType(| d =>| {| d.Name(\"Foo\");| d.Field(\"baz\").Type<BooleanType>().FromJson(\"bar\");| })| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"baz\": null| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "FromJsonDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| foo: Foo| }| type Foo {| bar: String @fromJson| }| \")| .BindRuntimeType<Query>()| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { bar } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| foo: Foo| }| type Foo {| baz: String @fromJson(name: \"\"bar\"\")| }| \")| .BindRuntimeType<Query>()| .AddJsonSupport()| .ExecuteRequestAsync(\"{ foo { baz } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(@\"| type Query {| foo: Foo| }| type Foo {| string: String @fromJson| id: ID @fromJson| boolean: Boolean @fromJson| short: Short @fromJson| int: Int @fromJson| long: Long @fromJson| float: Float @fromJson| decimal: Decimal @fromJson| url: URL @fromJson| uuid: UUID @fromJson| byte: Byte @fromJson| byteArray: ByteArray @fromJson| date: Date @fromJson| dateTime: DateTime @fromJson| }| \")| .AddResolver(\"Query\", \"foo\", _ => JsonDocument.Parse(| @\"{| \"\"string\"\": \"\"string\"\",| \"\"id\"\": \"\"id\"\",| \"\"boolean\"\": true,| \"\"short\"\": 1,| \"\"int\"\": 2,| \"\"long\"\": 3,| \"\"float\"\": 1.2,| \"\"decimal\"\": 3.4,| \"\"url\"\": \"\"http://abc\"\",| \"\"uuid\"\":\"\"2d25e877-aecc-4a9e-a191-cf75def49e42\"\",| \"\"byte\"\": 1,| \"\"byteArray\"\": \"\"Zm9v\"\",| \"\"date\"\": \"\"1979-12-20\"\",| \"\"dateTime\"\": \"\"1979-12-20T15:00Z\"\"| }\").RootElement)| .AddJsonSupport()| .ExecuteRequestAsync(| @\"{| foo {| string| id| boolean| short| int| long| float| decimal| url| uuid| byte| byteArray| date| dateTime| }| }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ErrorMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new InvalidOperationException(),| field => field.Error<InvalidOperationException>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new CustomException(),| field => field.Error<CustomException>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new InvalidOperationException(),| field => field.Error<CustomError>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new AggregateException(| new InvalidOperationException(),| new NullReferenceException(),| new ArgumentException()),| field => field| .Error<CustomError>()| .Error<CustomNullRef>()| .Error<ArgumentException>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new InvalidOperationException(),| field => field.Error<CustomErrorWithFactory>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomErrorWithMultipleFactory>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new InvalidOperationException(),| field => field.Error<CustomErrorWithMultipleFactoriesOfDifferentType>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomErrorWithMultipleFactoriesOfDifferentType>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomErrorNonStatic>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomErrorPayloadErrorFactory>());| // Act| var res = await executor.ExecuteAsync(_query);| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomInterfaceError>(),| b => b.AddErrorInterfaceType<CustomErrorInterfaceType>());| // Act| var res = await executor.ExecuteAsync(@\"| mutation {| throw {| errors {| __typename| ... on CustomInterfaceError {| message| code| }| }| }| }\");| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var executor =| await BuildSchemaAsync(| () => throw new NullReferenceException(),| field => field.Error<CustomInterfaceError>(),| b => b.AddErrorInterfaceType<IUserError>());| // Act| var res = await executor.ExecuteAsync(@\"| mutation {| throw {| errors {| __typename| ... on IUserError {| message| code| }| }| }| }\");| // Assert| await Snapshot.Create()| .Add(res, \"result:\")| .Add(executor.Schema, \"schema:\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "DateTimeZoneTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: utc }\");| Assert.Equal(\"UTC\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsRome",
        "body": "{| var result = _testExecutor.Execute(\"query { test: rome }\");| Assert.Equal(\"Europe/Rome\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsChihuahua",
        "body": "{| var result = _testExecutor.Execute(\"query { test: chihuahua }\");| Assert.Equal(\"America/Chihuahua\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: DateTimeZone!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"Europe/Amsterdam\" }, })| .Build());| Assert.Equal(\"Europe/Amsterdam\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: DateTimeZone!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"Europe/Hamster\" }, })| .Build());| Assert.Null(Assert.IsType<OperationResult>(result).Data);| Assert.Single(Assert.IsType<OperationResult>(result).Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"Europe/Amsterdam\\\") }\")| .Build());| Assert.Equal(\"Europe/Amsterdam\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"Europe/Hamster\\\") }\")| .Build());| Assert.Null(Assert.IsType<OperationResult>(result).Data);| Assert.Single(Assert.IsType<OperationResult>(result).Errors!);| Assert.Null(Assert.IsType<OperationResult>(result).Errors!.First().Code);| Assert.Equal(| \"Unable to deserialize string to DateTimeZone\",| Assert.IsType<OperationResult>(result).Errors!.First().Message);| }"
      }
    ]
  },
  {
    "file": "DurationTypeJsonRoundtripIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturnsSerializedDataWithDecimals",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithDecimals }\");| Assert.Equal(\"2959:53:10.019\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithNegativeValue",
        "body": "{| var result = _testExecutor.Execute(\"query { test: negativeWithDecimals }\");| Assert.Equal(\"-2959:53:10.019\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutDecimals",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithoutDecimals }\");| Assert.Equal(\"2959:53:10\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutSeconds",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithoutSeconds }\");| Assert.Equal(\"2959:53:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithoutMinutes }\");| Assert.Equal(\"2959:00:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithRoundtrip",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithRoundtrip }\");| Assert.Equal(\"2978:01:10\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"238:01:00.019\" }, })| .Build());| Assert.Equal(\"238:11:00.019\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithoutDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"238:01:00\" }, })| .Build());| Assert.Equal(\"238:11:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithoutLeadingZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"238:01:00\" }, })| .Build());| Assert.Equal(\"238:11:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithNegativeValue",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"-238:01:00\" }, })| .Build());| Assert.Equal(\"-237:51:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationDoesntParseInputWithPlusSign",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+09:22:01:00\" }, })| .Build());| Assert.Null(Assert.IsType<OperationResult>(result).Data);| Assert.Single(Assert.IsType<OperationResult>(result).Errors!);| }"
      },
      {
        "name": "MutationParsesLiteralWithDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"238:01:00.019\\\") }\")| .Build());| Assert.Equal(\"238:11:00.019\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithoutDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"238:01:00\\\") }\")| .Build());| Assert.Equal(\"238:11:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithoutLeadingZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"238:01:00\\\") }\")| .Build());| Assert.Equal(\"238:11:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithNegativeValue",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"-238:01:00\\\") }\")| .Build());| Assert.Equal(\"-237:51:00\", Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "MutationDoesntParseLiteralWithPlusSign",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+238:01:00\\\") }\")| .Build());| Assert.Null(Assert.IsType<OperationResult>(result).Data);| Assert.Single(Assert.IsType<OperationResult>(result).Errors!);| }"
      }
    ]
  },
  {
    "file": "DurationTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturnsSerializedDataWithDecimals",
        "body": "{| var result = _testExecutor.Execute(\"query { test: positiveWithDecimals }\");| Assert.Equal(\"123:07:53:10.019\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithNegativeValue",
        "body": "{| var result = _testExecutor.Execute(\"query{test: negativeWithDecimals}\");| Assert.Equal(\"-123:07:53:10.019\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutDecimals",
        "body": "{| var result = _testExecutor.Execute(\"query{test: positiveWithoutDecimals}\");| Assert.Equal(\"123:07:53:10\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutSeconds",
        "body": "{| var result = _testExecutor.Execute(\"query{test:positiveWithoutSeconds}\");| Assert.Equal(\"123:07:53:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithoutMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query{test:positiveWithoutMinutes}\");| Assert.Equal(\"123:07:00:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSerializedDataWithRoundtrip",
        "body": "{| var result = _testExecutor.Execute(\"query{test:positiveWithRoundtrip}\");| Assert.Equal(\"124:02:01:10\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"09:22:01:00.019\" }, })| .Build());| Assert.Equal(\"9:22:11:00.019\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithoutDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"09:22:01:00\" }, })| .Build());| Assert.Equal(\"9:22:11:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithoutLeadingZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"9:22:01:00\" }, })| .Build());| Assert.Equal(\"9:22:11:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesInputWithNegativeValue",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"-9:22:01:00\" }, })| .Build());| Assert.Equal(\"-9:21:51:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationDoesntParseInputWithPlusSign",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+09:22:01:00\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationDoesntParseInputWithOverflownHours",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Duration!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"9:26:01:00\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationParsesLiteralWithDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"09:22:01:00.019\\\") }\")| .Build());| Assert.Equal(\"9:22:11:00.019\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithoutDecimals",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"09:22:01:00\\\") }\")| .Build());| Assert.Equal(\"9:22:11:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithoutLeadingZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"09:22:01:00\\\") }\")| .Build());| Assert.Equal(\"9:22:11:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesLiteralWithNegativeValue",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"-9:22:01:00\\\") }\")| .Build());| Assert.Equal(\"-9:21:51:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationDoesntParseLiteralWithPlusSign",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+09:22:01:00\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationDoesntParseLiteralWithOverflownHours",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"9:26:01:00\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new DurationType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "DurationType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var durationType = new DurationType(| DurationPattern.Roundtrip,| DurationPattern.JsonRoundtrip);| durationType.Description.MatchInlineSnapshot(| \"\"\"| Represents a fixed (and calendar-independent) length of time.| Allowed patterns:| - `-D:hh:mm:ss.sssssssss`| - `-hh:mm:ss.sssssssss`| Examples:| - `-1:20:00:00.999999999`| - `-44:00:00.999999999`| \"\"\");| }"
      },
      {
        "name": "DurationType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var durationType = new DurationType(| DurationPattern.Create(\"mm\", CultureInfo.InvariantCulture));| durationType.Description.MatchInlineSnapshot(| \"Represents a fixed (and calendar-independent) length of time.\");| }"
      }
    ]
  },
  {
    "file": "InstantTypeDateTimeOffsetIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(| \"2020-02-20T17:42:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21T17:42:59.000001234Z\" }, })| .Build());| Assert.Equal(| \"2020-02-21T17:52:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesParseAnIncorrectExtendedVariableAsDateTimeOffset",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59\" }, })| .Build());| Assert.Equal(\"2020-02-20T17:52:59Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59.000001234Z\\\") }\")| .Build());| Assert.Equal(| \"2020-02-20T17:52:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesParseIncorrectExtendedLiteralAsDateTimeOffset",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Equal(\"2020-02-20T17:52:59Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      }
    ]
  },
  {
    "file": "InstantTypeGeneralIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"2020-02-20T17:42:59Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21T17:42:59Z\" }, })| .Build());| Assert.Equal(\"2020-02-21T17:52:59Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59Z\\\") }\")| .Build());| Assert.Equal(\"2020-02-20T17:52:59Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors!.First().Code);| Assert.Equal(| \"Unable to deserialize string to Instant\",| result.ExpectOperationResult().Errors!.First().Message);| }"
      }
    ]
  },
  {
    "file": "InstantTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(| \"2020-02-20T17:42:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21T17:42:59.000001234Z\" }, })| .Build());| Assert.Equal(| \"2020-02-21T17:52:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Instant!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59.000001234Z\\\") }\")| .Build());| Assert.Equal(| \"2020-02-20T17:52:59.000001234Z\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Instant\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new InstantType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "InstantType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var instantType = new InstantType(InstantPattern.General, InstantPattern.ExtendedIso);| instantType.Description.MatchInlineSnapshot(| \"\"\"| Represents an instant on the global timeline, with nanosecond resolution.| Allowed patterns:| - `YYYY-MM-DDThh:mm:ss±hh:mm`| - `YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm`| Examples:| - `2000-01-01T20:00:00Z`| - `2000-01-01T20:00:00.999999999Z`| \"\"\");| }"
      },
      {
        "name": "InstantType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var instantType = new InstantType(| InstantPattern.Create(\"MM\", CultureInfo.InvariantCulture));| instantType.Description.MatchInlineSnapshot(| \"Represents an instant on the global timeline, with nanosecond resolution.\");| }"
      }
    ]
  },
  {
    "file": "IsoDayOfWeekTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturnsMonday",
        "body": "{| var result = _testExecutor.Execute(\"query { test: monday }\");| Assert.Equal(1, result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsSunday",
        "body": "{| var result = _testExecutor.Execute(\"query { test: sunday }\");| Assert.Equal(7, result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsFriday",
        "body": "{| var result = _testExecutor.Execute(\"query { test: friday }\");| Assert.Equal(5, result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryDoesntReturnNone",
        "body": "{| var result = _testExecutor.Execute(\"query { test: none }\");| Assert.Null(result.ExpectOperationResult().Data);| Assert.NotEmpty(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationParsesMonday",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: IsoDayOfWeek!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", 1 }, })| .Build());| Assert.Equal(2, result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationParsesSunday",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: IsoDayOfWeek!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", 7 }, })| .Build());| Assert.Equal(1, result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "MutationDoesntParseZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: IsoDayOfWeek!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", 0 }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationDoesntParseEight",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: IsoDayOfWeek!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", 8 }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "MutationDoesntParseNegativeNumbers",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: IsoDayOfWeek!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", -2 }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      }
    ]
  },
  {
    "file": "LocalDateTimeTypeFullRoundtripIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(| \"2020-02-07T17:42:59.000001234 (Julian)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21T17:42:59.000001234 (Julian)\" }, })| .Build());| Assert.Equal(| \"2020-02-21T17:52:59.000001234 (Julian)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59Z\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59.000001234 (Julian)\\\") }\")| .Build());| Assert.Equal(| \"2020-02-20T17:52:59.000001234 (Julian)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59Z\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "LocalDateTimeTypeGeneralIsoIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"2020-02-07T17:42:59\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21T17:42:59\" }, })| .Build());| Assert.Equal(\"2020-02-21T17:52:59\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59Z\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Equal(\"2020-02-20T17:52:59\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59Z\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "LocalDateTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"2020-02-07T17:42:59.000001234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?> { { \"arg\", \"2020-02-21T17:42:59.000001234\" }, })| .Build());| Assert.Equal(\"2020-02-21T17:52:59.000001234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDateTime!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?> { { \"arg\", \"2020-02-20T17:42:59.000001234Z\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59.000001234\\\") }\")| .Build());| Assert.Equal(\"2020-02-20T17:52:59.000001234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59.000001234Z\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new LocalDateTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "LocalDateTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var localDateTimeType = new LocalDateTimeType(| LocalDateTimePattern.ExtendedIso,| LocalDateTimePattern.FullRoundtrip);| localDateTimeType.Description.MatchInlineSnapshot(| \"\"\"| A date and time in a particular calendar system.| Allowed patterns:| - `YYYY-MM-DDThh:mm:ss.sssssssss`| - `YYYY-MM-DDThh:mm:ss.sssssssss (calendar)`| Examples:| - `2000-01-01T20:00:00.999`| - `2000-01-01T20:00:00.999999999 (ISO)`| \"\"\");| }"
      },
      {
        "name": "LocalDateTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var localDateTimeType = new LocalDateTimeType(| LocalDateTimePattern.Create(\"MM\", CultureInfo.InvariantCulture));| localDateTimeType.Description.MatchInlineSnapshot(| \"A date and time in a particular calendar system.\");| }"
      }
    ]
  },
  {
    "file": "LocalDateTypeFullRoundtripIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"5780-05-25 (Hebrew Civil)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| IExecutionResult? result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-02-21 (Hebrew Civil)\" }, })| .Build());| Assert.Equal(\"2020-02-24 (Hebrew Civil)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| IExecutionResult? result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?> { { \"arg\", \"2020-02-20T17:42:59 (Hebrew Civil)\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20 (Hebrew Civil)\\\") }\")| .Build());| Assert.Equal(\"2020-02-23 (Hebrew Civil)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59 (Hebrew Civil)\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDate\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "LocalDateTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"5780-05-25\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21\" }, })| .Build());| Assert.Equal(\"2020-02-24\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20\\\") }\")| .Build());| Assert.Equal(\"2020-02-23\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDate\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new LocalDateType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "LocalDateType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var localDateType = new LocalDateType(LocalDatePattern.Iso, LocalDatePattern.FullRoundtrip);| localDateType.Description.MatchInlineSnapshot(| \"\"\"| LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day.| Allowed patterns:| - `YYYY-MM-DD`| - `YYYY-MM-DD (calendar)`| Examples:| - `2000-01-01`| - `2000-01-01 (ISO)`| \"\"\");| }"
      },
      {
        "name": "LocalDateType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var localDateType = new LocalDateType(| LocalDatePattern.Create(\"MM\", CultureInfo.InvariantCulture));| localDateType.Description.MatchInlineSnapshot(| \"LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day.\");| }"
      }
    ]
  },
  {
    "file": "LocalTimeTypeGeneralIsoIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"12:42:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| IExecutionResult? result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"12:42:13\" }, })| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| IExecutionResult? result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"12:42\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42:13\\\") }\")| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "LocalTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"12:42:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42:13.031011234\" }, })| .Build());| Assert.Equal(\"12:52:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithoutTicks",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42:13\" }, })| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42:13.031011234\\\") }\")| .Build());| Assert.Equal(\"12:52:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithoutTick",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42:13\\\") }\")| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new LocalTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "LocalTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var localTimeType = new LocalTimeType(| LocalTimePattern.GeneralIso,| LocalTimePattern.ExtendedIso);| localTimeType.Description.MatchInlineSnapshot(| \"\"\"| LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.| Allowed patterns:| - `hh:mm:ss`| - `hh:mm:ss.sssssssss`| Examples:| - `20:00:00`| - `20:00:00.999`| \"\"\");| }"
      },
      {
        "name": "LocalTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var localTimeType = new LocalTimeType(| LocalTimePattern.Create(\"mm\", CultureInfo.InvariantCulture));| localTimeType.Description.MatchInlineSnapshot(| \"LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.\");| }"
      }
    ]
  },
  {
    "file": "OffsetDateTimeTypeExtendedIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"2020-12-31T18:30:13.000001234+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"2020-12-31T18:30:13.000001234+02:30\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13+02\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13+02:35\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02:35\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetDateTimeTypeGeneralIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"2020-12-31T18:30:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"2020-12-31T18:30:13+02:30\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13+02\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13+02:35\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02:35\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetDateTimeTypeRfc3339IntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(| \"2020-12-31T18:30:13.000001234+02:00\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(| \"2020-12-31T18:30:13.000001234+02:30\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13.000001234+02:00\" }, })| .Build());| Assert.Equal(| \"2020-12-31T18:40:13.000001234+02:00\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13+02:35\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T18:30:13\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13.000001234+02:00\\\") }\")| .Build());| Assert.Equal(| \"2020-12-31T18:40:13.000001234+02:00\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02:35\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetDateTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"2020-12-31T18:30:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"2020-12-31T18:30:13+02:30\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13+02\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13+02:35\" }, })| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"2020-12-31T18:30:13\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13+02:35\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T18:40:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T18:30:13\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new OffsetDateTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "OffsetDateTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var offsetDateTimeType = new OffsetDateTimeType(| OffsetDateTimePattern.ExtendedIso,| OffsetDateTimePattern.FullRoundtrip);| offsetDateTimeType.Description.MatchInlineSnapshot(| \"\"\"| A local date and time in a particular calendar system, combined with an offset from UTC.| Allowed patterns:| - `YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm`| - `YYYY-MM-DDThh:mm:ss.sssssssss±hh:mm (calendar)`| Examples:| - `2000-01-01T20:00:00.999Z`| - `2000-01-01T20:00:00.999Z (ISO)`| \"\"\");| }"
      },
      {
        "name": "OffsetDateTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var offsetDateTimeType = new OffsetDateTimeType(| OffsetDateTimePattern.Create(\"MM\", CultureInfo.InvariantCulture, new OffsetDateTime()));| offsetDateTimeType.Description.MatchInlineSnapshot(| \"A local date and time in a particular calendar system, combined with an offset from UTC.\");| }"
      }
    ]
  },
  {
    "file": "OffsetDateTypeFullRoundtripIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"2020-12-31+02 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"2020-12-31+02:35 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31+02 (Gregorian)\" }, })| .Build());| Assert.Equal(\"2020-12-31+02 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31+02:35 (Gregorian)\" }, })| .Build());| Assert.Equal(\"2020-12-31+02:35 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31 (Gregorian)\" }, })| .Build());| Assert.Null(result.ExpectOperationResult()!.Data);| Assert.Single(result.ExpectOperationResult()!.Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31+02 (Gregorian)\\\") }\")| .Build());| Assert.Equal(\"2020-12-31+02 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31+02:35 (Gregorian)\\\") }\")| .Build());| Assert.Equal(\"2020-12-31+02:35 (Gregorian)\", result.ExpectOperationResult()!.Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31 (Gregorian)\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult()!.Data);| Assert.Single(result.ExpectOperationResult()!.Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDate\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetDateTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"2020-12-31+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"2020-12-31+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31+02\" }, })| .Build());| Assert.Equal(\"2020-12-31+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31+02:35\" }, })| .Build());| Assert.Equal(\"2020-12-31+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31+02\\\") }\")| .Build());| Assert.Equal(\"2020-12-31+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31+02:35\\\") }\")| .Build());| Assert.Equal(\"2020-12-31+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetDate\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new OffsetDateType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "OffsetDateType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var offsetDateType = new OffsetDateType(| OffsetDatePattern.GeneralIso,| OffsetDatePattern.FullRoundtrip);| offsetDateType.Description.MatchInlineSnapshot(| \"\"\"| A combination of a LocalDate and an Offset, to represent a date at a specific offset from UTC but without any time-of-day information.| Allowed patterns:| - `YYYY-MM-DD±hh:mm`| - `YYYY-MM-DD±hh:mm (calendar)`| Examples:| - `2000-01-01Z`| - `2000-01-01Z (ISO)`| \"\"\");| }"
      },
      {
        "name": "OffsetDateType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var offsetDateType = new OffsetDateType(| OffsetDatePattern.Create(\"MM\", CultureInfo.InvariantCulture, new OffsetDate()));| offsetDateType.Description.MatchInlineSnapshot(| \"A combination of a LocalDate and an Offset, to represent a date at a specific offset from UTC but without any time-of-day information.\");| }"
      }
    ]
  },
  {
    "file": "OffsetTimeTypeExtendedIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"18:30:13.010011234+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234+02\" }, })| .Build());| Assert.Equal(\"18:30:13.010011234+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234+02:35\" }, })| .Build());| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234+02\\\") }\")| .Build());| Assert.Equal(\"18:30:13.010011234+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234+02:35\\\") }\")| .Build());| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetTimeTypeRfc3339IntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"18:30:13.010011234+02:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234+02:00\" }, })| .Build());| Assert.Equal(\"18:30:13.010011234+02:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234+02:35\" }, })| .Build());| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13.010011234+02\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234+02:00\\\") }\")| .Build());| Assert.Equal(\"18:30:13.010011234+02:00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234+02:35\\\") }\")| .Build());| Assert.Equal(\"18:30:13.010011234+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13.010011234+02\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"18:30:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"18:30:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13+02\" }, })| .Build());| Assert.Equal(\"18:30:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13+02:35\" }, })| .Build());| Assert.Equal(\"18:30:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: OffsetTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13+02\\\") }\")| .Build());| Assert.Equal(\"18:30:13+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13+02:35\\\") }\")| .Build());| Assert.Equal(\"18:30:13+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to OffsetTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new OffsetTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "OffsetTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var offsetTimeType = new OffsetTimeType(| OffsetTimePattern.GeneralIso,| OffsetTimePattern.ExtendedIso);| offsetTimeType.Description.MatchInlineSnapshot(| \"\"\"| A combination of a LocalTime and an Offset, to represent a time-of-day at a specific offset from UTC but without any date information.| Allowed patterns:| - `hh:mm:ss±hh:mm`| - `hh:mm:ss.sssssssss±hh:mm`| Examples:| - `20:00:00Z`| - `20:00:00.999Z`| \"\"\");| }"
      },
      {
        "name": "OffsetTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var offsetTimeType = new OffsetTimeType(| OffsetTimePattern.Create(\"mm\", CultureInfo.InvariantCulture, new OffsetTime()));| offsetTimeType.Description.MatchInlineSnapshot(| \"A combination of a LocalTime and an Offset, to represent a time-of-day at a specific offset from UTC but without any date information.\");| }"
      }
    ]
  },
  {
    "file": "OffsetTypeGeneralInvariantWithoutZIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithZ",
        "body": "{| var result = _testExecutor.Execute(\"query { test: zOffset }\");| Assert.Equal(\"+00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+02\" }, })| .Build());| Assert.Equal(\"+03:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+02:35\" }, })| .Build());| Assert.Equal(\"+03:40\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13+02\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+02\\\") }\")| .Build());| Assert.Equal(\"+03:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+02:35\\\") }\")| .Build());| Assert.Equal(\"+03:40\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithZero",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+00\\\") }\")| .Build());| Assert.Equal(\"+01:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseLiteralWithZ",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"Z\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Offset\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13+02\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Offset\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "OffsetTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hours }\");| Assert.Equal(\"+02\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithMinutes",
        "body": "{| var result = _testExecutor.Execute(\"query { test: hoursAndMinutes }\");| Assert.Equal(\"+02:35\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsWithZ",
        "body": "{| var result = _testExecutor.Execute(\"query { test: zOffset }\");| Assert.Equal(\"Z\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+02\" }, })| .Build());| Assert.Equal(\"+03:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"+02:35\" }, })| .Build());| Assert.Equal(\"+03:40\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Offset!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"18:30:13+02\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+02\\\") }\")| .Build());| Assert.Equal(\"+03:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithMinutes",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"+02:35\\\") }\")| .Build());| Assert.Equal(\"+03:40\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithZ",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"Z\\\") }\")| .Build());| Assert.Equal(\"+01:05\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"18:30:13+02\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Offset\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new OffsetType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "OffsetType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var offsetType = new OffsetType(| OffsetPattern.GeneralInvariant,| OffsetPattern.GeneralInvariantWithZ);| offsetType.Description.MatchInlineSnapshot(| \"\"\"| An offset from UTC in seconds.| A positive value means that the local time is ahead of UTC (e.g. for Europe); a negative value means that the local time is behind UTC (e.g. for America).| Allowed patterns:| - `±hh:mm:ss`| - `Z`| Examples:| - `+02:30:00`| - `Z`| \"\"\");| }"
      },
      {
        "name": "OffsetType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var offsetType = new OffsetType(| OffsetPattern.Create(\"mm\", CultureInfo.InvariantCulture));| offsetType.Description.MatchInlineSnapshot(| \"\"\"| An offset from UTC in seconds.| A positive value means that the local time is ahead of UTC (e.g. for Europe); a negative value means that the local time is behind UTC (e.g. for America).| \"\"\");| }"
      }
    ]
  },
  {
    "file": "PeriodTypeNormalizingIsoIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"P-17DT-23H-59M-59.9999861S\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Period!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"P-17DT-23H-59M-59.9999861S\" }, })| .Build());| Assert.Equal(\"P-18DT-9M-59.9999861S\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Period!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"-P-17DT-23H-59M-59.9999861S\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"P-17DT-23H-59M-59.9999861S\\\") }\")| .Build());| Assert.Equal(\"P-18DT-9M-59.9999861S\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"-P-17DT-23H-59M-59.9999861S\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Period\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "PeriodTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"P-3W3DT139t\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Period!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"P-3W15DT139t\" }, })| .Build());| Assert.Equal(\"P-3W15DT-10M139t\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: Period!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"-3W3DT-10M139t\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"P-3W15DT139t\\\") }\")| .Build());| Assert.Equal(\"P-3W15DT-10M139t\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"-3W3DT-10M139t\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to Period\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new PeriodType([]);| Assert.Throws<SchemaException>(Call);| }"
      }
    ]
  },
  {
    "file": "ZonedDateTimeTypeCustomIntegrationTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: rome }\");| Assert.Equal(| \"2020-12-31T18:30:13 Asia/Kathmandu (+05:45)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: utc }\");| Assert.Equal(\"2020-12-31T18:30:13 UTC (+00)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T19:30:13 Asia/Kathmandu (+05:45)\" }, })| .Build());| Assert.Equal(| \"2020-12-31T19:40:13 Asia/Kathmandu (+05:45)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithUTC",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T19:30:13 UTC (+00)\" }, })| .Build());| Assert.Equal(\"2020-12-31T19:40:13 UTC (+00)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-12-31T19:30:13 (UTC)\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(| @\"mutation| {| test(arg: \"\"2020-12-31T19:30:13 Asia/Kathmandu (+05:45)\"\")| }\")| .Build());| Assert.Equal(| \"2020-12-31T19:40:13 Asia/Kathmandu (+05:45)\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithUtc",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T19:30:13 UTC (+00)\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T19:40:13 UTC (+00)\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T19:30:13 (UTC)\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to ZonedDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      }
    ]
  },
  {
    "file": "ZonedDateTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: rome }\");| Assert.Equal(| \"2020-12-31T18:30:13 Asia/Kathmandu +05:45\",| Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "QueryReturnsUtc",
        "body": "{| var result = _testExecutor.Execute(\"query { test: utc }\");| Assert.Equal(| \"2020-12-31T18:30:13 UTC +00\",| Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"arg\", \"2020-12-31T19:30:13 Asia/Kathmandu +05:45\" },| })| .Build());| Assert.Equal(| \"2020-12-31T19:40:13 Asia/Kathmandu +05:45\",| Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithUtc",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"arg\", \"2020-12-31T19:30:13 UTC +00\" }| })| .Build());| Assert.Equal(| \"2020-12-31T19:40:13 UTC +00\",| Assert.IsType<OperationResult>(result).Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: ZonedDateTime!) { test(arg: $arg) }\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"arg\", \"2020-12-31T19:30:13 UTC\" },| })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation{test(arg:\\\"2020-12-31T19:30:13 Asia/Kathmandu +05:45\\\")}\")| .Build());| Assert.Equal(| \"2020-12-31T19:40:13 Asia/Kathmandu +05:45\",| result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithUtc",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T19:30:13 UTC +00\\\") }\")| .Build());| Assert.Equal(\"2020-12-31T19:40:13 UTC +00\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-12-31T19:30:13 UTC\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to ZonedDateTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new ZonedDateTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "ZonedDateTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var zonedDateTimeType = new ZonedDateTimeType(| ZonedDateTimePattern.GeneralFormatOnlyIso,| ZonedDateTimePattern.ExtendedFormatOnlyIso);| zonedDateTimeType.Description.MatchInlineSnapshot(| \"\"\"| A LocalDateTime in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous instants.| A ZonedDateTime is global, in that it maps to a single Instant.| Allowed patterns:| - `YYYY-MM-DDThh:mm:ss z (±hh:mm)`| - `YYYY-MM-DDThh:mm:ss.sssssssss z (±hh:mm)`| Examples:| - `2000-01-01T20:00:00 Europe/Zurich (+01)`| - `2000-01-01T20:00:00.999999999 Europe/Zurich (+01)`| \"\"\");| }"
      },
      {
        "name": "ZonedDateTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var zonedDateTimeType = new ZonedDateTimeType(| ZonedDateTimePattern.Create(| \"MM\",| CultureInfo.InvariantCulture,| null,| null,| new ZonedDateTime()));| zonedDateTimeType.Description.MatchInlineSnapshot(| \"\"\"| A LocalDateTime in a specific time zone and with a particular offset to distinguish between otherwise-ambiguous instants.| A ZonedDateTime is global, in that it maps to a single Instant.| \"\"\");| }"
      }
    ]
  },
  {
    "file": "CollectionSegmentTests.cs",
    "methods": [
      {
        "name": "CreateCollectionSegment_PageInfoAndItems_PassedCorrectly",
        "body": "{| // arrange| var pageInfo = new CollectionSegmentInfo(true, true);| var items = new List<string>();| // act| var collection = new CollectionSegment(| items,| pageInfo,| 1);| // assert| Assert.Equal(pageInfo, collection.Info);| Assert.Equal(items, collection.Items);| }"
      },
      {
        "name": "CreateCollectionSegment_PageInfoNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Error() => new CollectionSegment<string>([], null!, 1);| // assert| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "CreateCollectionSegment_ItemsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Verify() => new CollectionSegment<string>(| null!,| new CollectionSegmentInfo(true, true),| 1);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "GetTotalCountAsync_Value_ReturnsTotalCount",
        "body": "{| // arrange| // act| var collection = new CollectionSegment(| [],| new CollectionSegmentInfo(true, true),| 2);| // assert| Assert.Equal(2, collection.TotalCount);| }"
      }
    ]
  },
  {
    "file": "CustomCollectionSegmentHandlerTests.cs",
    "methods": [
      {
        "name": "Infer_Schema_Correctly_When_CollectionSegment_IsUsed",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var request =| OperationRequestBuilder.New()| .SetDocument(\"{ items { items } }\")| .Build();| // act| // assert| await SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .MakeExecutable()| .ExecuteAsync(request)| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "OffsetPagingObjectFieldDescriptorExtensionsTests.cs",
    "methods": [
      {
        "name": "ObjectFieldDescriptor_UseOffsetPaging_Descriptor_Is_Null",
        "body": "{| Assert.Throws<ArgumentNullException>(| () => OffsetPagingObjectFieldDescriptorExtensions.UseOffsetPaging(| default(IObjectFieldDescriptor)!));| }"
      },
      {
        "name": "ObjectFieldDescriptor_AddOffsetPagingArguments_Descriptor_Is_Null",
        "body": "{| Assert.Throws<ArgumentNullException>(| () => OffsetPagingObjectFieldDescriptorExtensions.AddOffsetPagingArguments(| default(IObjectFieldDescriptor)!));| }"
      },
      {
        "name": "InterfaceFieldDescriptor_UseOffsetPaging_Descriptor_Is_Null",
        "body": "{| Assert.Throws<ArgumentNullException>(| () => OffsetPagingObjectFieldDescriptorExtensions.UseOffsetPaging(| default(IInterfaceFieldDescriptor)!));| }"
      },
      {
        "name": "InterfaceFieldDescriptor_AddOffsetPagingArguments_Descriptor_Is_Null",
        "body": "{| Assert.Throws<ArgumentNullException>(| () => OffsetPagingObjectFieldDescriptorExtensions.AddOffsetPagingArguments(| default(IInterfaceFieldDescriptor)!));| }"
      }
    ]
  },
  {
    "file": "AnnotationBasedSchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResult>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResult>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResult>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResult>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById2(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResult>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById2(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithException>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndException>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"3\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndException>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"4\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPaging>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPaging>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| users {| ... on UsersConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPaging>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| users(error: true) {| ... on UsersConnection {| nodes {| name| }| }| ... on Error {| message| __typename| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPaging>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| usersWithFilter {| ... on UsersWithFilterConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPaging>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| usersWithFilter(error: true) {| ... on UsersWithFilterConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<UnionOnScalarFails>()| .AddQueryConventions()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "CodeFirstSchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultType>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithExceptionType>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndExceptionType>()| .AddQueryConventions()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"1\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"2\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"3\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndExceptionType>()| .AddQueryConventions()| .ExecuteRequestAsync(| \"\"\"| {| userById(id: \"4\") {| __typename| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPagingType>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPagingType>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| users {| ... on UsersConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPagingType>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| users(error: true) {| ... on UsersConnection {| nodes {| name| }| }| ... on Error {| message| __typename| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPagingType>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| usersWithFilter {| ... on UsersWithFilterConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithFieldResultAndPagingType>()| .AddQueryConventions()| .AddFiltering()| .AddSorting()| .ExecuteRequestAsync(| \"\"\"| {| usersWithFilter(error: true) {| ... on UsersWithFilterConnection {| nodes {| name| }| }| ... on Error {| message| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<UnionOnScalarFailsType>()| .AddQueryConventions()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryConventions()| .AddQueryType<InvalidQuery>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryType<InvalidQuery>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryConventions()| .AddQueryType<InvalidQueryTask>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryConventions()| .AddQueryType<InvalidQueryValueTask>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| Assert.Single(exception.Errors);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryConventions()| .AddQueryType<ValidQueryValueTask>()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RecordsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .Services| .BuildServiceProvider()| .GetSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .Services| .BuildServiceProvider()| .GetSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"{ foo(input: { bar: 42 }) { bar baz qux quux } }\",| b => b.AddQueryType(type =>| {| type.Field(\"foo\")| .Type(new ObjectType<Foo>())| .Argument(| \"input\",| argument =>| {| argument.Type(new InputObjectType<Foo>(type =>| type.BindFieldsExplicitly()| .Field(x => x.Bar)));| })| .Resolve(context =>| context.ArgumentValue<Foo>(\"input\"));| }))| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid| (| @\"{ person { id name } }\",| b => b.AddQueryType<Query>().AddGlobalObjectIdentification(false)| )| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "EmailAddressTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<EmailAddressType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HexTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<HexColorType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HslTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<HslType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "HslaTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<HslaType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IPv4TypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<IPv4Type>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IPv6TypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<IPv6Type>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IsbnTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<IsbnType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "LatitudeTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<LatitudeType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Latitude_EnsureLatitudeTypeKindIsCorrect",
        "body": "{| // arrange| // act| LatitudeType type = new()!;| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "Latitude_ExpectIsStringInstanceToMatch",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| StringValueNode valueSyntax = new(\"89° 0' 0.000\\\" S\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Latitude_ExpectIsDoubleInstanceToMatch",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double valueSyntax = 89d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Latitude_ExpectIsDoubleInstanceToFail_LessThanMin",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double valueSyntax = -91d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Latitude_ExpectIsDoubleInstanceToFail_GreaterThanMax",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double valueSyntax = 91d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Latitude_ExpectParseResultToMatchNull",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| object valueSyntax = null!;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(NullValueNode), result.GetType());| }"
      },
      {
        "name": "Latitude_ExpectParseResultToThrowOnInvalidString",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| var valueSyntax = \"92° 0' 0.000\\\" S\";| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectParseResultToMatchInt",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const int valueSyntax = 89;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Latitude_ExpectParseResultToThrowOnInvalidInt",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const int valueSyntax = 92;| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectParseResultToMatchDouble",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double valueSyntax = 89d;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Latitude_ExpectParseResultToThrowOnInvalidDouble",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double valueSyntax = 92d;| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectParseResultToThrowOnInvalidType",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const char valueSyntax = 'c';| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectParseLiteralToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| StringValueNode valueSyntax = new(\"foo\");| // act| var result = Record.Exception(() => scalar.ParseLiteral(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ParseLiteral_NullValueNode",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| var literal = NullValueNode.Default;| // act| var value = scalar.ParseLiteral(literal)!;| // assert| Assert.Null(value);| }"
      },
      {
        "name": "Latitude_ExpectParseValueToMatchType",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double valueSyntax = 74.3;| // act| var result = scalar.ParseValue(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Latitude_ExpectParseValueToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double runtimeValue = 91d;| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectParseValueToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| var scalar = CreateType<LatitudeType>();| const double runtimeValue = -91d;| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectDeserializeStringToMatch",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double expectedValue = -89d;| // act| var success = scalar.TryDeserialize(\"89° 0' 0.000\\\" S\",| out var deserialized);| // assert| Assert.True(success);| Assert.Equal(expectedValue, deserialized);| }"
      },
      {
        "name": "Latitude_ExpectDeserializeStringToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const string valueSyntax = \"91° 0' 0.000\\\" S\"!;| // act| var result = Record.Exception(() => scalar.Deserialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectDeserializeStringToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const string? valueSyntax = \"92° 0' 0.000\\\" N\"!;| // act| var result = Record.Exception(() => scalar.Deserialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectSerializeInt",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const int valueSyntax = 89;| // act| var success = scalar.TrySerialize(valueSyntax, out var s);| // assert| Assert.True(success);| Assert.IsType<string>(s);| }"
      },
      {
        "name": "Latitude_ExpectSerializeIntToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const int valueSyntax = -91;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectSerializeIntToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const int valueSyntax = 91;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectSerializeDouble",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double valueSyntax = 89d;| // act| var success = scalar.TrySerialize(valueSyntax, out var d);| // assert| Assert.True(success);| Assert.IsType<string>(d);| }"
      },
      {
        "name": "Latitude_ExpectSerializeDoubleToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double valueSyntax = -91d;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Latitude_ExpectSerializeDoubleToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LatitudeType();| const double valueSyntax = 91d;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<DefaultLatitudeType>()| .BuildRequestExecutorAsync();| // act| var res = await executor.ExecuteAsync(\"{ test }\");| // assert| res.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "LocalCurrencyTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<LocalCurrencyType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "LocalCurrency_EnsureLocalCurrencyTypeKindIsCorrect",
        "body": "{| // arrange| var type = new LocalCurrencyType(\"Germany\",\"de-DE\");| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      },
      {
        "name": "LocalCurrency_EnsureLocalCurrencyTypeKindIsCorrect1",
        "body": "{| // arrange| var type = new LocalCurrencyType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      },
      {
        "name": "LocalCurrency_ExpectIsStringValueToMatch",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| var valueSyntax = new StringValueNode(\"$10.99\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "LocalCurrency_ParseResult_Null",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| // act| var result = scalar.ParseResult(null);| // assert| Assert.Equal(NullValueNode.Default, result);| }"
      },
      {
        "name": "LocalCurrency_ExpectIsStringValueToMatchEuro",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType(\"Germany\", \"de-De\");| var valueSyntax = new StringValueNode(\"10,99 €\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectIsStringValueToNotMatchEuro",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType(\"Germany\", \"de-De\");| var valueSyntax = new StringValueNode(\"$10.99\");| // act| var result = Record.Exception(() => scalar.ParseLiteral(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectParseLiteralToMatch",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| var valueSyntax = new StringValueNode(\"$24.99\");| const decimal expectedResult = 24.99m;| // act| object result = (decimal)scalar.ParseLiteral(valueSyntax)!;| // assert| Assert.Equal(expectedResult, result);| }"
      },
      {
        "name": "LocalCurrency_ExpectParseLiteralToMatchEuro",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType(\"Germany\", \"de-DE\");| var valueSyntax = new StringValueNode(\"24,99 €\");| const decimal expectedResult = 24.99m;| // act| object result = (decimal)scalar.ParseLiteral(valueSyntax)!;| // assert| Assert.Equal(expectedResult, result);| }"
      },
      {
        "name": "LocalCurrency_ExpectParseLiteralToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| var valueSyntax = new StringValueNode(\"foo\");| // act| var result = Record.Exception(() => scalar.ParseLiteral(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectParseValueToMatchDecimal",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| const decimal valueSyntax = 24.95m;| // act| var result = scalar.ParseValue(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "LocalCurrency_ExpectParseValueToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| var runtimeValue = new StringValueNode(\"foo\");| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectSerializeDecimalToMatch",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| const decimal runtimeValue = 9.99m;| const string expectedValue = \"$9.99\";| // act| var serializedValue = (string)scalar.Serialize(runtimeValue)!;| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeNullToMatch",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| // act| var success = scalar.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeNullableDecimalToDecimal",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| decimal? runtimeValue = null;| // act| var success = scalar.TryDeserialize(runtimeValue, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeStringToMatch",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| const decimal runtimeValue = 7.99m;| // act| var deserializedValue = (decimal)scalar.Deserialize(\"$7.99\")!;| // assert| Assert.Equal(runtimeValue, deserializedValue);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeDecimalToMatch",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| object resultValue = 0.99m;| // act| var result = scalar.Deserialize(resultValue);| // assert| Assert.Equal(resultValue, result);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeInvalidStringToDecimal",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| // act| var success = scalar.TryDeserialize(\"abc\", out var _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeNullToNull",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| // act| var success = scalar.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "LocalCurrency_ExpectSerializeToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| // act| var result = Record.Exception(() => scalar.Serialize(\"foo\"));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectDeserializeToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LocalCurrencyType>();| object runtimeValue = new IntValueNode(1);| // act| var result = Record.Exception(() => scalar.Deserialize(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "LocalCurrency_ExpectParseResultToMatchNull",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| // act| var result = scalar.ParseResult(null);| // assert| Assert.Equal(typeof(NullValueNode), result.GetType());| }"
      },
      {
        "name": "LocalCurrency_ExpectParseResultToMatchStringValue",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| const string valueSyntax = \"$9.99\";| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "LocalCurrency_ExpectParseResultToThrowSerializationException",
        "body": "{| // arrange| ScalarType scalar = new LocalCurrencyType();| IValueNode runtimeValue = new IntValueNode(1);| // act| var result = Record.Exception(() => scalar.ParseResult(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<DefaultLocalCurrencyType>()| .BuildRequestExecutorAsync();| // act| var res = await executor.ExecuteAsync(\"{ test }\");| // assert| res.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "LocalDateTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"5780-05-25\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-21\" }, })| .Build());| Assert.Equal(\"2020-02-24\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalDate!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { {\"arg\", \"2020-02-20T17:42:59\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20\\\") }\")| .Build());| Assert.Equal(\"2020-02-23\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"2020-02-20T17:42:59\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalDate\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmpty_ThrowSchemaException",
        "body": "{| static object Call() => new LocalDateType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "LocalDateType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var localDateType = new LocalDateType(LocalDatePattern.Iso, LocalDatePattern.FullRoundtrip);| localDateType.Description.MatchInlineSnapshot(| \"\"\"| LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day.| Allowed patterns:| - `YYYY-MM-DD`| - `YYYY-MM-DD (calendar)`| Examples:| - `2000-01-01`| - `2000-01-01 (ISO)`| \"\"\");| }"
      },
      {
        "name": "LocalDateType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var localDateType = new LocalDateType(| LocalDatePattern.Create(\"MM\", CultureInfo.InvariantCulture));| localDateType.Description.MatchInlineSnapshot(| \"LocalDate represents a date within the calendar, with no reference to a particular time zone or time of day.\");| }"
      }
    ]
  },
  {
    "file": "LocalTimeTypeTests.cs",
    "methods": [
      {
        "name": "QueryReturns",
        "body": "{| var result = _testExecutor.Execute(\"query { test: one }\");| Assert.Equal(\"12:42:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42:13.031011234\" }, })| .Build());| Assert.Equal(\"12:52:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesVariableWithoutTicks",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42:13\" }, })| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseAnIncorrectVariable",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation($arg: LocalTime!) { test(arg: $arg) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"arg\", \"12:42\" }, })| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| }"
      },
      {
        "name": "ParsesLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42:13.031011234\\\") }\")| .Build());| Assert.Equal(\"12:52:13.031011234\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "ParsesLiteralWithoutTick",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42:13\\\") }\")| .Build());| Assert.Equal(\"12:52:13\", result.ExpectOperationResult().Data![\"test\"]);| }"
      },
      {
        "name": "DoesntParseIncorrectLiteral",
        "body": "{| var result = _testExecutor| .Execute(| OperationRequestBuilder.New()| .SetDocument(\"mutation { test(arg: \\\"12:42\\\") }\")| .Build());| Assert.Null(result.ExpectOperationResult().Data);| Assert.Single(result.ExpectOperationResult().Errors!);| Assert.Null(result.ExpectOperationResult().Errors![0].Code);| Assert.Equal(| \"Unable to deserialize string to LocalTime\",| result.ExpectOperationResult().Errors![0].Message);| }"
      },
      {
        "name": "PatternEmptyThrowSchemaException",
        "body": "{| static object Call() => new LocalTimeType([]);| Assert.Throws<SchemaException>(Call);| }"
      },
      {
        "name": "LocalTimeType_DescriptionKnownPatterns_MatchesSnapshot",
        "body": "{| var localTimeType = new LocalTimeType(| LocalTimePattern.GeneralIso,| LocalTimePattern.ExtendedIso);| localTimeType.Description.MatchInlineSnapshot(| \"\"\"| LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.| Allowed patterns:| - `hh:mm:ss`| - `hh:mm:ss.sssssssss`| Examples:| - `20:00:00`| - `20:00:00.999`| \"\"\");| }"
      },
      {
        "name": "LocalTimeType_DescriptionUnknownPatterns_MatchesSnapshot",
        "body": "{| var localTimeType = new LocalTimeType(| LocalTimePattern.Create(\"mm\", CultureInfo.InvariantCulture));| localTimeType.Description.MatchInlineSnapshot(| \"LocalTime represents a time of day, with no reference to a particular calendar, time zone, or date.\");| }"
      }
    ]
  },
  {
    "file": "LongitudeTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<LongitudeType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Longitude_EnsureLongitudeTypeKindIsCorrect",
        "body": "{| // arrange| // act| ScalarType type = new LongitudeType();| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "Longitude_ExpectIsStringInstanceToMatch",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| StringValueNode valueSyntax = new(\"179° 0' 0.000\\\" E\")!;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Longitude_ExpectIsDoubleInstanceToMatch",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double valueSyntax = -179d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "Longitude_ExpectIsDoubleInstanceToFail_LessThanMin",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double valueSyntax = -181d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Longitude_ExpectIsDoubleInstanceToFail_GreaterThanMax",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double valueSyntax = 181d;| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Longitude_ExpectParseResultToMatchNull",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| object valueSyntax = null!;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(NullValueNode), result.GetType());| }"
      },
      {
        "name": "Longitude_ExpectParseResultToThrowOnInvalidString",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const string valueSyntax = \"-181° 0' 0.000\\\" W\"!;| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectParseResultToMatchInt",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const int valueSyntax = 179;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Longitude_ExpectParseResultToThrowOnInvalidInt",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const int valueSyntax = 181;| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectParseResultToMatchDouble",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double valueSyntax = 179d;| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Longitude_ExpectParseResultToThrowOnInvalidDouble",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double valueSyntax = -182d;| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectParseResultToThrowOnInvalidType",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const char valueSyntax = 'c';| // act| var result = Record.Exception(() => scalar.ParseResult(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectParseLiteralToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| StringValueNode valueSyntax = new(\"foo\");| // act| var result = Record.Exception(() => scalar.ParseLiteral(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ParseLiteral_NullValueNode",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| var literal = NullValueNode.Default;| // act| var value = scalar.ParseLiteral(literal)!;| // assert| Assert.Null(value);| }"
      },
      {
        "name": "Longitude_ExpectParseValueToMatchType",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double valueSyntax = 74.3d;| // act| var result = scalar.ParseValue(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "Longitude_ExpectParseValueToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double runtimeValue = 181d;| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectParseValueToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| var scalar = CreateType<LongitudeType>();| const double runtimeValue = -181d;| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectDeserializeStringToMatch",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double expectedValue = -179d;| // act| var success = scalar.TryDeserialize(\"179° 0' 0.000\\\" W\",| out var deserialized);| // assert| Assert.True(success);| Assert.Equal(expectedValue, deserialized);| }"
      },
      {
        "name": "Longitude_ExpectDeserializeStringToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const string valueSyntax = \"-181° 0' 0.000\\\" W\"!;| // act| var result = Record.Exception(() => scalar.Deserialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectDeserializeStringToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const string? valueSyntax = \"182° 0' 0.000\\\" E\"!;| // act| var result = Record.Exception(() => scalar.Deserialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectSerializeInt",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const int valueSyntax = 179;| // act| var success = scalar.TrySerialize(valueSyntax, out var s);| // assert| Assert.True(success);| Assert.IsType<string>(s);| }"
      },
      {
        "name": "Longitude_ExpectSerializeIntToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const int valueSyntax = -181;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectSerializeIntToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const int valueSyntax = 181;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectSerializeDouble",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double valueSyntax = 179d;| // act| var success = scalar.TrySerialize(valueSyntax, out var d);| // assert| Assert.True(success);| Assert.IsType<string>(d);| }"
      },
      {
        "name": "Longitude_ExpectSerializeDoubleToThrowSerializationException_LessThanMin",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double valueSyntax = -181d;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Longitude_ExpectSerializeDoubleToThrowSerializationException_GreaterThanMax",
        "body": "{| // arrange| ScalarType scalar = new LongitudeType();| const double valueSyntax = 181d;| // act| var result = Record.Exception(() => scalar.Serialize(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<DefaultLongitudeType>()| .BuildRequestExecutorAsync();| // act| var res = await executor.ExecuteAsync(\"{ test }\");| // assert| res.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "MacAddressTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<MacAddressType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NegativeFloatTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NegativeFloatType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NegativeIntTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NegativeIntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonEmptyStringTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NonEmptyStringType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonNegativeFloatTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NonNegativeFloatType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonNegativeIntTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NonNegativeIntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonPositiveFloatTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NonPositiveFloatType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NonPositiveIntTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<NonPositiveIntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "PhoneNumberTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<PhoneNumberType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "PortTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<PortType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "PositiveIntTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<PositiveIntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "PostalCodeTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<PostalCodeType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RegexTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<StubType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RgbTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<RgbType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RgbaTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<RgbaType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SignedByteTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<IntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| // assert| await ExpectScalarTypeToBoundImplicityWhenRegistered<SignedByteType, DefaultSignedByte>();| }"
      }
    ]
  },
  {
    "file": "UnsignedIntTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<UnsignedIntType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| // assert| await ExpectScalarTypeToBoundImplicityWhenRegistered<UnsignedIntType, DefaultUnsignedInt>();| }"
      }
    ]
  },
  {
    "file": "UnsignedLongTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<UnsignedLongType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| // assert| await ExpectScalarTypeToBoundImplicityWhenRegistered<UnsignedLongType, DefaultUnsignedLongType>();| }"
      }
    ]
  },
  {
    "file": "UnsignedShortTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<UnsignedShortType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| // assert| await ExpectScalarTypeToBoundImplicityWhenRegistered<UnsignedShortType, DefaultUnsignedShort>();| }"
      }
    ]
  },
  {
    "file": "UtcOffsetTypeTests.cs",
    "methods": [
      {
        "name": "Schema_WithScalar_IsMatch",
        "body": "{| // arrange| var schema = BuildSchema<UtcOffsetType>();| // act| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "UtcOffset_EnsureUtcOffsetTypeKindIsCorrect",
        "body": "{| // arrange| // act| var type = new UtcOffsetType();| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "UtcOffset_ExpectIsStringValueToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new StringValueNode(\"+12:00\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "UtcOffset_ExpectNegativeIsStringValueToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new StringValueNode(\"-12:00\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "UtcOffset_ExpectPositiveIsStringValueToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new StringValueNode(\"-00:00\");| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "UtcOffset_ExpectIsUtcOffsetToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = TimeSpan.FromHours(12);| // act| var result = scalar.IsInstanceOfType(valueSyntax);| // assert| Assert.True(result);| }"
      },
      {
        "name": "UtcOffset_ExpectParseLiteralToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new StringValueNode(\"-12:00\");| var expectedResult = new TimeSpan(-12, 0, 0);| // act| object result = (TimeSpan)scalar.ParseLiteral(valueSyntax)!;| // assert| Assert.Equal(expectedResult, result);| }"
      },
      {
        "name": "UtcOffset_ExpectParseLiteralToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new StringValueNode(\"+17:00\");| // act| var result = Record.Exception(() => scalar.ParseLiteral(valueSyntax));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "UtcOffset_ExpectParseValueToMatchTimeSpan",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var valueSyntax = new TimeSpan(0, 0, 0);| // act| var result = scalar.ParseValue(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "UtcOffset_ExpectParseValueToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var runtimeValue = new StringValueNode(\"foo\");| // act| var result = Record.Exception(() => scalar.ParseValue(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "UtcOffset_ExpectSerializeToMatch",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| var dateTime = new TimeSpan(10, 0, 0);| var expectedValue = \"+10:00\";| // act| var serializedValue = (string)scalar.Serialize(dateTime)!;| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeNullToMatch",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| // act| var success = scalar.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeNullableTimeSpanToTimeSpan",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| TimeSpan? time = null;| // act| var success = scalar.TryDeserialize(time, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeStringToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| var runtimeValue = new TimeSpan(4, 0, 0);| // act| var deserializedValue = (TimeSpan)scalar| .Deserialize(\"+04:00\")!;| // assert| Assert.Equal(runtimeValue, deserializedValue);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeTimeSpanToMatch",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| object resultValue = new TimeSpan(4, 0, 0);| object runtimeValue = new TimeSpan(4, 0, 0);| // act| var result = scalar.Deserialize(resultValue);| // assert| Assert.Equal(result, runtimeValue);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeInvalidStringToTimeSpan",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| // act| var success = scalar.TryDeserialize(\"abc\", out var _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeNullToNull",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| // act| var success = scalar.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "UtcOffset_ExpectSerializeToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| // act| var result = Record.Exception(() => scalar.Serialize(\"foo\"));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "UtcOffset_ExpectDeserializeToThrowSerializationException",
        "body": "{| // arrange| var scalar = CreateType<UtcOffsetType>();| object runtimeValue = new IntValueNode(1);| // act| var result = Record.Exception(() => scalar.Deserialize(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "UtcOffset_ExpectParseResultToMatchNull",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| // act| var result = scalar.ParseResult(null);| // assert| Assert.Equal(typeof(NullValueNode), result.GetType());| }"
      },
      {
        "name": "UtcOffset_ExpectParseResultToMatchStringValue",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| const string valueSyntax = \"-02:00\";| // act| var result = scalar.ParseResult(valueSyntax);| // assert| Assert.Equal(typeof(StringValueNode), result.GetType());| }"
      },
      {
        "name": "UtcOffset_ExpectParseResultToThrowSerializationException",
        "body": "{| // arrange| ScalarType scalar = new UtcOffsetType();| IValueNode runtimeValue = new IntValueNode(1);| // act| var result = Record.Exception(() => scalar.ParseResult(runtimeValue));| // assert| Assert.IsType<SerializationException>(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<DefaultUtcOffsetType>()| .BuildRequestExecutorAsync();| // act| var res = await executor.ExecuteAsync(\"{ test }\");| // assert| res.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "CodeFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithProperty>()| .Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(\"{ test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedTokens: 5))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedTokens: 5))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test b: test }\");| // assert| Assert.Collection(| Assert.IsType<OperationResult>(result).Errors!,| e => Assert.Equal(\"Document contains more than 5 tokens. Parsing aborted.\", e.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedNodes: 6))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddSingleton(new ParserOptions(maxAllowedNodes: 6))| .AddGraphQL()| .AddQueryType<QueryTypeWithProperty>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ a: test b: test }\");| // assert| Assert.Collection(| Assert.IsType<OperationResult>(result).Errors!,| e => Assert.Equal(\"Document contains more than 6 nodes. Parsing aborted.\", e.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithMethod>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(\"{ test }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryTypeWithMethod>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(\"{ query }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable()| .ExecuteAsync(| @\"| {| fooOrBar {| ... on Bar { nameBar }| ... on Foo { nameFoo }| }| }| \");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "UnionTypeResolveType",
        "body": "{| // arrange| var schema = CreateSchema();| var context = new Mock<IResolverContext>(| MockBehavior.Strict);| // act| var fooBar = schema.GetType<UnionType>(\"FooBar\");| var teaType = fooBar.ResolveConcreteType(context.Object, \"tea\");| var barType = fooBar.ResolveConcreteType(context.Object, \"bar\");| // assert| Assert.Null(teaType);| Assert.NotNull(barType);| }"
      },
      {
        "name": "UnionType_Contains_TypeName",
        "body": "{| // arrange| var schema = CreateSchema();| var fooBar = schema.GetType<UnionType>(\"FooBar\");| // act| var shouldBeFalse = fooBar.ContainsType(\"Tea\");| var shouldBeTrue = fooBar.ContainsType(\"Bar\");| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "UnionType_Contains_ObjectType",
        "body": "{| // arrange| var schema = CreateSchema();| var fooBar = schema.GetType<UnionType>(\"FooBar\");| var bar = schema.GetType<ObjectType>(\"Bar\");| var tea = schema.GetType<ObjectType>(\"Tea\");| // act| var shouldBeTrue = fooBar.ContainsType(bar);| var shouldBeFalse = fooBar.ContainsType(tea);| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "UnionType_Contains_IObjectType",
        "body": "{| // arrange| var schema = CreateSchema();| IUnionType fooBar = schema.GetType<UnionType>(\"FooBar\");| IObjectType tea = schema.GetType<ObjectType>(\"Tea\");| IObjectType bar = schema.GetType<ObjectType>(\"Bar\");| // act| var shouldBeFalse = fooBar.ContainsType(tea);| var shouldBeTrue = fooBar.ContainsType(bar);| // assert| Assert.True(shouldBeTrue);| Assert.False(shouldBeFalse);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ drink { ... on Tea { kind } } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "InterfaceTypeResolveType",
        "body": "{| // arrange| var schema = CreateSchema();| var context = new Mock<IResolverContext>(| MockBehavior.Strict);| // act| var drink = schema.GetType<InterfaceType>(\"Drink\");| var teaType = drink.ResolveConcreteType(context.Object, \"tea\");| var barType = drink.ResolveConcreteType(context.Object, \"bar\");| // assert| Assert.NotNull(teaType);| Assert.Null(barType);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { name } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { desc } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { name2 } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = CreateSchema();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ dog { names } }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryPrivateConstructor>()| .ExecuteRequestAsync(\"{ hello }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryFieldCasing>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var request =| OperationRequestBuilder.New()| .SetDocument(\"query($v: String) { foo(value: $v) }\")| .Build();| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithDefaultValue>()| .ExecuteRequestAsync(request)| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QueryLists>()| .BuildRequestExecutorAsync();| var query =| \"\"\"| query {| input(arg: [[1], null])| }| \"\"\";| await executor.ExecuteAsync(query).MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "MiddlewareConfigurationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { a: String b: String }\")| .Map(new FieldReference(\"Query\", \"a\"),| _ => context =>| {| context.Result = \"123\";| return default;| })| .Map(new FieldReference(\"Query\", \"b\"),| _ => context =>| {| context.Result = \"456\";| return default;| })| .Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(\"{ a b }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { a: String b: String }\")| .Map<TestFieldMiddleware>(new FieldReference(\"Query\", \"a\"))| .Map(new FieldReference(\"Query\", \"b\"),| _ => context =>| {| context.Result = \"456\";| return default;| })| .Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(\"{ a b }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { a: String b: String }\")| .Map(new FieldReference(\"Query\", \"a\"),| (_, next) => new TestFieldMiddleware(next))| .Map(new FieldReference(\"Query\", \"b\"),| _ => context =>| {| context.Result = \"456\";| return default;| })| .Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(\"{ a b }\");| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaConfigurationTests.cs",
    "methods": [
      {
        "name": "BindResolverCollectionToObjectTypeImplicitly",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(d =>| {| d.Name(\"TestObjectA\");| d.Field(\"a\").Type<StringType>();| d.Field(\"b\").Type<StringType>();| })| .AddResolver<TestResolverCollectionA>(\"TestObjectA\")| .Create();| // assert| var type = schema.GetType<ObjectType>(\"TestObjectA\");| Assert.NotNull(type.Fields[\"a\"].Resolver);| Assert.NotNull(type.Fields[\"b\"].Resolver);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var dummyObjectType = new TestObjectB();| var resolverContext = new Mock<IResolverContext>();| resolverContext.Setup(t => t.Parent<TestObjectB>())| .Returns(dummyObjectType);| var source = @\"type Dummy { bar2: String }\";| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddDocumentFromString(source)| .BindRuntimeType<TestObjectB>(\"Dummy\")| .Create();| // assert| var dummy = schema.GetType<ObjectType>(\"Dummy\");| var fieldResolver = dummy.Fields[\"bar2\"].Resolver;| var result = await fieldResolver!(resolverContext.Object);| Assert.Equal(dummyObjectType.GetBar2(), result);| }"
      }
    ]
  },
  {
    "file": "SchemaTypeDiscoveryTests.cs",
    "methods": [
      {
        "name": "DiscoverInputArgumentTypes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryFieldArgument>()| .Create();| // assert| Assert.NotNull(schema.GetType<INamedOutputType>(\"Foo\"));| Assert.NotNull(schema.GetType<INamedOutputType>(\"Bar\"));| Assert.NotNull(schema.GetType<INamedInputType>(\"FooInput\"));| Assert.NotNull(schema.GetType<INamedInputType>(\"BarInput\"));| }"
      },
      {
        "name": "DiscoverOutputGraphFromMethod",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryField>()| .Create();| // assert| var query = schema.GetType<ObjectType>(\"QueryField\");| Assert.NotNull(query);| Assert.Collection(| query.Fields.Where(t => !t.IsIntrospectionField),| t => Assert.Equal(\"foo\", t.Name));| Assert.NotNull(schema.GetType<ObjectType>(\"Foo\"));| Assert.NotNull(schema.GetType<ObjectType>(\"Bar\"));| }"
      },
      {
        "name": "DiscoverOutputGraphFromProperty",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryProperty>()| .Create();| // assert| var query = schema.GetType<ObjectType>(\"QueryProperty\");| Assert.NotNull(query);| Assert.Collection(| query.Fields.Where(t => !t.IsIntrospectionField),| t => Assert.Equal(\"foo\", t.Name));| Assert.NotNull(schema.GetType<ObjectType>(\"Foo\"));| Assert.NotNull(schema.GetType<ObjectType>(\"Bar\"));| }"
      },
      {
        "name": "DiscoverOutputGraphAndIgnoreVoidMethods",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryMethodVoid>()| .Create();| // assert| var query = schema.GetType<ObjectType>(\"QueryMethodVoid\");| Assert.NotNull(query);| Assert.Collection(query.Fields.Where(t => !t.IsIntrospectionField),| t => Assert.Equal(\"foo\", t.Name));| Assert.NotNull(schema.GetType<ObjectType>(\"Foo\"));| Assert.NotNull(schema.GetType<ObjectType>(\"Bar\"));| }"
      },
      {
        "name": "InferEnumAsEnumType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddType<FooBar>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var fooBar = schema.GetType<EnumType>(\"FooBar\");| Assert.NotNull(fooBar);| Assert.Collection(fooBar.Values,| t => Assert.Equal(\"FOO\", t.Name),| t => Assert.Equal(\"BAR\", t.Name));| }"
      },
      {
        "name": "InferCustomScalarTypes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryWithCustomScalar>()| .AddType<ByteArrayType>()| .Create();| // assert| var fooByte = schema.GetType<ObjectType>(\"FooByte\");| Assert.NotNull(fooByte);| var field = fooByte.Fields[\"bar\"];| Assert.Equal(\"ByteArray\", field.Type.NamedType().Name);| }"
      }
    ]
  },
  {
    "file": "SchemaTypeResolverTests.cs",
    "methods": [
      {
        "name": "InferInputObjectType",
        "body": "{| // arrange| var descriptorContext = DescriptorContext.Create();| var typeReference = TypeReference.Create(TypeOf<Bar>(), TypeContext.Input);| // act| var success = descriptorContext.TryInferSchemaType(typeReference, out var schemaTypes);| // assert| Assert.True(success);| Assert.Collection(schemaTypes,| type =>| {| Assert.Equal(TypeContext.Input, type.Context);| Assert.Equal(| typeof(InputObjectType<Bar>),| ((ExtendedTypeReference)type).Type.Source);| });| }"
      }
    ]
  },
  {
    "file": "TypeDiscovererTests.cs",
    "methods": [
      {
        "name": "Register_SchemaType_ClrTypeExists_NoSystemTypes",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(FooType), TypeContext.Output),| },| new AggregateTypeInterceptor(),| false);| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Empty(errors);| new| {| registered = typeRegistry.Types| .Select(t => new| {| type = t.Type.GetType().GetTypeName(),| runtimeType = t.Type is IHasRuntimeType hr| ? hr.RuntimeType.GetTypeName()| : null,| references = t.References.Select(r => r.ToString()).ToList(),| }).ToList(),| runtimeTypeRefs = typeRegistry.RuntimeTypeRefs.ToDictionary(| t => t.Key.ToString(),| t => t.Value.ToString()),| }.MatchSnapshot();| }"
      },
      {
        "name": "Register_SchemaType_ClrTypeExists",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(FooType), TypeContext.Output),| },| new AggregateTypeInterceptor());| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Empty(errors);| new| {| registered = typeRegistry.Types| .Select(t => new| {| type = t.Type.GetType().GetTypeName(),| runtimeType = t.Type is IHasRuntimeType hr| ? hr.RuntimeType.GetTypeName()| : null,| references = t.References.Select(r => r.ToString()).ToList(),| }).ToList(),| runtimeTypeRefs = typeRegistry.RuntimeTypeRefs.ToDictionary(| t => t.Key.ToString(),| t => t.Value.ToString()),| }.MatchSnapshot();| }"
      },
      {
        "name": "Register_ClrType_InferSchemaTypes",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(Foo), TypeContext.Output),| },| new AggregateTypeInterceptor());| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Empty(errors);| new| {| registered = typeRegistry.Types| .Select(t => new| {| type = t.Type.GetType().GetTypeName(),| runtimeType = t.Type is IHasRuntimeType hr| ? hr.RuntimeType.GetTypeName()| : null,| references = t.References.Select(r => r.ToString()).ToList(),| }).ToList(),| runtimeTypeRefs = typeRegistry.RuntimeTypeRefs.ToDictionary(| t => t.Key.ToString(),| t => t.Value.ToString()),| }.MatchSnapshot();| }"
      },
      {
        "name": "Upgrade_Type_From_GenericType",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(ObjectType<Foo>), TypeContext.Output),| _typeInspector.GetTypeRef(typeof(FooType), TypeContext.Output),| },| new AggregateTypeInterceptor());| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Empty(errors);| new| {| registered = typeRegistry.Types| .Select(t => new| {| type = t.Type.GetType().GetTypeName(),| runtimeType = t.Type is IHasRuntimeType hr| ? hr.RuntimeType.GetTypeName()| : null,| references = t.References.Select(r => r.ToString()).ToList(),| }).ToList(),| runtimeTypeRefs = typeRegistry.RuntimeTypeRefs.ToDictionary(| t => t.Key.ToString(),| t => t.Value.ToString()),| }.MatchSnapshot();| }"
      },
      {
        "name": "Cannot_Infer_Input_Type",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(QueryWithInferError), TypeContext.Output),| },| new AggregateTypeInterceptor());| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Collection(| errors,| error =>| {| Assert.Equal(ErrorCodes.Schema.UnresolvedTypes, error.Code);| Assert.IsType<ObjectType<QueryWithInferError>>(error.TypeSystemObject);| Assert.False(error.Extensions.ContainsKey(\"involvedTypes\"));| });| new SchemaException(errors).Message.MatchSnapshot();| }"
      },
      {
        "name": "Cannot_Infer_Multiple_Input_Type",
        "body": "{| // arrange| var context = DescriptorContext.Create();| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeLookup = new TypeLookup(context.TypeInspector, typeRegistry);| var typeDiscoverer = new TypeDiscoverer(| context,| typeRegistry,| typeLookup,| new HashSet<TypeReference>| {| _typeInspector.GetTypeRef(typeof(QueryWithInferError), TypeContext.Output),| _typeInspector.GetTypeRef(typeof(QueryWithInferError2), TypeContext.Output),| },| new AggregateTypeInterceptor());| // act| var errors = typeDiscoverer.DiscoverTypes();| // assert| Assert.Collection(| errors,| error =>| {| Assert.Equal(ErrorCodes.Schema.UnresolvedTypes, error.Code);| Assert.IsType<ObjectType<QueryWithInferError>>(error.TypeSystemObject);| Assert.True(error.Extensions.ContainsKey(\"involvedTypes\"));| });| }"
      }
    ]
  },
  {
    "file": "TypeDiscoveryHandlerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<Foo>()| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Query {| foo(foo: TestMeInput): TestMe| }| type TestMe {| bar: String| }| input TestMeInput {| bar: String| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "TypeDiscoveryTests.cs",
    "methods": [
      {
        "name": "InferDateTime",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryWithDateTime>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "InferDateTimeFromModel",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "TypeDiscovery_Should_InferStructs",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryTypeWithStruct>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "InferInputStructsWithNonDefaultCtor",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryTypeWithInputStruct>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "InferInputTypeWithComputedProperty",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryTypeWithComputedProperty>()| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "TypeInitializationOrderTests.cs",
    "methods": [
      {
        "name": "Merge_Type_Extensions_AB_KeepOrder",
        "body": "{| // the field order will change depending on the extension order.| SchemaBuilder.New()| .AddQueryType(c => c.Name(\"Query\"))| .AddType<QueryExtensionType_A>()| .AddType<QueryExtensionType_B>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Merge_Type_Extensions_BA_KeepOrder",
        "body": "{| SchemaBuilder.New()| .AddQueryType(c => c.Name(\"Query\"))| .AddType<QueryExtensionType_B>()| .AddType<QueryExtensionType_A>()| .Create()| .Print()| .MatchSnapshot(postFix: \"BA\");| }"
      }
    ]
  },
  {
    "file": "TypeInitializerTests.cs",
    "methods": [
      {
        "name": "Register_SchemaType_ClrTypeExists",
        "body": "{| // arrange| var typeInterceptor = new AggregateTypeInterceptor();| typeInterceptor.SetInterceptors(new[] { new IntrospectionTypeInterceptor(), });| IDescriptorContext context = DescriptorContext.Create(| typeInterceptor: typeInterceptor);| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeInitializer = new TypeInitializer(| context,| typeRegistry,| new List<TypeReference>| {| context.TypeInspector.GetTypeRef(typeof(FooType), TypeContext.Output),| },| null,| t => t is FooType ? RootTypeKind.Query : RootTypeKind.None,| new SchemaOptions());| // act| typeInitializer.Initialize();| // assert| var exists = typeRegistry.TryGetType(| context.TypeInspector.GetTypeRef(typeof(FooType), TypeContext.Output),| out var type);| Assert.True(exists);| var fooType =| Assert.IsType<FooType>(type.Type).Fields.ToDictionary(| t => t.Name.ToString(),| t => t.Type.Print());| exists = typeRegistry.TryGetType(| context.TypeInspector.GetTypeRef(typeof(BarType), TypeContext.Output),| out type);| Assert.True(exists);| var barType =| Assert.IsType<BarType>(type.Type).Fields.ToDictionary(| t => t.Name.ToString(),| t => t.Type.Print());| new { fooType, barType, }.MatchSnapshot();| }"
      },
      {
        "name": "Register_ClrType_InferSchemaTypes",
        "body": "{| // arrange| var typeInterceptor = new AggregateTypeInterceptor();| typeInterceptor.SetInterceptors(new[] { new IntrospectionTypeInterceptor(), });| IDescriptorContext context = DescriptorContext.Create(| typeInterceptor: typeInterceptor);| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| var typeInitializer = new TypeInitializer(| context,| typeRegistry,| new List<TypeReference>| {| context.TypeInspector.GetTypeRef(typeof(Foo), TypeContext.Output),| },| null,| t =>| {| return t switch| {| ObjectType<Foo> => RootTypeKind.Query,| _ => RootTypeKind.None,| };| },| new SchemaOptions());| // act| typeInitializer.Initialize();| // assert| var exists = typeRegistry.TryGetType(| context.TypeInspector.GetTypeRef(typeof(ObjectType<Foo>), TypeContext.Output),| out var type);| Assert.True(exists);| var fooType =| Assert.IsType<ObjectType<Foo>>(type.Type).Fields.ToDictionary(| t => t.Name.ToString(),| t => t.Type.Print());| exists = typeRegistry.TryGetType(| context.TypeInspector.GetTypeRef(typeof(ObjectType<Bar>), TypeContext.Output),| out type);| Assert.True(exists);| var barType =| Assert.IsType<ObjectType<Bar>>(type.Type).Fields.ToDictionary(| t => t.Name.ToString(),| t => t.Type.Print());| new { fooType, barType, }.MatchSnapshot();| }"
      },
      {
        "name": "Initializer_SchemaOptions_Are_Null",
        "body": "{| // arrange| var typeInterceptor = new AggregateTypeInterceptor();| typeInterceptor.SetInterceptors(new[] { new IntrospectionTypeInterceptor(), });| IDescriptorContext context = DescriptorContext.Create(| typeInterceptor: typeInterceptor);| var typeRegistry = new TypeRegistry(context.TypeInterceptor);| // act| void Action() => new TypeInitializer(| context,| typeRegistry,| new List<TypeReference>| {| context.TypeInspector.GetTypeRef(typeof(Foo), TypeContext.Output),| },| null!,| t =>| {| return t switch| {| ObjectType<Foo> => RootTypeKind.Query,| _ => RootTypeKind.None,| };| },| null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Detect_Duplicate_Types",
        "body": "{| // arrange| var type = new ObjectType(d => d.Name(\"Abc\").Field(\"def\").Resolve(\"ghi\"));| // the interceptor will add multiple types references to type and count| // how many times the type is registered.| var interceptor = new TypeRegInterceptor(type);| // act| SchemaBuilder.New()| .AddQueryType(type)| .TryAddTypeInterceptor(interceptor)| .Create();| // assert| Assert.Equal(1, interceptor.Count);| }"
      },
      {
        "name": "InitializeFactoryTypeRefOnce",
        "body": "{| // arrange| var typeRef1 = TypeReference.Parse(| \"Abc\",| factory: _ => new ObjectType(d => d.Name(\"Abc\").Field(\"def\").Resolve(\"ghi\")));| var typeRef2 = TypeReference.Parse(| \"Abc\",| factory: _ => new ObjectType(d => d.Name(\"Abc\").Field(\"def\").Resolve(\"ghi\")));| var interceptor = new InjectTypes(new[] { typeRef1, typeRef2, });| // act| var schema =| SchemaBuilder.New()| .TryAddTypeInterceptor(interceptor)| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "FactoryAndNameRefsAreRecognizedAsTheSameType",
        "body": "{| // arrange| var typeRef1 = TypeReference.Parse(| \"Abc\",| factory: _ => new ObjectType(d => d.Name(\"Abc\").Field(\"def\").Resolve(\"ghi\")));| var typeRef2 = TypeReference.Parse(\"Abc\");| var interceptor = new InjectTypes(new[] { typeRef1, typeRef2, });| // act| var schema =| SchemaBuilder.New()| .TryAddTypeInterceptor(interceptor)| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.Print().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "TypeScopeInterceptorTests.cs",
    "methods": [
      {
        "name": "BranchTypesWithScope",
        "body": "{| var types = new List<ITypeSystemMember>();| SchemaBuilder.New()| .AddQueryType<Foo>()| .TryAddTypeInterceptor(new TypeScopeInterceptor(types))| .Create()| .Print()| .MatchSnapshot();| Assert.Collection(| types.OfType<INamedType>().Select(t => t.Name).OrderBy(t => t),| name => Assert.Equal(\"A_Bar\", name),| name => Assert.Equal(\"B_Bar\", name),| name => Assert.Equal(\"C_Baz\", name));| }"
      }
    ]
  },
  {
    "file": "TypeTrimmerTests.cs",
    "methods": [
      {
        "name": "RemoveUnusedTypes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddMutationType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<IntType>()| .Resolve(\"test\"))| .AddSubscriptionType(c => c| .Name(\"ghi\")| .Field(\"field\")| .Type<BooleanType>()| .Resolve(\"test\"))| .AddObjectType(c => c| .Name(\"thisTypeWillBeRemoved\")| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddInputObjectType(c => c| .Name(\"thisTypeWillBeRemovedInput\")| .Field(\"field\")| .Type<StringType>())| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Interface_Implementors_Correctly_Detected",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Interface_Implementors_Correctly_Detected_2",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"ghi\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Union_Set_Is_Correctly_Detected",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddUnionType(c => c| .Name(\"def\")| .Type(new NamedTypeNode(\"ghi\")))| .AddObjectType(c => c| .Name(\"ghi\")| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Unused_TypeSystem_Directives_Are_Removed",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Directive(\"_abc\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddDirectiveType(new DirectiveType(d => d| .Name(\"_abc\")| .Location(DirectiveLocation.Object)))| .AddDirectiveType(new DirectiveType(d => d| .Name(\"_def\")| .Location(DirectiveLocation.Object)))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Executable_Directives_Are_Never_Removed",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddDirectiveType(new DirectiveType(d => d| .Name(\"_abc\")| .Location(DirectiveLocation.Query)))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Executable_Directives_Are_Never_Removed_2",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddDirectiveType(new DirectiveType(d => d| .Name(\"_abc\")| .Location(DirectiveLocation.Object | DirectiveLocation.Query)))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Executable_Directives_Should_Be_Visited",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"abc\")| .Field(\"field\")| .Type(new NamedTypeNode(\"def\"))| .Resolve(\"test\"))| .AddInterfaceType(c => c| .Name(\"def\")| .Field(\"field\")| .Type<StringType>())| .AddObjectType(c => c| .Name(\"ghi\")| .Implements(new NamedTypeNode(\"def\"))| .Field(\"field\")| .Type<StringType>()| .Resolve(\"test\"))| .AddType(new UuidType('D'))| .AddDirectiveType(new DirectiveType(d => d| .Name(\"_abc\")| .Location(DirectiveLocation.Object | DirectiveLocation.Query)| .Argument(\"arg\")| .Type<UuidType>()))| .AddType<FloatType>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaBuilderExtensions.Document.Tests.cs",
    "methods": [
      {
        "name": "AddDocumentFromFile_Builder_Is_Null",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddDocumentFromFile(null, \"abc\");| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddDocumentFromFile_File_Is_Null",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| Action action = () =>| SchemaBuilderExtensions.AddDocumentFromFile(builder, null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "AddDocumentFromFile_File_Is_Empty",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| Action action = () =>| SchemaBuilderExtensions.AddDocumentFromFile(| builder, string.Empty);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| var file = IOPath.GetTempFileName();| await File.WriteAllTextAsync(file, \"type Query { a: String }\");| // act| builder.AddDocumentFromFile(file);| // assert| var schema = builder.Use(next => next).Create();| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaBuilderExtensions.Resolvers.Tests.cs",
    "methods": [
      {
        "name": "AddResolverContextObject_BuilderIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| null,| \"A\",| \"B\",| new Func<IResolverContext, object>(c => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddResolverContextObject_ResolverIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| builder,| \"A\",| \"B\",| (Func<IResolverContext, object>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddDocumentFromString(\"type Query { foo: String }\");| // act| builder.AddResolver(| \"Query\",| \"foo\",| new Func<IResolverContext, object>(_ => \"bar\"));| // assert| await builder.Create()| .MakeExecutable()| .ExecuteAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "AddResolverContextTaskObject_BuilderIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| null,| \"A\",| \"B\",| new Func<IResolverContext, Task<object>>(| c => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddResolverContextTaskObject_ResolverIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| builder,| \"A\",| \"B\",| (Func<IResolverContext, Task<object>>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddDocumentFromString(\"type Query { foo: String }\");| // act| SchemaBuilderExtensions| .AddResolver(| builder,| \"Query\",| \"foo\",| new Func<IResolverContext, ValueTask<object>>(| c => new ValueTask<object>(\"bar\")));| // assert| await builder.Create()| .MakeExecutable()| .ExecuteAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "AddResolverContextTResult_BuilderIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| null,| \"A\",| \"B\",| new Func<IResolverContext, string>(| c => \"abc\"));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddResolverContextTResult_ResolverIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| builder,| \"A\",| \"B\",| (Func<IResolverContext, string>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddDocumentFromString(\"type Query { foo: String }\");| // act| SchemaBuilderExtensions| .AddResolver(| builder,| \"Query\",| \"foo\",| new Func<IResolverContext, string>(| c => \"bar\"));| // assert| await builder.Create()| .MakeExecutable()| .ExecuteAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "AddResolverContextTaskTResult_BuilderIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| null,| \"A\",| \"B\",| new Func<IResolverContext, Task<string>>(| c => Task.FromResult(\"abc\")));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddResolverContextTaskTResult_ResolverIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| builder,| \"A\",| \"B\",| (Func<IResolverContext, Task<string>>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddDocumentFromString(\"type Query { foo: String }\");| // act| SchemaBuilderExtensions| .AddResolver(| builder,| \"Query\",| \"foo\",| new Func<IResolverContext, ValueTask<string>>(| c => new ValueTask<string>(\"bar\")));| // assert| await builder.Create()| .MakeExecutable()| .ExecuteAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "AddResolverObject_BuilderIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| null,| \"A\",| \"B\",| new Func<object>(() => \"abc\"));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddResolverObject_ResolverIsNull_ArgNullExcept",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddResolver(| builder,| \"A\",| \"B\",| (Func<object>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddDocumentFromString(\"type Query { foo: String }\");| // act| SchemaBuilderExtensions| .AddResolver(| builder,| \"Query\",| \"foo\",| new Func<object>(() => \"bar\"));| // assert| await builder.Create()| .MakeExecutable()| .ExecuteAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "SchemaBuilderExtensions.Types.Tests.cs",
    "methods": [
      {
        "name": "AddQueryTypeDesc_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(builder, (Action<IObjectTypeDescriptor>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeDesc_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeDesc_ConfigureQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| SchemaBuilderExtensions.AddQueryType(builder,| t => t.Name(\"Foo\").Field(\"bar\").Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddMutationTypeDesc_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (Action<IObjectTypeDescriptor>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeDesc_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeDesc_ConfigureQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddMutationType(builder,| t => t.Name(\"Foo\").Field(\"bar\").Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddSubscriptionTypeDesc_ConfigureIsNull_ArgNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (Action<IObjectTypeDescriptor>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeDesc_BuilderIsNull_ArgNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeDesc_ConfigureQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddSubscriptionType(builder,| t => t.Name(\"Foo\").Field(\"bar\").Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddQueryTypeDescT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(builder,| (Action<IObjectTypeDescriptor<Foo>>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeDescT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType<Foo>(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeDescT_ConfigureQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| SchemaBuilderExtensions.AddQueryType<Foo>(builder,| t => t.Name(\"Foo\").Field(f => f.Bar).Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddMutationTypeDescT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder,| (Action<IObjectTypeDescriptor<Foo>>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeDescT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType<Foo>(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeDescT_ConfigureQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddMutationType<Foo>(builder,| t => t.Name(\"Foo\").Field(f => f.Bar).Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddSubscriptionTypeDescT_ConfigureIsNull_ArgNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder,| (Action<IObjectTypeDescriptor<Foo>>)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeDescT_BuilderIsNull_ArgNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType<Foo>(null, t => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeDescT_ConfQueryType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddSubscriptionType<Foo>(builder,| t => t.Name(\"Foo\").Field(f => f.Bar).Resolve(\"result\"));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddQueryTypeType_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(builder, (Type)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(null, typeof(FooType));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| SchemaBuilderExtensions.AddQueryType(builder, typeof(FooType));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddMutationTypeType_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (Type)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, typeof(FooType));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddMutationType(builder, typeof(FooType));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddSubscriptionTypeType_TypeIsNull_ArgNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (Type)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeType_BuilderIsNull_ArgNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, typeof(FooType));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddSubscriptionType(| builder, typeof(FooType));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddQueryTypeObjectType_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(builder, (ObjectType)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeObjectType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddQueryType(null, new FooType());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddQueryTypeObjectType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| SchemaBuilderExtensions.AddQueryType(builder, new FooType());| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddMutationTypeObjectType_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (ObjectType)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeObjectType_BuilderIsNull_ArgNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, new FooType());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddMutationTypeObjectType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddMutationType(builder, new FooType());| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddSubscriptionTypeObjectType_TypeIsNull_ArgNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(builder, (ObjectType)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeObjType_BuilderIsNull_ArgNullException",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilderExtensions| .AddMutationType(null, new FooType());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddSubscriptionTypeObjType_TypeIsFooType_SchemaIsCreated",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddSubscriptionType(| builder, new FooType());| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "SetSchema_BuilderIsNull_ArgumentException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () =>| SchemaBuilderExtensions.SetSchema<MySchema>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "SetSchema_TypeSchema_SchemaIsCreatedFromType",
        "body": "{| // arrange| var queryType = new ObjectType(t => t| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"bar\"));| // act| var schema = SchemaBuilder.New()| .SetSchema<MySchema>()| .AddType(queryType)| .Create();| // assert| Assert.Equal(\"Description\",| Assert.IsType<MySchema>(schema).Description);| }"
      },
      {
        "name": "AddObjectType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddObjectType_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddObjectTypeT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType<Foo>(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddObjectTypeT2_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType<Foo>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddObjectTypeT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType<Foo>(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddDirectiveType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddDirectiveType(| null, typeof(MyDirective));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddDirectiveType_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () =>| SchemaBuilderExtensions.AddDirectiveType(builder, (Type)null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddDirectiveType_TypeIsDirectiveType_ArgumentException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () =>| SchemaBuilderExtensions.AddDirectiveType(| builder, typeof(DirectiveType));| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "AddDirectiveType_TypeIsDirectiveTypeFoo_ArgumentException",
        "body": "{| // arrange| var builder = new SchemaBuilder();| // act| Action action = () =>| SchemaBuilderExtensions.AddDirectiveType(| builder, typeof(DirectiveType<Foo>));| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "AddDirectiveType_TypeIsMyDirectiveType_SchemaIsValid",
        "body": "{| // arrange| var builder = new SchemaBuilder();| builder.AddQueryType<QueryType>();| // act| SchemaBuilderExtensions.AddDirectiveType(| builder, typeof(MyDirective));| // assert| builder.Create().ToString().MatchSnapshot();| }"
      },
      {
        "name": "AddInterfaceType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInterfaceType(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInterfaceType_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| SchemaBuilderExtensions.AddInterfaceType(| builder, d => d.Name(\"ABC\").Field(\"abc\").Type<StringType>());| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddInterfaceType_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInterfaceType(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInterfaceTypeT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInterfaceType<Foo>(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInterfaceTypeT2_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInterfaceType<Foo>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInterfaceTypeT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInterfaceType<Foo>(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInterfaceTypeT_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| SchemaBuilderExtensions.AddInterfaceType<IMyInterface>(| builder, d => d.Field(\"abc\").Type<StringType>());| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddUnionType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddUnionType(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddUnionType_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddUnionType(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddUnionType_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| builder.AddObjectType(d => d| .Name(\"Foo\")| .Field(\"bar\")| .Type<StringType>()| .Resolve(\"empty\"));| // act| SchemaBuilderExtensions.AddUnionType(| builder, d => d.Name(\"ABC\").Type(new NamedTypeNode(\"Foo\")));| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddUnionTypeT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddUnionType<Foo>(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddUnionTypeT2_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddUnionType<Foo>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddUnionTypeT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddUnionType<Foo>(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddUnionTypeT_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| builder.AddObjectType(d => d| .Name(\"Foo\")| .Field(\"bar\")| .Type<StringType>()| .Resolve(\"empty\"));| // act| SchemaBuilderExtensions.AddUnionType<IMyInterface>(| builder, d => d.Name(\"ABC\").Type(new NamedTypeNode(\"Foo\")));| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddInputObjectType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInputObjectType(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInputObjectType_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInputObjectType(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInputObjectType_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| SchemaBuilderExtensions.AddInputObjectType(| builder, d => d.Name(\"Foo\").Field(\"bar\").Type<StringType>());| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddInputObjectTypeT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInputObjectType<Foo>(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInputObjectTypeT2_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInputObjectType<Foo>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInputObjectTypeT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddInputObjectType<Foo>(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddInputObjectTypeT_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| SchemaBuilderExtensions.AddInputObjectType<Bar>(| builder, d => d.Field(\"qux\").Type<StringType>());| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddEnumType_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddEnumType(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddEnumType_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddEnumType(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddEnumType_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| builder.AddEnumType(d => d.Name(\"Foo\").Value(\"bar\").Name(\"BAZ\"));| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "AddEnumTypeT_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddEnumType<Foo>(| null, c => { });| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddEnumTypeT2_BuilderIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddEnumType<Foo>(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddEnumTypeT_ConfigureIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| SchemaBuilderExtensions.AddObjectType<Foo>(| SchemaBuilder.New(), null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "AddEnumTypeT_With_Descriptor",
        "body": "{| // arrange| var builder = SchemaBuilder.New();| // act| SchemaBuilderExtensions.AddEnumType<MyEnum>(| builder, d => d.BindValuesExplicitly().Value(MyEnum.A));| // assert| builder| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ForbiddenRuntimeTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| async Task SchemaError() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query1>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(SchemaError);| exception.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task SchemaError() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(SchemaError);| exception.Errors[0].Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GenericTypeNamingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "GraphQLNonNullTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDeep>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDeepWithType>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryRequired>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryRequiredWithType>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "IgnoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ExtendedTypeTests.cs",
    "methods": [
      {
        "name": "From_SystemType_Array",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(typeof(byte[]), _cache);| // assert| Assert.True(extendedType.IsArray);| Assert.Collection(| extendedType.TypeArguments.Select(t => t.Type),| t => Assert.Equal(typeof(byte), t));| }"
      },
      {
        "name": "From_SystemType_List",
        "body": "{| // arrange| // act| IExtendedType list = ExtendedType.FromType(| typeof(NativeType<List<byte?>>),| _cache);| list = ExtendedType.Tools.ChangeNullability(| list, [false,], _cache);| var nullableList = ExtendedType.FromType(| typeof(List<byte?>),| _cache);| // assert| Assert.True(list.IsList);| Assert.True(list.IsArrayOrList);| Assert.False(list.IsNullable);| Assert.True(nullableList.IsList);| Assert.True(nullableList.IsArrayOrList);| Assert.True(nullableList.IsNullable);| }"
      },
      {
        "name": "From_SystemType_Dict",
        "body": "{| // arrange| // act| var dict = ExtendedType.FromType(| typeof(Dictionary<string, string>),| _cache);| // assert| Assert.True(dict.IsList);| Assert.True(dict.IsArrayOrList);| }"
      },
      {
        "name": "From_SchemaType_ListOfString",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(typeof(ListType<StringType>), _cache);| // assert| Assert.True(extendedType.IsSchemaType);| Assert.True(extendedType.IsGeneric);| Assert.Collection(extendedType.TypeArguments.Select(t => t.Type),| t => Assert.Equal(typeof(StringType), t));| }"
      },
      {
        "name": "From_SchemaType_NonNullListOfString",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(| typeof(NonNullType<ListType<StringType>>),| _cache);| // assert| Assert.True(extendedType.IsSchemaType);| Assert.True(extendedType.IsGeneric);| Assert.False(extendedType.IsNullable);| }"
      },
      {
        "name": "From_IntType",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(| typeof(IntType),| _cache);| // assert| Assert.True(extendedType.IsSchemaType);| Assert.False(extendedType.IsGeneric);| Assert.True(extendedType.IsNullable);| }"
      },
      {
        "name": "From_InputObjectOfIntType",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(| typeof(InputObjectType<IntType>),| _cache);| // assert| Assert.True(extendedType.IsSchemaType);| Assert.True(extendedType.IsGeneric);| Assert.True(extendedType.IsNamedType);| Assert.True(extendedType.IsNullable);| IExtendedType argument = extendedType.TypeArguments[0];| Assert.True(argument.IsSchemaType);| Assert.False(argument.IsGeneric);| Assert.True(extendedType.IsNamedType);| Assert.True(argument.IsNullable);| }"
      },
      {
        "name": "From_NativeTypeIntType",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromType(| typeof(NativeType<IntType>),| _cache);| // assert| Assert.True(extendedType.IsSchemaType);| Assert.False(extendedType.IsGeneric);| Assert.True(extendedType.IsNullable);| }"
      },
      {
        "name": "Schema_Type_Cache_Id_Distinguishes_Between_NonNull_And_Nullable",
        "body": "{| // arrange| // act| var extendedType1 = ExtendedType.FromType(| typeof(NonNullType<ListType<StringType>>),| _cache);| var extendedType2 = ExtendedType.FromType(| typeof(NonNullType<StringType>),| _cache);| var extendedType3 = ExtendedType.FromType(| typeof(ListType<StringType>),| _cache);| var extendedType4 = ExtendedType.FromType(| typeof(StringType),| _cache);| // assert| Assert.False(extendedType1.IsNullable);| Assert.False(extendedType2.IsNullable);| Assert.True(extendedType3.IsNullable);| Assert.True(extendedType4.IsNullable);| }"
      },
      {
        "name": "IsEqual_Byte_Byte_True",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| var b = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals(b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEqual_Object_Byte_Byte_True",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| var b = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals((object)b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEqual_Ref_Byte_Byte_True",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals(a);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEqual_Ref_Object_Byte_Byte_True",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals((object)a);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEqual_Byte_Null_False",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals(default(ExtendedType));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsEqual_Object_Byte_Null_False",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| // act| var result = a.Equals(default(object));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsEqual_Byte_String_False",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| var b = ExtendedType.FromType(typeof(string), _cache);| // act| var result = a.Equals(b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsEqual_Object_Byte_String_False",
        "body": "{| // arrange| var a = ExtendedType.FromType(typeof(byte), _cache);| var b = ExtendedType.FromType(typeof(string), _cache);| // act| var result = a.Equals((object)b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "NullableOptionalNullableString",
        "body": "{| // arrange| var member =| typeof(Nullability).GetMethod(nameof(Nullability.NullableOptionalNullableString))!;| // act| var type = ExtendedType.FromMember(member, _cache);| // assert| Assert.Equal(\"Optional<String>\", type.ToString());| }"
      },
      {
        "name": "OptionalNullableOptionalNullableString",
        "body": "{| // arrange| var member =| typeof(Nullability)| .GetMethod(nameof(Nullability.OptionalNullableOptionalNullableString))!;| // act| var type = ExtendedType.FromMember(member, _cache);| // assert| Assert.Equal(\"Optional<Optional<String>>!\", type.ToString());| }"
      },
      {
        "name": "From_IExecutableScalar",
        "body": "{| // arrange| // act| var dict = ExtendedType.FromType(| typeof(IExecutable<string>),| _cache);| // assert| Assert.True(dict.IsList);| Assert.True(dict.IsArrayOrList);| }"
      },
      {
        "name": "Nested_Nullability",
        "body": "{| // arrange| // act| var extendedType = ExtendedType.FromMember(| typeof(Nullability).GetMember(\"NestedProp\").Single(),| _cache);| // assert| Assert.True(extendedType.IsNullable);| }"
      }
    ]
  },
  {
    "file": "TypeInfoTests.cs",
    "methods": [
      {
        "name": "NonNullListNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullListNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullListNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullListNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableListNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableListNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableListNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableListNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullQueryNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullQueryNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullQueryNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullQueryNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableQueryNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableQueryNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableQueryNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableQueryNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullCollectionNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullCollectionNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullCollectionNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullCollectionNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableCollectionNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableCollectionNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableCollectionNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableCollectionNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullArrayNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullArrayNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NonNullArrayNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NonNullArrayNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]!\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableArrayNullableElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableArrayNullableElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableArrayNonNullElement",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableArrayNonNullElement));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[String!]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NestedList",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NestedList));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"[[String]]\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "OptionalNullableString",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.OptionalNullableString));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"String\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "NullableOptionalNullableString",
        "body": "{| // arrange| var methodInfo =| typeof(Nullability).GetMethod(nameof(Nullability.NullableOptionalNullableString));| // act| var typeInfo = TypeInfo.Create(_typeInspector.GetReturnType(methodInfo!), _cache);| // assert| Assert.Equal(\"String\", typeInfo.CreateType(new StringType()).Print());| }"
      },
      {
        "name": "Create_TypeInfo_From_RewrittenType",
        "body": "{| // arrange| var extendedType = _typeInspector.GetType(typeof(List<string>), null, false);| // act| var success = TypeInfo.TryCreate(| extendedType,| _cache,| out var typeInfo);| // assert| Assert.True(success);| Assert.Collection(typeInfo.Components.Select(t => t.Kind),| t => Assert.Equal(TypeComponentKind.List, t),| t => Assert.Equal(TypeComponentKind.NonNull, t),| t => Assert.Equal(TypeComponentKind.Named, t));| var schemaType = typeInfo.CreateType(new StringType());| Assert.IsType<StringType>(| Assert.IsType<NonNullType>(| Assert.IsType<ListType>(schemaType).ElementType).Type);| }"
      },
      {
        "name": "Case5",
        "body": "{| // arrange| var nativeType =| typeof(NonNullType<ListType<NonNullType<ListType<NonNullType<StringType>>>>>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.Equal(\"[[String!]!]!\", type.Print());| }"
      },
      {
        "name": "Case4",
        "body": "{| // arrange| var nativeType = typeof(NonNullType<ListType<NonNullType<StringType>>>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<NonNullType>(type);| type = ((NonNullType)type).Type as IOutputType;| Assert.IsType<ListType>(type);| type = ((ListType)type).ElementType as IOutputType;| Assert.IsType<NonNullType>(type);| type = ((NonNullType)type).Type as IOutputType;| Assert.IsType<StringType>(type);| }"
      },
      {
        "name": "Case3_1",
        "body": "{| // arrange| var nativeType = typeof(ListType<NonNullType<StringType>>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<ListType>(type);| type = ((ListType)type).ElementType as IOutputType;| Assert.IsType<NonNullType>(type);| type = ((NonNullType)type).Type as IOutputType;| Assert.IsType<StringType>(type);| }"
      },
      {
        "name": "Case3_2",
        "body": "{| // arrange| var nativeType = typeof(NonNullType<ListType<StringType>>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<NonNullType>(type);| type = ((NonNullType)type).Type as IOutputType;| Assert.IsType<ListType>(type);| type = ((ListType)type).ElementType as IOutputType;| Assert.IsType<StringType>(type);| }"
      },
      {
        "name": "Case2_1",
        "body": "{| // arrange| var nativeType = typeof(NonNullType<StringType>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<NonNullType>(type);| type = ((NonNullType)type).Type as IOutputType;| Assert.IsType<StringType>(type);| }"
      },
      {
        "name": "Case2_2",
        "body": "{| // arrange| var nativeType = typeof(ListType<StringType>);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<ListType>(type);| type = ((ListType)type).ElementType as IOutputType;| Assert.IsType<StringType>(type);| }"
      },
      {
        "name": "Case1",
        "body": "{| // arrange| var nativeType = typeof(StringType);| // act| var success = TypeInfo.TryCreate(| _typeInspector.GetReturnType(nativeType),| _cache,| out var typeInfo);| var type = typeInfo!.CreateType(new StringType());| // assert| Assert.True(success);| Assert.IsType<StringType>(type);| }"
      }
    ]
  },
  {
    "file": "NamingConventionTests.cs",
    "methods": [
      {
        "name": "PureCodeFirst_NamingConvention_RenameArgument",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryNamingConvention>()| .AddMutationType<MutationNamingConvention>()| .AddConvention<INamingConventions, CustomNamingConvention>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryNamingConvention>()| .AddMutationType<MutationNamingConvention>()| .AddConvention<INamingConventions, CustomNamingConvention>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ResolverContextStateExtensionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var user = new ClaimsPrincipal(| new ClaimsIdentity(new[]| {| new Claim(ClaimTypes.Name, \"abc\"),| }));| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d =>| {| d.Name(\"Query\");| d.Field(\"foo\").Resolve(ctx => ctx.GetUser()?.Identity?.Name);| })| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ foo }\")| .SetUser(user)| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "GetGlobalStateOrDefault_KeyMissing",
        "body": "{| var dict = new Dictionary<string, object?>();| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetGlobalStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetGlobalState_KeyMissing",
        "body": "{| var dict = new Dictionary<string, object?>();| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| Assert.Throws<ArgumentException>(() =>| context.GetGlobalState<int>(\"key\"));| }"
      },
      {
        "name": "GetGlobalStateOrDefault_KeyExists_WrongType",
        "body": "{| var dict = new Dictionary<string, object?> { { \"key\", \"value\" }, };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetGlobalStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetGlobalState_KeyExists_WrongType",
        "body": "{| var dict = new Dictionary<string, object?> { { \"key\", \"value\" }, };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| Assert.Throws<ArgumentException>(() =>| context.GetGlobalState<int>(\"key\"));| }"
      },
      {
        "name": "GetGlobalStateOrDefault_KeyExists_CorrectType",
        "body": "{| var dict = new Dictionary<string, object?> { { \"key\", 1 }, };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetGlobalStateOrDefault<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "GetGlobalState_KeyExists_CorrectType",
        "body": "{| var dict = new Dictionary<string, object?> { { \"key\", 1 }, };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetGlobalState<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "SetGlobalState",
        "body": "{| var dict = new Dictionary<string, object?>();| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| context.SetGlobalState(\"key\", \"value\");| context.ContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetGlobalState_KeyMissing",
        "body": "{| var dict = new Dictionary<string, object?>();| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetOrSetGlobalState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.ContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetGlobalState_KeyExists_WrongType",
        "body": "{| var dict = new Dictionary<string, object?>| {| {\"key\", \"value\"},| };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetOrSetGlobalState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.ContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetGlobalState_KeyExists_CorrectType",
        "body": "{| var dict = new Dictionary<string, object?>| {| {\"key\", 2},| };| var mock = new Mock<IResolverContext>();| mock.SetupGet(c => c.ContextData).Returns(dict);| var context = mock.Object;| var state = context.GetOrSetGlobalState<int>(\"key\", key => 1);| Assert.Equal(2, state);| context.ContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetScopedStateOrDefault_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| var state = context.GetScopedStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetScopedState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| Assert.Throws<ArgumentException>(() =>| context.GetScopedState<int>(\"key\"));| }"
      },
      {
        "name": "GetScopedStateOrDefault_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| { \"key\", \"value\" },| }.ToImmutableDictionary();| var state = context.GetScopedStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetScopedState_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| { \"key\", \"value\" },| }.ToImmutableDictionary();| Assert.Throws<ArgumentException>(() =>| context.GetScopedState<int>(\"key\"));| }"
      },
      {
        "name": "GetScopedStateOrDefault_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| { \"key\", 1 },| }.ToImmutableDictionary();| var state = context.GetScopedStateOrDefault<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "GetScopedState_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| { \"key\", 1 },| }.ToImmutableDictionary();| var state = context.GetScopedState<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "SetScopedState",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| context.SetScopedState(\"key\", \"value\");| context.ScopedContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetScopedState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| var state = context.GetOrSetScopedState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.ScopedContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetScopedState_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| {\"key\", \"value\"},| }.ToImmutableDictionary();| var state = context.GetOrSetScopedState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.ScopedContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetScopedState_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = new Dictionary<string, object?>| {| {\"key\", 2},| }.ToImmutableDictionary();| var state = context.GetOrSetScopedState<int>(\"key\", key => 1);| Assert.Equal(2, state);| context.ScopedContextData.MatchSnapshot();| }"
      },
      {
        "name": "RemoveScopedState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| context.RemoveScopedState(\"key\");| context.ScopedContextData.MatchSnapshot();| }"
      },
      {
        "name": "RemoveScopedState_KeyExists",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.ScopedContextData);| var context = mock.Object;| context.ScopedContextData = ImmutableDictionary<string, object?>.Empty;| context.SetScopedState(\"key1\", 1);| context.SetScopedState(\"key2\", 2);| context.SetScopedState(\"key3\", 3);| context.RemoveScopedState(\"key2\");| Assert.False(context.ScopedContextData.ContainsKey(\"key2\"));| }"
      },
      {
        "name": "GetLocalStateOrDefault_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| var state = context.GetLocalStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetLocalState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| Assert.Throws<ArgumentException>(() =>| context.GetLocalState<int>(\"key\"));| }"
      },
      {
        "name": "GetLocalStateOrDefault_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", \"value\" },| }.ToImmutableDictionary();| var state = context.GetLocalStateOrDefault<int>(\"key\");| Assert.Equal(default, state);| }"
      },
      {
        "name": "GetLocalState_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", \"value\" },| }.ToImmutableDictionary();| Assert.Throws<ArgumentException>(() =>| context.GetLocalState<int>(\"key\"));| }"
      },
      {
        "name": "GetLocalStateOrDefault_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", 1 },| }.ToImmutableDictionary();| var state = context.GetLocalStateOrDefault<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "GetLocalState_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", 1 },| }.ToImmutableDictionary();| var state = context.GetLocalState<int>(\"key\");| Assert.Equal(1, state);| }"
      },
      {
        "name": "SetLocalState",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| context.SetLocalState(\"key\", \"value\");| context.LocalContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetLocalState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| var state = context.GetOrSetLocalState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.LocalContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetLocalState_KeyExists_WrongType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", \"value\" },| }.ToImmutableDictionary();| var state = context.GetOrSetLocalState<int>(\"key\", key => 1);| Assert.Equal(1, state);| context.LocalContextData.MatchSnapshot();| }"
      },
      {
        "name": "GetOrSetLocalState_KeyExists_CorrectType",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = new Dictionary<string, object?>| {| { \"key\", 2 },| }.ToImmutableDictionary();| var state = context.GetOrSetLocalState<int>(\"key\", key => 1);| Assert.Equal(2, state);| context.LocalContextData.MatchSnapshot();| }"
      },
      {
        "name": "RemoveLocalState_KeyMissing",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| context.RemoveLocalState(\"key\");| context.LocalContextData.MatchSnapshot();| }"
      },
      {
        "name": "RemoveLocalState_KeyExists",
        "body": "{| var mock = new Mock<IResolverContext>();| mock.SetupProperty(c => c.LocalContextData);| var context = mock.Object;| context.LocalContextData = ImmutableDictionary<string, object?>.Empty;| context.SetLocalState(\"key1\", 1);| context.SetLocalState(\"key2\", 2);| context.SetLocalState(\"key3\", 3);| context.RemoveLocalState(\"key2\");| Assert.False(context.LocalContextData.ContainsKey(\"key2\"));| }"
      }
    ]
  },
  {
    "file": "CustomResolverCompilerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWellKnownState>()| .AddParameterExpressionBuilder(ctx => (SayHelloState)ctx.ContextData[\"someState\"]!)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ sayHello }\")| .AddGlobalState(\"someState\", new SayHelloState(\"Hello\"))| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "AddParameterEnsureBuilderIsNotNull_New",
        "body": "{| void Configure()| => default(IRequestExecutorBuilder)!| .AddParameterExpressionBuilder(ctx => ctx.Operation.Document);| Assert.Throws<ArgumentNullException>(Configure);| }"
      }
    ]
  },
  {
    "file": "FieldMemberTests.cs",
    "methods": [
      {
        "name": "Create",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| // act| var fieldMember = new FieldMember(| typeName, fieldName, member);| // assert| Assert.Equal(typeName, fieldMember.TypeName);| Assert.Equal(fieldName, fieldMember.FieldName);| Assert.Equal(member, fieldMember.Member);| }"
      },
      {
        "name": "CreateTypeNull",
        "body": "{| // arrange| var fieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| // act| Action action = () => new FieldMember(null, fieldName, member);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "CreateFieldNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var member = GetMemberA();| // act| Action action = () => new FieldMember(typeName, null, member);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "CreateMemberNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| // act| Action action = () => new FieldMember(typeName, fieldName, default(MemberInfo));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "CreateExpressionNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| // act| Action action = () => new FieldMember(typeName, fieldName, default(Expression));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "WithTypeName",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var newTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| var fieldMember = new FieldMember(| originalTypeName, fieldName, member);| // act| fieldMember = fieldMember.WithTypeName(newTypeName);| // assert| Assert.Equal(newTypeName, fieldMember.TypeName);| }"
      },
      {
        "name": "WithTypeNameNull",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| var fieldMember = new FieldMember(| originalTypeName, fieldName, member);| // act| Action action = () => fieldMember.WithTypeName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithFieldName",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var newFieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| var fieldMember = new FieldMember(| typeName, originalFieldName, member);| // act| fieldMember = fieldMember.WithFieldName(newFieldName);| // assert| Assert.Equal(newFieldName, fieldMember.FieldName);| }"
      },
      {
        "name": "WithFieldNameNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var member = GetMemberA();| var fieldMember = new FieldMember(| typeName, originalFieldName, member);| // act| Action action = () => fieldMember.WithFieldName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithMember",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var originalMember = GetMemberA();| var newMember = GetMemberB();| var fieldMember = new FieldMember(| typeName, fieldName, originalMember);| // act| fieldMember = fieldMember.WithMember(newMember);| // assert| Assert.Equal(newMember, fieldMember.Member);| }"
      },
      {
        "name": "WithMemberNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var originalMember = GetMemberA();| var fieldMember = new FieldMember(| typeName, fieldName, originalMember);| // act| Action action = () => fieldMember.WithMember(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "EqualsObjectNull",
        "body": "{| // arrange| var fieldMember = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| // act| var result = fieldMember.Equals(default(object));| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectReferenceEquals",
        "body": "{| // arrange| var fieldMember = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| // act| var result = fieldMember.Equals((object)fieldMember);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectFieldsAreEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| var fieldMember_b = new FieldMember(| fieldMember_a.TypeName,| fieldMember_a.FieldName,| fieldMember_a.Member);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectWithIncompatibleType",
        "body": "{| // arrange| var fieldMember = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| // act| var result = fieldMember.Equals(new object());| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectTypeNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| var fieldMember_b = new FieldMember(| TestUtils.CreateTypeName(),| fieldMember_a.FieldName,| fieldMember_a.Member);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectFieldNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| var fieldMember_b = new FieldMember(| fieldMember_a.TypeName,| TestUtils.CreateFieldName(),| fieldMember_a.Member);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectMemberNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldMember(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetMemberA());| var fieldMember_b = new FieldMember(| fieldMember_a.TypeName,| fieldMember_a.FieldName,| GetMemberB());| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      }
    ]
  },
  {
    "file": "FieldMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"bar\")| .Use<TaskFieldMiddleware>())| .ExecuteRequestAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"bar\")| .Use<ValueTaskFieldMiddleware>())| .ExecuteRequestAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "FieldReferenceTests.cs",
    "methods": [
      {
        "name": "Create",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| // act| var fieldReference = new FieldReference(typeName, fieldName);| // assert| Assert.Equal(typeName, fieldReference.TypeName);| Assert.Equal(fieldName, fieldReference.FieldName);| }"
      },
      {
        "name": "CreateTypeNull",
        "body": "{| // arrange| var fieldName = TestUtils.CreateFieldName();| // act| Action action = () => new FieldReference(null, fieldName);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "CreateFieldNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| // act| Action action = () => new FieldReference(typeName, null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithTypeName",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var newTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var fieldReference = new FieldReference(| originalTypeName, fieldName);| // act| fieldReference = fieldReference.WithTypeName(newTypeName);| // assert| Assert.Equal(newTypeName, fieldReference.TypeName);| }"
      },
      {
        "name": "WithTypeNameNull",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var fieldReference = new FieldReference(| originalTypeName, fieldName);| // act| Action action = () => fieldReference.WithTypeName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithFieldName",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var newFieldName = TestUtils.CreateFieldName();| var fieldReference = new FieldReference(| typeName, originalFieldName);| // act| fieldReference = fieldReference.WithFieldName(newFieldName);| // assert| Assert.Equal(newFieldName, fieldReference.FieldName);| }"
      },
      {
        "name": "WithFieldNameNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var fieldReference = new FieldReference(| typeName, originalFieldName);| // act| Action action = () => fieldReference.WithFieldName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "EqualsObjectNull",
        "body": "{| // arrange| var fieldReference = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| // act| var result = fieldReference.Equals(default(object));| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectReferenceEquals",
        "body": "{| // arrange| var fieldReference = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| // act| var result = fieldReference.Equals((object)fieldReference);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectFieldsAreEqual",
        "body": "{| // arrange| var fieldReference_a = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| var fieldReference_b = new FieldReference(| fieldReference_a.TypeName,| fieldReference_a.FieldName);| // act| var result = fieldReference_a.Equals((object)fieldReference_b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectWithIncompatibleType",
        "body": "{| // arrange| var fieldReference = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| // act| var result = fieldReference.Equals(new object());| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectTypeNotEqual",
        "body": "{| // arrange| var fieldReference_a = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| var fieldReference_b = new FieldReference(| TestUtils.CreateTypeName(),| fieldReference_a.FieldName);| // act| var result = fieldReference_a.Equals((object)fieldReference_b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectFieldNotEqual",
        "body": "{| // arrange| var fieldReference_a = new FieldReference(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName());| var fieldReference_b = new FieldReference(| fieldReference_a.TypeName,| TestUtils.CreateFieldName());| // act| var result = fieldReference_a.Equals((object)fieldReference_b);| // assert| Assert.False(result);| }"
      }
    ]
  },
  {
    "file": "FieldResolverTests.cs",
    "methods": [
      {
        "name": "Create",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| // act| var fieldMember = new FieldResolver(| typeName, fieldName, resolver);| // assert| Assert.Equal(typeName, fieldMember.TypeName);| Assert.Equal(fieldName, fieldMember.FieldName);| Assert.Equal(resolver, fieldMember.Resolver);| }"
      },
      {
        "name": "CreateTypeNull",
        "body": "{| // arrange| var fieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| // act| Action action = () => new FieldResolver(null, fieldName, resolver);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "CreateFieldNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var resolver = GetResolverA();| // act| Action action = () => new FieldResolver(typeName, null, resolver);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "CreateMemberNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| // act| Action action = () => new FieldResolver(typeName, fieldName, null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "WithTypeName",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var newTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| var fieldMember = new FieldResolver(| originalTypeName, fieldName, resolver);| // act| fieldMember = fieldMember.WithTypeName(newTypeName);| // assert| Assert.Equal(newTypeName, fieldMember.TypeName);| }"
      },
      {
        "name": "WithTypeNameNull",
        "body": "{| // arrange| var originalTypeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| var fieldMember = new FieldResolver(| originalTypeName, fieldName, resolver);| // act| Action action = () => fieldMember.WithTypeName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithFieldName",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var newFieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| var fieldMember = new FieldResolver(| typeName, originalFieldName, resolver);| // act| fieldMember = fieldMember.WithFieldName(newFieldName);| // assert| Assert.Equal(newFieldName, fieldMember.FieldName);| }"
      },
      {
        "name": "WithFieldNameNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var originalFieldName = TestUtils.CreateFieldName();| var resolver = GetResolverA();| var fieldMember = new FieldResolver(| typeName, originalFieldName, resolver);| // act| Action action = () => fieldMember.WithFieldName(null);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithResolver",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var originalResolver = GetResolverA();| var newResolver = GetResolverB();| var fieldMember = new FieldResolver(| typeName, fieldName, originalResolver);| // act| fieldMember = fieldMember.WithResolver(newResolver);| // assert| Assert.Equal(newResolver, fieldMember.Resolver);| }"
      },
      {
        "name": "WithResolverNull",
        "body": "{| // arrange| var typeName = TestUtils.CreateTypeName();| var fieldName = TestUtils.CreateFieldName();| var originalResolver = GetResolverA();| var fieldMember = new FieldResolver(| typeName, fieldName, originalResolver);| // act| Action action = () => fieldMember.WithResolver(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "EqualsObjectNull",
        "body": "{| // arrange| var fieldMember = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| // act| var result = fieldMember.Equals(default(object));| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectReferenceEquals",
        "body": "{| // arrange| var fieldMember = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| // act| var result = fieldMember.Equals((object)fieldMember);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectFieldsAreEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| var fieldMember_b = new FieldResolver(| fieldMember_a.TypeName,| fieldMember_a.FieldName,| fieldMember_a.Resolver);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.True(result);| }"
      },
      {
        "name": "EqualsObjectWithIncompatibleType",
        "body": "{| // arrange| var fieldMember = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| // act| var result = fieldMember.Equals(new object());| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectTypeNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| var fieldMember_b = new FieldResolver(| TestUtils.CreateTypeName(),| fieldMember_a.FieldName,| fieldMember_a.Resolver);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectFieldNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| var fieldMember_b = new FieldResolver(| fieldMember_a.TypeName,| TestUtils.CreateFieldName(),| fieldMember_a.Resolver);| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectMemberNotEqual",
        "body": "{| // arrange| var fieldMember_a = new FieldResolver(| TestUtils.CreateTypeName(),| TestUtils.CreateFieldName(),| GetResolverA());| var fieldMember_b = new FieldResolver(| fieldMember_a.TypeName,| fieldMember_a.FieldName,| GetResolverB());| // act| var result = fieldMember_a.Equals((object)fieldMember_b);| // assert| Assert.False(result);| }"
      }
    ]
  },
  {
    "file": "IsSelectedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_1 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_1 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_2 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_2 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_2 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_3 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_3 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_3 {| name| phoneNumber| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_3 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_4 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_4 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_4 {| name| phoneNumber| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_4 {| name| address| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_4 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_5 {| email| category {| next {| name| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_5 {| email| category {| name| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_6 {| email| category {| next {| name| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_6 {| email| category {| name| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var snapshot = new Snapshot();| async Task Broken() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<BrokenQuery>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Attribute_6 {| email| category {| name| }| }| }| \"\"\");| var ex = await Assert.ThrowsAsync<SchemaException>(Broken);| foreach (var error in ex.Errors)| {| snapshot.Add(error.Message);| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_1 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_1 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_2 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_2 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_2 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_3 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_3 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_3 {| name| phoneNumber| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_3 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_4 {| name| email| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_4 {| name| password| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_4 {| name| phoneNumber| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_4 {| name| address| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query {| user_Context_4 {| name| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| c =>| {| c.Name(\"Query\");| c.Field(\"user\")| .Resolve(| ctx =>| {| ((IMiddlewareContext)ctx).OperationResult.SetExtension(| \"isSelected\",| ctx.Select(\"category\").IsSelected(\"next\"));| return Query.DummyUser;| });| })| .ExecuteRequestAsync(| \"\"\"| query {| user {| name| category {| next {| name| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| c =>| {| c.Name(\"Query\");| c.Field(\"user\")| .Resolve(| ctx =>| {| var isTagsOnContext = ctx.IsSelected(\"tags\");| var collection = ctx.Select(\"tags\");| var isAuditOnTagsCollection = collection.IsSelected(\"audit\");| collection = collection.Select(\"audit\");| var isEditedByOnAudiCollection = collection.IsSelected(\"editedBy\");| var operationResult = ((IMiddlewareContext)ctx).OperationResult;| operationResult.SetExtension(| nameof(isTagsOnContext),| isTagsOnContext);| operationResult.SetExtension(| nameof(isAuditOnTagsCollection),| isAuditOnTagsCollection);| operationResult.SetExtension(| nameof(isEditedByOnAudiCollection),| isEditedByOnAudiCollection);| return Query.DummyUser;| });| })| .ExecuteRequestAsync(| \"\"\"| query {| user {| name| tags {| value| name| audit {| editedBy| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| c =>| {| c.Name(\"Query\");| c.Field(\"user\")| .Resolve(| ctx =>| {| ((IMiddlewareContext)ctx).OperationResult.SetExtension(| \"isSelected\",| ctx.Select(\"category\").Select(\"next\").IsSelected(\"name\"));| return Query.DummyUser;| });| })| .ExecuteRequestAsync(| \"\"\"| query {| user {| name| category {| next {| next {| name| }| }| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "MapFieldTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"Wrong\"))| .MapField(new FieldReference(\"Query\", \"foo\"),| _ => context =>| {| context.Result = \"Correct\";| return default;| })| .ExecuteRequestAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"Wrong\"))| .MapField<Middleware>(new FieldReference(\"Query\", \"foo\"))| .ExecuteRequestAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var services = new ServiceCollection();| services.AddSingleton<Middleware>();| await services| .AddGraphQL()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"Wrong\"))| .MapField(| new FieldReference(\"Query\", \"foo\"),| (sp, _) => sp.GetRequiredService<Middleware>())| .ExecuteRequestAsync(\"{ foo }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "ResolverDescriptorTests.cs",
    "methods": [
      {
        "name": "Create_With_ResolverType_Object",
        "body": "{| var descriptor = new ResolverDescriptor(| typeof(string),| new FieldMember(\"a\", \"b\", typeof(object).GetMembers().First()),| resolverType: typeof(object));| Assert.Equal(typeof(string), descriptor.SourceType);| Assert.Null(descriptor.ResolverType);| Assert.NotNull(descriptor.Field.Member);| Assert.Equal(\"a\", descriptor.Field.TypeName);| Assert.Equal(\"b\", descriptor.Field.FieldName);| }"
      },
      {
        "name": "Create_With_ResolverType_Null",
        "body": "{| var descriptor = new ResolverDescriptor(| typeof(string),| new FieldMember(\"a\", \"b\", typeof(object).GetMembers().First()));| Assert.Equal(typeof(string), descriptor.SourceType);| Assert.Null(descriptor.ResolverType);| Assert.NotNull(descriptor.Field.Member);| Assert.Equal(\"a\", descriptor.Field.TypeName);| Assert.Equal(\"b\", descriptor.Field.FieldName);| }"
      },
      {
        "name": "Create_With_ResolverType_Int",
        "body": "{| var descriptor = new ResolverDescriptor(| typeof(string),| new FieldMember(\"a\", \"b\", typeof(object).GetMembers().First()),| resolverType: typeof(int));| Assert.Equal(typeof(string), descriptor.SourceType);| Assert.Equal(typeof(int), descriptor.ResolverType);| Assert.NotNull(descriptor.Field.Member);| Assert.Equal(\"a\", descriptor.Field.TypeName);| Assert.Equal(\"b\", descriptor.Field.FieldName);| }"
      }
    ]
  },
  {
    "file": "ResolverServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ sayHelloAttribute }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .ModifyOptions(o => o.DefaultQueryDependencyInjectionScope = DependencyInjectionScope.Request)| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ sayHelloAttribute }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ sayHelloInferred }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ sayHelloRequest }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .AddScopedServiceInitializer<SayHelloService>(| (request, resolver) =>| {| resolver.Scope += $\"_{request.Scope}\";| })| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ sayHelloAttribute }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .AddMutationType<MutationService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"mutation { doSomethingAttribute }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .AddMutationType<MutationService>()| .ModifyOptions(o => o.DefaultMutationDependencyInjectionScope = DependencyInjectionScope.Resolver)| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"mutation { doSomethingAttribute }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .AddMutationType<MutationService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"mutation { doSomethingInferred }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services =| new ServiceCollection()| .AddScoped<SayHelloService>()| .AddGraphQL()| .AddQueryType<QueryService>()| .AddMutationType<MutationService>()| .Services| .BuildServiceProvider();| var executor = await services.GetRequestExecutorAsync();| // act| IExecutionResult result;| using (var requestScope = services.CreateScope())| {| requestScope.ServiceProvider.GetRequiredService<SayHelloService>().Scope = \"Request\";| result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"mutation { doSomethingResolver }\")| .SetServices(requestScope.ServiceProvider)| .Build());| }| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddKeyedSingleton(\"abc\", (_, _) => new KeyedService(\"abc\"))| .AddKeyedSingleton(\"def\", (_, _) => new KeyedService(\"def\"))| .AddGraphQL()| .AddQueryType<Query>()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(\"{ foo }\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryOptional>()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(\"{ foo }\");| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddKeyedSingleton(\"abc\", (_, _) => new KeyedService(\"abc\"))| .AddKeyedSingleton(\"def\", (_, _) => new KeyedService(\"def\"))| .AddGraphQL()| .AddQueryType<QueryOptional>()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(\"{ foo }\");| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaCoordinateTests.cs",
    "methods": [
      {
        "name": "Create_Type_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\", \"ghi\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate_Without_MemberName",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", argumentName: \"def\");| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"argumentName\", ex.ParamName);| Assert.StartsWith(| \"A argument name without a member name is only allowed on directive coordinates\",| ex.Message);| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", argumentName: \"def\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate_With",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", memberName: \"def\", ofDirective: true);| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"memberName\", ex.ParamName);| Assert.StartsWith(\"A directive cannot contain a member name.\", ex.Message);| }"
      },
      {
        "name": "Parse_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = SchemaCoordinate.Parse(\"Abc.def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Parse_Invalid_SchemaCoordinate",
        "body": "{| // arrange & act| void Fail() => SchemaCoordinate.Parse(\"...\");| // assert| Assert.Throws<SyntaxException>(Fail);| }"
      },
      {
        "name": "TryParse_SchemaCoordinate",
        "body": "{| // arrange & act| var success = SchemaCoordinate.TryParse(\"Abc.def\", out var coordinate);| // assert| Assert.True(success);| Assert.Equal(\"Abc\", coordinate?.Name);| Assert.Equal(\"def\", coordinate?.MemberName);| Assert.Equal(\"Abc.def\", coordinate?.ToString());| }"
      },
      {
        "name": "FromSyntax_Type_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, new(\"def\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      }
    ]
  },
  {
    "file": "SchemaDocumentFormatterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Query {| hello: String| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ConfigureSchemaServices(sp => sp.AddSingleton<ISchemaDocumentFormatter, Formatter1>())| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Query {| hello: String| }| scalar Scalar1| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ConfigureSchemaServices(| sp =>| sp.AddSingleton<ISchemaDocumentFormatter, Formatter1>()| .AddSingleton<ISchemaDocumentFormatter, Formatter2>())| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Query {| hello: String| }| scalar Scalar1| scalar Scalar2| \"\"\");| }"
      }
    ]
  },
  {
    "file": "SchemaErrorTests.cs",
    "methods": [
      {
        "name": "CreateSchemaError_ExceptionAndMessage",
        "body": "{| // arrange| var message = \"FooBar\";| var exception = new Exception();| // act| var schemaError = SchemaErrorBuilder.New()| .SetMessage(message)| .SetException(exception)| .Build();| // assert| Assert.Equal(message, schemaError.Message);| Assert.Equal(exception, schemaError.Exception);| Assert.Empty(schemaError.SyntaxNodes);| Assert.Empty(schemaError.Extensions);| Assert.Null(schemaError.TypeSystemObject);| Assert.Null(schemaError.Path);| Assert.Null(schemaError.Code);| }"
      },
      {
        "name": "CreateSchemaError_Exception",
        "body": "{| // arrange| var exception = new Exception(\"FooBar\");| // act| var schemaError = SchemaErrorBuilder.New()| .SetException(exception)| .Build();| // assert| Assert.Equal(exception.Message, schemaError.Message);| Assert.Equal(exception, schemaError.Exception);| Assert.Empty(schemaError.SyntaxNodes);| Assert.Empty(schemaError.Extensions);| Assert.Null(schemaError.TypeSystemObject);| Assert.Null(schemaError.Path);| Assert.Null(schemaError.Code);| }"
      },
      {
        "name": "CreateSchemaError_ThreeArguments_PopertiesAreSet",
        "body": "{| // arrange| var message = \"FooBar\";| var exception = new Exception();| var type = new StringType();| // act| var schemaError = SchemaErrorBuilder.New()| .SetMessage(message)| .SetException(exception)| .SetTypeSystemObject(type)| .Build();| // assert| Assert.Equal(message, schemaError.Message);| Assert.Equal(exception, schemaError.Exception);| Assert.Equal(type, schemaError.TypeSystemObject);| Assert.Empty(schemaError.SyntaxNodes);| Assert.Empty(schemaError.Extensions);| Assert.Null(schemaError.Path);| Assert.Null(schemaError.Code);| }"
      },
      {
        "name": "CreateSchemaError_SetExtension",
        "body": "{| // arrange| var message = \"FooBar\";| var key = \"foo\";| var value = \"bar\";| // act| var schemaError = SchemaErrorBuilder.New()| .SetMessage(message)| .SetExtension(key, value)| .Build();| // assert| Assert.Equal(message, schemaError.Message);| Assert.Empty(schemaError.SyntaxNodes);| Assert.Collection(schemaError.Extensions,| t =>| {| Assert.Equal(key, t.Key);| Assert.Equal(value, t.Value);| });| Assert.Null(schemaError.Exception);| Assert.Null(schemaError.TypeSystemObject);| Assert.Null(schemaError.Path);| Assert.Null(schemaError.Code);| }"
      },
      {
        "name": "CreateSchemaError_AddSyntaxNode",
        "body": "{| // arrange| var message = \"FooBar\";| var node = new NameNode(\"foo\");| // act| var schemaError = SchemaErrorBuilder.New()| .SetMessage(message)| .AddSyntaxNode(node)| .Build();| // assert| Assert.Equal(message, schemaError.Message);| Assert.Collection(schemaError.SyntaxNodes,| t => Assert.Equal(node, t));| Assert.Empty(schemaError.Extensions);| Assert.Null(schemaError.Exception);| Assert.Null(schemaError.TypeSystemObject);| Assert.Null(schemaError.Path);| Assert.Null(schemaError.Code);| }"
      },
      {
        "name": "Intercept_Schema_Error",
        "body": "{| // arrange| var errorInterceptor = new ErrorInterceptor();| // act| void Action() => SchemaBuilder.New()| .TryAddTypeInterceptor(errorInterceptor)| .Create();| // assert| Assert.Throws<SchemaException>(Action);| Assert.Collection(| errorInterceptor.Exceptions,| ex => Assert.IsType<SchemaException>(ex));| }"
      },
      {
        "name": "IncorrectType_In_Parameters_ShouldThrow",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| test(bar: Input123): String| }\")| .Use(_ => _ => default);| // act| var ex = Assert.Throws<SchemaException>(() => schema.Create());| // assert| Assert.Equal(2, ex.Errors.Count);| ex.Errors.First().Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaFirstTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| test: String| testProp: String| }\")| .AddResolver<Query>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ test testProp }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"schema {| query: FooQuery| }| type FooQuery {| foo(bar: Bar): String| }| input Bar| {| baz: String| }\")| .AddResolver<FooQuery>()| .AddResolver<Bar>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ foo(bar: { baz: \\\"hello\\\"}) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| enumValue: FooEnum| }| enum FooEnum {| BAR| BAZ| }\")| .AddResolver<EnumQuery>(\"Query\")| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ enumValue }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"type Query {| setEnumValue(value:FooEnum) : String| }| enum FooEnum {| BAR| BAZ_BAR| }\")| .AddResolver<EnumQuery>(\"Query\")| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ setEnumValue(value:BAZ_BAR) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(| \"\"\"| type Query {| enumInInputObject(payload: Payload) : String| }| input Payload {| value: FooEnum| }| enum FooEnum {| BAR| BAZ| }| \"\"\")| .AddResolver<EnumQuery>(\"Query\")| .AddResolver<Payload>()| .Create();| // act| var result =| await schema.MakeExecutable().ExecuteAsync(| \"{ enumInInputObject(payload: { value:BAZ } ) }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddDocumentFromString(| \"\"\"| schema {| query: Query| mutation: Mutation| }| type Query {| dummy: String!| }| type Mutation {| changeChannelParameters(| input: ChangeChannelParameterInput!)| : ChangeChannelParameterPayload!| }| input ChangeChannelParameterInput {| parameterChangeInfo: [ParameterValuePair!]!| }| input ParameterValuePair {| value: Any| }| type ChangeChannelParameterPayload {| message: String!| }| scalar Any| \"\"\")| .AddResolver<Query5730>(\"Query\")| .AddResolver<Mutation5730>(\"Mutation\")| .ExecuteRequestAsync(| \"\"\"| mutation {| changeChannelParameters(input: {| parameterChangeInfo: [ { value: { a: \"b\" } } ]| }) {| message| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"changeChannelParameters\": {| \"message\": \"b\"| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "SchemaSerializerTests.cs",
    "methods": [
      {
        "name": "Serialize_SchemaIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => SchemaPrinter.Print(null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "SerializeSchemaWriter_SchemaIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => SchemaPrinter.Serialize(null, new StringWriter());| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "SerializeSchemaWriter_WriterIsNull_ArgumentNullException",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // act| void Action() => SchemaPrinter.Serialize(schema, null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| async Task Action() => await SchemaPrinter.PrintAsync(| default(ISchema),| new MemoryStream());| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // act| async Task Action() => await SchemaPrinter.PrintAsync(schema, null);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      },
      {
        "name": "SerializeSchemaWriter_Serialize",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| var stringBuilder = new StringBuilder();| // act| SchemaPrinter.Serialize(schema, new StringWriter(stringBuilder));| // assert| stringBuilder.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(\"type Query { foo: String }\")| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| using var stream = new MemoryStream();| // act| await SchemaPrinter.PrintAsync(schema, stream);| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      },
      {
        "name": "SerializeSchemaWithDirective",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(FileResource.Open(\"serialize_schema.graphql\"))| .AddDirectiveType(new DirectiveType(t => t| .Name(\"upper\")| .Location(DirectiveLocation.FieldDefinition)))| .Use(next => next)| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // act| var serializedSchema = schema.ToString();| // assert| serializedSchema.MatchSnapshot();| }"
      },
      {
        "name": "SerializeSchemaWithMutationWithoutSubscription",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(FileResource.Open(\"serialize_schema_with_mutation.graphql\"))| .Use(next => next)| .Create();| // act| var serializedSchema = schema.ToString();| // assert| serializedSchema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(FileResource.Open(\"serialize_schema_with_mutation.graphql\"))| .Use(next => next)| .Create();| // act| using var stream = new MemoryStream();| await SchemaPrinter.PrintAsync(| new INamedType[] { schema.QueryType, },| stream,| true);| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(FileResource.Open(\"serialize_schema_with_mutation.graphql\"))| .Use(next => next)| .Create();| // act| using var stream = new MemoryStream();| async Task Fail() => await SchemaPrinter.PrintAsync(| default(IEnumerable<INamedType>),| stream,| true);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddDocumentFromString(FileResource.Open(\"serialize_schema_with_mutation.graphql\"))| .Use(next => next)| .Create();| // act| using var stream = new MemoryStream();| async Task Fail() => await SchemaPrinter.PrintAsync(| new INamedType[] { schema.QueryType, },| null,| true);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "SemanticNonNullTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarListReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarListItemThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureScalarListItemThrowingError| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableScalarListItemReturningNull| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectListReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| objectListItemThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureObjectListItemThrowingError {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| pureNullableObjectListItemReturningNull {| property| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.StrictValidation = false;| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddMutationType<Mutation>()| .ExecuteRequestAsync(\"\"\"| mutation {| someMutationReturningNull {| scalarReturningNull| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| scalarConnection {| edges {| node| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nullableScalarConnection {| edges {| node| }| }| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nestedScalarArrayNullableOuterItems| }| \"\"\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await new ServiceCollection()| .AddGraphQL()| .ModifyOptions(o =>| {| o.EnableSemanticNonNull = true;| })| .AddMutationConventions()| .AddQueryType<Query>()| .ExecuteRequestAsync(\"\"\"| {| nestedScalarArrayNullableMiddleItem| }| \"\"\");| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ArgumentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // https://github.com/ChilliCream/graphql-platform/issues/4281| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .UseField<Middleware>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(@\"{| arrayOfScalarsA: arrayOfScalars(values: 1)| arrayOfScalarsB: arrayOfScalars(values: [1, 2])| arrayOfObjectsA: arrayOfObjects(values: { bar: 1 }) { bar }| arrayOfObjectsB: arrayOfObjects(values: [{ bar: 1 }, { bar: 2 }]) { bar }| listOfScalarsA: listOfScalars(values: 1)| listOfScalarsB: listOfScalars(values: [1, 2])| listOfObjectsA: listOfObjects(values: { bar: 1 }) { bar }| listOfObjectsB: listOfObjects(values: [{ bar: 1 }, { bar: 2 }]) { bar }| }\")| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ExtendObjectTypeAttributeTests.cs",
    "methods": [
      {
        "name": "NonGeneric_ImplicitlyExtends",
        "body": "{| SchemaBuilder.New()| .AddQueryType<FooType>()| .AddType<NonGenericExtendFoo>()| .ModifyOptions(options => options.DefaultBindingBehavior = BindingBehavior.Explicit)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Generic_ImplicitlyExtends",
        "body": "{| SchemaBuilder.New()| .AddQueryType<FooType>()| .AddType<GenericExtendFoo>()| .ModifyOptions(options => options.DefaultBindingBehavior = BindingBehavior.Explicit)| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequiredAttributeTests.cs",
    "methods": [
      {
        "name": "Infer_RequiredAttribute_As_NonNull",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Foo>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Ignore_RequiredAttribute",
        "body": "{| // arrange| var inspector = new DefaultTypeInspector(ignoreRequiredAttribute: true);| var services = new DictionaryServiceProvider(typeof(ITypeInspector), inspector);| // act & assert| SchemaBuilder.New()| .AddQueryType<Foo>()| .AddServices(services)| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "BindingBehaviorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddType<Query1>()| .ModifyOptions(o => o.DefaultBindingBehavior = BindingBehavior.Explicit)| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Book1 {| title: String| category: BookCategory1!| }| type Query {| books: Book1| }| enum BookCategory1 {| A| B| C| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddType<Query2>()| .ModifyOptions(o => o.DefaultBindingBehavior = BindingBehavior.Explicit)| .BuildSchemaAsync();| var error = await Assert.ThrowsAsync<SchemaException>(Error);| error.Message.MatchInlineSnapshot(| \"\"\"| For more details look at the `Errors` property.| 1. The enum type `BookCategory2` has no values. (HotChocolate.Types.EnumType<HotChocolate.Types.BindingBehaviorTests.BookCategory2>)| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType()| .AddType<Query3>()| .AddType<BookCategory3Type>()| .ModifyOptions(o => o.DefaultBindingBehavior = BindingBehavior.Explicit)| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Book3 {| title: String| category: BookCategory3!| }| type Query {| books: Book3| }| enum BookCategory3 {| A| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "DescriptionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await GetSchemaWithAllPossibleDescriptionsAsync();| // act| // assert| SchemaPrinter| .PrintSchema(schema)| .Print(indented: true)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await GetSchemaWithAllPossibleDescriptionsAsync();| // act| // assert| SchemaPrinter| .PrintSchema(schema)| .Print(indented: false)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\"Comment with manual\\nline break\"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"\"| schema {| query: Query| }| type Query {| \"\"\"| Comment with manual| line break| \"\"\"| field: String| }| \"\"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\"Comment with manual\\n\\nline breaks\"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"\"| schema {| query: Query| }| type Query {| \"\"\"| Comment with manual| line breaks| \"\"\"| field: String| }| \"\"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\" Single line comment \"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"| schema {| query: Query| }| type Query {| \"Single line comment\"| field: String| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\" Multi line\\ncomment \"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"\"| schema {| query: Query| }| type Query {| \"\"\"| Multi line| comment| \"\"\"| field: String| }| \"\"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\"\"\"| Multi| line| description| \"\"\"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"\"| schema {| query: Query| }| type Query {| \"\"\"| Multi| line| description| \"\"\"| field: String| }| \"\"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .UseField(_ => _)| .AddQueryType(d => d| .Field(\"field\").Type<StringType>()| .Description(\"Single line with linebreak at end\\n\"))| .BuildSchemaAsync();| // act| // assert| schema.ToString().MatchInlineSnapshot(\"\"\"\"| schema {| query: Query| }| type Query {| \"Single line with linebreak at end\"| field: String| }| \"\"\"\");| }"
      }
    ]
  },
  {
    "file": "ArgumentDescriptorTests.cs",
    "methods": [
      {
        "name": "Create_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => new ArgumentDescriptor(Context, \"Type\", null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "DotNetTypesDoNotOverwriteSchemaTypes",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| descriptor| .Type<ListType<StringType>>()| .Type<NativeType<IReadOnlyDictionary<string, string>>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SetTypeInstance",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| descriptor.Type(new StringType());| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.IsType<StringType>(| Assert.IsType<SchemaTypeReference>(typeRef).Type);| }"
      },
      {
        "name": "SetGenericType",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| descriptor.Type<StringType>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SetNonGenericType",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| descriptor.Type(typeof(StringType));| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SchemaTypesOverwriteDotNetTypes",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| ((IArgumentDescriptor)descriptor)| .Type<NativeType<IReadOnlyDictionary<string, string>>>()| .Type<ListType<StringType>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "GetName",
        "body": "{| // act| var descriptor = new ArgumentDescriptor(Context, \"args\");| // assert| Assert.Equal(\"args\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "GetNameAndType",
        "body": "{| // act| var descriptor = new ArgumentDescriptor(| Context, \"args\", typeof(string));| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(\"args\", description.Name);| Assert.Equal(typeof(string),| Assert.IsType<ExtendedTypeReference>(description.Type).Type.Source);| }"
      },
      {
        "name": "SetDescription",
        "body": "{| // arrange| var expectedDescription = Guid.NewGuid().ToString();| var descriptor = new ArgumentDescriptor(Context, \"Type\");| // act| descriptor.Description(expectedDescription);| // assert| Assert.Equal(expectedDescription,| descriptor.CreateDefinition().Description);| }"
      },
      {
        "name": "SetDefaultValueAndInferType",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor.DefaultValue(\"string\");| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(typeof(string),| Assert.IsType<ExtendedTypeReference>(description.Type).Type.Source);| Assert.Equal(\"string\",| description.RuntimeDefaultValue);| }"
      },
      {
        "name": "SetDefaultValueViaSyntax",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor.DefaultValueSyntax(\"[]\");| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<ListValueNode>(description.DefaultValue);| }"
      },
      {
        "name": "SetDefaultValueNull",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor.DefaultValue(null);| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(NullValueNode.Default, description.DefaultValue);| Assert.Null(description.RuntimeDefaultValue);| }"
      },
      {
        "name": "OverwriteDefaultValueLiteralWithNativeDefaultValue",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor| .DefaultValue(new StringValueNode(\"123\"))| .DefaultValue(\"string\");| // assert| var description = descriptor.CreateDefinition();| Assert.Null(description.DefaultValue);| Assert.Equal(\"string\", description.RuntimeDefaultValue);| }"
      },
      {
        "name": "SettingTheNativeDefaultValueToNullCreatesNullLiteral",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor| .DefaultValue(new StringValueNode(\"123\"))| .DefaultValue(\"string\")| .DefaultValue(null);| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<NullValueNode>(description.DefaultValue);| Assert.Null(description.RuntimeDefaultValue);| }"
      },
      {
        "name": "OverwriteNativeDefaultValueWithDefaultValueLiteral",
        "body": "{| // arrange| var descriptor = new ArgumentDescriptor(Context, \"args\");| // act| descriptor| .DefaultValue(\"string\")| .DefaultValue(new StringValueNode(\"123\"));| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<StringValueNode>(description.DefaultValue);| Assert.Equal(\"123\", ((StringValueNode)description.DefaultValue).Value);| Assert.Null(description.RuntimeDefaultValue);| }"
      },
      {
        "name": "Type_Syntax_Type_Null",
        "body": "{| void Error() => ArgumentDescriptor.New(Context, \"foo\").Type((string)null);| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Type_Syntax_Descriptor_Null",
        "body": "{| void Error() => default(ArgumentDescriptor).Type(\"foo\");| Assert.Throws<ArgumentNullException>(Error);| }"
      }
    ]
  },
  {
    "file": "DefaultNamingConventionsTests.cs",
    "methods": [
      {
        "name": "GetEnumValueDescription_XmlDescription",
        "body": "{| // arrange| var namingConventions = new DefaultNamingConventions(| new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool()));| // act| var result = namingConventions.GetEnumValueDescription(EnumWithDocEnum.Value1);| // assert| Assert.Equal(\"Value1 Documentation\", result);| }"
      },
      {
        "name": "GetEnumValueDescription_AttributeDescription",
        "body": "{| // arrange| var namingConventions = new DefaultNamingConventions(| new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool()));| // act| var result = namingConventions.GetEnumValueDescription(Foo.Baz);| // assert| Assert.Equal(\"Baz Desc\", result);| }"
      }
    ]
  },
  {
    "file": "DefaultTypeInspectorTests.cs",
    "methods": [
      {
        "name": "Discover_Property_That_Returns_Object_And_Has_TypeAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(ObjectPropWithTypeAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Property_That_Returns_Object_And_Has_DescriptorAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(ObjectPropWithDescriptorAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_Object_And_Has_TypeAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(ObjectMethodWithTypeAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_Object_And_Has_DescriptorAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(ObjectMethodWithDescriptorAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_With_Object_Parameter_And_Has_TypeAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(| typeof(MethodAndObjectParameterWithTypeAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_With_Object_Parameter_And_Has_DescriptorAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(| typeof(MethodAndObjectParameterWithDescriptorAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_TaskObject_And_Has_TypeAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(TaskObjectMethodWithTypeAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_TaskObject_And_Has_DescriptorAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(TaskObjectMethodWithDescriptorAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_ValueTaskObject_And_Has_TypeAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(typeof(ValueTaskObjectMethodWithTypeAttribute)).ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "Discover_Method_That_Returns_ValueTaskObject_And_Has_DescriptorAttribute",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var discovered =| typeInspector.GetMembers(| typeof(ValueTaskObjectMethodWithDescriptorAttribute))| .ToArray();| // assert| Assert.Collection(discovered,| p => Assert.Equal(\"ShouldBeFound\", p.Name));| }"
      },
      {
        "name": "GetReturnTypeRef_FromMethod",
        "body": "{| // arrange| var method = typeof(Foo).GetMethod(nameof(Foo.Bar));| var typeInspector = new DefaultTypeInspector();| // act| var typeReference =| typeInspector.GetReturnTypeRef(method!, TypeContext.Output);| // assert| var extTypeRef = Assert.IsType<ExtendedTypeReference>(typeReference);| Assert.Equal(\"List<String!>!\", extTypeRef.Type.ToString());| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Null(typeReference.Scope);| }"
      },
      {
        "name": "GetReturnTypeRef_FromMethod_With_Scope",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var method = typeof(Foo).GetMethod(nameof(Foo.Bar));| // act| var typeReference =| typeInspector.GetReturnTypeRef(method!, TypeContext.Output, \"abc\");| // assert| var extTypeRef = Assert.IsType<ExtendedTypeReference>(typeReference);| Assert.Equal(\"List<String!>!\", extTypeRef.Type.ToString());| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "GetReturnTypeRef_FromMethod_Member_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() =>| typeInspector.GetReturnTypeRef(null!, TypeContext.Output);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetReturnType_FromMethod",
        "body": "{| // arrange| var method = typeof(Foo).GetMethod(nameof(Foo.Bar));| var typeInspector = new DefaultTypeInspector();| // act| var extendedType = typeInspector.GetReturnType(method!);| // assert| Assert.Equal(\"List<String!>!\", extendedType.ToString());| }"
      },
      {
        "name": "GetReturnType_FromMethod_Member_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetReturnType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetArgumentTypeRef",
        "body": "{| // arrange| var parameter = typeof(Foo).GetMethod(nameof(Foo.Baz))!.GetParameters()[0];| var typeInspector = new DefaultTypeInspector();| // act| var typeReference = typeInspector.GetArgumentTypeRef(parameter!);| // assert| var extTypeRef = Assert.IsType<ExtendedTypeReference>(typeReference);| Assert.Equal(\"String!\", extTypeRef.Type.ToString());| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Null(typeReference.Scope);| }"
      },
      {
        "name": "GetArgumentTypeRef_With_Scope",
        "body": "{| // arrange| var parameter = typeof(Foo).GetMethod(nameof(Foo.Baz))!.GetParameters()[0];| var typeInspector = new DefaultTypeInspector();| // act| var typeReference = typeInspector.GetArgumentTypeRef(parameter!, \"abc\");| // assert| var extTypeRef = Assert.IsType<ExtendedTypeReference>(typeReference);| Assert.Equal(\"String!\", extTypeRef.Type.ToString());| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "GetMemberType_With_SyntaxTypeRef",
        "body": "{| // arrange| var property =| typeof(ObjectPropWithSyntaxType)| .GetProperty(nameof(ObjectPropWithSyntaxType.ShouldBeFound))!;| var typeInspector = new DefaultTypeInspector();| // act| var typeReference = typeInspector.GetReturnTypeRef(property!);| // assert| var extTypeRef = Assert.IsType<SyntaxTypeReference>(typeReference);| Assert.Equal(\"[String]\", extTypeRef.Type.ToString());| Assert.Equal(TypeContext.None, typeReference.Context);| Assert.Null(typeReference.Scope);| }"
      },
      {
        "name": "GetArgumentTypeRef_Parameter_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetArgumentTypeRef(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetArgumentType",
        "body": "{| // arrange| var parameter = typeof(Foo).GetMethod(nameof(Foo.Baz))!.GetParameters()[0];| var typeInspector = new DefaultTypeInspector();| // act| var extendedType = typeInspector.GetArgumentType(parameter!);| // assert| Assert.Equal(\"String!\", extendedType.ToString());| }"
      },
      {
        "name": "GetArgumentType_Parameter_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetArgumentType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetTypeRef",
        "body": "{| // arrange| var type = typeof(Foo);| var typeInspector = new DefaultTypeInspector();| // act| var typeReference =| typeInspector.GetTypeRef(type!, TypeContext.Output);| // assert| Assert.Equal(\"Foo\", typeReference.Type.ToString());| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Null(typeReference.Scope);| }"
      },
      {
        "name": "GetTypeRef_With_Scope",
        "body": "{| // arrange| var type = typeof(Foo);| var typeInspector = new DefaultTypeInspector();| // act| var typeReference =| typeInspector.GetTypeRef(type!, TypeContext.Output, \"abc\");| // assert| Assert.Equal(\"Foo\", typeReference.Type.ToString());| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "GetTypeRef_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetTypeRef(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetType_Type_Is_Foo",
        "body": "{| // arrange| var type = typeof(Foo);| var typeInspector = new DefaultTypeInspector();| // act| var extendedType = typeInspector.GetType(type!);| // assert| Assert.Equal(\"Foo\", extendedType.ToString());| }"
      },
      {
        "name": "GetType_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetType2_Rewrite_Foo_To_NonNullFoo",
        "body": "{| // arrange| var type = typeof(Foo);| var typeInspector = new DefaultTypeInspector();| // act| var extendedType = typeInspector.GetType(type!, false);| // assert| Assert.Equal(\"Foo!\", extendedType.ToString());| }"
      },
      {
        "name": "GetType2_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetType(null!, false);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetType2_Nullable_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetType(typeof(Foo), default!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetEnumValues",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var values = typeInspector.GetEnumValues(typeof(BarEnum));| // assert| Assert.Collection(| values,| t => Assert.Equal(BarEnum.Bar, t),| t => Assert.Equal(BarEnum.Baz, t));| }"
      },
      {
        "name": "GetEnumValues_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetEnumValues(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "GetEnumValueMember",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var valueMember = typeInspector.GetEnumValueMember(BarEnum.Bar);| // assert| Assert.Equal(\"Bar\", valueMember!.Name);| }"
      },
      {
        "name": "GetEnumValueMember_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.GetEnumValueMember(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "ExtractNamedType_From_Non_SchemaType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var type = typeInspector.ExtractNamedType(typeof(List<string>));| // assert| Assert.Equal(typeof(List<string>), type);| }"
      },
      {
        "name": "ExtractNamedType_From_SchemaType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var type = typeInspector.ExtractNamedType(typeof(ListType<StringType>));| // assert| Assert.Equal(typeof(StringType), type);| }"
      },
      {
        "name": "ExtractNamedType_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.ExtractNamedType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsSchemaType_From_Non_SchemaType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var isSchemaType = typeInspector.IsSchemaType(typeof(List<string>));| // assert| Assert.False(isSchemaType);| }"
      },
      {
        "name": "IsSchemaType_From_SchemaType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var isSchemaType = typeInspector.IsSchemaType(typeof(ListType<StringType>));| // assert| Assert.True(isSchemaType);| }"
      },
      {
        "name": "IsSchemaType_Type_Is_Null",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| void Action() => typeInspector.IsSchemaType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "CollectNullability_Nullable_StringType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var extendedType = typeInspector.GetType(typeof(StringType));| // act| var nullability = typeInspector.CollectNullability(extendedType);| // assert| Assert.Collection(nullability, item => Assert.True(item));| }"
      },
      {
        "name": "CollectNullability_NonNull_StringType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var extendedType = typeInspector.GetType(typeof(NonNullType<StringType>));| // act| var nullability = typeInspector.CollectNullability(extendedType);| // assert| Assert.Collection(nullability, item => Assert.False(item));| }"
      },
      {
        "name": "CollectNullability_List_NonNull_StringType",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| var extendedType = typeInspector.GetType(| typeof(ListType<NonNullType<StringType>>));| // act| var nullability = typeInspector.CollectNullability(extendedType);| // assert| Assert.Collection(nullability, Assert.True, Assert.False);| }"
      },
      {
        "name": "EnsureOnlyThingsWeUnderstandAreInferred",
        "body": "{| // arrange| var typeInspector = new DefaultTypeInspector();| // act| var members = new List<MemberInfo>();| foreach (var member in typeInspector.GetMembers(typeof(DoNotInfer)))| {| members.Add(member);| }| // assert| Assert.Collection(| members.OrderBy(t => t.Name),| member => Assert.Equal(\"AsyncEnumerable\", member.Name),| member => Assert.Equal(\"DoInfer\", member.Name));| }"
      }
    ]
  },
  {
    "file": "XmlDocumentationProviderTests.cs",
    "methods": [
      {
        "name": "When_xml_doc_is_missing_then_description_is_empty",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(typeof(Point));| // assert| Assert.Null(description);| }"
      },
      {
        "name": "When_xml_doc_with_multiple_breaks_is_read_then_they_are_not_stripped_away",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(WithMultilineXmlDoc)| .GetProperty(nameof(WithMultilineXmlDoc.Foo))!);| // assert| Assert.Matches(new Regex(@\"\\n[ \\t]*\\n\"), description);| Assert.Contains(\" * Users\", description);| Assert.Equal(description.Trim(), description);| }"
      },
      {
        "name": "When_description_has_see_tag_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(WithSeeTagInXmlDoc)| .GetProperty(nameof(WithSeeTagInXmlDoc.Foo))!);| // asssert| Assert.Equal(| \"null for the default Record.\\nSee this and\\nthis\" +| \" at\\nhttps://foo.com/bar/baz.\",| description);| }"
      },
      {
        "name": "When_description_has_paramref_tag_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(WithParamrefTagInXmlDoc)| .GetMethod(nameof(WithParamrefTagInXmlDoc.Foo))!);| // assert| Assert.Equal(| \"This is a parameter reference to id.\",| description);| }"
      },
      {
        "name": "When_description_has_generic_tags_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(WithGenericTagsInXmlDoc)| .GetProperty(nameof(WithGenericTagsInXmlDoc.Foo))!);| // assert| Assert.Equal(\"These are some tags.\", description);| }"
      },
      {
        "name": "When_type_has_description_then_it_it_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(BaseBaseClass));| // assert| Assert.Equal(\"I am the most base class.\", description);| }"
      },
      {
        "name": "When_we_use_custom_documentation_files_they_are_correctly_loaded",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(_ => \"Dummy.xml\"),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(BaseBaseClass));| // assert| Assert.Equal(\"I am the most base class from dummy.\", description);| }"
      },
      {
        "name": "When_parameter_has_inheritdoc_then_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var parameterXml = documentationProvider.GetDescription(| typeof(ClassWithInheritdoc)| .GetMethod(nameof(ClassWithInheritdoc.Bar))!| .GetParameters()| .Single(p => p.Name == \"baz\"));| // assert| Assert.Equal(\"Parameter details.\", parameterXml);| }"
      },
      {
        "name": "When_method_has_inheritdoc_then_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methoddescription = documentationProvider.GetDescription(| typeof(ClassWithInheritdoc)| .GetMethod(nameof(ClassWithInheritdoc.Bar))!);| // assert| Assert.Equal(\"Method doc.\", methoddescription);| }"
      },
      {
        "name": "When_property_has_inheritdoc_then_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInheritdoc)| .GetProperty(nameof(ClassWithInheritdoc.Foo))!);| // assert| Assert.Equal(\"Summary of foo.\", description);| }"
      },
      {
        "name": "When_type_is_an_interface_then_description_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(IBaseBaseInterface));| // assert| Assert.Equal(\"I am an interface.\", description);| }"
      },
      {
        "name": "When_parameter_has_inheritdoc_on_interface_then_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInheritdocOnInterface)| .GetMethod(nameof(ClassWithInheritdocOnInterface.Bar))!| .GetParameters()| .Single(p => p.Name == \"baz\"));| // assert| Assert.Equal(\"Parameter summary.\", description);| }"
      },
      {
        "name": "When_property_has_inheritdoc_on_interface_then_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInheritdocOnInterface)| .GetProperty(nameof(ClassWithInheritdocOnInterface.Foo))!);| // assert| Assert.Equal(\"Property summary.\", description);| }"
      },
      {
        "name": "When_method_has_inheritdoc_then_on_interface_it_is_resolved",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(ClassWithInheritdocOnInterface)| .GetMethod(nameof(ClassWithInheritdocOnInterface.Bar))!);| // assert| Assert.Equal(\"Method summary.\", methodDescription);| }"
      },
      {
        "name": "When_class_implements_interface_and_property_has_description_then_property_description_is_used",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInterfaceAndCustomSummaries)| .GetProperty(nameof(ClassWithInterfaceAndCustomSummaries.Foo))!);| // assert| Assert.Equal(\"I am my own property.\", description);| }"
      },
      {
        "name": "When_class_implements_interface_and_method_has_description_then_method_description_is_used",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInterfaceAndCustomSummaries)| .GetMethod(nameof(ClassWithInterfaceAndCustomSummaries.Bar))!);| // assert| Assert.Equal(\"I am my own method.\", description);| }"
      },
      {
        "name": "When_class_implements_interface_and_method_has_description_then_method_parameter_description_is_used",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithInterfaceAndCustomSummaries)| .GetMethod(nameof(ClassWithInterfaceAndCustomSummaries.Bar))!| .GetParameters()| .Single(p => p.Name == \"baz\"));| // assert| Assert.Equal(\"I am my own parameter.\", description);| }"
      },
      {
        "name": "When_class_has_description_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var description = documentationProvider.GetDescription(| typeof(ClassWithSummary));| // assert| Assert.Equal(\"I am a test class. This should not be escaped: >\", description);| }"
      },
      {
        "name": "When_method_has_exceptions_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithExceptionsXmlDoc).GetMethod(nameof(WithExceptionsXmlDoc.Foo))!);| // assert| methodDescription.MatchSnapshot();| }"
      },
      {
        "name": "When_method_has_exceptions_then_exceptions_with_no_code_will_be_ignored",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithExceptionsXmlDoc).GetMethod(nameof(WithExceptionsXmlDoc.Bar))!);| // assert| methodDescription.MatchSnapshot();| }"
      },
      {
        "name": "When_method_has_only_exceptions_with_no_code_then_error_section_will_not_be_written",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithExceptionsXmlDoc).GetMethod(nameof(WithExceptionsXmlDoc.Baz))!);| // assert| methodDescription.MatchSnapshot();| }"
      },
      {
        "name": "When_method_has_no_exceptions_then_it_is_ignored",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithoutExceptionsXmlDoc).GetMethod(nameof(WithoutExceptionsXmlDoc.Foo))!);| // assert| methodDescription.MatchSnapshot();| }"
      },
      {
        "name": "When_method_has_returns_then_it_is_converted",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithReturnsXmlDoc).GetMethod(nameof(WithReturnsXmlDoc.Foo))!);| // assert| methodDescription.MatchSnapshot();| }"
      },
      {
        "name": "When_method_has_no_returns_then_it_is_ignored",
        "body": "{| // arrange| var documentationProvider = new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool());| // act| var methodDescription = documentationProvider.GetDescription(| typeof(WithoutReturnsXmlDoc).GetMethod(nameof(WithoutReturnsXmlDoc.Foo))!);| // assert| methodDescription.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DefinitionBaseTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange & act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d.Description(\"Query\"))| .AddTypeExtension(typeof(QueryExtWithDocs1))| .AddTypeExtension(typeof(QueryExtWithDocs2))| .BuildSchemaAsync();| // assert| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| \"Query\"| type Query {| foo1: Int!| foo2: Int!| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "DescriptorContextTests.cs",
    "methods": [
      {
        "name": "Create_With_Custom_NamingConventions",
        "body": "{| // arrange| var options = new SchemaOptions();| var namingConventions = new DefaultNamingConventions(| new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool()));| var conventions = new Dictionary<(Type, string), List<CreateConvention>>();| var services = new DictionaryServiceProvider(| typeof(INamingConventions),| namingConventions);| // act| var context = DescriptorContext.Create(| options,| services,| conventions,| new Dictionary<string, object>(),| new SchemaBuilder.LazySchema(),| new AggregateTypeInterceptor());| // assert| Assert.Equal(namingConventions, context.Naming);| Assert.NotNull(context.TypeInspector);| Assert.Equal(options, context.Options);| }"
      },
      {
        "name": "Create_With_Custom_NamingConventions_AsIConvention",
        "body": "{| // arrange| var options = new SchemaOptions();| var naming = new DefaultNamingConventions(| new XmlDocumentationProvider(| new XmlDocumentationFileResolver(),| new NoOpStringBuilderPool()));| var conventions = new Dictionary<(Type, string), List<CreateConvention>>| {| {| (typeof(INamingConventions), null), [_ => naming,]| },| };| // act| var context = DescriptorContext.Create(| options,| EmptyServiceProvider.Instance,| conventions,| new Dictionary<string, object>(),| new SchemaBuilder.LazySchema(),| new AggregateTypeInterceptor());| // assert| Assert.Equal(naming, context.Naming);| Assert.NotNull(context.TypeInspector);| Assert.Equal(options, context.Options);| }"
      },
      {
        "name": "Create_With_Custom_TypeInspector",
        "body": "{| // arrange| var options = new SchemaOptions();| var inspector = new DefaultTypeInspector();| var conventions = new Dictionary<(Type, string), List<CreateConvention>>();| var services = new DictionaryServiceProvider(| typeof(ITypeInspector),| inspector);| // act| var context = DescriptorContext.Create(| options,| services,| conventions,| new Dictionary<string, object>(),| new SchemaBuilder.LazySchema(),| new AggregateTypeInterceptor());| // assert| Assert.Equal(inspector, context.TypeInspector);| Assert.NotNull(context.Naming);| Assert.Equal(options, context.Options);| }"
      },
      {
        "name": "Create_Without_Services",
        "body": "{| // arrange| // act| var context = DescriptorContext.Create();| // assert| Assert.NotNull(context.Options);| Assert.NotNull(context.Naming);| Assert.NotNull(context.TypeInspector);| }"
      }
    ]
  },
  {
    "file": "DirectiveArgumentDescriptorTests.cs",
    "methods": [
      {
        "name": "Type_Syntax_Type_Null",
        "body": "{| void Error() => DirectiveArgumentDescriptor.New(Context, \"foo\").Type((string)null);| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Type_Syntax_Descriptor_Null",
        "body": "{| void Error() => default(DirectiveArgumentDescriptor).Type(\"foo\");| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "SetDefaultValueViaSyntax",
        "body": "{| // arrange| var descriptor = DirectiveArgumentDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.DefaultValueSyntax(\"[]\");| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<ListValueNode>(description.DefaultValue);| }"
      }
    ]
  },
  {
    "file": "DirectiveDescriptorTests.cs",
    "methods": [
      {
        "name": "DeclareName",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| descriptor.Name(\"Foo\");| // assert| Assert.Equal(\"Foo\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "InferName",
        "body": "{| // arrange| // act| var descriptor = DirectiveTypeDescriptor.New<CustomDirective>(Context);| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(\"custom\", description.Name);| }"
      },
      {
        "name": "OverrideName",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.Name(\"Foo\");| // assert| var description =| descriptor.CreateDefinition();| Assert.Equal(\"Foo\", description.Name);| }"
      },
      {
        "name": "DeclareNullName",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| Action a = () => descriptor.Name(null);| // assert| Assert.Throws<ArgumentException>(a);| }"
      },
      {
        "name": "DeclareEmptyName",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| Action a = () => descriptor.Name(string.Empty);| // assert| Assert.Throws<ArgumentException>(a);| }"
      },
      {
        "name": "DeclareDescription",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| descriptor.Description(\"Desc\");| // assert| Assert.Equal(\"Desc\", descriptor.CreateDefinition().Description);| }"
      },
      {
        "name": "DeclareArgument",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| descriptor.Argument(\"arg\").Type<BooleanType>(); ;| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(\"arg\", description.Arguments.Single().Name);| }"
      },
      {
        "name": "DeclareArgumentWithProperty",
        "body": "{| // arrange| // act| var descriptor = DirectiveTypeDescriptor.New<CustomDirective>(Context);| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(\"fieldA\", t.Name),| t => Assert.Equal(\"fieldB\", t.Name));| }"
      },
      {
        "name": "DeclareExplicitArgumentBinding",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.BindArguments(BindingBehavior.Explicit);| descriptor.Argument(t => t.FieldA);| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(\"fieldA\", t.Name));| }"
      },
      {
        "name": "DeclareArgumentAndSpecifyType",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.Argument(t => t.FieldA).Type<NonNullType<StringType>>();| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(| typeof(NonNullType<StringType>),| Assert.IsType<ExtendedTypeReference>(t.Type).Type.Source),| t => Assert.Equal(| typeof(string),| Assert.IsType<ExtendedTypeReference>(t.Type).Type.Source));| }"
      },
      {
        "name": "DeclareArgumentAndSpecifyClrType",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.Argument(t => t.FieldA).Type(typeof(NonNullType<StringType>));| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(| typeof(NonNullType<StringType>),| Assert.IsType<ExtendedTypeReference>(t.Type).Type.Source),| t => Assert.Equal(| typeof(string),| Assert.IsType<ExtendedTypeReference>(t.Type).Type.Source));| }"
      },
      {
        "name": "IgnoreArgumentBinding",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.Argument(t => t.FieldA).Ignore();| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(\"fieldB\", t.Name));| }"
      },
      {
        "name": "UnignoreArgumentBinding",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| descriptor.Argument(t => t.FieldA).Ignore();| descriptor.Argument(t => t.FieldA).Ignore(false);| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Arguments,| t => Assert.Equal(\"fieldA\", t.Name),| t => Assert.Equal(\"fieldB\", t.Name));| }"
      },
      {
        "name": "MethodsAreNotAllowedAsArguments",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective>(Context);| // act| Action action = () => descriptor.Argument(t => t.Foo()).Ignore();| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "DeclareLocation",
        "body": "{| // arrange| var descriptor = DirectiveTypeDescriptor.New(Context);| // act| descriptor.Location(DirectiveLocation.Enum);| descriptor.Location(DirectiveLocation.Enum);| descriptor.Location(DirectiveLocation.EnumValue);| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Locations.AsEnumerable(),| t => Assert.Equal(DirectiveLocation.Enum, t),| t => Assert.Equal(DirectiveLocation.EnumValue, t));| }"
      }
    ]
  },
  {
    "file": "EnumTypeDescriptorTests.cs",
    "methods": [
      {
        "name": "InferNameFromType",
        "body": "{| // act| var descriptor = EnumTypeDescriptor.New(Context, typeof(FooEnum));| // assert| Assert.Equal(\"FooEnum\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "NoTypeProvided",
        "body": "{| // act| Action a = () => EnumTypeDescriptor.New(Context, (Type)null);| // assert| Assert.Throws<ArgumentNullException>(a);| }"
      },
      {
        "name": "InferValuesFromType",
        "body": "{| // act| var descriptor = EnumTypeDescriptor.New(Context, typeof(FooEnum));| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Values,| t =>| {| Assert.Equal(\"BAR1\", t.Name);| Assert.Equal(FooEnum.Bar1, t.RuntimeValue);| },| t =>| {| Assert.Equal(\"BAR2\", t.Name);| Assert.Equal(FooEnum.Bar2, t.RuntimeValue);| });| }"
      },
      {
        "name": "SpecifyOneValueInferTheOthers",
        "body": "{| // arrange| var descriptor = EnumTypeDescriptor.New(Context, typeof(FooEnum));| // act| IEnumTypeDescriptor desc = descriptor;| desc.Value(FooEnum.Bar1).Name(\"FOOBAR\");| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Values,| t =>| {| Assert.Equal(\"FOOBAR\", t.Name);| Assert.Equal(FooEnum.Bar1, t.RuntimeValue);| },| t =>| {| Assert.Equal(\"BAR2\", t.Name);| Assert.Equal(FooEnum.Bar2, t.RuntimeValue);| });| }"
      },
      {
        "name": "ExplicitValueBinding",
        "body": "{| // arrange| var descriptor = EnumTypeDescriptor.New(Context, typeof(FooEnum));| // act| IEnumTypeDescriptor desc = descriptor;| desc.Value(FooEnum.Bar1).Name(\"FOOBAR\");| desc.BindValues(BindingBehavior.Explicit);| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Values,| t =>| {| Assert.Equal(\"FOOBAR\", t.Name);| Assert.Equal(FooEnum.Bar1, t.RuntimeValue);| });| }"
      },
      {
        "name": "AddDirective",
        "body": "{| // arrange| var descriptor = EnumTypeDescriptor.New(Context);| // act| IEnumTypeDescriptor desc = descriptor;| desc.Directive(\"Bar\");| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(| description.Directives,| t => Assert.Equal(\"Bar\", Assert.IsType<DirectiveNode>(t.Value).Name.Value));| }"
      },
      {
        "name": "AddDirectiveWithDirectiveNode",
        "body": "{| // arrange| var descriptor = EnumTypeDescriptor.New(Context);| // act| IEnumTypeDescriptor desc = descriptor;| desc.Directive(new DirectiveNode(\"Bar\"));| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Directives,| t => Assert.Equal(\"Bar\", Assert.IsType<DirectiveNode>(t.Value).Name.Value));| }"
      },
      {
        "name": "AddDirectiveWithArgument",
        "body": "{| // arrange| var descriptor = EnumTypeDescriptor.New(Context);| // act| IEnumTypeDescriptor desc = descriptor;| desc.Directive(\"Bar\",| new ArgumentNode(\"a\", new StringValueNode(\"b\")));| // assert| var description = descriptor.CreateDefinition();| Assert.Collection(description.Directives,| t =>| {| Assert.Equal(\"Bar\", Assert.IsType<DirectiveNode>(t.Value).Name.Value);| Assert.Collection(| Assert.IsType<DirectiveNode>(t.Value).Arguments,| x =>| {| Assert.Equal(\"a\", x.Name.Value);| Assert.IsType<StringValueNode>(x.Value);| Assert.Equal(\"b\", ((StringValueNode)x.Value).Value);| });| });| }"
      }
    ]
  },
  {
    "file": "InputFieldDescriptorTests.cs",
    "methods": [
      {
        "name": "DotNetTypesDoNotOverwriteSchemaTypes",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor| .Type<ListType<StringType>>()| .Type<NativeType<IReadOnlyDictionary<string, string>>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SchemaTypesOverwriteDotNetTypes",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor| .Type<NativeType<IReadOnlyDictionary<string, string>>>()| .Type<ListType<StringType>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SetSchemaType",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.Type(new StringType());| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.IsType<StringType>(| Assert.IsType<SchemaTypeReference>(typeRef).Type);| }"
      },
      {
        "name": "SetGenericType",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.Type<StringType>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SetNonGenericType",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.Type(typeof(StringType));| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "OverwriteName",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| \"field1234\");| // act| descriptor.Name(\"args\");| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(\"args\", description.Name);| }"
      },
      {
        "name": "OverwriteName2",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.Name(\"args\");| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(\"args\", description.Name);| }"
      },
      {
        "name": "SetDescription",
        "body": "{| // arrange| var expectedDescription = Guid.NewGuid().ToString();| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.Description(expectedDescription);| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(expectedDescription, description.Description);| }"
      },
      {
        "name": "SetDefaultValueAndInferType",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.DefaultValue(\"string\");| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(| typeof(string),| Assert.IsType<ExtendedTypeReference>(description.Type).Type.Source);| Assert.Equal(\"string\", description.RuntimeDefaultValue);| }"
      },
      {
        "name": "SetDefaultValueViaSyntax",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor.DefaultValueSyntax(\"[]\");| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<ListValueNode>(description.DefaultValue);| }"
      },
      {
        "name": "OverwriteDefaultValueLiteralWithNativeDefaultValue",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| descriptor| .DefaultValue(new StringValueNode(\"123\"))| .DefaultValue(\"string\");| // asser| var description = descriptor.CreateDefinition();| Assert.Null(description.DefaultValue);| Assert.Equal(\"string\", description.RuntimeDefaultValue);| }"
      },
      {
        "name": "SettingTheNativeDefaultValueToNullCreatesNullLiteral",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| ((IInputFieldDescriptor)descriptor)| .DefaultValue(new StringValueNode(\"123\"))| .DefaultValue(\"string\")| .DefaultValue(null);| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<NullValueNode>(description.DefaultValue);| Assert.Null(description.RuntimeDefaultValue);| }"
      },
      {
        "name": "OverwriteNativeDefaultValueWithDefaultValueLiteral",
        "body": "{| // arrange| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // act| ((IInputFieldDescriptor)descriptor)| .DefaultValue(\"string\")| .DefaultValue(new StringValueNode(\"123\"));| // assert| var description = descriptor.CreateDefinition();| Assert.IsType<StringValueNode>(description.DefaultValue);| Assert.Equal(\"123\",| ((StringValueNode)description.DefaultValue).Value);| Assert.Null(description.RuntimeDefaultValue);| }"
      },
      {
        "name": "InferTypeFromProperty",
        "body": "{| // act| var descriptor = InputFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\"));| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(typeof(FieldCollection<Argument>),| Assert.IsType<ExtendedTypeReference>(description.Type).Type.Source);| Assert.Equal(\"arguments\", description.Name);| }"
      },
      {
        "name": "Type_Syntax_Type_Null",
        "body": "{| void Error() => InputFieldDescriptor.New(Context, \"foo\").Type((string)null);| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Type_Syntax_Descriptor_Null",
        "body": "{| void Error() => default(InputFieldDescriptor).Type(\"foo\");| Assert.Throws<ArgumentNullException>(Error);| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeDescriptorTests.cs",
    "methods": [
      {
        "name": "Field_Ignore_PropertyIsExcluded",
        "body": "{| // arrange| var descriptor =| InputObjectTypeDescriptor.New<SimpleInput>(Context);| // act| descriptor.Field(t => t.Id).Ignore();| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Fields,| t => Assert.Equal(\"name\", t.Name));| }"
      },
      {
        "name": "Field_Unignore_PropertyIsExcluded",
        "body": "{| // arrange| var descriptor =| InputObjectTypeDescriptor.New<SimpleInput>(Context);| // act| descriptor.Field(t => t.Id).Ignore();| descriptor.Field(t => t.Id).Ignore(false);| // assert| var description =| descriptor.CreateDefinition();| Assert.Collection(description.Fields,| t => Assert.Equal(\"id\", t.Name),| t => Assert.Equal(\"name\", t.Name));| }"
      }
    ]
  },
  {
    "file": "InterfaceFieldDescriptorTests.cs",
    "methods": [
      {
        "name": "Type_Syntax_Type_Null",
        "body": "{| void Error() => InterfaceFieldDescriptor.New(Context, \"foo\").Type((string)null);| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Type_Syntax_Descriptor_Null",
        "body": "{| void Error() => default(InterfaceFieldDescriptor).Type(\"foo\");| Assert.Throws<ArgumentNullException>(Error);| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeDescriptorTests.cs",
    "methods": [
      {
        "name": "InterfaceType_Issue_6222_CreateDefinition_DoesNotDuplicateFields",
        "body": "{| var descriptor = InterfaceTypeDescriptor.New(Context);| descriptor.Field(\"id\").Type(\"ID!\");| var interfaceType = descriptor.CreateDefinition();| Assert.Single(interfaceType.Fields);| descriptor.CreateDefinition();| Assert.Single(interfaceType.Fields);| }"
      }
    ]
  },
  {
    "file": "ObjectFieldDescriptorTests.cs",
    "methods": [
      {
        "name": "SetGenericType",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(Context, \"field\");| // act| descriptor.Type<StringType>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SetNonGenericType",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(Context, \"field\");| // act| descriptor.Type(typeof(StringType));| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(StringType),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "DotNetTypesDoNotOverwriteSchemaTypes",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(Context, \"field\");| // act| descriptor| .Type<ListType<StringType>>()| .Type<NativeType<IReadOnlyDictionary<string, string>>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "SchemaTypesOverwriteDotNetTypes",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(Context, \"field\");| // act| descriptor| .Type<NativeType<IReadOnlyDictionary<string, string>>>()| .Type<ListType<StringType>>();| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(typeof(ListType<StringType>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "ResolverTypesDoNotOverwriteSchemaTypes",
        "body": "{| // arrange| var descriptor = ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField));| // act| descriptor| .Name(\"args\")| .Type<NonNullType<ListType<NonNullType<__InputValue>>>>()| .Resolve(c => c.Parent<ObjectField>().Arguments);| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(NonNullType<ListType<NonNullType<__InputValue>>>),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| }"
      },
      {
        "name": "OverwriteName",
        "body": "{| // arrange| var descriptor = ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField));| // act| descriptor.Name(\"args\");| // assert| Assert.Equal(\"args\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "SetDescription",
        "body": "{| // arrange| var expectedDescription = Guid.NewGuid().ToString();| var descriptor = ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField));| // act| descriptor.Description(expectedDescription);| // assert| Assert.Equal(expectedDescription,| descriptor.CreateDefinition().Description);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField));| // act| descriptor.Resolve(() => \"ThisIsAString\");| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(string),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| Assert.NotNull(description.Resolver);| var context = new Mock<IResolverContext>(MockBehavior.Strict);| Assert.Equal(\"ThisIsAString\", await description.Resolver(context.Object));| }"
      },
      {
        "name": "SetResolverAndInferTypeIsAlwaysRecognisedAsDotNetType",
        "body": "{| // arrange| var descriptor =| ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField));| // act| descriptor| .Type<__Type>()| .Resolve(ctx => ctx.Schema| .GetType<INamedType>(ctx.ArgumentValue<string>(\"type\")));| // assert| var description = descriptor.CreateDefinition();| var typeRef = description.Type;| Assert.Equal(| typeof(__Type),| Assert.IsType<ExtendedTypeReference>(typeRef).Type.Source);| Assert.NotNull(description.Resolver);| }"
      },
      {
        "name": "Type_Syntax_Type_Null",
        "body": "{| void Error() => ObjectFieldDescriptor.New(Context, \"foo\").Type((string)null);| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Type_Syntax_Descriptor_Null",
        "body": "{| void Error() => default(IObjectFieldDescriptor).Type(\"foo\");| Assert.Throws<ArgumentNullException>(Error);| }"
      },
      {
        "name": "ResolverTypeIsSet",
        "body": "{| // arrange| // act| var descriptor =| ObjectFieldDescriptor.New(| Context,| typeof(ObjectField).GetProperty(\"Arguments\")!,| typeof(ObjectField),| typeof(string));| // assert| var description = descriptor.CreateDefinition();| Assert.Equal(typeof(string), description.ResolverType);| }"
      }
    ]
  },
  {
    "file": "ObjectTypeDescriptorTests.cs",
    "methods": [
      {
        "name": "InferNameFromType",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| IObjectTypeDescriptor<Foo> desc = descriptor;| // assert| Assert.Equal(\"Foo\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "GetNameFromAttribute",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo2>(Context);| // act| IObjectTypeDescriptor<Foo2> desc = descriptor;| // assert| Assert.Equal(\"FooAttr\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "OverwriteDefaultName",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| descriptor.Name(\"FooBar\");| // assert| Assert.Equal(\"FooBar\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "OverwriteAttributeName",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo2>(Context);| // act| IObjectTypeDescriptor<Foo2> desc = descriptor;| desc.Name(\"FooBar\");| // assert| Assert.Equal(\"FooBar\", descriptor.CreateDefinition().Name);| }"
      },
      {
        "name": "InferFieldsFromType",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| IObjectTypeDescriptor<Foo> desc = descriptor;| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields| .Select(t => t.Name)| .OrderBy(t => t),| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t),| t => Assert.Equal(\"c\", t));| }"
      },
      {
        "name": "IgnoreOverriddenPropertyField",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| descriptor.Field(t => t.B).Ignore();| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields| .Select(t => t.Name)| .OrderBy(t => t),| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"c\", t));| }"
      },
      {
        "name": "UnignoreOverriddenPropertyField",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| descriptor.Field(t => t.B).Ignore();| descriptor.Field(t => t.B).Ignore(false);| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields| .Select(t => t.Name)| .OrderBy(t => t),| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t),| t => Assert.Equal(\"c\", t));| }"
      },
      {
        "name": "IgnoreOverriddenMethodField",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| IObjectTypeDescriptor<Foo> desc = descriptor;| desc.Field(t => t.Equals(default)).Ignore();| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields| .Select(t => t.Name)| .OrderBy(t => t),| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t),| t => Assert.Equal(\"c\", t));| }"
      },
      {
        "name": "UnignoreOverriddenMethodField",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| IObjectTypeDescriptor<Foo> desc = descriptor;| desc.Field(t => t.Equals(default)).Ignore();| desc.Field(t => t.Equals(default)).Ignore(false);| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields| .Select(t => t.Name)| .OrderBy(t => t),| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t),| t => Assert.Equal(\"c\", t),| t => Assert.Equal(\"equals\", t));| }"
      },
      {
        "name": "DeclareFieldsExplicitly",
        "body": "{| // arrange| var descriptor = new ObjectTypeDescriptor<Foo>(Context);| // act| IObjectTypeDescriptor<Foo> desc = descriptor;| desc.Field(t => t.A);| desc.BindFields(BindingBehavior.Explicit);| // assert| Assert.Collection(| descriptor.CreateDefinition().Fields.Select(t => t.Name),| t => Assert.Equal(\"a\", t));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New().AddQueryType<BarType>().Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(\"{ a b c}\");| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ResolveInterfaceFieldDescriptorExtensionsTests.cs",
    "methods": [
      {
        "name": "Resolver_IResolverContextObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, object>(| _ => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, object?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| FieldResolverDelegate resolver = null!;| var resolverFunc = new Func<IResolverContext, object>(c => \"foo\");| var descriptor = new Mock<IInterfaceFieldDescriptor>();| descriptor.Setup(t => t.Resolve(It.IsAny<FieldResolverDelegate>()))| .Returns(| new Func<FieldResolverDelegate, IInterfaceFieldDescriptor>(| r =>| {| resolver = r;| return descriptor.Object;| }));| // act| ResolveInterfaceFieldDescriptorExtensions| .Resolve(descriptor.Object, resolverFunc);| // assert| Assert.Equal(\"foo\", await resolver.Invoke(| new Mock<IResolverContext>().Object));| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, Task<object?>?>(| async _ => await Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, Task<object?>?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, object>(| _ => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, Task<object>>(| _ => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Object_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<object>(() => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Object_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<Task<object>>(| () => Task.FromResult(new object()))!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_T_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<object>(() => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_T_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<Task<object>>(| () => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken, object>(| (_, _) => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtTaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken,| Task<object>>((_, _) =>| Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverCtxCtTaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, Task<object>?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, CancellationToken, object>(| (_, _) => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtTaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken, Task<object>>(| (_, _) => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverCtxCtTaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IInterfaceFieldDescriptor>();| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Constant_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve(null!, new object());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_ConstantT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveInterfaceFieldDescriptorExtensions| .Resolve<object>(null!, new object());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "ResolveObjectFieldDescriptorExtensionsTests.cs",
    "methods": [
      {
        "name": "Resolver_IResolverContextObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, object>(| _ => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, object?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| FieldResolverDelegate resolver = null!;| var resolverFunc = new Func<IResolverContext, object>(c => \"foo\");| var descriptor = new Mock<IObjectFieldDescriptor>();| descriptor.Setup(t => t.Resolve(It.IsAny<FieldResolverDelegate>()))| .Returns(| new Func<FieldResolverDelegate, IObjectFieldDescriptor>(| r =>| {| resolver = r;| return descriptor.Object;| }));| // act| ResolveObjectFieldDescriptorExtensions| .Resolve(descriptor.Object, resolverFunc);| // assert| Assert.Equal(\"foo\", await resolver.Invoke(| new Mock<IResolverContext>().Object));| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, Task<object?>?>(| async _ => await Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, Task<object?>?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, object>(| _ => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, Task<object>>(| _ => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextTaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Object_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<object>(() => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Object_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<Task<object>>(| () => Task.FromResult(new object()))!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_T_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<object>(() => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_T_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<Task<object>>(| () => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_TaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken, object>(| (_, _) => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtTaskOfObject_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken,| Task<object>>((_, _) =>| Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverCtxCtTaskOfObject_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, Task<object>?>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| null!,| new Func<IResolverContext, CancellationToken, object>(| (_, _) => new object()));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, object>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverContextCtTaskOfT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| null!,| new Func<IResolverContext, CancellationToken, Task<object>>(| (_, _) => Task.FromResult(new object())));| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_IResolverCtxCtTaskOfT_ResolverNull_ArgExc",
        "body": "{| // arrange| var descriptor = new Mock<IObjectFieldDescriptor>();| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(| descriptor.Object,| default(Func<IResolverContext, CancellationToken, Task<object>>)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_Constant_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve(null!, new object());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Resolver_ConstantT_DescNull_ArgExc",
        "body": "{| // arrange| // act| Action action = () =>| ResolveObjectFieldDescriptorExtensions| .Resolve<object>(null!, new object());| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "ClrTypeReferenceTests.cs",
    "methods": [
      {
        "name": "TypeReference_Create_And_Infer_Output_Context",
        "body": "{| // arrange| // act| var typeReference = TypeReference.Create(| _typeInspector.GetType(typeof(ObjectType<string>)),| scope: \"abc\");| // assert| Assert.Equal(typeof(ObjectType<string>), typeReference.Type.Source);| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "TypeReference_Create_And_Infer_Input_Context",
        "body": "{| // arrange| // act| var typeReference = TypeReference.Create(| _typeInspector.GetType(typeof(InputObjectType<string>)),| scope: \"abc\");| // assert| Assert.Equal(typeof(InputObjectType<string>), typeReference.Type.Source);| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "ClrTypeReference_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var result = x.Equals((ExtendedTypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "ClrTypeReference_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var xx = x.Equals((ExtendedTypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "ClrTypeReference_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output);| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals(y);| var xz = x.Equals(z);| var yz = y.Equals(z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "ClrTypeReference_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals(y);| var xz = x.Equals(z);| var yz = y.Equals(z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "TypeReference_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var result = x.Equals((TypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "TypeReference_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var xx = x.Equals((TypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "TypeReference_Equals_To_SyntaxTypeRef",
        "body": "{| // arrange| var x = TypeReference.Create(_typeInspector.GetType(typeof(string)));| // act| var xx = x.Equals(TypeReference.Create(new StringType(\"foo\")));| // assert| Assert.False(xx);| }"
      },
      {
        "name": "TypeReference_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None);| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output);| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals((TypeReference)y);| var xz = x.Equals((TypeReference)z);| var yz = y.Equals((TypeReference)z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "TypeReference_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals((TypeReference)y);| var xz = x.Equals((TypeReference)z);| var yz = y.Equals((TypeReference)z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "Object_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var result = x.Equals((object)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Object_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var xx = x.Equals((object)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "Object_Equals_To_Object",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| // act| var xx = x.Equals(new object());| // assert| Assert.False(xx);| }"
      },
      {
        "name": "Object_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)));| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output);| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals((object)y);| var xz = x.Equals((object)z);| var yz = y.Equals((object)z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "Object_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xy = x.Equals((object)y);| var xz = x.Equals((object)z);| var yz = y.Equals((object)z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "ClrTypeReference_ToString",
        "body": "{| // arrange| var typeReference = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var result = typeReference.ToString();| // assert| Assert.Equal(\"String (Input)\", result);| }"
      },
      {
        "name": "ClrTypeReference_WithType",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 =| typeReference1.WithType(_typeInspector.GetType(typeof(int)));| // assert| Assert.Equal(typeof(int), typeReference2.Type.Source);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_WithType_Null",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| Action action = () => typeReference1.WithType(default!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "ClrTypeReference_WithContext",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext(TypeContext.Output);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.Output, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_WithContext_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_WithScope",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope(\"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_WithScope_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Null(typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_With",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(| _typeInspector.GetType(typeof(int)),| TypeContext.Output,| scope: \"bar\");| // assert| Assert.Equal(typeof(int), typeReference2.Type.Source);| Assert.Equal(TypeContext.Output, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_With_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_With_Type",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(| _typeInspector.GetType(typeof(int)));| // assert| Assert.Equal(typeof(int), typeReference2.Type.Source);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_With_Context",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(context: TypeContext.None);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_With_Scope",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(scope: \"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "ClrTypeReference_GetHashCode",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None,| scope: \"foo\");| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None,| scope: \"foo\");| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xh = x.GetHashCode();| var yh = y.GetHashCode();| var zh = z.GetHashCode();| // assert| Assert.Equal(xh, yh);| Assert.NotEqual(xh, zh);| }"
      },
      {
        "name": "ClrTypeReference_GetHashCode_Context_HasNoEffect",
        "body": "{| // arrange| var x = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.None);| var y = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Output);| var z = TypeReference.Create(| _typeInspector.GetType(typeof(string)),| TypeContext.Input);| // act| var xh = x.GetHashCode();| var yh = y.GetHashCode();| var zh = z.GetHashCode();| // assert| Assert.Equal(xh, yh);| Assert.Equal(xh, zh);| }"
      }
    ]
  },
  {
    "file": "SchemaTypeReferenceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<ObjectType<Foo>>();| // act| var typeReference = TypeReference.Create(| type,| scope: \"abc\");| // assert| Assert.Equal(type, typeReference.Type);| Assert.Equal(TypeContext.Output, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<InputObjectType<Bar>>();| // act| var typeReference = TypeReference.Create(| type,| scope: \"abc\");| // assert| Assert.Equal(type, typeReference.Type);| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| // act| var typeReference = TypeReference.Create(| type,| scope: \"abc\");| // assert| Assert.Equal(type, typeReference.Type);| Assert.Equal(TypeContext.None, typeReference.Context);| Assert.Equal(\"abc\", typeReference.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var result = x.Equals((SchemaTypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var xx = x.Equals((SchemaTypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type, scope: \"abc\");| var y = TypeReference.Create(type, scope: \"def\");| var z = TypeReference.Create(type, scope: \"abc\");| // act| var xy = x.Equals(y);| var xz = x.Equals(y);| // assert| Assert.False(xy);| Assert.False(xz);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var result = x.Equals((TypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var xx = x.Equals((TypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var xx = x.Equals(TypeReference.Create(new StringType(\"foo\")));| // assert| Assert.False(xx);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type, scope: \"abc\");| var y = TypeReference.Create(type, scope: \"def\");| var z = TypeReference.Create(type, scope: \"abc\");| // act| var xy = x.Equals((TypeReference)y);| var xz = x.Equals((TypeReference)y);| // assert| Assert.False(xy);| Assert.False(xz);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var result = x.Equals((object)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var xx = x.Equals((object)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type);| // act| var xx = x.Equals(new object());| // assert| Assert.False(xx);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(type, scope: \"abc\");| var y = TypeReference.Create(type, scope: \"def\");| var z = TypeReference.Create(type, scope: \"abc\");| // act| var xy = x.Equals((object)y);| var xz = x.Equals((object)y);| // assert| Assert.False(xy);| Assert.False(xz);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var type = await CreateTypeAsync<StringType>();| var typeReference = TypeReference.Create(type);| // act| var result = typeReference.ToString();| // assert| Assert.Equal(\"HotChocolate.Types.StringType\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var intType = await CreateTypeAsync<IntType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithType(intType);| // assert| Assert.Equal(intType, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| Action action = () => typeReference1.WithType(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext(TypeContext.Output);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.Output, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope(\"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Null(typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var intType = await CreateTypeAsync<IntType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(| intType,| scope: \"bar\");| // assert| Assert.Equal(intType, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var intType = await CreateTypeAsync<IntType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(intType);| // assert| Assert.Equal(intType, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| Action action = () => typeReference1.With(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(context: TypeContext.None);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var typeReference1 = TypeReference.Create(| stringType,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(scope: \"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var stringType = await CreateTypeAsync<StringType>();| var x = TypeReference.Create(| stringType,| scope: \"foo\");| var y = TypeReference.Create(| stringType,| scope: \"foo\");| var z = TypeReference.Create(| stringType);| // act| var xh = x.GetHashCode();| var yh = y.GetHashCode();| var zh = z.GetHashCode();| // assert| Assert.Equal(xh, yh);| Assert.NotEqual(xh, zh);| }"
      },
      {
        "name": "SchemaTypeReference_InferTypeContext_From_SchemaType",
        "body": "{| // arrange| // act| var context = SchemaTypeReference.InferTypeContext(typeof(ObjectType<Foo>));| // assert| Assert.Equal(TypeContext.Output, context);| }"
      },
      {
        "name": "SchemaTypeReference_InferTypeContext_Object_From_SchemaType",
        "body": "{| // arrange| // act| var context = SchemaTypeReference.InferTypeContext((object)typeof(ObjectType<Foo>));| // assert| Assert.Equal(TypeContext.Output, context);| }"
      },
      {
        "name": "SchemaTypeReference_InferTypeContext_Object_From_String_None",
        "body": "{| // arrange| // act| var context = SchemaTypeReference.InferTypeContext((object)\"foo\");| // assert| Assert.Equal(TypeContext.None, context);| }"
      },
      {
        "name": "SchemaTypeReference_InferTypeContext_From_RuntimeType_None",
        "body": "{| // arrange| // act| var context = SchemaTypeReference.InferTypeContext(typeof(Foo));| // assert| Assert.Equal(TypeContext.None, context);| }"
      },
      {
        "name": "SchemaTypeReference_InferTypeContext_Type_Is_Null",
        "body": "{| // arrange| // act| Action action = () => SchemaTypeReference.InferTypeContext(default(Type)!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "SyntaxTypeReferenceTests.cs",
    "methods": [
      {
        "name": "TypeReference_Create",
        "body": "{| // arrange| var namedType = new NamedTypeNode(\"Foo\");| // act| var typeReference = TypeReference.Create(| namedType,| TypeContext.Input,| scope: \"foo\");| // assert| Assert.Equal(namedType, typeReference.Type);| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Equal(\"foo\", typeReference.Scope);| }"
      },
      {
        "name": "TypeReference_Create_With_Name",
        "body": "{| // arrange| // act| var typeReference = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // assert| Assert.Equal(\"Foo\", typeReference.Type.NamedType().Name.Value);| Assert.Equal(TypeContext.Input, typeReference.Context);| Assert.Equal(\"foo\", typeReference.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var result = x.Equals((SyntaxTypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "SyntaxTypeReference_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var xx = x.Equals((SyntaxTypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "SyntaxTypeReference_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output);| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals(y);| var xz = x.Equals(z);| var yz = y.Equals(z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "SyntaxTypeReference_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals(y);| var xz = x.Equals(z);| var yz = y.Equals(z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "TypeReference_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var result = x.Equals((TypeReference)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "TypeReference_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var xx = x.Equals((TypeReference)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "TypeReference_Equals_To_SyntaxTypeRef",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var xx = x.Equals(TypeReference.Create(_typeInspector.GetType(typeof(int))));| // assert| Assert.False(xx);| }"
      },
      {
        "name": "TypeReference_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output);| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals((TypeReference)y);| var xz = x.Equals((TypeReference)z);| var yz = y.Equals((TypeReference)z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "TypeReference_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals((TypeReference)y);| var xz = x.Equals((TypeReference)z);| var yz = y.Equals((TypeReference)z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "Object_Equals_To_Null",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var result = x.Equals((object)null);| // assert| Assert.False(result);| }"
      },
      {
        "name": "Object_Equals_To_Same",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var xx = x.Equals((object)x);| // assert| Assert.True(xx);| }"
      },
      {
        "name": "Object_Equals_To_Object",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| // act| var xx = x.Equals(new object());| // assert| Assert.False(xx);| }"
      },
      {
        "name": "Object_Equals_Context_None_Does_Not_Matter",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None);| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output);| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals((object)y);| var xz = x.Equals((object)z);| var yz = y.Equals((object)z);| // assert| Assert.True(xy);| Assert.True(xz);| Assert.False(yz);| }"
      },
      {
        "name": "Object_Equals_Scope_Different",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None,| scope: \"a\");| var y = TypeReference.Create(| \"Foo\",| TypeContext.Output,| scope: \"a\");| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xy = x.Equals((object)y);| var xz = x.Equals((object)z);| var yz = y.Equals((object)z);| // assert| Assert.True(xy);| Assert.False(xz);| Assert.False(yz);| }"
      },
      {
        "name": "SyntaxTypeReference_ToString",
        "body": "{| // arrange| var typeReference = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var result = typeReference.ToString();| // assert| Assert.Equal(\"Foo (Input)\", result);| }"
      },
      {
        "name": "SyntaxTypeReference_WithType",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithType(new NamedTypeNode(\"Bar\"));| // assert| Assert.Equal(\"Bar\", Assert.IsType<NamedTypeNode>(typeReference2.Type).Name.Value);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_WithType_Null",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| Action action = () => typeReference1.WithType(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "SyntaxTypeReference_WithContext",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext(TypeContext.Output);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.Output, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_WithContext_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithContext();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_WithScope",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope(\"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_WithScope_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.WithScope();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Null(typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_With",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(| new NamedTypeNode(\"Bar\"),| TypeContext.Output,| scope: \"bar\");| // assert| Assert.Equal(\"Bar\", Assert.IsType<NamedTypeNode>(typeReference2.Type).Name.Value);| Assert.Equal(TypeContext.Output, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_With_Nothing",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With();| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_With_Type",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(new NamedTypeNode(\"Bar\"));| // assert| Assert.Equal(\"Bar\", Assert.IsType<NamedTypeNode>(typeReference2.Type).Name.Value);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_With_Type_Null",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| Action action = () => typeReference1.With(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "SyntaxTypeReference_With_Context",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(context: TypeContext.None);| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(TypeContext.None, typeReference2.Context);| Assert.Equal(typeReference1.Scope, typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_With_Scope",
        "body": "{| // arrange| var typeReference1 = TypeReference.Create(| \"Foo\",| TypeContext.Input,| scope: \"foo\");| // act| var typeReference2 = typeReference1.With(scope: \"bar\");| // assert| Assert.Equal(typeReference1.Type, typeReference2.Type);| Assert.Equal(typeReference1.Context, typeReference2.Context);| Assert.Equal(\"bar\", typeReference2.Scope);| }"
      },
      {
        "name": "SyntaxTypeReference_GetHashCode",
        "body": "{| // arrange| var x = TypeReference.Create(| \"Foo\",| TypeContext.None,| scope: \"foo\");| var y = TypeReference.Create(| \"Foo\",| TypeContext.None,| scope: \"foo\");| var z = TypeReference.Create(| \"Foo\",| TypeContext.Input);| // act| var xh = x.GetHashCode();| var yh = y.GetHashCode();| var zh = z.GetHashCode();| // assert| Assert.Equal(xh, yh);| Assert.NotEqual(xh, zh);| }"
      }
    ]
  },
  {
    "file": "DirectiveCollectionTests.cs",
    "methods": [
      {
        "name": "DirectiveOrderIsSignificant",
        "body": "{| // arrange| var someType = new ObjectType(t =>| t.Name(\"Foo\")| .Field(\"abc\")| .Type<StringType>()| .Resolve(\"abc\")| .Directive(new DirectiveNode(\"foo\"))| .Directive(new DirectiveNode(\"bar\")));| var foo = new DirectiveType(d => d| .Name(\"foo\")| .Location(DirectiveLocation.FieldDefinition));| var bar = new DirectiveType(d => d| .Name(\"bar\")| .Location(DirectiveLocation.FieldDefinition));| // act| CreateSchema(b =>| {| b.AddType(someType);| b.AddDirectiveType(foo);| b.AddDirectiveType(bar);| });| // assert| Assert.Collection(someType.Fields[\"abc\"].Directives,| t => Assert.Equal(\"foo\", t.Type.Name),| t => Assert.Equal(\"bar\", t.Type.Name));| }"
      },
      {
        "name": "DirectiveIsNotRepeatable",
        "body": "{| // arrange| var someType = new ObjectType(t =>| t.Name(\"Foo\")| .Field(\"abc\")| .Type<StringType>()| .Resolve(\"abc\")| .Directive(new DirectiveNode(\"foo\"))| .Directive(new DirectiveNode(\"foo\")));| var foo = new DirectiveType(d =>| d.Name(\"foo\").Location(DirectiveLocation.FieldDefinition));| // act| Action action = () => CreateSchema(b =>| {| b.AddType(someType);| b.AddDirectiveType(foo);| });| // assert| Assert.Collection(| Assert.Throws<SchemaException>(action).Errors,| t => Assert.Equal(| \"The specified directive `@foo` \" +| \"is unique and cannot be added twice.\",| t.Message));| }"
      },
      {
        "name": "DirectiveIsRepeatable",
        "body": "{| // arrange| var someType = new ObjectType(t =>| t.Name(\"Foo\")| .Field(\"abc\")| .Type<StringType>()| .Resolve(\"abc\")| .Directive(new DirectiveNode(\"foo\"))| .Directive(new DirectiveNode(\"foo\")));| var foo = new DirectiveType(d => d| .Name(\"foo\")| .Location(DirectiveLocation.FieldDefinition)| .Repeatable());| // act| CreateSchema(b =>| {| b.AddType(someType);| b.AddDirectiveType(foo);| });| // assert| Assert.Collection(someType.Fields[\"abc\"].Directives,| t => Assert.Equal(\"foo\", t.Type.Name),| t => Assert.Equal(\"foo\", t.Type.Name));| }"
      },
      {
        "name": "InvalidLocation",
        "body": "{| // arrange| var someType = new ObjectType(t => t| .Name(\"Foo\")| .Field(\"abc\")| .Type<StringType>()| .Resolve(\"abc\")| .Directive(new DirectiveNode(\"foo\")));| var foo = new DirectiveType(d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object));| // act| Action action = () => CreateSchema(b =>| {| b.AddType(someType);| b.AddDirectiveType(foo);| });| // assert| Assert.Collection(Assert.Throws<SchemaException>(action).Errors,| t => Assert.Equal(| \"The specified directive `@foo` \" +| \"is not allowed on the current location \" +| $\"`{DirectiveLocation.FieldDefinition}`.\",| t.Message));| }"
      }
    ]
  },
  {
    "file": "DirectiveLocationTests.cs",
    "methods": [
      {
        "name": "FlagsCorrect",
        "body": "{| var skip = new HashSet<int>| {| (int)DirectiveLocation.Executable,| (int)DirectiveLocation.TypeSystem,| (int)DirectiveLocation.Operation,| (int)DirectiveLocation.Fragment,| };| Enum.GetValues(typeof(DirectiveLocation))| .Cast<DirectiveLocation>()| .Where(t => skip.Add((int)t))| .Aggregate(0, (acc, loc) =>| {| var v = acc == 0 ? 1 : acc * 2;| Assert.Equal(v, (int)loc);| return v;| });| }"
      }
    ]
  },
  {
    "file": "DirectiveTests.cs",
    "methods": [
      {
        "name": "Directive_AsSyntaxNode",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var directiveNode = directive.AsSyntaxNode();| // assert| Assert.Equal(directiveType.Name, directiveNode.Name.Value);| Assert.Collection(| directiveNode.Arguments,| t =>| {| Assert.Equal(\"bar\", t.Name.Value);| Assert.Equal(\"123\", ((StringValueNode)t.Value).Value);| },| t =>| {| Assert.Equal(\"child\", t.Name.Value);| Assert.Collection(| ((ObjectValueNode)t.Value).Fields,| x =>| {| Assert.Equal(\"bar\", x.Name.Value);| Assert.Equal(| \"456\",| ((StringValueNode)x.Value).Value);| });| });| }"
      },
      {
        "name": "Directive_AsValue_FooDirective",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var syntaxNode = directiveType.Format(fooDirective);| var value = directiveType.Parse(syntaxNode);| var directive = new Directive(directiveType, syntaxNode, value);| var runtimeValue = directive.AsValue<FooDirective>();| // assert| Assert.Equal(\"123\", runtimeValue.Bar);| Assert.Equal(\"456\", runtimeValue.Child.Bar);| }"
      },
      {
        "name": "Directive_AsValue_Object",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var syntaxNode = directiveType.Format(fooDirective);| var value = directiveType.Parse(syntaxNode);| var directive = new Directive(directiveType, syntaxNode, value);| // assert| var runtimeValue = Assert.IsType<FooDirective>(directive.AsValue<object>());| Assert.Equal(\"123\", runtimeValue.Bar);| Assert.Equal(\"456\", runtimeValue.Child.Bar);| }"
      },
      {
        "name": "Directive_AsValue_Same",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var runtimeValue = directive.AsValue<FooDirective>();| // assert| Assert.Same(fooDirective, runtimeValue);| }"
      },
      {
        "name": "Directive_GetArgumentValue",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var barValue = directive.GetArgumentValue<string>(\"bar\");| // assert| Assert.Equal(\"123\", barValue);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"Bar\"))| .AddType<FooQueryDirectiveType>()| .BuildSchemaAsync();| // act| var printedSchema = schema.Print();| // assert| printedSchema.MatchSnapshot();| }"
      },
      {
        "name": "Directive_With_Explicit_Arguments",
        "body": "{| SchemaBuilder.New()| .AddDirectiveType<FooDirectiveTypeExplicit>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"abc\")| .Resolve(\"def\")| .Directive(new FooDirective()))| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DirectiveTypeTests.cs",
    "methods": [
      {
        "name": "ConfigureTypedDirectiveWithResolver",
        "body": "{| // arrange| // act| DirectiveType directiveType =| CreateDirective(new CustomDirectiveType());| // assert| Assert.NotNull(directiveType.Middleware);| Assert.Equal(typeof(CustomDirective), directiveType.RuntimeType);| Assert.Collection(| directiveType.Arguments,| t => Assert.Equal(\"argument\", t.Name));| }"
      },
      {
        "name": "ConfigureTypedDirective_DefaultBinding_Explicit",
        "body": "{| // arrange| // act| DirectiveType directiveType =| CreateDirective(| new CustomDirectiveType(),| b => b.ModifyOptions(| o =>| o.DefaultBindingBehavior = BindingBehavior.Explicit));| // assert| Assert.NotNull(directiveType.Middleware);| Assert.Equal(typeof(CustomDirective), directiveType.RuntimeType);| Assert.Empty(directiveType.Arguments);| }"
      },
      {
        "name": "ConfigureTypedDirectiveNoArguments",
        "body": "{| // arrange| // act| DirectiveType directiveType =| CreateDirective(new Custom2DirectiveType());| // assert| Assert.NotNull(directiveType.Middleware);| Assert.Equal(typeof(CustomDirective), directiveType.RuntimeType);| Assert.Empty(directiveType.Arguments);| }"
      },
      {
        "name": "ConfigureDirectiveWithResolver",
        "body": "{| // arrange| var directiveType = new DirectiveType(| t => t| .Name(\"Foo\")| .Location(DirectiveLocation.Field)| .Use((_, _) => _ => default));| // act| directiveType = CreateDirective(directiveType);| // assert| Assert.NotNull(directiveType.Middleware);| Assert.Equal(typeof(object), directiveType.RuntimeType);| }"
      },
      {
        "name": "ConfigureIsNull",
        "body": "{| // act| void Action() => new DirectiveType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "NoName",
        "body": "{| // act| void Action() => CreateDirective(new DirectiveType(_ => { }));| // assert| Assert.Throws<SchemaException>(Action);| }"
      },
      {
        "name": "RepeatableDirective",
        "body": "{| // arrange| var directiveType = new DirectiveType(| t => t.Name(\"foo\")| .Repeatable()| .Location(DirectiveLocation.Object)| .Argument(\"a\").Type<StringType>());| var objectType = new ObjectType(| t =>| {| t.Name(\"Bar\");| t.Directive(\"foo\", new ArgumentNode(\"a\", \"1\"));| t.Directive(\"foo\", new ArgumentNode(\"a\", \"2\"));| t.Field(\"foo\").Resolve(() => \"baz\");| });| // act| var schema = SchemaBuilder.New()| .AddQueryType(objectType)| .AddDirectiveType(directiveType)| .Create();| // assert| Assert.Collection(| schema.GetType<ObjectType>(\"Bar\").Directives,| t =>| {| Assert.Equal(\"foo\", t.Type.Name);| Assert.Equal(\"1\", t.GetArgumentValue<string>(\"a\"));| },| t =>| {| Assert.Equal(\"foo\", t.Type.Name);| Assert.Equal(\"2\", t.GetArgumentValue<string>(\"a\"));| });| }"
      },
      {
        "name": "UniqueDirective",
        "body": "{| // arrange| var directiveType = new DirectiveType(| t => t.Name(\"foo\")| .Location(DirectiveLocation.Object)| .Argument(\"a\").Type<StringType>());| var objectType = new ObjectType(| t =>| {| t.Name(\"Bar\");| t.Directive(\"foo\", new ArgumentNode(\"a\", \"1\"));| t.Directive(\"foo\", new ArgumentNode(\"a\", \"2\"));| t.Field(\"foo\").Resolve(() => \"baz\");| });| // act| void Action() =>| SchemaBuilder.New()| .AddQueryType(objectType)| .AddDirectiveType(directiveType)| .Create();| // assert| var exception = Assert.Throws<SchemaException>(Action);| Assert.Collection(| exception.Errors,| t =>| {| Assert.Equal(| \"The specified directive `@foo` \" +| \"is unique and cannot be added twice.\",| t.Message);| });| }"
      },
      {
        "name": "ExecutableUniqueDirectives",
        "body": "{| // arrange| var directiveType = new DirectiveType(| t => t.Name(\"foo\")| .Location(DirectiveLocation.Object)| .Location(DirectiveLocation.FieldDefinition)| .Use((_, _) => _ => default)| .Argument(\"a\").Type<StringType>());| var objectType = new ObjectType(| t =>| {| t.Name(\"Bar\");| t.Directive(\"foo\", new ArgumentNode(\"a\", \"1\"));| t.Field(\"foo\").Resolve(() => \"baz\")| .Directive(\"foo\", new ArgumentNode(\"a\", \"2\"));| });| // act| var schema = SchemaBuilder.New()| .AddQueryType(objectType)| .AddDirectiveType(directiveType)| .Create();| // assert| IReadOnlyCollection<Directive> collection =| schema.GetType<ObjectType>(\"Bar\")| .Fields[\"foo\"].Directives| .Where(t => t.Type.Middleware is not null)| .ToList();| Assert.Collection(| collection,| t =>| {| Assert.Equal(\"foo\", t.Type.Name);| Assert.Equal(\"2\", t.GetArgumentValue<string>(\"a\"));| });| }"
      },
      {
        "name": "Ignore_DescriptorIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| Action action = () =>| DirectiveTypeDescriptorExtensions| .Ignore<CustomDirective2>(null, t => t.Argument2);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Ignore_ExpressionIsNull_ArgumentNullException",
        "body": "{| // arrange| var descriptor =| DirectiveTypeDescriptor.New<CustomDirective2>(| DescriptorContext.Create());| // act| void Action() => descriptor.Ignore(null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Ignore_Argument2_Property",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Ignore(t => t.Argument2)))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Use_DelegateMiddleware",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use((_, _) => _ => default)))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| descriptor =>| {| descriptor| .Name(\"Query\");| descriptor| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\")| .Directive(\"foo\");| descriptor| .Field(\"foo1\")| .Type<IntType>()| .Resolve(1)| .Directive(\"foo\");| })| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.FieldDefinition)| .Use<DirectiveMiddleware1>()))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| await schema.MakeExecutable().ExecuteAsync(\"{ foo }\");| await schema.MakeExecutable().ExecuteAsync(\"{ foo1 }\");| await schema.MakeExecutable().ExecuteAsync(\"{ foo foo1 }\");| var result = await schema.MakeExecutable().ExecuteAsync(\"{ foo foo1 }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Use_ClassMiddleware",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use<DirectiveMiddleware>()))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Use_ClassMiddleware_WithFactory",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use((_, next) => new DirectiveMiddleware(next))))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Use_ClassMiddleware_WithFactoryNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() =>| SchemaBuilder.New()| .AddQueryType(| c => c.Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<CustomDirective2>(| d => d.Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use(null)))| .Create();| // assert| Assert.Throws<SchemaException>(Action);| }"
      },
      {
        "name": "Use2_DelegateMiddleware",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use((_, _) => _ => default)))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Use2_ClassMiddleware",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use<DirectiveMiddleware>()))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Use2_ClassMiddleware_WithFactory",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use((_, next) => new DirectiveMiddleware(next))))| .Create();| // assert| var directive = schema.GetDirectiveType(\"foo\");| Assert.NotNull(directive.Middleware);| }"
      },
      {
        "name": "Use2_ClassMiddleware_WithFactoryNull_ArgumentNullException",
        "body": "{| // arrange| // act| static void Action()| => SchemaBuilder.New()| .AddQueryType(| c => c.Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType(| d => d.Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use(null)))| .Create();| // assert| Assert.Throws<SchemaException>(Action);| }"
      },
      {
        "name": "Infer_Directive_Argument_Defaults_From_Properties",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(| c => c| .Name(\"Query\")| .Directive(\"foo\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddDirectiveType(| new DirectiveType<DirectiveWithDefaults>(| d => d| .Name(\"foo\")| .Location(DirectiveLocation.Object)| .Use<DirectiveMiddleware>()))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Specify_Argument_Type_With_SDL_Syntax",
        "body": "{| SchemaBuilder.New()| .AddDirectiveType<DirectiveWithSyntaxTypeArg>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive<Deprecated2Directive>())| .AddDirectiveType(| new DirectiveType<Deprecated2Directive>(| x => x.Location(DirectiveLocation.FieldDefinition)))| .BuildRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| static async Task call() =>| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive<DeprecatedNonNull>())| .AddDirectiveType(| new DirectiveType<DeprecatedNonNull>(| x => x.Location(DirectiveLocation.FieldDefinition)))| .BuildRequestExecutorAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"Qux\"))| .AddDirectiveType(| new DirectiveType(| x => x| .Name(\"Qux\")| .Location(DirectiveLocation.FieldDefinition)| .Argument(\"bar\")| .Type<IntType>()| .Deprecated(\"a\")))| .BuildRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| static async Task call()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"Qux\", new ArgumentNode(\"bar\", 1)))| .AddDirectiveType(| new DirectiveType(| x => x| .Name(\"Qux\")| .Location(DirectiveLocation.FieldDefinition)| .Argument(\"bar\")| .Type<NonNullType<IntType>>()| .Deprecated(\"a\")))| .BuildRequestExecutorAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"Qux\"))| .AddDocumentFromString(| @\"directive @Qux(bar: String @deprecated(reason: \"\"reason\"\"))| on FIELD_DEFINITION\")| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| static async Task call()| => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"Qux\", new ArgumentNode(\"bar\", \"abc\")))| .AddDocumentFromString(| @\"directive @Qux(bar: String! @deprecated(reason: \"\"reason\"\"))| on FIELD_DEFINITION\")| .BuildSchemaAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "Directive_ValidateArgs_InvalidArg",
        "body": "{| // arrange| var sourceText = @\"| type Query {| foo: String @a(d:1 e:true)| }| directive @a(c:Int d:Int! e:Int) on FIELD_DEFINITION\";| // act| void Action() =>| SchemaBuilder.New()| .AddDocumentFromString(sourceText)| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // assert| var errors = Assert.Throws<SchemaException>(Action).Errors;| Assert.Single(errors);| Assert.Equal(ErrorCodes.Schema.InvalidArgument, errors[0].Code);| errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Directive_ValidateArgs_ArgMissing",
        "body": "{| // arrange| var sourceText = @\"| type Query {| foo: String @a| }| directive @a(c:Int d:Int! e:Int) on FIELD_DEFINITION\";| // act| void Action() =>| SchemaBuilder.New()| .AddDocumentFromString(sourceText)| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // assert| var errors = Assert.Throws<SchemaException>(Action).Errors;| Assert.Single(errors);| Assert.Equal(ErrorCodes.Schema.InvalidArgument, errors[0].Code);| errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Directive_ValidateArgs_NonNullArgIsNull",
        "body": "{| // arrange| var sourceText = @\"| type Query {| foo: String @a(d: null)| }| directive @a(c:Int d:Int! e:Int) on FIELD_DEFINITION\";| // act| void Action() =>| SchemaBuilder.New()| .AddDocumentFromString(sourceText)| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // assert| var errors = Assert.Throws<SchemaException>(Action).Errors;| Assert.Single(errors);| Assert.Equal(ErrorCodes.Schema.InvalidArgument, errors[0].Code);| errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Directive_ValidateArgs_Overflow",
        "body": "{| // arrange| var sourceText = $@\"| type Query {{| foo: String @a(d: {long.MaxValue})| }}| directive @a(c:Int d:Int! e:Int) on FIELD_DEFINITION\";| // act| void Action() =>| SchemaBuilder.New()| .AddDocumentFromString(sourceText)| .AddResolver(\"Query\", \"foo\", \"bar\")| .Create();| // assert| var errors = Assert.Throws<SchemaException>(Action).Errors;| Assert.Single(errors);| Assert.Equal(ErrorCodes.Schema.InvalidArgument, errors[0].Code);| errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"anno\"))| .AddType<AnnotationDirective>()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(\"foo\"))| .AddType<FooDirective>()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x| .Name(\"Query\")| .Field(\"bar\")| .Resolve(\"asd\")| .Directive(new FooDirective(\"abc\")))| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SpecedDirectiveTypeTests.cs",
    "methods": [
      {
        "name": "EnsureSkipDirectiveIsAvailable",
        "body": "{| // arrange| var schema = CreateSchema(b => { });| // act| var directive =| schema.DirectiveTypes.FirstOrDefault(| t => t.Name.EqualsOrdinal(\"skip\"));| // assert| Assert.NotNull(directive);| Assert.IsType<SkipDirectiveType>(directive);| Assert.Equal(\"skip\", directive.Name);| Assert.Collection(directive.Arguments,| t =>| {| Assert.Equal(\"if\", t.Name);| Assert.IsType<NonNullType>(t.Type);| Assert.IsType<BooleanType>(((NonNullType)t.Type).Type);| });| Assert.Collection(directive.Locations.AsEnumerable(),| t => Assert.Equal(DirectiveLocation.Field, t),| t => Assert.Equal(DirectiveLocation.FragmentSpread, t),| t => Assert.Equal(DirectiveLocation.InlineFragment, t));| }"
      },
      {
        "name": "EnsureIncludeDirectiveIsAvailable",
        "body": "{| // arrange| var schema = CreateSchema(b => { });| // act| var directive =| schema.DirectiveTypes.FirstOrDefault(| t => t.Name.EqualsOrdinal(\"include\"));| // assert| Assert.NotNull(directive);| Assert.IsType<IncludeDirectiveType>(directive);| Assert.Equal(\"include\", directive.Name);| Assert.Collection(directive.Arguments,| t =>| {| Assert.Equal(\"if\", t.Name);| Assert.IsType<NonNullType>(t.Type);| Assert.IsType<BooleanType>(((NonNullType)t.Type).Type);| });| Assert.Collection(directive.Locations.AsEnumerable(),| t => Assert.Equal(DirectiveLocation.Field, t),| t => Assert.Equal(DirectiveLocation.FragmentSpread, t),| t => Assert.Equal(DirectiveLocation.InlineFragment, t));| }"
      }
    ]
  },
  {
    "file": "SpecifiedByDirectiveTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query1>()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query1>()| .BuildSchemaAsync();| Assert.Contains(| schema.DirectiveTypes,| t => t.Name.EqualsOrdinal(SpecifiedByDirectiveType.Names.SpecifiedBy));| Assert.Empty(| schema.GetType<ScalarType>(\"DateTime\").Directives);| Assert.NotNull(| schema.GetType<ScalarType>(\"DateTime\").SpecifiedBy);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddDocumentFromString(| \"\"\"| schema {| query: Query1| }| type Query1 {| date: DateTime!| }| \"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions.\"| directive @specifiedBy(\"The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.\" url: String!) on SCALAR| \"The `DateTime` scalar represents an ISO-8601 compliant date time type.\"| scalar DateTime @specifiedBy(url: \"https:\\/\\/www.graphql-scalars.com\\/date-time\")| \"\"\")| .UseField(next => next)| .BuildSchemaAsync();| Assert.Contains(| schema.DirectiveTypes,| t => t.Name.EqualsOrdinal(SpecifiedByDirectiveType.Names.SpecifiedBy));| Assert.Empty(| schema.GetType<ScalarType>(\"DateTime\").Directives);| Assert.NotNull(| schema.GetType<ScalarType>(\"DateTime\").SpecifiedBy);| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddDocumentFromString(| \"\"\"| schema {| query: Query1| }| type Query1 {| date: DateTime!| }| \"The `@specifiedBy` directive is used within the type system definition language to provide a URL for specifying the behavior of custom scalar definitions.\"| directive @specifiedBy(\"The specifiedBy URL points to a human-readable specification. This field will only read a result for scalar types.\" url: String!) on SCALAR| \"\"\")| .UseField(next => next)| .BuildSchemaAsync();| Assert.Contains(| schema.DirectiveTypes,| t => t.Name.EqualsOrdinal(SpecifiedByDirectiveType.Names.SpecifiedBy));| Assert.Empty(| schema.GetType<ScalarType>(\"DateTime\").Directives);| Assert.NotNull(| schema.GetType<ScalarType>(\"DateTime\").SpecifiedBy);| }"
      }
    ]
  },
  {
    "file": "TagDirectiveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddObjectType<Foo>()| .AddType<FooDirective>()| .SetSchema(d => d.Tag(\"OnSchema\"))| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| \"\"\"| type Query {| field: String @tag(name: \"abc\")| }| directive @tag(\"The name of the tag.\" name: String!)| repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION || ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE || INPUT_OBJECT | INPUT_FIELD_DEFINITION| \"\"\")| .UseField(_ => _ => default)| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EnumFlagsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableFlagEnums = true)| .ExecuteRequestAsync(| \"\"\"| {| foo(input: { isFoo: true, isBaz: true }) {| isFoo| isBar| isBaz| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foo\": {| \"isFoo\": true,| \"isBar\": false,| \"isBaz\": true| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyOptions(o =>| {| o.EnableFlagEnums = true;| o.EnableDefer = false;| o.EnableStream = false;| })| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type FooBarBazFlags {| isFoo: Boolean!| isBar: Boolean!| isBaz: Boolean!| }| type Query {| foo(input: FooBarBazFlagsInput!): FooBarBazFlags!| }| input FooBarBazFlagsInput {| isFoo: Boolean| isBar: Boolean| isBaz: Boolean| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "EnumTypeDescriptorAttributeTests.cs",
    "methods": [
      {
        "name": "Change_Value_Name_With_Attribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Enum1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var value = schema.GetType<EnumType>(\"Enum1\").Values.First();| Assert.Equal(\"ABC\", value.Name);| }"
      },
      {
        "name": "Change_Type_Name_With_Attribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Enum2>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.NotNull(schema.GetType<EnumType>(\"Abc\"));| }"
      },
      {
        "name": "Annotated_Enum3_With_EnumTypeAttribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Enum3>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.NotNull(schema.GetType<EnumType>(\"Foo\"));| }"
      }
    ]
  },
  {
    "file": "EnumTypeExtensionTests.cs",
    "methods": [
      {
        "name": "EnumTypeExtension_AddValue",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType<FooTypeExtension>()| .Create();| // assert| var type = schema.GetType<FooType>(\"Foo\");| Assert.True(type.TryGetRuntimeValue(\"_QUOX\", out _));| }"
      },
      {
        "name": "EnumTypeExtension_AddValueThatDoesNotMatchClrType",
        "body": "{| // arrange| // act| Action action = () => SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new EnumTypeExtension(d => d| .Name(\"Foo\")| .Value(\"FOOBAR\")))| .Create();| // assert| Assert.Throws<SchemaException>(action);| }"
      },
      {
        "name": "EnumTypeExtension_SetDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new EnumTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .Create();| // assert| var type = schema.GetType<FooType>(\"Foo\");| Assert.Collection(type.Directives[\"dummy\"],| t => { });| }"
      },
      {
        "name": "EnumTypeExtension_ReplaceDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new EnumType<Foo>(d => d| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new EnumTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| var value = type.Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "EnumTypeExtension_RepeatableDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new EnumType<Foo>(d => d| .Directive(\"dummy_rep\")))| .AddType(new EnumTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| var count = type.Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      },
      {
        "name": "EnumTypeExtension_SetTypeContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new EnumTypeExtension(d => d| .Name(\"Foo\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.True(type.ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "EnumTypeExtension_Ignore_Fields",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType<FooIgnoreTypeExtension>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EnumTypeTests.cs",
    "methods": [
      {
        "name": "EnumType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType(d => d| .Name(dep => dep.Name + \"Enum\")| .DependsOn<StringType>()| .Value(\"BAR\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"StringEnum\");| Assert.NotNull(type);| }"
      },
      {
        "name": "EnumType_GraphQLDescriptionAttribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<DescriptionTestEnum>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"DescriptionTestEnum\");| Assert.Equal(\"TestDescription\", type.Description);| }"
      },
      {
        "name": "EnumType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType(d => d| .Name(dep => dep.Name + \"Enum\")| .DependsOn(typeof(StringType))| .Value(\"BAR\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"StringEnum\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericEnumType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType(d => d| .Name(dep => dep.Name + \"Enum\")| .DependsOn<StringType>()| .Value(\"ABC\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"StringEnum\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericEnumType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType(d => d| .Name(dep => dep.Name + \"Enum\")| .DependsOn(typeof(StringType))| .Value(\"ABC\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"StringEnum\");| Assert.NotNull(type);| }"
      },
      {
        "name": "EnumType_WithDirectives",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddDirectiveType(new DirectiveType(d => d| .Name(\"bar\")| .Location(DirectiveLocation.Enum)))| .AddEnumType(d => d.Name(\"Foo\").Directive(new DirectiveNode(\"bar\")).Value(\"ABC\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Directives, t => Assert.Equal(\"bar\", t.Type.Name));| }"
      },
      {
        "name": "EnumType_WithDirectivesT",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddDirectiveType(new DirectiveType<Bar>(d => d| .Name(\"bar\")| .Location(DirectiveLocation.Enum)))| .AddEnumType(d => d.Name(\"Foo\").Directive<Bar>().Value(\"ABC\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Directives,| t => Assert.Equal(\"bar\", t.Type.Name));| }"
      },
      {
        "name": "ImplicitEnumType_DetectEnumValues",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Foo>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.NotNull(type);| Assert.True(type.TryGetRuntimeValue(\"BAR1\", out var value));| Assert.Equal(Foo.Bar1, value);| Assert.True(type.TryGetRuntimeValue(\"BAR2\", out value));| Assert.Equal(Foo.Bar2, value);| }"
      },
      {
        "name": "ExplicitEnumType_OnlyContainDeclaredValues",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Foo>(d =>| {| d.BindValues(BindingBehavior.Explicit);| d.Value(Foo.Bar1);| })| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.NotNull(type);| Assert.True(type.TryGetRuntimeValue(\"BAR1\", out var value));| Assert.Equal(Foo.Bar1, value);| Assert.False(type.TryGetRuntimeValue(\"BAR2\", out value));| Assert.Null(value);| }"
      },
      {
        "name": "ExplicitEnumType_OnlyContainDeclaredValues_2",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Foo>(d =>| {| d.BindValuesImplicitly().BindValuesExplicitly();| d.Value(Foo.Bar1);| })| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.NotNull(type);| Assert.True(type.TryGetRuntimeValue(\"BAR1\", out var value));| Assert.Equal(Foo.Bar1, value);| Assert.False(type.TryGetRuntimeValue(\"BAR2\", out value));| Assert.Null(value);| }"
      },
      {
        "name": "EnumTypeT_Ignore_Fields",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<FooIgnoredType>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "EnumTypeT_Ignore_Fields_With_Extension",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<FooIgnoredTypeWithExtension>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ImplicitEnumType_OnlyBar1HasCustomName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddEnumType<Foo>(d =>| {| d.Value(Foo.Bar1).Name(\"FOOBAR\");| })| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.NotNull(type);| Assert.Collection(| type.Values,| t =>| {| Assert.Equal(Foo.Bar1, t.Value);| Assert.Equal(\"FOOBAR\", t.Name);| },| t =>| {| Assert.Equal(Foo.Bar2, t.Value);| Assert.Equal(\"BAR2\", t.Name);| });| }"
      },
      {
        "name": "EnumType_WithNoValues",
        "body": "{| // act| void Action() => SchemaBuilder.New().AddType<EnumType>().Create();| // assert| Assert.Throws<SchemaException>(Action);| }"
      },
      {
        "name": "EnsureEnumTypeKindIsCorrect",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddType<EnumType<Foo>>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Equal(TypeKind.Enum, type.Kind);| }"
      },
      {
        "name": "EnumValue_ValueIsNull_SchemaException",
        "body": "{| // arrange| // act| void Action() => SchemaBuilder.New()| .AddQueryType<Bar>()| .AddType(new EnumType(d => d.Name(\"Foo\")| .Value<string>(null)))| .Create();| // assert| Assert.Throws<SchemaException>(Action)| .Errors.Single().Message.MatchSnapshot();| }"
      },
      {
        "name": "EnumValueT_ValueIsNull_SchemaException",
        "body": "{| // arrange| // act| void Action() =>| SchemaBuilder.New()| .AddQueryType<Bar>()| .AddType(new EnumType<Foo?>(d => d.Name(\"Foo\")| .Value(null)))| .Create();| // assert| var ex =| Assert.Throws<SchemaException>(Action)| .Errors.Single().Exception;| Assert.Equal(| \"runtimeValue\",| Assert.IsType<ArgumentNullException>(ex).ParamName);| }"
      },
      {
        "name": "EnumValue_WithDirectives",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"baz\")| .Directive(new DirectiveNode(\"bar\")))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Values,| v => Assert.Collection(v.Directives,| t => Assert.Equal(\"bar\", t.Type.Name)));| }"
      },
      {
        "name": "EnumValue_WithDirectivesNameArgs",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"baz\")| .Directive(\"bar\", []))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Values,| v => Assert.Collection(v.Directives,| t => Assert.Equal(\"bar\", t.Type.Name)));| }"
      },
      {
        "name": "Serialize_EnumValue_WithDirectives",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"baz\")| .Directive(new DirectiveNode(\"bar\")))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "EnumValue_WithDirectivesT",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType<Bar>(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"baz\")| .Directive<Bar>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Values,| v => Assert.Collection(v.Directives,| t => Assert.Equal(\"bar\", t.Type.Name)));| }"
      },
      {
        "name": "EnumValue_WithDirectivesTInstance",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType<Bar>(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"baz\")| .Directive(new Bar()))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Values,| v => Assert.Collection(v.Directives,| t => Assert.Equal(\"bar\", t.Type.Name)));| }"
      },
      {
        "name": "EnumValue_SetContextData",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddEnumType(d => d| .Name(\"Foo\")| .Value(\"bar\")| .Extend()| .OnBeforeCreate(def => def.ContextData[\"baz\"] = \"qux\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.Collection(type.Values,| v => Assert.Collection(v.ContextData,| c =>| {| Assert.Equal(\"baz\", c.Key);| Assert.Equal(\"qux\", c.Value);| }));| }"
      },
      {
        "name": "EnumValue_DefinitionIsNull_ArgumentNullException",
        "body": "{| // arrange| var completionContext = new Mock<ITypeCompletionContext>();| // act| void Action() => new EnumValue(completionContext.Object, null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumValue_ContextIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => new EnumValue(null!, new EnumValueDefinition());| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumValue_DefinitionValueIsNull_ArgumentNullException",
        "body": "{| // arrange| var completionContext = new Mock<ITypeCompletionContext>();| // act| void Action() => new EnumValue(completionContext.Object, new EnumValueDefinition());| // assert| Assert.Throws<ArgumentException>(Action);| }"
      },
      {
        "name": "Deprecate_Obsolete_Values",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<FooObsolete>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Deprecate_Fields_With_Deprecated_Attribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<FooDeprecated>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Ignore_Fields_With_GraphQLIgnoreAttribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<FooIgnore>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "EnumType_That_Is_Bound_To_String_Should_Not_Interfere_With_Scalar",
        "body": "{| SchemaBuilder.New()| .AddQueryType<SomeQueryType>()| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Recognize_GraphQLNameAttribute_On_EnumType_And_EnumValue",
        "body": "{| SchemaBuilder.New()| .AddEnumType<FooName>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "ValueContainingUnderline_Should_NotResultInDoubleUnderline",
        "body": "{| SchemaBuilder.New()| .AddEnumType<FooUnderline>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Generic_Ignore_Descriptor_Is_Null",
        "body": "{| void Fail()| => EnumTypeDescriptorExtensions.Ignore<int>(default(IEnumTypeDescriptor<int>)!, 1);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Generic_Ignore_Value_Is_Null",
        "body": "{| var descriptor = new Mock<IEnumTypeDescriptor<int?>>();| void Fail()| => EnumTypeDescriptorExtensions.Ignore<int?>(descriptor.Object, null);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Ignore_Descriptor_Is_Null",
        "body": "{| void Fail()| => EnumTypeDescriptorExtensions.Ignore<int>(default(IEnumTypeDescriptor)!, 1);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Ignore_Value_Is_Null",
        "body": "{| var descriptor = new Mock<IEnumTypeDescriptor>();| void Fail()| => EnumTypeDescriptorExtensions.Ignore<int?>(descriptor.Object, null);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "EnumName_Set_Name_Comparer",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType<Bar>(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .NameComparer(StringComparer.OrdinalIgnoreCase)| .Value(\"baz\")| .Name(\"BAZ\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.True(type.IsInstanceOfType(new EnumValueNode(\"baz\")));| }"
      },
      {
        "name": "EnumName_Set_Value_Comparer",
        "body": "{| // act| var schema = SchemaBuilder| .New()| .AddDirectiveType(new DirectiveType<Bar>(d => d| .Name(\"bar\")| .Location(DirectiveLocation.EnumValue)))| .AddEnumType(d => d| .Name(\"Foo\")| .ValueComparer(new ValueComparer())| .Value(\"baz\")| .Name(\"BAZ\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<EnumType>(\"Foo\");| Assert.True(type.IsInstanceOfType(\"ANYTHING WILL DO\"));| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithEnum>()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor =| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithEnum>()| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(| \"\"\"| {| __type(name: \"CriticalityLevel\") {| enumValues {| name| }| }| }| \"\"\");| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "EnumTypeUnsafeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| // act| var enumType = EnumType.CreateUnsafe(| new(\"Simple\")| {| Values =| {| new(\"ONE\", runtimeValue: \"One\"),| new(\"TWO\", runtimeValue: \"Two\"),| },| });| var queryType = ObjectType.CreateUnsafe(| new(\"Query\")| {| Fields =| {| new(\"foo\", type: TypeReference.Create(enumType), pureResolver: _ => \"One\"),| },| });| // assert| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(queryType)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var enumType = EnumType.CreateUnsafe(| new EnumTypeDefinition(\"Simple\")| {| Values =| {| new(\"ONE\", runtimeValue: \"One\"),| new(\"TWO\", runtimeValue: \"Two\"),| },| });| var queryType = ObjectType.CreateUnsafe(| new(\"Query\")| {| Fields =| {| new(\"foo\", type: TypeReference.Create(enumType), pureResolver: _ => \"One\"),| },| });| // assert| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(queryType)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "InputCoercionTests.cs",
    "methods": [
      {
        "name": "ConvertAccordingToInputCoercionRules",
        "body": "{| InputIsCoercedCorrectly<BooleanType, BooleanValueNode, bool>(| new BooleanValueNode(true), true);| InputIsCoercedCorrectly<BooleanType, BooleanValueNode, bool>(| new BooleanValueNode(false), false);| InputIsCoercedCorrectly<IntType, IntValueNode, int>(| new IntValueNode(123), 123);| InputIsCoercedCorrectly<FloatType, IntValueNode, double>(| new IntValueNode(123), 123d);| InputIsCoercedCorrectly<FloatType, FloatValueNode, double>(| new FloatValueNode(123.456d), 123.456d);| InputIsCoercedCorrectly<StringType, StringValueNode, string>(| new StringValueNode(\"abc123\"), \"abc123\");| InputIsCoercedCorrectly<IdType, StringValueNode, string>(| new StringValueNode(\"123456\"), \"123456\");| }"
      },
      {
        "name": "ConvertAccordingToInputCoercionRules2",
        "body": "{| InputCannotBeCoercedCorrectly<BooleanType, IntValueNode>(| new IntValueNode(123));| InputCannotBeCoercedCorrectly<IntType, FloatValueNode>(| new FloatValueNode(123.123d));| InputCannotBeCoercedCorrectly<IntType, BooleanValueNode>(| new BooleanValueNode(true));| InputCannotBeCoercedCorrectly<IntType, StringValueNode>(| new StringValueNode(\"123.123\"));| InputCannotBeCoercedCorrectly<FloatType, StringValueNode>(| new StringValueNode(\"123\"));| InputCannotBeCoercedCorrectly<StringType, FloatValueNode>(| new FloatValueNode(123.456d));| InputCannotBeCoercedCorrectly<StringType, BooleanValueNode>(| new BooleanValueNode(false));| InputIsCoercedCorrectly<IdType, StringValueNode, string>(| new StringValueNode(\"123456\"), \"123456\");| }"
      },
      {
        "name": "ListCanBeCoercedFromListValue",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new BooleanType());| var list = new ListValueNode(new BooleanValueNode(true), new BooleanValueNode(false));| // act| var coercedValue =| inputParser.ParseLiteral(list, type, Path.Root.Append(\"root\"));| // assert| Assert.Collection(Assert.IsType<List<bool?>>(coercedValue), Assert.True, Assert.False);| }"
      },
      {
        "name": "Matrix_Can_Be_Coerced_From_Matrix",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new ListType(new BooleanType()));| var value = new ListValueNode(| new ListValueNode(new BooleanValueNode(true)),| new ListValueNode(new BooleanValueNode(true), new BooleanValueNode(false)));| // act| var coercedValue =| inputParser.ParseLiteral(value, type, Path.Root.Append(\"root\"));| // assert| coercedValue.MatchSnapshot();| }"
      },
      {
        "name": "Matrix_Can_Be_Coerced_From_Single_Value",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new ListType(new BooleanType()));| var value = new BooleanValueNode(true);| // act| var coercedValue =| inputParser.ParseLiteral(value, type, Path.Root.Append(\"root\"));| // assert| coercedValue.MatchSnapshot();| }"
      },
      {
        "name": "Matrix_Can_Be_Coerced_From_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new ListType(new BooleanType()));| var value = NullValueNode.Default;| // act| var coercedValue =| inputParser.ParseLiteral(value, type, Path.Root.Append(\"root\"));| // assert| Assert.Null(coercedValue);| }"
      },
      {
        "name": "Matrix_Cannot_Be_Coerced_From_List",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new ListType(new BooleanType()));| var value = new ListValueNode(new BooleanValueNode(true));| // act| void Action() =>| inputParser.ParseLiteral(value, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ListCanBeCoercedFromListElementValue",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new BooleanType());| var element = new BooleanValueNode(true);| // act| var coercedValue =| inputParser.ParseLiteral(element, type, Path.Root.Append(\"root\"));| // assert| Assert.Collection(Assert.IsType<List<bool?>>(coercedValue), Assert.True);| }"
      },
      {
        "name": "ListCannotBeCoercedFromMixedList",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new BooleanType());| var list = new ListValueNode(new BooleanValueNode(true), new StringValueNode(\"foo\"));| // act| void Action() =>| inputParser.ParseLiteral(list, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ListCannotBeCoercedIfElementTypeDoesNotMatch",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = (IInputType)new ListType(new BooleanType());| var element = new StringValueNode(\"foo\");| // act| void Action() =>| inputParser.ParseLiteral(element, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action);| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeAttributeTests.cs",
    "methods": [
      {
        "name": "Change_Field_Name_With_Attribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType<Object1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(| schema.GetType<InputObjectType>(\"Object1Input\")| .Fields| .ContainsField(\"bar\"));| }"
      },
      {
        "name": "Change_InputObjectType_Name_With_Attribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType<Object2>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(| schema.GetType<InputObjectType>(\"Bar\")| .Fields| .ContainsField(\"foo\"));| }"
      },
      {
        "name": "Annotated_Struct1_With_InputObjectTypeAttribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType<Struct1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(| schema.GetType<InputObjectType>(\"Foo\")| .Fields| .ContainsField(\"foo\"));| }"
      },
      {
        "name": "Infer_Default_Values_From_Attribute",
        "body": "{| SchemaBuilder.New()| .AddInputObjectType<InputWithDefaults>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType(d =>| {| d.Name(\"Query\");| d.Field(\"foo\")| .Argument(\"a\", a => a.Type<InputObjectType<InputWithDefaults>>())| .Resolve(ctx => ctx.ArgumentValue<InputWithDefaults>(\"a\"));| })| .AddInputObjectType<InputWithDefaults>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .MakeExecutable()| .ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ foo(a: { }) { foo bar baz qux quux } }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType(d =>| {| d.Name(\"Query\");| d.Field(\"foo\")| .Argument(\"a\", a => a.Type<InputObjectType<InputWithDefaults>>())| .Resolve(ctx => ctx.ArgumentValue<InputWithDefaults>(\"a\"));| })| .AddInputObjectType<InputWithDefaults>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .MakeExecutable()| .ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(@\"| query($q: InputWithDefaultsInput) {| foo(a: $q) {| foo bar baz qux quux| }| }\")| .SetVariableValues(new Dictionary<string, object> { {\"q\", new Dictionary<string, object>() }, })| .Build())| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeDictionaryTests.cs",
    "methods": [
      {
        "name": "Nullable_Dictionary_Is_Correctly_Detected",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"\"\"| query {| foo(| input: {| contextData1: [{ key: \"abc\", value: \"abc\" }]| contextData2: [{ key: \"abc\", value: \"abc\" }]| contextData3: [{ key: \"abc\", value: \"abc\" }]| }| )| }| \"\"\");| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeExtensionTests.cs",
    "methods": [
      {
        "name": "InputObjectTypeExtension_AddField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType<FooTypeExtension>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| Assert.True(type.Fields.ContainsField(\"test\"));| }"
      },
      {
        "name": "InputObjectTypeExtension_SetTypeContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| Assert.True(type.ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "InputObjectTypeExtension_SetFieldContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Field(\"description\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| Assert.True(type.Fields[\"description\"]| .ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "InputObjectTypeExtension_SetDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| Assert.True(type.Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "InputObjectTypeExtension_SetDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Field(\"name\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| Assert.True(type.Fields[\"name\"]| .Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "InputObjectTypeExtension_ReplaceDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new InputObjectType<Foo>(t => t| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| var value = type.Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InputObjectTypeExtension_ReplaceDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new InputObjectType<Foo>(t => t| .Field(f => f.Description)| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Field(\"description\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| var value = type.Fields[\"description\"].Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InputObjectTypeExtension_RepeatableDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new InputObjectType<Foo>(t => t| .Directive(\"dummy_rep\")))| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| var count = type.Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      },
      {
        "name": "InputObjectTypeExtension_RepeatableDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new InputObjectType<Foo>(t => t| .Field(f => f.Description)| .Directive(\"dummy_rep\")))| .AddType(new InputObjectTypeExtension(d => d| .Name(\"FooInput\")| .Field(\"description\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"FooInput\");| var count = type.Fields[\"description\"]| .Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeTests.cs",
    "methods": [
      {
        "name": "InputObjectType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Field(\"bar\")| .Type<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "InputObjectType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Field(\"bar\")| .Type<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericInputObjectType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType<SimpleInput>(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericInputObjectType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInputObjectType<SimpleInput>(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType)))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "Initialize_IgnoreProperty_PropertyIsNotInSchemaType",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(| d => d.Field(f => f.Id).Ignore());| // assert| fooType = CreateType(fooType);| Assert.Collection(fooType.Fields,| t => Assert.Equal(\"name\", t.Name));| }"
      },
      {
        "name": "Initialize_UnignoreProperty_PropertyIsInSchemaType",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(d =>| {| d.Field(f => f.Id).Ignore();| d.Field(f => f.Id).Ignore(false);| });| // assert| fooType = CreateType(fooType);| Assert.Collection(fooType.Fields,| t => Assert.Equal(\"id\", t.Name),| t => Assert.Equal(\"name\", t.Name));| }"
      },
      {
        "name": "EnsureInputObjectTypeKindIsCorrect",
        "body": "{| // arrange| var schema = Create();| var inputObjectType =| schema.GetType<InputObjectType>(\"Object1\");| // act| var kind = inputObjectType.Kind;| // assert| Assert.Equal(TypeKind.InputObject, kind);| }"
      },
      {
        "name": "GenericInputObject_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(| d => d.Directive(\"foo\").Field(f => f.Id).Directive(\"foo\"));| // assert| fooType = CreateType(fooType, b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInputObject_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(| d => d.Directive(\"foo\").Field(f => f.Id).Directive(\"foo\"));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInputObject_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(d => d| .Name(\"Bar\")| .Directive(new DirectiveNode(\"foo\"))| .Field(f => f.Id)| .Directive(new DirectiveNode(\"foo\")));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInputObject_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(d => d| .Name(\"Bar\")| .Directive(new FooDirective())| .Field(f => f.Id)| .Directive(new FooDirective()));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInputObject_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(d => d| .Name(\"Bar\")| .Directive<FooDirective>()| .Field(f => f.Id)| .Directive<FooDirective>());| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InputObject_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var fooType = new InputObjectType(d => d| .Name(\"Bar\")| .Directive(\"foo\")| .Field(\"id\")| .Type<StringType>()| .Directive(\"foo\"));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InputObject_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var fooType = new InputObjectType<SimpleInput>(d => d| .Name(\"Bar\")| .Directive(\"foo\")| .Field(\"id\")| .Type<StringType>()| .Directive(\"foo\"));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InputObject_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var fooType = new InputObjectType(d => d| .Name(\"Bar\")| .Directive(new DirectiveNode(\"foo\"))| .Field(\"id\")| .Type<StringType>()| .Directive(new DirectiveNode(\"foo\")));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InputObject_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var fooType = new InputObjectType(d => d| .Name(\"Bar\")| .Directive(new FooDirective())| .Field(\"id\")| .Type<StringType>()| .Directive(new FooDirective()));| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InputObject_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var fooType = new InputObjectType(d => d| .Name(\"Bar\")| .Directive<FooDirective>()| .Field(\"id\")| .Type<StringType>()| .Directive<FooDirective>());| // assert| fooType = CreateType(fooType,| b => b.AddDirectiveType<FooDirectiveType>());| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "DoNotAllow_InputTypes_OnFields",
        "body": "{| // arrange| // act| void Action() => SchemaBuilder.New()| .AddType(new InputObjectType(t => t.Name(\"Foo\")| .Field(\"bar\")| .Type<NonNullType<ObjectType<SimpleInput>>>()))| .Create();| // assert| Assert.Throws<SchemaException>(Action).Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "DoNotAllow_DynamicInputTypes_OnFields",
        "body": "{| // arrange| // act| void Action() =>| SchemaBuilder.New()| .AddType(new InputObjectType(t => t.Name(\"Foo\")| .Field(\"bar\")| .Type(new NonNullType(new ObjectType<SimpleInput>()))))| .Create();| // assert| var ex = Assert.Throws<SchemaException>(Action).Errors.First().Exception;| Assert.Equal(\"inputType\", Assert.IsType<ArgumentException>(ex).ParamName);| }"
      },
      {
        "name": "Ignore_DescriptorIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action()| => InputObjectTypeDescriptorExtensions.Ignore<SimpleInput>(null, t => t.Id);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Ignore_ExpressionIsNull_ArgumentNullException",
        "body": "{| // arrange| var descriptor =| InputObjectTypeDescriptor.New<SimpleInput>(| DescriptorContext.Create());| // act| void Action() => descriptor.Ignore(null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Ignore_Id_Property",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType(new InputObjectType<SimpleInput>(d => d| .Ignore(t => t.Id)))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Unignore_Id_Property",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType(new InputObjectType<SimpleInput>(d =>| {| d.Ignore(t => t.Id);| d.Field(t => t.Id).Ignore(false);| }))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddTypeConverter<Baz, Bar>(from => new Bar { Text = from.Text, })| .AddTypeConverter<Bar, Baz>(from => new Baz { Text = from.Text, })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ foo(a: { bar: { text: \\\"abc\\\" } }) }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Ignore_Fields_With_GraphQLIgnoreAttribute",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType<InputObjectType<FooIgnored>>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryWithOptionals>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ do(input: { baz: \\\"abc\\\" }) { isBarSet bar baz } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<QueryWithImmutables>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ do(input: { bar: \\\"abc\\\" baz: \\\"def\\\" qux: \\\"ghi\\\" }) { bar baz qux } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Input_Infer_Default_Values",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"abc\")| .Argument(\"def\", a => a.Type<InputObjectType<InputWithDefault>>())| .Resolve(\"ghi\"))| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryWithInterfaceInput>()| .AddType<InputWithInterfaceType>()| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Specify_Argument_Type_With_SDL_Syntax",
        "body": "{| SchemaBuilder.New()| .AddInputObjectType(d =>| {| d.Name(\"Bar\");| d.Field(\"Foo\").Type(\"String\");| })| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "InputObjectType_InInputObjectType_ThrowsSchemaException",
        "body": "{| // arrange| // act| void Fail()| => SchemaBuilder| .New()| .AddQueryType(x => x.Name(\"Query\").Field(\"Foo\").Resolve(\"bar\"))| .AddType<InputObjectType<InputObjectType<Foo>>>()| .ModifyOptions(o => o.StrictRuntimeTypeValidation = true)| .Create();| // assert| Assert.Throws<SchemaException>(Fail).Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddInputObjectType<FieldNameInput>()| .ModifyOptions(o => o.StrictValidation = false)| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddInputObjectType<DeprecatedInputFields>()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .AddInputObjectType<DeprecatedNonNull>()| .BuildSchemaAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .AddInputObjectType(x => x.Name(\"Foo\").Field(\"bar\").Type<IntType>().Deprecated(\"b\"))| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .AddInputObjectType(x => x| .Name(\"Foo\")| .Field(\"bar\")| .Type<NonNullType<IntType>>()| .Deprecated(\"b\"))| .BuildSchemaAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .AddDocumentFromString(@\"| input Foo {| bar: String @deprecated(reason: \"\"reason\"\")| }| \")| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"bar\").Resolve(\"asd\"))| .AddDocumentFromString(@\"| input Foo {| bar: String! @deprecated(reason: \"\"reason\"\")| }| \")| .BuildSchemaAsync();| // assert| var exception = await Assert.ThrowsAsync<SchemaException>(call);| exception.Errors.Single().ToString().MatchSnapshot();| }"
      },
      {
        "name": "OneOf_descriptor_is_null",
        "body": "{| void Fail() => InputObjectTypeDescriptorExtensions.OneOf(null);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "OneOf_generic_descriptor_is_null",
        "body": "{| void Fail() => InputObjectTypeDescriptorExtensions.OneOf<object>(null);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Deprecate_fields_with_attribute",
        "body": "{| SchemaBuilder.New()| .AddInputObjectType<InputWithDeprecatedField>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Ignore_Methods",
        "body": "{| SchemaBuilder.New()| .AddInputObjectType<FooWithMethod>()| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InputParserTests.cs",
    "methods": [
      {
        "name": "Deserialize_InputObject_AllIsSet",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new Dictionary<string, object?>| {| { \"field1\", \"abc\" },| { \"field2\", 123 },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| var runtimeValue = parser.ParseResult(fieldData, type, Path.Root);| // assert| Assert.IsType<TestInput>(runtimeValue).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field1\", \"abc\"),| new ObjectFieldNode(\"field2\", 123));| // act| var parser = new InputParser(new DefaultTypeConverter());| var runtimeValue = parser.ParseLiteral(fieldData, type, Path.Root);| // assert| Assert.IsType<TestInput>(runtimeValue).MatchSnapshot();| }"
      },
      {
        "name": "Deserialize_InputObject_AllIsSet_ConstructorInit",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test2Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test2Input\");| var fieldData = new Dictionary<string, object?>| {| { \"field1\", \"abc\" },| { \"field2\", 123 },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| var runtimeValue = parser.ParseResult(fieldData, type, Path.Root);| // assert| Assert.IsType<Test2Input>(runtimeValue).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet_ConstructorInit",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test2Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test2Input\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field1\", \"abc\"),| new ObjectFieldNode(\"field2\", 123));| // act| var parser = new InputParser(new DefaultTypeConverter());| var runtimeValue = parser.ParseLiteral(fieldData, type, Path.Root);| // assert| Assert.IsType<Test2Input>(runtimeValue).MatchSnapshot();| }"
      },
      {
        "name": "Deserialize_InputObject_AllIsSet_MissingRequired",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test2Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test2Input\");| var fieldData = new Dictionary<string, object?>| {| { \"field2\", 123 },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action() => parser.ParseResult(fieldData, type, Path.Root);| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet_MissingRequired",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test2Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test2Input\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field2\", 123));| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action() => parser.ParseLiteral(fieldData, type, Path.Root);| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Deserialize_InputObject_AllIsSet_OneInvalidField",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new Dictionary<string, object?>| {| { \"field2\", 123 },| { \"field3\", 123 },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action()| => parser.ParseResult(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet_OneInvalidField",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field2\", 123),| new ObjectFieldNode(\"field3\", 123));| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action()| => parser.ParseLiteral(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Deserialize_InputObject_AllIsSet_TwoInvalidFields",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new Dictionary<string, object?>| {| { \"field2\", 123 },| { \"field3\", 123 },| { \"field4\", 123 },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action()| => parser.ParseResult(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet_TwoInvalidFields",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field2\", 123),| new ObjectFieldNode(\"field3\", 123),| new ObjectFieldNode(\"field4\", 123));| // act| var parser = new InputParser(new DefaultTypeConverter());| void Action()| => parser.ParseLiteral(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_AllIsSet_IgnoreAdditionalInputFields",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<TestInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"TestInput\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field1\", \"abc\"),| new ObjectFieldNode(\"field2\", 123),| new ObjectFieldNode(\"field3\", 123),| new ObjectFieldNode(\"field4\", 123));| var converter = new DefaultTypeConverter();| var options = new InputParserOptions| {| IgnoreAdditionalInputFields = true,| };| // act| var parser = new InputParser(converter, options);| var runtimeValue = parser.ParseLiteral(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.IsType<TestInput>(runtimeValue).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_WithDefault_Values",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test3Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test3Input\");| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"field2\", 123));| // act| var parser = new InputParser();| var obj = parser.ParseLiteral(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Equal(\"DefaultAbc\", Assert.IsType<Test3Input>(obj).Field1);| }"
      },
      {
        "name": "Parse_InputObject_NonNullViolation",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test3Input>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = new NonNullType(schema.GetType<InputObjectType>(\"Test3Input\"));| // act| var parser = new InputParser();| void Action()| => parser.ParseLiteral(| NullValueNode.Default,| type,| Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Action).MatchSnapshot();| }"
      },
      {
        "name": "Parse_InputObject_NullableEnumList",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<FooInput>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = new NonNullType(schema.GetType<InputObjectType>(\"FooInput\"));| var listData = new ListValueNode(| NullValueNode.Default,| new EnumValueNode(\"BAZ\"));| var fieldData = new ObjectValueNode(| new ObjectFieldNode(\"bars\", listData));| // act| var parser = new InputParser();| var runtimeData =| parser.ParseLiteral(fieldData, type, Path.Root.Append(\"root\"));| // assert| Assert.Collection(| Assert.IsType<FooInput>(runtimeData).Bars,| t => Assert.Null(t),| t => Assert.Equal(Bar.Baz, t));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query4>()| .BuildRequestExecutorAsync();| // act| var query =| OperationRequest.FromSourceText(| \"\"\"| {| loopback(input: {field2: 1}) {| field1| field2| }| }| \"\"\");| var result = await executor.ExecuteAsync(query, CancellationToken.None);| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "OneOf_A_and_B_Are_Set",
        "body": "{| // arrange| var schema =| SchemaBuilder.New()| .AddInputObjectType<OneOfInput>()| .AddDirectiveType<OneOfDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var oneOfInput = schema.GetType<InputObjectType>(nameof(OneOfInput));| var parser = new InputParser();| var data = new ObjectValueNode(| new ObjectFieldNode(\"a\", \"abc\"),| new ObjectFieldNode(\"b\", 123));| // act| void Fail() => parser.ParseLiteral(data, oneOfInput, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Fail).Errors.MatchSnapshot();| }"
      },
      {
        "name": "OneOf_A_is_Null_and_B_has_Value",
        "body": "{| // arrange| var schema =| SchemaBuilder.New()| .AddInputObjectType<OneOfInput>()| .AddDirectiveType<OneOfDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var oneOfInput = schema.GetType<InputObjectType>(nameof(OneOfInput));| var parser = new InputParser();| var data = new ObjectValueNode(| new ObjectFieldNode(\"a\", NullValueNode.Default),| new ObjectFieldNode(\"b\", 123));| // act| void Fail()| => parser.ParseLiteral(data, oneOfInput, Path.Root.Append(\"root\"));| // assert| Assert.Throws<SerializationException>(Fail).Errors.MatchSnapshot();| }"
      },
      {
        "name": "OneOf_only_B_has_Value",
        "body": "{| // arrange| var schema =| SchemaBuilder.New()| .AddInputObjectType<OneOfInput>()| .AddDirectiveType<OneOfDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var oneOfInput = schema.GetType<InputObjectType>(nameof(OneOfInput));| var parser = new InputParser();| var data = new ObjectValueNode(| new ObjectFieldNode(\"b\", 123));| // act| var runtimeValue =| parser.ParseLiteral(data, oneOfInput, Path.Root.Append(\"root\"));| // assert| runtimeValue.MatchSnapshot();| }"
      },
      {
        "name": "Force_NonNull_Struct_To_Be_Optional",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddInputObjectType<Test4Input>(d => d.Field(t => t.Field2).Type<IntType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| var type = schema.GetType<InputObjectType>(\"Test4Input\");| var fieldData = new Dictionary<string, object?>| {| { \"field1\", \"abc\" },| };| // act| var parser = new InputParser(new DefaultTypeConverter());| var runtimeValue = parser.ParseResult(fieldData, type, Path.Root);| // assert| Assert.IsType<Test4Input>(runtimeValue).MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InputValueFormatterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create()| .MakeExecutable()| .ExecuteAsync(\"{ one(arg: \\\"abc\\\") }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create()| .MakeExecutable()| .ExecuteAsync(\"{ two(arg: \\\"abc\\\") }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create()| .MakeExecutable()| .ExecuteAsync(\"{ one_input(arg: { bar: \\\"abc\\\" }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await SchemaBuilder.New()| .AddQueryType<QueryType>()| .Create()| .MakeExecutable()| .ExecuteAsync(\"{ two_input(arg: { baz: \\\"abc\\\" }) }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "FlagEnumInterceptorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<OutputQuery>()| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x| => x.Name(\"Query\")| .Field(\"asd\")| .Argument(\"input\", x => x.Type(typeof(FlagsWithDescription)))| .Resolve(FlagsWithDescription.Bar))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x| => x.Name(\"Query\").Field(\"asd\").Resolve(\"baz\").Type<InterfaceType<Interface>>())| .AddType<Impl>()| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x| => x.Name(\"Query\").Field(\"asd\").Resolve(\"baz\"))| .AddDirectiveType(| new DirectiveType(| x| => x.Name(\"Test\")| .Location(DirectiveLocation.FragmentSpread)| .Argument(\"a\")| .Type(typeof(FlagsEnum))))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<InputQuery>()| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(Bar))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result1 = await executor1.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(Baz | Bar))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result2 = await executor2.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor3 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(Baz | Bar | FlagsEnum.Foo))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result3 = await executor3.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| new StringBuilder()| .AppendLine(\"Bar:\")| .AppendLine(result1.ToJson())| .AppendLine(\"Bar Baz:\")| .AppendLine(result2.ToJson())| .AppendLine(\"All\")| .AppendLine(result3.ToJson())| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(new[] { Bar, }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result1 = await executor1.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(new[] { new[] { Baz | Bar, }, }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result2 = await executor2.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| new StringBuilder()| .AppendLine(\"List:\")| .AppendLine(result1.ToJson())| .AppendLine(\"NestedList:\")| .AppendLine(result2.ToJson())| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve((FlagsEnum?)Bar))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result1 = await executor1.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve((FlagsEnum?)Baz | Bar))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result2 = await executor2.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor3 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x| => x.Name(\"Query\").Field(\"test\").Resolve((FlagsEnum?)Baz | Bar | FlagsEnum.Foo))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result3 = await executor3.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor4 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve((FlagsEnum?)null))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result4 = await executor4.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| new StringBuilder()| .AppendLine(\"Bar:\")| .AppendLine(result1.ToJson())| .AppendLine(\"Bar Baz:\")| .AppendLine(result2.ToJson())| .AppendLine(\"All\")| .AppendLine(result3.ToJson())| .AppendLine(\"Null\")| .AppendLine(result4.ToJson())| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(new FlagsEnum?[] { Bar, }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result1 = await executor1.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x| => x.Name(\"Query\").Field(\"test\")| .Resolve(new[] { new FlagsEnum?[] { Baz | Bar, }, }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result2 = await executor2.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| var executor3 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(new FlagsEnum?[] { null, }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result3 = await executor3.ExecuteAsync(\"{ test {isBar isBaz isFoo }}\");| new StringBuilder()| .AppendLine(\"List:\")| .AppendLine(result1.ToJson())| .AppendLine(\"NestedList:\")| .AppendLine(result2.ToJson())| .AppendLine(\"Null\")| .AppendLine(result3.ToJson())| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| FlagsEnum? result1 = null;| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(FlagsEnum)))| .Resolve(| ctx =>| {| result1 = ctx.ArgumentValue<FlagsEnum>(\"input\");| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| await executor1.ExecuteAsync(\"{ test(input: {isBar: true, isBaz: false, isFoo: false}) }\");| FlagsEnum? result2 = null;| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(FlagsEnum)))| .Resolve(| ctx =>| {| result2 = ctx.ArgumentValue<FlagsEnum>(\"input\");| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| await executor2.ExecuteAsync(\"{ test(input: {isBar: true, isBaz: false, isFoo: true}) }\");| Assert.Equal(result1, Bar);| Assert.Equal(result2, Bar | FlagsEnum.Foo);| }"
      },
      {
        "name": "Task",
        "body": "{| FlagsEnum? result1 = null;| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(List<FlagsEnum>)))| .Resolve(| ctx =>| {| result1 = ctx.ArgumentValue<List<FlagsEnum>>(\"input\")[0];| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| await executor1.ExecuteAsync(\"{ test(input: {isBar: true, isBaz: false, isFoo: false}) }\");| FlagsEnum? result2 = null;| var executor2 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(List<List<FlagsEnum>>)))| .Resolve(| ctx =>| {| result2 = ctx.ArgumentValue<List<List<FlagsEnum>>>(\"input\")[0][0];| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| await executor2.ExecuteAsync(\"{ test(input: {isBar: true, isBaz: false, isFoo: true}) }\");| Assert.Equal(result1, Bar);| Assert.Equal(result2, Bar | FlagsEnum.Foo);| }"
      },
      {
        "name": "Task",
        "body": "{| FlagsEnum? result1 = null;| var executor1 = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type<InputObjectType<SimpleInput>>())| .Resolve(| ctx =>| {| result1 = ctx.ArgumentValue<SimpleInput>(\"input\").Single;| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| await executor1.ExecuteAsync(| \"{ test(input: {single: {isBar: true, isBaz: false, isFoo: true}}) }\");| Assert.Equal(result1, Bar | FlagsEnum.Foo);| }"
      },
      {
        "name": "Task",
        "body": "{| FlagsEnum? enumValue = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(FlagsEnum)))| .Resolve(| ctx =>| {| enumValue = ctx.ArgumentValue<SimpleInput>(\"input\").Single;| return \"\";| }))| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(\"{ test(input: {}) }\");| Assert.Null(enumValue);| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| FlagsEnum? enumValue = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"test\")| .Type<StringType>()| .Argument(\"input\", x => x.Type(typeof(FlagsEnum)))| .Resolve(| ctx =>| {| enumValue = ctx.ArgumentValue<SimpleInput>(\"input\").Single;| return \"\";| }))| .AddDocumentFromString(\"extend input FlagsEnumFlagsInput { isAsd : Boolean }\")| .ModifyOptions(x => x.EnableFlagEnums = true)| .BuildRequestExecutorAsync();| var result = await executor.ExecuteAsync(\"{ test(input: {isAsd:true}) }\");| Assert.Null(enumValue);| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeAttributeTests.cs",
    "methods": [
      {
        "name": "ArgumentDescriptorAttribute_Changes_DefaultValue",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<Interface1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.Equal(| \"abc\",| schema.GetType<InterfaceType>(\"Interface1\")| .Fields[\"field\"]| .Arguments[\"argument\"]| .DefaultValue!| .Value);| }"
      },
      {
        "name": "InterfaceFieldDescriptorAttribute_Adds_ContextData",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<Interface2>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.Equal(| \"def\",| schema.GetType<InterfaceType>(\"Interface2\")| .Fields[\"field\"]| .ContextData[\"abc\"]);| }"
      },
      {
        "name": "InterfaceFieldDescriptorAttribute_Updated_FieldDefinition",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<Interface2>(d =>| d.Field(t => t.GetField()).Name(\"foo\"))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.Equal(| \"def\",| schema.GetType<InterfaceType>(\"Interface2\")| .Fields[\"foo\"]| .ContextData[\"abc\"]);| }"
      },
      {
        "name": "InterfaceTypeDescriptorAttribute_Add_FieldDefinition",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<Interface3>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(| schema.GetType<InterfaceType>(\"Interface3\")| .Fields.ContainsField(\"abc\"));| }"
      },
      {
        "name": "Annotated_Class_With_InterfaceTypeAttribute",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<Object1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(| schema.GetType<InterfaceType>(\"Foo\")| .Fields.ContainsField(\"bar\"));| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeExtensionTests.cs",
    "methods": [
      {
        "name": "InterfaceTypeExtension_AddField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType<FooTypeExtension>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields.ContainsField(\"test\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_Deprecate_With_Reason",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Type<StringType>()| .Deprecated(\"Foo\")))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"description\"].IsDeprecated);| Assert.Equal(\"Foo\", type.Fields[\"description\"].DeprecationReason);| }"
      },
      {
        "name": "InterfaceTypeExtension_Deprecate_Without_Reason",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Type<StringType>()| .Deprecated()))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"description\"].IsDeprecated);| Assert.Equal(| WellKnownDirectives.DeprecationDefaultReason,| type.Fields[\"description\"].DeprecationReason);| }"
      },
      {
        "name": "InterfaceTypeExtension_Deprecated_Directive_Is_Serialized",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Type<StringType>()| .Deprecated()))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "InterfaceTypeExtension_SetTypeContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_SetFieldContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"description\"]| .ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_SetArgumentContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Type<StringType>()| .Argument(\"a\", a => a| .Type<StringType>()| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\"))))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"name\"].Arguments[\"a\"]| .ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_SetDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_SetDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"name\"].Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_SetDirectiveOnArgument",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Argument(\"a\", a => a.Directive(\"dummy\"))))| .AddDirectiveType<DummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| Assert.True(type.Fields[\"name\"].Arguments[\"a\"].Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "InterfaceTypeExtension_ReplaceDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var value = type.Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InterfaceTypeExtension_ReplaceDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Field(f => f.Description)| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var value = type.Fields[\"description\"].Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InterfaceTypeExtension_ReplaceDirectiveOnArgument",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Field(f => f.GetName(default!))| .Argument(\"a\", a => a| .Type<StringType>()| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\")))))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Argument(\"a\", a =>| a.Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\")))))| .AddDirectiveType<DummyWithArgDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var value = type.Fields[\"name\"].Arguments[\"a\"]| .Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InterfaceTypeExtension_CopyDependencies_ToType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<FooType>()| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Argument(\"a\", a =>| a.Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\")))))| .AddDirectiveType<DummyWithArgDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var value = type.Fields[\"name\"].Arguments[\"a\"]| .Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "InterfaceTypeExtension_RepeatableDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Directive(\"dummy_rep\")))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var count = type.Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      },
      {
        "name": "InterfaceTypeExtension_RepeatableDirectiveOnField",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Field(f => f.Description)| .Directive(\"dummy_rep\")))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"description\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var count = type.Fields[\"description\"]| .Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      },
      {
        "name": "InterfaceTypeExtension_RepeatableDirectiveOnArgument",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType(new InterfaceType<IFoo>(t => t| .Name(\"Foo\")| .Field(f => f.GetName(default!))| .Argument(\"a\", a => a| .Type<StringType>()| .Directive(\"dummy_rep\", new ArgumentNode(\"a\", \"a\")))))| .AddType(new InterfaceTypeExtension(d => d| .Name(\"Foo\")| .Field(\"name\")| .Argument(\"a\", a =>| a.Directive(\"dummy_rep\", new ArgumentNode(\"a\", \"b\")))))| .AddDirectiveType<RepeatableDummyDirective>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Foo\");| var count = type.Fields[\"name\"].Arguments[\"a\"]| .Directives[\"dummy_rep\"]| .Count();| Assert.Equal(2, count);| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddType<QueryType>()| .AddType<SomeObjectType>()| .ExecuteRequestAsync(\"{ some { field } }\");| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeTests.cs",
    "methods": [
      {
        "name": "InterfaceType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Field(\"bar\")| .Type<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "InterfaceType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Field(\"bar\")| .Type<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericInterfaceType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<IFoo>(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericInterfaceType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddInterfaceType<IFoo>(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType)))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "InferFieldsFromClrInterface",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(),| b => b.ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.Collection(| fooType.Fields.Where(t => !t.IsIntrospectionField).OrderBy(t => t.Name),| t =>| {| Assert.Equal(\"bar\", t.Name);| Assert.IsType<BooleanType>(| Assert.IsType<NonNullType>(t.Type).Type);| },| t =>| {| Assert.Equal(\"baz\", t.Name);| Assert.IsType<StringType>(t.Type);| },| t =>| {| Assert.Equal(\"qux\", t.Name);| Assert.IsType<IntType>(| Assert.IsType<NonNullType>(t.Type).Type);| Assert.Collection(t.Arguments,| a => Assert.Equal(\"a\", a.Name));| });| }"
      },
      {
        "name": "InferSchemaInterfaceTypeFromClrInterface",
        "body": "{| // arrange && act| var schema = SchemaBuilder.New()| .AddType<IFoo>()| .AddQueryType<FooImpl>()| .Create();| // assert| var type = schema.GetType<ObjectType>(\"FooImpl\");| Assert.Collection(type.Implements, t => Assert.Equal(\"IFoo\", t.Name));| }"
      },
      {
        "name": "IgnoreFieldsFromClrInterface",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(t => t.Ignore(p => p.Bar)),| b => b.ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.Collection(| fooType.Fields.Where(t => !t.IsIntrospectionField),| t =>| {| Assert.Equal(\"baz\", t.Name);| Assert.IsType<StringType>(t.Type);| },| t =>| {| Assert.Equal(\"qux\", t.Name);| Assert.IsType<IntType>(| Assert.IsType<NonNullType>(t.Type).Type);| Assert.Collection(t.Arguments,| a => Assert.Equal(\"a\", a.Name));| });| }"
      },
      {
        "name": "UnIgnoreFieldsFromClrInterface",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(t =>| {| t.Ignore(p => p.Bar);| t.Field(p => p.Bar).Ignore(false);| }),| b => b.ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.Collection(| fooType.Fields.Where(t => !t.IsIntrospectionField),| t =>| {| Assert.Equal(\"bar\", t.Name);| Assert.IsType<BooleanType>(| Assert.IsType<NonNullType>(t.Type).Type);| },| t =>| {| Assert.Equal(\"baz\", t.Name);| Assert.IsType<StringType>(t.Type);| },| t =>| {| Assert.Equal(\"qux\", t.Name);| Assert.IsType<IntType>(| Assert.IsType<NonNullType>(t.Type).Type);| Assert.Collection(t.Arguments,| a => Assert.Equal(\"a\", a.Name));| });| }"
      },
      {
        "name": "ExplicitInterfaceFieldDeclaration",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(t => t| .BindFields(BindingBehavior.Explicit)| .Field(p => p.Bar)),| b => b.ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.Collection(| fooType.Fields.Where(t => !t.IsIntrospectionField),| t =>| {| Assert.Equal(\"bar\", t.Name);| Assert.IsType<BooleanType>(| Assert.IsType<NonNullType>(t.Type).Type);| });| }"
      },
      {
        "name": "GenericInterfaceType_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(d => d| .Directive(\"foo\")| .Field(f => f.Bar)| .Directive(\"foo\")),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInterfaceType_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(d => d| .Directive(\"foo\")| .Field(f => f.Bar)| .Directive(\"foo\")),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInterfaceType_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(d => d| .Directive(new DirectiveNode(\"foo\"))| .Field(f => f.Bar)| .Directive(new DirectiveNode(\"foo\"))),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInterfaceType_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType<IFoo>(d => d| .Directive(new FooDirective())| .Field(f => f.Bar)| .Directive(new FooDirective())),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "GenericInterfaceType_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var fooType = CreateType(new InterfaceType<IFoo>(d => d| .Directive<FooDirective>()| .Field(f => f.Bar)| .Directive<FooDirective>()),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InterfaceType_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var fooType = CreateType(new InterfaceType(d => d| .Name(\"FooInt\")| .Directive(\"foo\")| .Field(\"id\")| .Type<StringType>()| .Directive(\"foo\")),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InterfaceType_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType(d => d| .Name(\"FooInt\")| .Directive(\"foo\")| .Field(\"bar\")| .Type<StringType>()| .Directive(\"foo\")),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"bar\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InterfaceType_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var fooType = CreateType(| new InterfaceType(d => d| .Name(\"FooInt\")| .Directive(new DirectiveNode(\"foo\"))| .Field(\"id\")| .Type<StringType>()| .Directive(new DirectiveNode(\"foo\"))),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InterfaceType_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var fooType = CreateType(new InterfaceType(d => d| .Name(\"FooInt\")| .Directive(new FooDirective())| .Field(\"id\")| .Type<StringType>()| .Directive(new FooDirective())),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "InterfaceType_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var fooType = CreateType(new InterfaceType(d => d| .Name(\"FooInt\")| .Directive<FooDirective>()| .Field(\"id\")| .Type<StringType>()| .Directive<FooDirective>()),| b => b.AddDirectiveType<FooDirectiveType>()| .ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.NotEmpty(fooType.Directives[\"foo\"]);| Assert.NotEmpty(fooType.Fields[\"id\"].Directives[\"foo\"]);| }"
      },
      {
        "name": "DoNotAllow_InputTypes_OnFields",
        "body": "{| // arrange| // act| Action a = () => SchemaBuilder.New()| .AddType(new InterfaceType(t => t| .Name(\"Foo\")| .Field(\"bar\")| .Type<NonNullType<InputObjectType<object>>>()))| .Create();| // assert| Assert.Throws<SchemaException>(a)| .Errors.First().Message.MatchSnapshot();| }"
      },
      {
        "name": "DoNotAllow_DynamicInputTypes_OnFields",
        "body": "{| // arrange| // act| Action a = () => SchemaBuilder.New()| .AddType(new InterfaceType(t => t| .Name(\"Foo\")| .Field(\"bar\")| .Type(new NonNullType(new InputObjectType<object>()))))| .Create();| // assert| Assert.Throws<SchemaException>(a)| .Errors.First().Message.MatchSnapshot();| }"
      },
      {
        "name": "Ignore_DescriptorIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action() => InterfaceTypeDescriptorExtensions.Ignore<IFoo>(null, t => t.Bar);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Ignore_ExpressionIsNull_ArgumentNullException",
        "body": "{| // arrange| var descriptor = InterfaceTypeDescriptor.New<IFoo>(DescriptorContext.Create());| // act| void Action() => descriptor.Ignore(null);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Ignore_Bar_Property",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType(new InterfaceType<IFoo>(d => d| .Ignore(t => t.Bar)))| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Deprecate_Obsolete_Fields",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType(new InterfaceType<FooObsolete>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Deprecate_Fields_With_Deprecated_Attribute",
        "body": "{| var schema = SchemaBuilder.New()| .AddQueryType(c => c.Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\"))| .AddType(new InterfaceType<FooDeprecated>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "AnnotationBased_Interface_Issue_3577",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Query>()| .AddType<Orange>()| .AddType<Pineapple>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "AnnotationBased_Interface_Issue_3577_Inheritance_Control",
        "body": "{| SchemaBuilder.New()| .AddQueryType<PetQuery>()| .AddType<Canine>()| .AddType<Dog>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "InterfaceType_InInterfaceType_ThrowsSchemaException",
        "body": "{| // arrange| // act| var ex = Record.Exception(| () => SchemaBuilder| .New()| .AddQueryType(x => x.Name(\"Query\").Field(\"Foo\").Resolve(\"bar\"))| .AddType<InterfaceType<InterfaceType<IFoo>>>()| .ModifyOptions(o => o.StrictRuntimeTypeValidation = true)| .Create());| // assert| Assert.IsType<SchemaException>(ex);| ex.Message.MatchSnapshot();| }"
      },
      {
        "name": "Specify_Field_Type_With_SDL_Syntax",
        "body": "{| SchemaBuilder.New()| .AddInterfaceType(d =>| {| d.Name(\"Bar\");| d.Field(\"Foo\").Type(\"String\");| })| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Specify_Argument_Type_With_SDL_Syntax",
        "body": "{| SchemaBuilder.New()| .AddInterfaceType(d =>| {| d.Name(\"Bar\");| d.Field(\"Foo\")| .Argument(\"a\", t => t.Type(\"Int\"))| .Type(\"String\");| })| .ModifyOptions(o => o.StrictValidation = false)| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddInterfaceType<DeprecatedInterface>()| .AddType<DeprecatedImplementation>()| .BuildRequestExecutorAsync();| // assert| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddInterfaceType<DeprecatedNonNullInterface>()| .AddType<DeprecatedNonNullImplementation>()| .BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(call);| ex.Errors[0].ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddInterfaceType(x => x| .Name(\"Interface\")| .Field(\"bar\")| .Type<IntType>()| .Argument(\"baz\", y => y.Type<IntType>().Deprecated(\"b\")))| .AddObjectType(x => x| .Name(\"Foo\")| .Implements(\"Interface\")| .Field(\"bar\")| .Resolve(\"asd\")| .Type<IntType>()| .Argument(\"baz\", y => y.Type<IntType>().Deprecated(\"b\")))| .BuildRequestExecutorAsync();| // assert| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddInterfaceType(x => x| .Name(\"Interface\")| .Field(\"bar\")| .Type<IntType>()| .Argument(\"baz\", y => y.Type<NonNullType<IntType>>().Deprecated(\"b\")))| .AddObjectType(x => x| .Name(\"Foo\")| .Implements(\"Interface\")| .Field(\"bar\")| .Resolve(\"asd\")| .Type<IntType>()| .Argument(\"baz\", y => y.Type<NonNullType<IntType>>().Deprecated(\"b\")))| .BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(call);| ex.Errors[0].ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddDocumentFromString(@\"| interface Interface {| bar(a: String @deprecated(reason:\"\"reason\"\")): Int!| }| type Foo implements Interface {| bar(a: String @deprecated(reason:\"\"reason\"\")): Int!| }| \")| .AddResolver(\"Foo\", \"bar\", x => 1)| .BuildRequestExecutorAsync();| // assert| executor.Schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Func<Task> call = async () => await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"foo\").Resolve(1))| .AddDocumentFromString(@\"| interface Interface {| bar(a: String! @deprecated(reason:\"\"reason\"\")): Int!| }| type Foo implements Interface {| bar(a: String! @deprecated(reason:\"\"reason\"\")): Int!| }| \")| .AddResolver(\"Foo\", \"bar\", x => 1)| .BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(call);| ex.Errors[0].ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddConvention<INamingConventions, SnakeCaseNamingConventions>()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"foo\")| .Type<InterfaceType<IFooNaming>>()| .Resolve(() => null!))| .AddResolver(\"Foo\", \"bar\", x => 1)| .ModifyOptions(o => o.StrictValidation = false)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"foo\")| .Type<InterfaceType<IFooNaming>>()| .Resolve(() => null!))| .AddResolver(\"Foo\", \"bar\", x => 1)| .ModifyOptions(o => o.StrictValidation = false)| .ModifyOptions(o => o.StripLeadingIFromInterface = true)| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "JsonTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"| schema {| query: Query| }| type Query {| someJson: JSON!| manyJson: [JSON!]| inputJson(input: JSON!): JSON!| jsonFromString: JSON!| }| scalar JSON| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| someJson| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"someJson\": {| \"a\": {| \"b\": 123.456| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| manyJson| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"manyJson\": [| {| \"a\": {| \"b\": 123.456| }| },| {| \"x\": {| \"y\": \"y\"| }| }| ]| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| inputJson(input: { a: \"abc\" })| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"inputJson\": {| \"a\": \"abc\"| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var value = BigInteger.Parse(\"100000000000000000000000050\");| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| $$\"\"\"| {| inputJson(input: {{value}})| }| \"\"\");| result.MatchInlineSnapshot(| $$\"\"\"| {| \"data\": {| \"inputJson\": {{value}}| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| inputJson(input: 1e1345)| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"inputJson\": 1e1345| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| inputJson(input: { a: [\"abc\"] })| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"inputJson\": {| \"a\": [| \"abc\"| ]| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var input = JsonDocument.Parse(| \"\"\"| {| \"a\": {| \"b\": 123.456| }| }| \"\"\").RootElement;| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query($input: JSON!) {| inputJson(input: $input)| }| \"\"\")| .SetVariableValues(new Dictionary<string, object> { {\"input\", input }, })| .Build());| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"inputJson\": {| \"a\": {| \"b\": 123.456| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| jsonFromString| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"jsonFromString\": {| \"a\": \"b\"| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "ListTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await ExpectValid(| \"\"\"| query ($a: String! $b: String!) {| list(items: [$a $b])| }| \"\"\",| b => b.AddQueryType<Query>(),| r => r.SetVariableValues(new Dictionary<string, object?> { {\"a\", \"a\" }, {\"b\", \"b\" }, }))| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "NativeTypeTests.cs",
    "methods": [
      {
        "name": "Kind_NotSupportedException",
        "body": "{| // arrange| var type = new NativeType<string>();| // act| TypeKind kind;| void Action() => kind = ((IInputType)type).Kind;| // assert| Assert.Throws<NotSupportedException>(Action);| }"
      },
      {
        "name": "ClrType_NotSupportedException",
        "body": "{| // arrange| var type = new NativeType<string>();| // act| Type clrType;| void Action() => clrType = ((IInputType)type).RuntimeType;| // assert| Assert.Throws<NotSupportedException>(Action);| }"
      }
    ]
  },
  {
    "file": "NonNullTypeTests.cs",
    "methods": [
      {
        "name": "EnsureInnerTypeIsCorrectlySet",
        "body": "{| // arrange| var innerType = new StringType();| // act| var type = new NonNullType(innerType);| // assert| Assert.Equal(innerType, type.Type);| }"
      },
      {
        "name": "EnsureNativeTypeIsCorrectlyDetected",
        "body": "{| // act| var type = new NonNullType(new StringType());| // assert| Assert.Equal(typeof(string), type.RuntimeType);| }"
      },
      {
        "name": "InnerType_Cannot_Be_A_NonNullType",
        "body": "{| // act| void Action() => new NonNullType(new NonNullType(new StringType()));| // assert| Assert.Throws<ArgumentException>(Action);| }"
      }
    ]
  },
  {
    "file": "ObjectFieldExpressionTests.cs",
    "methods": [
      {
        "name": "Infer_Field_Types_From_Expression",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Foo>(d =>| {| d.Name(\"Query\");| d.Field(t => t.Bar.Text);| d.Field(t => t.Bars.Select(t => t.Text)).Name(\"texts\");| })| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Execute_Expression_Fields",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Foo>(d =>| {| d.Name(\"Query\");| d.Field(t => t.Bar.Text);| d.Field(t => t.Bars.Select(b => b.Text)).Name(\"texts\");| d.Field(t => t.Bars.Select(b => b.Text).FirstOrDefault()).Name(\"firstText\");| })| .Create()| .MakeExecutable()| .Execute(\"{ text texts firstText }\")| .ToJson()| .MatchSnapshot();| }"
      },
      {
        "name": "Execute_Complex_Expression_Fields",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Foo>(d =>| {| d.Name(\"Query\");| d.Field(t => t.Bar.Count + t.Bar.Text.Length).Name(\"calc\");| })| .Create()| .MakeExecutable()| .Execute(\"{ calc }\")| .ToJson()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectTypeAttributeTests.cs",
    "methods": [
      {
        "name": "ArgumentDescriptorAttribute_Changes_DefaultValue",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType<Object1>()| .Create();| // assert| Assert.Equal(| \"abc\",| schema.QueryType.Fields[\"field\"].Arguments[\"argument\"].DefaultValue!.Value);| }"
      },
      {
        "name": "ObjectFieldDescriptorAttribute_Adds_ContextData",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType<Object2>()| .Create();| // assert| Assert.Equal(| \"def\",| schema.QueryType.Fields[\"field\"].ContextData[\"abc\"]);| }"
      },
      {
        "name": "ObjectFieldDescriptorAttribute_Updated_FieldDefinition",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType<Object2>(d =>| d.Field<string>(t => t.GetField()).Name(\"foo\"))| .Create();| // assert| Assert.Equal(| \"def\",| schema.QueryType.Fields[\"foo\"].ContextData[\"abc\"]);| }"
      },
      {
        "name": "ObjectTypeDescriptorAttribute_Add_FieldDefinition",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType<Object3>()| .Create();| // assert| Assert.True(schema.QueryType.Fields.ContainsField(\"abc\"));| }"
      },
      {
        "name": "ObjectTypeDescriptorAttribute_Add_FieldDefinition_2",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddObjectType<Object3>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.True(schema.GetType<ObjectType>(\"Object3\").Fields.ContainsField(\"abc\"));| }"
      },
      {
        "name": "ObjectTypeAttribute_Mark_Struct_As_ObjectType",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddType<StructQuery>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ExtendObjectTypeAttribute_Extend_Query_Type",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddType<StructQuery>()| .AddType<StructQueryExtension>()| .ModifyOptions(o => o.RemoveUnreachableTypes = true)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // act| var schema =| await new ServiceCollection()| .AddGraphQL()| .AddType<StructQuery>()| .AddType<StructQueryExtension>()| .TrimTypes()| .BuildSchemaAsync();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using System;| using System.Collections.Generic;| using System.Threading;| using System.Threading.Tasks;| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| public sealed class Author| {| public int Id { get; set; }| public string Name { get; set; }| }| public sealed class Book| {| public int Id { get; set; }| public string Title { get; set; }| public int AuthorId { get; set; }| }| [ObjectType<Book>]| internal static partial class BookNode| {| [BindMember(nameof(Book.AuthorId))]| public static Task<Author?> GetAuthorAsync(| [Parent] Book book,| CancellationToken cancellationToken)| => default;| }| \"\"\").MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "OneOfIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { a: \\\"abc\\\", b: 123 }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { a: null, b: 123 }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { b: 123 }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: String!) { example(input: { a: $var, b: 123 }) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"var\", null }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: Int!) { example(input: { b: $var }) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"var\", 123 }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: ExampleInput!) { example(input: $var) }\")| .SetVariableValues(| new Dictionary<string, object?>| { { \"var\", new ObjectValueNode(new ObjectFieldNode(\"b\", 123)) }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Incorrect value| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ example(input: \\\"abc123\\\") }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Incorrect value| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: String!) { example(input: $var) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"var\", \"abc123\" }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { a: \\\"abc\\\", b: \\\"123\\\" }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Incorrect value for member field {b}| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { b: \\\"123\\\" }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Incorrect value for member field {b}| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { a: \\\"123\\\" }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Value for member field {b} must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: Int!) { example(input: { b: $var }) }\")| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: ExampleInput!) { example(input: $var) }\")| .SetVariableValues(| new Dictionary<string, object?>| { { \"var\", new ObjectValueNode(new ObjectFieldNode(\"a\", \"abc\")) }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { a: \\\"abc\\\", b: null }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"query($var: Int) { example(input: { b: $var }) }\")| .SetVariableValues(new Dictionary<string, object?> { { \"var\", null }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // Error: Exactly one key must be specified| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(o => o.EnableOneOf = true)| .ExecuteRequestAsync(\"{ example(input: { b: 123, c: \\\"xyz\\\" }) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Oneof_Input_Objects_that_is_Valid",
        "body": "No body available"
      },
      {
        "name": "Oneof_Input_Objects_must_have_nullable_fields",
        "body": "No body available"
      },
      {
        "name": "Oneof_Input_Objects_must_have_nullable_fields_with_two_fields_non_null",
        "body": "No body available"
      },
      {
        "name": "Oneof_Input_Objects_must_have_nullable_fields_with_one_field_has_default",
        "body": "No body available"
      },
      {
        "name": "Oneof_Input_Objects_must_have_nullable_fields_with_two_fields_that_have_default",
        "body": "No body available"
      },
      {
        "name": "Oneof_generic_code_first_schema",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .ModifyOptions(| o =>| {| o.EnableOneOf = true;| o.StrictValidation = true;| })| .ExecuteRequestAsync(| @\"{| oneof_input: __type(name: \"\"ExampleInput\"\") {| # should be true| oneOf| }| input: __type(name: \"\"StandardInput\"\") {| # should be false| oneOf| }| object: __type(name: \"\"Query\"\") {| # should be null| oneOf| }| }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "PaginationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "DefaultNodeIdSerializerTests.cs",
    "methods": [
      {
        "name": "Format_Empty_StringId",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", \"\");| Assert.Equal(\"Rm9vOg==\", id);| }"
      },
      {
        "name": "Format_Small_StringId",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", \"abc\");| Assert.Equal(\"Rm9vOmFiYw==\", id);| }"
      },
      {
        "name": "Format_Small_StringId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", \"abc\");| Assert.Equal(\"Rm9vCmRhYmM=\", id);| }"
      },
      {
        "name": "Format_Small_StringId_UrlSafe",
        "body": "{| var serializer = CreateSerializer(| new StringNodeIdValueSerializer(),| outputNewIdFormat: false,| useUrlSafeBase64: true);| var value = Encoding.UTF8.GetString(Convert.FromBase64String(\"Rm9vOkberW9vVHlwZe+/vSs=\"));| var id = serializer.Format(\"Foo\", value);| Assert.Equal(\"Rm9vCmRGb286Rt6tb29UeXBl77-9Kw==\", id);| }"
      },
      {
        "name": "Parse_Small_StringId_UrlSafe",
        "body": "{| var serializer = CreateSerializer(| new StringNodeIdValueSerializer(),| outputNewIdFormat: false,| useUrlSafeBase64: true);| var id = serializer.Parse(\"Rm9vCmRGb286Rt6tb29UeXBl77-9Kw==\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"Foo:F\\u07adooType\\ufffd+\", id.InternalId);| }"
      },
      {
        "name": "Format_480_Byte_Long_StringId",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new string('a', 480));| Assert.Equal(| \"Rm9vOmFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYQ==\",| id);| }"
      },
      {
        "name": "Format_480_Byte_Long_StringId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", new string('a', 480));| Assert.Equal(| \"Rm9vCmRhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWE=\",| id);| }"
      },
      {
        "name": "Format_Int16Id",
        "body": "{| var serializer = CreateSerializer(new Int16NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (short)6);| Assert.Equal(\"Rm9vOjY=\", id);| }"
      },
      {
        "name": "Format_Int16Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new Int16NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", (short)6);| Assert.Equal(\"Rm9vCnM2\", id);| }"
      },
      {
        "name": "Format_Int32Id",
        "body": "{| var serializer = CreateSerializer(new Int32NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", 32);| Assert.Equal(\"Rm9vOjMy\", id);| }"
      },
      {
        "name": "Format_Int32Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new Int32NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", 32);| Assert.Equal(\"Rm9vCmkzMg==\", id);| }"
      },
      {
        "name": "Format_Int64Id",
        "body": "{| var serializer = CreateSerializer(new Int64NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (long)64);| Assert.Equal(\"Rm9vOjY0\", id);| }"
      },
      {
        "name": "Format_Int64Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new Int64NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", (long)64);| Assert.Equal(\"Rm9vCmw2NA==\", id);| }"
      },
      {
        "name": "Format_Empty_Guid",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(false));| var id = serializer.Format(\"Foo\", Guid.Empty);| Assert.Equal(\"Rm9vOjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw\", id);| }"
      },
      {
        "name": "Format_Empty_Guid_Compressed",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", Guid.Empty);| Assert.Equal(\"Rm9vOgAAAAAAAAAAAAAAAAAAAAA=\", id);| }"
      },
      {
        "name": "Format_Normal_Guid",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(false));| var internalId = new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\");| var id = serializer.Format(\"Foo\", internalId);| Assert.Equal(\"Rm9vOjFhZTI3YjE0OGNmNjQ0MGQ5YTQ2MDkwOTBhNGFmNmYz\", id);| }"
      },
      {
        "name": "Format_Normal_Guid_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(false), outputNewIdFormat: false);| var internalId = new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\");| var id = serializer.Format(\"Foo\", internalId);| Assert.Equal(\"Rm9vCmcxYWUyN2IxNDhjZjY0NDBkOWE0NjA5MDkwYTRhZjZmMw==\", id);| }"
      },
      {
        "name": "Format_Normal_Guid_Compressed",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\"));| Assert.Equal(\"Rm9vOhR74hr2jA1EmkYJCQpK9vM=\", id);| }"
      },
      {
        "name": "Format_CompositeId",
        "body": "{| var serializer = CreateSerializer(new CompositeIdNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new CompositeId(\"foo\", 42, Guid.Empty, true));| Assert.Equal(\"Rm9vOmZvbzo0MjoAAAAAAAAAAAAAAAAAAAAAOjE=\", id);| }"
      },
      {
        "name": "Format_CompositeId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(new CompositeIdNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", new CompositeId(\"foo\", 42, Guid.Empty, true));| Assert.Equal(\"Rm9vCmRmb286NDI6AAAAAAAAAAAAAAAAAAAAADox\", id);| }"
      },
      {
        "name": "Parse_Small_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOmFiYw==\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_480_Byte_Long_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(| \"Rm9vOmFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYQ==\",| lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new string('a', 480), id.InternalId);| }"
      },
      {
        "name": "Parse_Int16Id",
        "body": "{| var serializer = CreateSerializer(new Int16NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(short));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((short)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int16Id",
        "body": "{| var serializer = CreateSerializer(new Int16NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCnMxMjM=\", typeof(short));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((short)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Int32Id",
        "body": "{| var serializer = CreateSerializer(new Int32NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(int));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int32Id",
        "body": "{| var serializer = CreateSerializer(new Int32NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmkxMjM=\", typeof(int));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(123, id.InternalId);| }"
      },
      {
        "name": "Parse_Int64Id",
        "body": "{| var serializer = CreateSerializer(new Int64NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(long));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((long)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int64Id",
        "body": "{| var serializer = CreateSerializer(new Int64NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmwxMjM=\", typeof(long));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((long)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_GuidId",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(false));| var id = serializer.Parse(\"Rm9vOjAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAw\", typeof(Guid));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(Guid.Empty, id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_GuidId_Compressed",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(true));| var id = serializer.Parse(\"Rm9vOgAAAAAAAAAAAAAAAAAAAAA=\", typeof(Guid));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(Guid.Empty, id.InternalId);| }"
      },
      {
        "name": "Parse_Normal_GuidId",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(false));| var id = serializer.Parse(\"Rm9vOjFhZTI3YjE0OGNmNjQ0MGQ5YTQ2MDkwOTBhNGFmNmYz\", typeof(Guid));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\"), id.InternalId);| }"
      },
      {
        "name": "Parse_Normal_GuidId_Compressed",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer(true));| var id = serializer.Parse(\"Rm9vOhR74hr2jA1EmkYJCQpK9vM=\", typeof(Guid));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\"), id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Normal_GuidId",
        "body": "{| var serializer = CreateSerializer(new GuidNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmdhYWY1ZjAzNjk0OGU0NDRkYWRhNTM2ZTY1MTNkNTJjZA==\", typeof(Guid));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new Guid(\"aaf5f036-948e-444d-ada5-36e6513d52cd\"), id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOg==\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId2",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOg==\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_StringId",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmRhYmM=\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_Small_Legacy_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmRhYmM=\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_StringId_With_Colons",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjE6Mjoz\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"1:2:3\", id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_StringId_With_Colons",
        "body": "{| var serializer = CreateSerializer(new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmQxOjI6Mw==\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"1:2:3\", id.InternalId);| }"
      },
      {
        "name": "Parse_CompositeId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(It.IsAny<string>())).Returns(typeof(CompositeId));| var compositeId = new CompositeId(\"foo\", 42, Guid.Empty, true);| var serializer = CreateSerializer(new CompositeIdNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", compositeId);| var parsed = serializer.Parse(id, lookup.Object);| Assert.Equal(compositeId, parsed.InternalId);| }"
      },
      {
        "name": "Parse_CompositeId2",
        "body": "{| var compositeId = new CompositeId(\"foo\", 42, Guid.Empty, true);| var serializer = CreateSerializer(new CompositeIdNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", compositeId);| var parsed = serializer.Parse(id, typeof(CompositeId));| Assert.Equal(compositeId, parsed.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_StronglyTypedId",
        "body": "{| var stronglyTypedId = new StronglyTypedId(123, 456);| var serializer = CreateSerializer(new StronglyTypedIdNodeIdValueSerializer());| var id = Convert.ToBase64String(\"Product\\nd123-456\"u8);| var parsed = serializer.Parse(id, typeof(StronglyTypedId));| Assert.Equal(stronglyTypedId, parsed.InternalId);| }"
      },
      {
        "name": "Ensure_Lookup_Works_With_HashCollision",
        "body": "{| // arrange| const string namesString =| \"Error,Node,Attribute,AttributeNotFoundError,AttributeProduct,AttributeProductValue,\" +| \"AttributeValue,AttributesConnection,AttributesEdge,CategoriesConnection,CategoriesEdge,\" +| \"Category,CategoryNotFoundError,Channel,ChannelNotFoundError,ChannelsConnection,ChannelsEdge,\" +| \"Collection,CreateAttributePayload,CreateCategoryPayload,CreateChannelPayload,CreateProductPayload,\" +| \"CreateVariantPayload,CreateVariantPricePayload,Currency,CurrencyChannel,DeleteAttributePayload,\" +| \"DeleteCategoryPayload,DeleteChannelPayload,DeleteProductPayload,DeleteVariantPayload,\" +| \"DeleteVariantPricePayload,EntitySaveError,InventoryEntry,Media,MediasConnection,\" +| \"MediasEdge,MetadataBooleanValue,MetadataCollection,MetadataCollectionsConnection,\" +| \"MetadataCollectionsEdge,MetadataDateValue,MetadataDefinition,MetadataNumberValue,\" +| \"MetadataTextValue,MetadataValue,Mutation,PageInfo,Product,ProductCategorySortOrder,\" +| \"ProductChannel,ProductCollection,ProductNotFoundError,ProductType,ProductTypesConnection,\" +| \"ProductTypesEdge,ProductVendor,ProductVendorsConnection,ProductVendorsEdge,ProductsConnection,\" +| \"ProductsEdge,Query,StorageProviderPayload,SubCategoriesConnection,SubCategoriesEdge,Tag,\" +| \"TagsConnection,TagsEdge,UpdateAttributePayload,UpdateCategoryPayload,UpdateChannelPayload,\" +| \"UpdateProductChannelAvailabilityPayload,UpdateProductPayload,UpdateVariantChannelAvailabilityPayload,\" +| \"UpdateVariantPayload,UpdateVariantPricePayload,UploadMediaPayload,Variant,VariantChannel,VariantMedia,\" +| \"VariantPrice,VariantsConnection,VariantsEdge,Warehouse,WarehouseChannel,CreateAttributeError,\" +| \"CreateCategoryError,CreateChannelError,CreateProductError,CreateVariantError,CreateVariantPriceError,\" +| \"DeleteAttributeError,DeleteCategoryError,DeleteChannelError,DeleteProductError,DeleteVariantError,\" +| \"DeleteVariantPriceError,MetadataTypedValue,StorageProviderError,UpdateAttributeError,\" +| \"UpdateCategoryError,UpdateChannelError,UpdateProductChannelAvailabilityError,UpdateProductError,\" +| \"UpdateVariantChannelAvailabilityError,UpdateVariantError,UpdateVariantPriceError,UploadMediaError,\" +| \"AttributeFilterInput,AttributeProductInput,AttributeProductValueUpdateInput,AttributeSortInput,\" +| \"AttributeValueFilterInput,BooleanOperationFilterInput,CategoryFilterInput,CategorySortInput,\" +| \"ChannelFilterInput,ChannelSortInput,CollectionFilterInput,CreateAttributeInput,CreateCategoryInput,\" +| \"CreateChannelInput,CreateProductInput,CreateVariantInput,CreateVariantPriceInput,\" +| \"CurrencyChannelFilterInput,CurrencyFilterInput,DateTimeOperationFilterInput,DeleteAttributeInput,\" +| \"DeleteCategoryInput,DeleteChannelInput,DeleteProductInput,DeleteVariantInput,DeleteVariantPriceInput,\" +| \"GeneralMetadataInput,IMetadataTypedValueFilterInput,IdOperationFilterInput,IntOperationFilterInput,\" +| \"InventoryEntryFilterInput,ListAttributeFilterInputWithSearchFilterInput,\" +| \"ListFilterInputTypeOfAttributeValueFilterInput,ListFilterInputTypeOfCurrencyChannelFilterInput,\" +| \"ListFilterInputTypeOfInventoryEntryFilterInput,ListFilterInputTypeOfMetadataDefinitionFilterInput,\" +| \"ListFilterInputTypeOfMetadataValueFilterInput,ListFilterInputTypeOfProductCategorySortOrderFilterInput,\" +| \"ListFilterInputTypeOfProductChannelFilterInput,ListFilterInputTypeOfProductCollectionFilterInput,\" +| \"ListFilterInputTypeOfVariantChannelFilterInput,ListFilterInputTypeOfVariantMediaFilterInput,\" +| \"ListFilterInputTypeOfVariantPriceFilterInput,ListFilterInputTypeOfWarehouseChannelFilterInput,\" +| \"ListProductFilterInputWithSearchFilterInput,ListTagFilterInputWithSearchFilterInput,\" +| \"ListVariantFilterInputWithSearchFilterInput,LongOperationFilterInput,MediaFilterInput,\" +| \"MediaSortInput,MetadataCollectionFilterInput,MetadataCollectionSortInput,MetadataDefinitionFilterInput,\" +| \"MetadataTypeOperationFilterInput,MetadataValueFilterInput,ProductCategorySortOrderFilterInput,\" +| \"ProductChannelAvailabilityUpdateInput,ProductChannelFilterInput,ProductCollectionFilterInput,\" +| \"ProductFilterInput,ProductSortInput,ProductTypeFilterInput,ProductTypeSortInput,\" +| \"ProductVendorFilterInput,ProductVendorSortInput,StorageProviderInput,StringOperationFilterInput,\" +| \"TagFilterInput,TagSortInput,UpdateAttributeInput,UpdateCategoryInput,UpdateChannelInput,\" +| \"UpdateProductChannelAvailabilityInput,UpdateProductInput,UpdateVariantChannelAvailabilityInput,\" +| \"UpdateVariantInput,UpdateVariantPriceInput,UploadMediaInput,UuidOperationFilterInput,\" +| \"VariantChannelAvailabilityUpdateInput,VariantChannelFilterInput,VariantFilterInput,\" +| \"VariantMediaFilterInput,VariantPriceFilterInput,VariantSortInput,WarehouseChannelFilterInput,\" +| \"WarehouseFilterInput,ApplyPolicy,MediaStorageProvider,MetadataType,SortEnumType,DateTime,Long,\" +| \"UUID,Upload\";| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var names = new HashSet<string>(namesString.Split(','));| var stringValueSerializer = new StringNodeIdValueSerializer();| var mappings = names.Select(name => new BoundNodeIdValueSerializer(name, stringValueSerializer)).ToList();| var nodeIdSerializer = new OptimizedNodeIdSerializer(mappings, [stringValueSerializer]);| var snapshot = new Snapshot();| var sb = new StringBuilder();| // act| var formattedId = nodeIdSerializer.Format(\"VariantsEdge\", \"abc\");| var internalId = nodeIdSerializer.Parse(formattedId, lookup.Object);| foreach (var name in names)| {| var a = nodeIdSerializer.Format(name, \"abc\");| var b = nodeIdSerializer.Parse(a, lookup.Object);| sb.Clear();| sb.AppendLine(a);| sb.Append($\"{b.TypeName}:{b.InternalId}\");| snapshot.Add(sb.ToString(), name);| }| // assert| Assert.Equal(\"VariantsEdge\", internalId.TypeName);| Assert.Equal(\"abc\", internalId.InternalId);| Assert.Equal(\"VmFyaWFudHNFZGdlOmFiYw==\", formattedId);| snapshot.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "IdAttributeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var intId = Convert.ToBase64String(\"Query:1\"u8);| var stringId = Convert.ToBase64String(\"Query:abc\"u8);| var guidId = Convert.ToBase64String(| Combine(\"Query:\"u8, new Guid(\"26a2dc8f-4dab-408c-88c6-523a0a89a2b5\").ToByteArray()));| var customId = Convert.ToBase64String(\"Query:1-2\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .AddNodeIdValueSerializer<StronglyTypedIdNodeIdValueSerializer>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo(| $intId: ID!| $nullIntId: ID = null| $stringId: ID!| $nullStringId: ID = null| $guidId: ID!| $nullGuidId: ID = null| $customId: ID!| $nullCustomId: ID = null| ) {| intId(id: $intId)| nullableIntId(id: $intId)| nullableIntIdGivenNull: nullableIntId(id: $nullIntId)| optionalIntId(id: $intId)| optionalIntIdGivenNothing: optionalIntId| intIdList(id: [$intId])| nullableIntIdList(id: [$intId, $nullIntId])| optionalIntIdList(id: [$intId])| stringId(id: $stringId)| nullableStringId(id: $stringId)| nullableStringIdGivenNull: nullableStringId(id: $nullStringId)| optionalStringId(id: $stringId)| optionalStringIdGivenNothing: optionalStringId| stringIdList(id: [$stringId])| nullableStringIdList(id: [$stringId, $nullStringId])| optionalStringIdList(id: [$stringId])| guidId(id: $guidId)| nullableGuidId(id: $guidId)| nullableGuidIdGivenNull: nullableGuidId(id: $nullGuidId)| optionalGuidId(id: $guidId)| optionalGuidIdGivenNothing: optionalGuidId| guidIdList(id: [$guidId $guidId])| nullableGuidIdList(id: [$guidId $nullGuidId $guidId])| optionalGuidIdList(id: [$guidId $guidId])| customId(id: $customId)| nullableCustomId(id: $customId)| nullableCustomIdGivenNull: nullableCustomId(id: $nullCustomId)| customIds(ids: [$customId $customId])| nullableCustomIds(ids: [$customId $nullCustomId $customId])| }| \"\"\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"intId\", intId },| { \"stringId\", stringId },| { \"guidId\", guidId },| { \"customId\", customId }| })| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(@\"query foo {| interceptedId(id: 1)| interceptedIds(id: [1, 2])| }\")| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var someId = Convert.ToBase64String(\"Some:1\"u8);| var someIntId = Convert.ToBase64String(\"Some:1\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo($someId: ID!, $someIntId: ID!) {| foo(| input: {| someId: $someId| someIds: [$someIntId]| someNullableId: $someId| someNullableIds: [$someIntId]| someOptionalId: $someId| someOptionalIds: [$someIntId]| }| ) {| someId| someNullableId| ... on FooPayload {| someIds| someNullableIds| }| }| }| \"\"\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"someId\", someId },| { \"someIntId\", someIntId }| })| .Build());| // assert| new| {| result = result.ToJson(),| someId,| someIntId,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var someId = Convert.ToBase64String(\"Some:1\"u8);| var someIntId = Convert.ToBase64String(\"Some:1\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo(| $someId: ID!| $someIntId: ID!| $someNullableId: ID| $someNullableIntId: ID| ) {| foo(| input: {| someId: $someId| someIds: [$someIntId]| someNullableId: $someNullableId| someNullableIds: [$someNullableIntId, $someIntId]| }| ) {| someId| someNullableId| ... on FooPayload {| someIds| someNullableIds| }| }| }| \"\"\")| .SetVariableValues(| new Dictionary<string, object?>| {| { \"someId\", someId },| { \"someNullableId\", null },| { \"someIntId\", someIntId },| { \"someNullableIntId\", null }| })| .Build());| // assert| new| {| result = result.ToJson(),| someId,| someIntId,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .BuildRequestExecutorAsync();| var someId = Convert.ToBase64String(\"Some:1\"u8);| var someIntId = Convert.ToBase64String(\"Some:1\"u8);| // act| var result = await executor| .ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"query foo($someId: ID! $someIntId: ID!) {| foo(input: {| someId: $someId| someIds: [$someIntId]| interceptedId: 1| interceptedIds: [1, 2] })| {| someId| someIds| interceptedId| interceptedIds| }| }\")| .SetVariableValues(| new Dictionary<string, object?>| {| {\"someId\", someId },| {\"someIntId\", someIntId},| })| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var someId = Convert.ToBase64String(Combine(\"Query:\"u8, Guid.Empty.ToByteArray()));| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo ($someId: ID!) {| foo(input: { someId: $someId someIds: [$someId] }) {| someId| ... on FooPayload {| someIds| }| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { {\"someId\", someId }, })| .Build());| // assert| new| {| result = result.ToJson(),| someId,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| const string someId = \"abc\";| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo ($someId: ID!) {| foo(input: { someId: $someId someIds: [$someId] }) {| someId| ... on FooPayload {| someIds| }| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?> { {\"someId\", someId}, })| .Build());| // assert| new| {| result = result.ToJson(),| someId,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var legacySomeStringId = Convert.ToBase64String(\"Some\\ndtest\"u8);| var legacySomeIntId = Convert.ToBase64String(\"Some\\ni123\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo ($someId: ID! $someIntId: ID!) {| foo(input: { someId: $someId someIds: [$someIntId] }) {| someId| ... on FooPayload {| someIds| }| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?>| {| {\"someId\", legacySomeStringId},| {\"someIntId\", legacySomeIntId},| })| .Build());| // assert| new| {| result = result.ToJson(),| legacySomeStringId,| legacySomeIntId| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var legacyStronglyTypedId = Convert.ToBase64String(\"Product\\nd123-456\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .AddNodeIdValueSerializer<StronglyTypedIdNodeIdValueSerializer>()| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo ($customId: ID!, $nullCustomId: ID = null) {| nullableCustomId(id: $customId)| nullableCustomIdGivenNull: nullableCustomId(id: $nullCustomId)| customIds(ids: [$customId $customId])| nullableCustomIds(ids: [$customId $nullCustomId $customId])| }| \"\"\")| .SetVariableValues(new Dictionary<string, object?>| {| {\"customId\", legacyStronglyTypedId},| })| .Build());| // assert| new| {| result = result.ToJson(), legacySomeStronglyTypedId = legacyStronglyTypedId,| }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<FooPayload>()| .AddGlobalObjectIdentification(false)| .BuildSchemaAsync();| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var inspector = new TestTypeInterceptor();| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType(d =>| {| d.Name(\"Query\");| d.Field(\"abc\").ID().ID().ID().ID().Resolve(\"abc\");| })| .AddGlobalObjectIdentification(false)| .TryAddTypeInterceptor(inspector)| .BuildSchemaAsync();| Assert.Equal(1, inspector.Count);| }"
      }
    ]
  },
  {
    "file": "IdDescriptorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var intId = Convert.ToBase64String(\"Query:1\"u8);| var stringId = Convert.ToBase64String(\"Query:abc\"u8);| var guidId = Convert.ToBase64String(Combine(\"Another:\"u8, Guid.Empty.ToByteArray()));| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QueryType>()| .AddType<FooPayloadType>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"query foo ($intId: ID! $stringId: ID! $guidId: ID!) {| intId(id: $intId)| stringId(id: $stringId)| guidId(id: $guidId)| }\")| .SetVariableValues(| new Dictionary<string, object>| {| { \"intId\", intId },| { \"stringId\", stringId },| { \"guidId\", guidId },| })| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var someId = Convert.ToBase64String(\"Some:1\"u8);| var anotherId = Convert.ToBase64String(\"Another:1\"u8);| // act| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<QueryType>()| .AddType<FooPayloadType>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| query foo ($someId: ID!, $anotherId: ID!) {| foo(input: { someId: $someId, anotherId: $anotherId }) {| someId| anotherId| }| }| \"\"\")| .SetVariableValues(new Dictionary<string, object>| {| { \"someId\", someId },| { \"anotherId\", anotherId }| })| .Build());| // assert| new| {| result = result.ToJson(),| someId,| anotherId| }.MatchSnapshot();| }"
      },
      {
        "name": "Id_Type_Is_Correctly_Inferred",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooPayloadType>()| .Create()| .ToString()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IdMiddlewareTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<SomeQuery>()| .AddGlobalObjectIdentification(false)| .ExecuteRequestAsync(\"{ id string }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<SomeQuery>()| .AddMutationType<Mutation>()| .AddGlobalObjectIdentification(false)| .AddMutationConventions()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| mutation {| do(input: { id: \"RXhhbXBsZTp0ZXN0\" }) {| string| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "LegacyNodeIdSerializerTests.cs",
    "methods": [
      {
        "name": "Format_Empty_StringId",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", \"\");| Assert.Equal(\"Rm9vCmQ=\", id);| }"
      },
      {
        "name": "Format_Small_StringId",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", \"abc\");| Assert.Equal(\"Rm9vCmRhYmM=\", id);| }"
      },
      {
        "name": "Parse_Small_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer();| var id = serializer.Parse(\"Rm9vCmRhYmM=\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer();| var id = serializer.Parse(\"Rm9vCmQ=\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId2",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Parse(\"Rm9vCmQ=\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Format_480_Byte_Long_StringId",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", new string('a', 480));| Assert.Equal(| \"Rm9vCmRhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWE=\",| id);| }"
      },
      {
        "name": "Parse_480_Byte_Long_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer();| var id = serializer.Parse(| \"Rm9vCmRhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWE=\",| lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new string('a', 480), id.InternalId);| }"
      },
      {
        "name": "Serialize_Int16Id",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", (short)6);| Assert.Equal(\"Rm9vCnM2\", id);| }"
      },
      {
        "name": "Serialize_Int32Id",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", 32);| Assert.Equal(\"Rm9vCmkzMg==\", id);| }"
      },
      {
        "name": "Serialize_Int64Id",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", (long)64);| Assert.Equal(\"Rm9vCmw2NA==\", id);| }"
      },
      {
        "name": "Serialize_Guid",
        "body": "{| var serializer = CreateSerializer();| var internalId = new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\");| var id = serializer.Format(\"Foo\", internalId);| Assert.Equal(\"Rm9vCmcxYWUyN2IxNDhjZjY0NDBkOWE0NjA5MDkwYTRhZjZmMw==\", id);| }"
      },
      {
        "name": "Serialize_Empty_Guid",
        "body": "{| var serializer = CreateSerializer();| var id = serializer.Format(\"Foo\", Guid.Empty);| Assert.Equal(\"Rm9vCmcwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMDAwMA==\", id);| }"
      }
    ]
  },
  {
    "file": "NodeFieldSupportTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo>()| .AddObjectType<Bar>(d => d| .ImplementsNode()| .IdField(t => t.Id)| .ResolveNodeWith<BarResolver>(t => t.GetBarAsync(default)))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo>()| .AddObjectType<Bar>(d => d| .ImplementsNode()| .IdField(t => t.Id)| .ResolveNodeWith<BarResolver>(t => t.GetBarAsync(default)))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ nodes(ids: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo>()| .AddObjectType<Bar>(d => d| .ImplementsNode()| .IdField(t => t.Id)| .ResolveNodeWith<BarResolver>(t => t.GetBarAsync(default)))| .ModifyOptions(o => o.MaxAllowedNodeBatchSize = 1)| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ nodes(ids: [\\\"QmFyOjEyMw==\\\", \\\"QmFyOjEyMw==\\\"]) { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo>()| .AddObjectType<Bar>(d => d| .ImplementsNode()| .IdField(t => t.Id)| .ResolveNodeWith<BarResolver>(t => t.GetBarAsync(default)))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ nodes(ids: [\\\"QmFyOjEyMw==\\\", \\\"QmFyOjEyMw==\\\"]) { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType(| x => x.Name(\"Query\")| .Field(\"childs\")| .Resolve(new Child { Id = \"123\", }))| .AddObjectType<Child>(d => d| .ImplementsNode()| .IdField(t => t.Id)| .ResolveNode((_, id) => Task.FromResult(new Child { Id = id, })))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ childs { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo>()| .AddObjectType<Bar>(d => d| .ImplementsNode()| .ResolveNodeWith<BarResolver>(t => t.GetBarAsync(default)))| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo1>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Bar5>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo2>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo6>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo3>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo7>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo8>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddSingleton<IBar9Resolver, Bar9Resolver>()| .AddGraphQL()| .AddGlobalObjectIdentification()| .AddQueryType<Foo9>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddQueryType<Foo4>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"QmFyOjEyMw==\\\") { id } }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "NodeResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddType<EntityType>()| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"RW50aXR5OmZvbw==\\\") \" +| \"{ ... on Entity { id name } } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddObjectType<Entity>(d =>| {| d.ImplementsNode()| .ResolveNode<string>(| (_, id) => Task.FromResult(new Entity { Name = id, }))| .Resolve(ctx => ctx.Parent<Entity>().Id);| })| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"RW50aXR5OmZvbw==\\\") \" +| \"{ ... on Entity { id name } } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddObjectType<Entity>(d =>| {| d.ImplementsNode()| .ResolveNode<string>((_, id) =>| Task.FromResult(new Entity { Name = id, }))| .Resolve(ctx => ctx.Parent<Entity>().Id);| })| .AddQueryType<Query>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"RW50aXR5OmZvbw==\\\") \" +| \"{ ... on Entity { id name } } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddObjectType(d =>| {| d.Name(\"Entity\");| d.ImplementsNode()| .ResolveNode<string>(| (_, id) => Task.FromResult<object>(new Entity { Name = id, }))| .Resolve(ctx => ctx.Parent<Entity>().Id);| d.Field(\"name\")| .Type<StringType>()| .Resolve(t => t.Parent<Entity>().Name);| })| .AddQueryType(d =>| {| d.Name(\"Query\")| .Field(\"entity\")| .Type(new NamedTypeNode(\"Entity\"))| .Resolve(new Entity { Name = \"foo\", });| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"RW50aXR5OmZvbw==\\\") \" +| \"{ ... on Entity { id name } } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddGlobalObjectIdentification()| .AddObjectType(d =>| {| d.Name(\"Entity\");| d.ImplementsNode()| .ResolveNode<string>(| (_, id) => Task.FromResult<object>(new Entity { Name = id, }))| .Resolve(ctx => ctx.Parent<Entity>().Id);| d.Field(\"name\")| .Type<StringType>()| .Resolve(t => t.Parent<Entity>().Name);| })| .AddQueryType(d =>| {| d.Name(\"Query\")| .Field(\"entity\")| .Type(new NamedTypeNode(\"Entity\"))| .Resolve(new Entity { Name = \"foo\", });| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"{ node(id: \\\"RW50aXR5OmZvbw==\\\") \" +| \"{ ... on Entity { id name } } }\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddGlobalObjectIdentification()| .AddQueryType<Query>()| .AddType<Entity3>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"RW50aXR5Mzox\") {| ... on Entity3 {| id| }| }| }| \"\"\");| // assert| result.ToJson().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<EntityExtension>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<EntityExtension2>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<EntityExtension3>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<EntityExtension4>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension<EntityExtension>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(| \"\"\"| {| node(id: \"RW50aXR5OmFiYw==\") {| ... on Entity {| name| }| }| }| \"\"\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "NodeTypeTests.cs",
    "methods": [
      {
        "name": "InitializeExplicitFieldWithImplicitResolver",
        "body": "{| // arrange| // act| var nodeInterface = CreateType(| new NodeType(),| b => b.ModifyOptions(o => o.StrictValidation = false));| // assert| Assert.Equal(| \"Node\",| nodeInterface.Name);| Assert.Equal(| \"The node interface is implemented by entities that have \" +| \"a global unique identifier.\",| nodeInterface.Description);| Assert.Collection(| nodeInterface.Fields,| t =>| {| Assert.Equal(\"id\", t.Name);| Assert.IsType<IdType>(| Assert.IsType<NonNullType>(t.Type).Type);| });| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() => await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query4>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() => await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query5>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() => await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query6>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| var exception = await Assert.ThrowsAsync<SchemaException>(Error);| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"{ fooById(id: \\\"Rm9vOmFiYw==\\\") { id clearTextId } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"{ node(id: \\\"Rm9vOmFiYw==\\\") { id __typename } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"{ node(id: \\\"Rm9vOmFiYw==\\\") { id __typename } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"{ nodes(ids: \\\"Rm9vOmFiYw==\\\") { id __typename } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query2>()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(| \"{ nodes(ids: [\\\"Rm9vOmFiYw==\\\", \\\"Rm9vOmFiYw==\\\"]) { id __typename } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query3>()| .AddGlobalObjectIdentification()| .BuildRequestExecutorAsync();| var serializer = executor.Schema.Services.GetRequiredService<INodeIdSerializer>();| var id = serializer.Format(\"Bar\", 123);| await executor.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"query ($id: ID!) {| node(id: $id) {| id| __typename| ... on Bar {| clearTextId| }| }| }\")| .SetVariableValues(new Dictionary<string, object> { { \"id\", id }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query7>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query8>()| .AddTypeExtension<Foo2>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query8>()| .AddTypeExtension<Foo2>()| .AddGlobalObjectIdentification()| .BuildRequestExecutorAsync();| var serializer = executor.Schema.Services.GetRequiredService<INodeIdSerializer>();| var id = serializer.Format(\"Foo1\", \"123\");| await executor.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"query ($id: ID!) {| node(id: $id) {| id| __typename| ... on Foo1 {| clearTextId| }| }| }\")| .SetVariableValues(new Dictionary<string, object> { { \"id\", id }, })| .Build())| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| async Task Error() => await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query9>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| var error = await Assert.ThrowsAsync<SchemaException>(Error);| error.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query9>()| .ModifyOptions(o => o.EnsureAllNodesCanBeResolved = false)| .AddGlobalObjectIdentification()| .BuildSchemaAsync();| Assert.NotNull(schema);| }"
      }
    ]
  },
  {
    "file": "OptimizedNodeIdSerializerTests.cs",
    "methods": [
      {
        "name": "Format_Empty_StringId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", \"\");| Assert.Equal(\"Rm9vOg==\", id);| }"
      },
      {
        "name": "Format_Small_StringId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", \"abc\");| Assert.Equal(\"Rm9vOmFiYw==\", id);| }"
      },
      {
        "name": "Format_Small_StringId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", \"abc\");| Assert.Equal(\"Rm9vCmRhYmM=\", id);| }"
      },
      {
        "name": "Format_480_Byte_Long_StringId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new string('a', 480));| Assert.Equal(| \"Rm9vOmFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYQ==\",| id);| }"
      },
      {
        "name": "Format_480_Byte_Long_StringId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", new string('a', 480));| Assert.Equal(| \"Rm9vCmRhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWE=\",| id);| }"
      },
      {
        "name": "Format_TypeName_Not_Registered",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| void Error() => serializer.Format(\"Baz\", \"abc\");| Assert.Throws<NodeIdMissingSerializerException>(Error);| }"
      },
      {
        "name": "Format_Int16Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int16NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (short)6);| Assert.Equal(\"Rm9vOjY=\", id);| }"
      },
      {
        "name": "Format_Int16Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int16NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", (short)6);| Assert.Equal(\"Rm9vCnM2\", id);| }"
      },
      {
        "name": "Format_Int32Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int32NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", 32);| Assert.Equal(\"Rm9vOjMy\", id);| }"
      },
      {
        "name": "Format_Int32Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int32NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", 32);| Assert.Equal(\"Rm9vCmkzMg==\", id);| }"
      },
      {
        "name": "Format_Int64Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int64NodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (long)64);| Assert.Equal(\"Rm9vOjY0\", id);| }"
      },
      {
        "name": "Format_Int64Id_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int64NodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", (long)64);| Assert.Equal(\"Rm9vCmw2NA==\", id);| }"
      },
      {
        "name": "Format_DecimalId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new DecimalNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (decimal)6);| Assert.Equal(\"Rm9vOjY=\", id);| }"
      },
      {
        "name": "Format_FloatId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new SingleNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (float)6);| Assert.Equal(\"Rm9vOjY=\", id);| }"
      },
      {
        "name": "Format_DoubleId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new DoubleNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", (double)6);| Assert.Equal(\"Rm9vOjY=\", id);| }"
      },
      {
        "name": "Format_Empty_Guid",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new GuidNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", Guid.Empty);| Assert.Equal(\"Rm9vOgAAAAAAAAAAAAAAAAAAAAA=\", id);| }"
      },
      {
        "name": "Format_Normal_Guid",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new GuidNodeIdValueSerializer(false));| var internalId = new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\");| var id = serializer.Format(\"Foo\", internalId);| Assert.Equal(\"Rm9vOjFhZTI3YjE0OGNmNjQ0MGQ5YTQ2MDkwOTBhNGFmNmYz\", id);| }"
      },
      {
        "name": "Format_Normal_Guid_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new GuidNodeIdValueSerializer(false), outputNewIdFormat: false);| var internalId = new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\");| var id = serializer.Format(\"Foo\", internalId);| Assert.Equal(\"Rm9vCmcxYWUyN2IxNDhjZjY0NDBkOWE0NjA5MDkwYTRhZjZmMw==\", id);| }"
      },
      {
        "name": "Format_Normal_Guid_Compressed",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new GuidNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new Guid(\"1ae27b14-8cf6-440d-9a46-09090a4af6f3\"));| Assert.Equal(\"Rm9vOhR74hr2jA1EmkYJCQpK9vM=\", id);| }"
      },
      {
        "name": "Format_CompositeId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new CompositeIdNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", new CompositeId(\"foo\", 42, Guid.Empty, true));| Assert.Equal(\"Rm9vOmZvbzo0MjoAAAAAAAAAAAAAAAAAAAAAOjE=\", id);| }"
      },
      {
        "name": "Format_CompositeId_Legacy_Format",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new CompositeIdNodeIdValueSerializer(), outputNewIdFormat: false);| var id = serializer.Format(\"Foo\", new CompositeId(\"foo\", 42, Guid.Empty, true));| Assert.Equal(\"Rm9vCmRmb286NDI6AAAAAAAAAAAAAAAAAAAAADox\", id);| }"
      },
      {
        "name": "Parse_Small_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOmFiYw==\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOg==\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Parse_Empty_StringId2",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOg==\", typeof(string));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"\", id.InternalId);| }"
      },
      {
        "name": "Parse_Small_Legacy_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmRhYmM=\", lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(\"abc\", id.InternalId);| }"
      },
      {
        "name": "Parse_480_Byte_Long_StringId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var serializer = CreateSerializer(\"Foo\", new StringNodeIdValueSerializer());| var id = serializer.Parse(| \"Rm9vOmFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFhYWFh\" +| \"YWFhYWFhYWFhYWFhYWFhYQ==\",| lookup.Object);| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(new string('a', 480), id.InternalId);| }"
      },
      {
        "name": "Parse_Int16Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int16NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(short));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((short)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int16Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int16NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCnMxMjM=\", typeof(short));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((short)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Int32Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int32NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(int));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int32Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int32NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmkxMjM=\", typeof(int));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal(123, id.InternalId);| }"
      },
      {
        "name": "Parse_Int64Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int64NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(long));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((long)123, id.InternalId);| }"
      },
      {
        "name": "Parse_Legacy_Int64Id",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new Int64NodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vCmwxMjM=\", typeof(long));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((long)123, id.InternalId);| }"
      },
      {
        "name": "Parse_DecimalId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new DecimalNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(decimal));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((decimal)123, id.InternalId);| }"
      },
      {
        "name": "Parse_SingleId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new SingleNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(float));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((float)123, id.InternalId);| }"
      },
      {
        "name": "Parse_DoublelId",
        "body": "{| var serializer = CreateSerializer(\"Foo\", new DoubleNodeIdValueSerializer());| var id = serializer.Parse(\"Rm9vOjEyMw==\", typeof(double));| Assert.Equal(\"Foo\", id.TypeName);| Assert.Equal((double)123, id.InternalId);| }"
      },
      {
        "name": "Parse_CompositeId",
        "body": "{| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var compositeId = new CompositeId(\"foo\", 42, Guid.Empty, true);| var serializer = CreateSerializer(\"Foo\", new CompositeIdNodeIdValueSerializer());| var id = serializer.Format(\"Foo\", compositeId);| var parsed = serializer.Parse(id, lookup.Object);| Assert.Equal(compositeId, parsed.InternalId);| }"
      },
      {
        "name": "Ensure_Lookup_Works_With_HashCollision",
        "body": "{| // arrange| const string namesString =| \"Error,Node,Attribute,AttributeNotFoundError,AttributeProduct,AttributeProductValue,\" +| \"AttributeValue,AttributesConnection,AttributesEdge,CategoriesConnection,CategoriesEdge,\" +| \"Category,CategoryNotFoundError,Channel,ChannelNotFoundError,ChannelsConnection,ChannelsEdge,\" +| \"Collection,CreateAttributePayload,CreateCategoryPayload,CreateChannelPayload,CreateProductPayload,\" +| \"CreateVariantPayload,CreateVariantPricePayload,Currency,CurrencyChannel,DeleteAttributePayload,\" +| \"DeleteCategoryPayload,DeleteChannelPayload,DeleteProductPayload,DeleteVariantPayload,\" +| \"DeleteVariantPricePayload,EntitySaveError,InventoryEntry,Media,MediasConnection,\" +| \"MediasEdge,MetadataBooleanValue,MetadataCollection,MetadataCollectionsConnection,\" +| \"MetadataCollectionsEdge,MetadataDateValue,MetadataDefinition,MetadataNumberValue,\" +| \"MetadataTextValue,MetadataValue,Mutation,PageInfo,Product,ProductCategorySortOrder,\" +| \"ProductChannel,ProductCollection,ProductNotFoundError,ProductType,ProductTypesConnection,\" +| \"ProductTypesEdge,ProductVendor,ProductVendorsConnection,ProductVendorsEdge,ProductsConnection,\" +| \"ProductsEdge,Query,StorageProviderPayload,SubCategoriesConnection,SubCategoriesEdge,Tag,\" +| \"TagsConnection,TagsEdge,UpdateAttributePayload,UpdateCategoryPayload,UpdateChannelPayload,\" +| \"UpdateProductChannelAvailabilityPayload,UpdateProductPayload,UpdateVariantChannelAvailabilityPayload,\" +| \"UpdateVariantPayload,UpdateVariantPricePayload,UploadMediaPayload,Variant,VariantChannel,VariantMedia,\" +| \"VariantPrice,VariantsConnection,VariantsEdge,Warehouse,WarehouseChannel,CreateAttributeError,\" +| \"CreateCategoryError,CreateChannelError,CreateProductError,CreateVariantError,CreateVariantPriceError,\" +| \"DeleteAttributeError,DeleteCategoryError,DeleteChannelError,DeleteProductError,DeleteVariantError,\" +| \"DeleteVariantPriceError,MetadataTypedValue,StorageProviderError,UpdateAttributeError,\" +| \"UpdateCategoryError,UpdateChannelError,UpdateProductChannelAvailabilityError,UpdateProductError,\" +| \"UpdateVariantChannelAvailabilityError,UpdateVariantError,UpdateVariantPriceError,UploadMediaError,\" +| \"AttributeFilterInput,AttributeProductInput,AttributeProductValueUpdateInput,AttributeSortInput,\" +| \"AttributeValueFilterInput,BooleanOperationFilterInput,CategoryFilterInput,CategorySortInput,\" +| \"ChannelFilterInput,ChannelSortInput,CollectionFilterInput,CreateAttributeInput,CreateCategoryInput,\" +| \"CreateChannelInput,CreateProductInput,CreateVariantInput,CreateVariantPriceInput,\" +| \"CurrencyChannelFilterInput,CurrencyFilterInput,DateTimeOperationFilterInput,DeleteAttributeInput,\" +| \"DeleteCategoryInput,DeleteChannelInput,DeleteProductInput,DeleteVariantInput,DeleteVariantPriceInput,\" +| \"GeneralMetadataInput,IMetadataTypedValueFilterInput,IdOperationFilterInput,IntOperationFilterInput,\" +| \"InventoryEntryFilterInput,ListAttributeFilterInputWithSearchFilterInput,\" +| \"ListFilterInputTypeOfAttributeValueFilterInput,ListFilterInputTypeOfCurrencyChannelFilterInput,\" +| \"ListFilterInputTypeOfInventoryEntryFilterInput,ListFilterInputTypeOfMetadataDefinitionFilterInput,\" +| \"ListFilterInputTypeOfMetadataValueFilterInput,ListFilterInputTypeOfProductCategorySortOrderFilterInput,\" +| \"ListFilterInputTypeOfProductChannelFilterInput,ListFilterInputTypeOfProductCollectionFilterInput,\" +| \"ListFilterInputTypeOfVariantChannelFilterInput,ListFilterInputTypeOfVariantMediaFilterInput,\" +| \"ListFilterInputTypeOfVariantPriceFilterInput,ListFilterInputTypeOfWarehouseChannelFilterInput,\" +| \"ListProductFilterInputWithSearchFilterInput,ListTagFilterInputWithSearchFilterInput,\" +| \"ListVariantFilterInputWithSearchFilterInput,LongOperationFilterInput,MediaFilterInput,\" +| \"MediaSortInput,MetadataCollectionFilterInput,MetadataCollectionSortInput,MetadataDefinitionFilterInput,\" +| \"MetadataTypeOperationFilterInput,MetadataValueFilterInput,ProductCategorySortOrderFilterInput,\" +| \"ProductChannelAvailabilityUpdateInput,ProductChannelFilterInput,ProductCollectionFilterInput,\" +| \"ProductFilterInput,ProductSortInput,ProductTypeFilterInput,ProductTypeSortInput,\" +| \"ProductVendorFilterInput,ProductVendorSortInput,StorageProviderInput,StringOperationFilterInput,\" +| \"TagFilterInput,TagSortInput,UpdateAttributeInput,UpdateCategoryInput,UpdateChannelInput,\" +| \"UpdateProductChannelAvailabilityInput,UpdateProductInput,UpdateVariantChannelAvailabilityInput,\" +| \"UpdateVariantInput,UpdateVariantPriceInput,UploadMediaInput,UuidOperationFilterInput,\" +| \"VariantChannelAvailabilityUpdateInput,VariantChannelFilterInput,VariantFilterInput,\" +| \"VariantMediaFilterInput,VariantPriceFilterInput,VariantSortInput,WarehouseChannelFilterInput,\" +| \"WarehouseFilterInput,ApplyPolicy,MediaStorageProvider,MetadataType,SortEnumType,DateTime,Long,\" +| \"UUID,Upload\";| var lookup = new Mock<INodeIdRuntimeTypeLookup>();| lookup.Setup(t => t.GetNodeIdRuntimeType(default)).Returns(default(Type));| var names = new HashSet<string>(namesString.Split(','));| var stringValueSerializer = new StringNodeIdValueSerializer();| var mappings = names.Select(name => new BoundNodeIdValueSerializer(name, stringValueSerializer)).ToList();| var nodeIdSerializer = new OptimizedNodeIdSerializer(mappings, [stringValueSerializer]);| var snapshot = new Snapshot();| var sb = new StringBuilder();| // act| var formattedId = nodeIdSerializer.Format(\"VariantsEdge\", \"abc\");| var internalId = nodeIdSerializer.Parse(formattedId, lookup.Object);| foreach (var name in names)| {| var a = nodeIdSerializer.Format(name, \"abc\");| var b = nodeIdSerializer.Parse(a, lookup.Object);| sb.Clear();| sb.AppendLine(a);| sb.Append($\"{b.TypeName}:{b.InternalId}\");| snapshot.Add(sb.ToString(), name);| }| // assert| Assert.Equal(\"VariantsEdge\", internalId.TypeName);| Assert.Equal(\"abc\", internalId.InternalId);| Assert.Equal(\"VmFyaWFudHNFZGdlOmFiYw==\", formattedId);| snapshot.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "RelaySchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddGlobalObjectIdentification()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddMutationType<Mutation>()| .AddQueryFieldToMutationPayloads()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddMutationType(d => d.Name(\"Mutation\"))| .AddTypeExtension<MutationExtension>()| .AddQueryFieldToMutationPayloads()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddMutationType<Mutation>()| .AddQueryFieldToMutationPayloads(o => o.QueryFieldName = \"rootQuery\")| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddMutationType<Mutation2>()| .AddQueryFieldToMutationPayloads(o =>| {| o.MutationPayloadPredicate = type => type.Name.EndsWith(\"Result\");| })| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryType>()| .AddMutationType<Mutation>()| .AddQueryFieldToMutationPayloads()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"mutation { foo { query { some { id } } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddMutationType<Mutation>()| .AddQueryFieldToMutationPayloads()| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"mutation { foo { query { some { id } } } }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType(d => d| .Field(\"user\")| .Type<UserType>()| .Resolve(_ => new User { Name = \"TEST\", }))| .AddGlobalObjectIdentification()| .ExecuteRequestAsync(\"query { user { id name } } \")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "EnumTypeSchemaFirstTests.cs",
    "methods": [
      {
        "name": "Declare_EnumType_With_Explicit_Value_Binding",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD @bind(to: \"\"GoodMorning\"\")| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .MakeExecutable()| .Execute(\"{ hello(greetings: GOOD) }\")| .ToJson()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_EnumType_With_Implicit_Value_Binding",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD_MORNING| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .MakeExecutable()| .Execute(\"{ hello(greetings: GOOD_MORNING) }\")| .ToJson()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_EnumType_With_Type_Extension",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD_MORNING| }| extend enum Greetings {| GOOD_EVENING| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .MakeExecutable()| .Execute(\"{ hello(greetings: GOOD_EVENING) }\")| .ToJson()| .MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD @bind(to: \"\"GoodMorning\"\")| }\";| // act| // assert| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .ExecuteRequestAsync(\"{ hello(greetings: GOOD) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD_MORNING| }\";| // act| // assert| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .ExecuteRequestAsync(\"{ hello(greetings: GOOD_MORNING) }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(greetings: Greetings): Greetings| }| enum Greetings {| GOOD_MORNING| }| extend enum Greetings {| GOOD_EVENING| }\";| // act| // assert| await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .ExecuteRequestAsync(\"{ hello(greetings: GOOD_EVENING) }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeSchemaFirstTests.cs",
    "methods": [
      {
        "name": "Declare_Simple_Input_Type",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(input: HelloInput): String| }| input HelloInput {| hello: String| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Input_Type_With_Type_Extension",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(input: HelloInput): String| }| input HelloInput {| hello: String| }| extend input HelloInput {| world: String| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Query_Type_With_Type_Extension_Add_Directive_To_Field",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(input: HelloInput): String| }| input HelloInput {| hello: String| }| extend input HelloInput {| world: String @foo| }| directive @foo on INPUT_FIELD_DEFINITION\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Query_Type_With_Type_Extension_Add_Directive_To_Type",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello(input: HelloInput): String| }| input HelloInput {| hello: String| }| extend input HelloInput @foo| directive @foo on INPUT_OBJECT\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectTypeSchemaFirstTests.cs",
    "methods": [
      {
        "name": "Declare_Simple_Query_Type",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello: String| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Query_Type_With_Type_Extension",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello: String| }| extend type Query {| world: String| }\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Query_Type_With_Type_Extension_Add_Directive_To_Field",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello: String| }| extend type Query {| hello: String @foo| }| directive @foo on FIELD_DEFINITION\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      },
      {
        "name": "Declare_Query_Type_With_Type_Extension_Add_Directive_To_Type",
        "body": "{| // arrange| var sdl =| @\"type Query {| hello: String| }| extend type Query @foo| directive @foo on OBJECT\";| // act| // assert| SchemaBuilder.New()| .AddDocumentFromString(sdl)| .BindRuntimeType<Query>()| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "BooleanTypeTests.cs",
    "methods": [
      {
        "name": "ParseLiteral",
        "body": "{| // arrange| var literal = new BooleanValueNode(null, true);| // act| var booleanType = new BooleanType();| var result = booleanType.ParseLiteral(literal);| // assert| Assert.IsType<bool>(result);| Assert.True((bool)result);| }"
      },
      {
        "name": "IsInstanceOfType",
        "body": "{| // arrange| var boolLiteral = new BooleanValueNode(null, true);| var stringLiteral = new StringValueNode(null, \"12345\", false);| var nullLiteral = NullValueNode.Default;| // act| var booleanType = new BooleanType();| var isIntLiteralInstanceOf = booleanType.IsInstanceOfType(boolLiteral);| var isStringLiteralInstanceOf = booleanType.IsInstanceOfType(stringLiteral);| var isNullLiteralInstanceOf = booleanType.IsInstanceOfType(nullLiteral);| // assert| Assert.True(isIntLiteralInstanceOf);| Assert.False(isStringLiteralInstanceOf);| Assert.True(isNullLiteralInstanceOf);| }"
      },
      {
        "name": "EnsureBooleanTypeKindIsCorret",
        "body": "{| // arrange| var type = new BooleanType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "Serialize_Null_Null",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| var result = booleanType.Serialize(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Serialize_True_True",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| var result = booleanType.Serialize(true);| // assert| Assert.IsType<bool>(result);| Assert.True((bool)result);| }"
      },
      {
        "name": "Serialize_String_Exception",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| Action a = () => booleanType.Serialize(\"foo\");| // assert| Assert.Throws<SerializationException>(a);| }"
      },
      {
        "name": "Deserialize_Null_Null",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| var result = booleanType.Serialize(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Deserialize_True_True",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| var result = booleanType.Serialize(true);| // assert| Assert.IsType<bool>(result);| Assert.True((bool)result);| }"
      },
      {
        "name": "Deserialize_String_Exception",
        "body": "{| // arrange| var booleanType = new BooleanType();| // act| Action a = () => booleanType.Serialize(\"foo\");| // assert| Assert.Throws<SerializationException>(a);| }"
      }
    ]
  },
  {
    "file": "ByteArrayTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_StringLiteral",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var byteArray = Encoding.ASCII.GetBytes(\"value\");| // act| var isOfType = byteArrayType.IsInstanceOfType(byteArray);| // assert| Assert.True(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var literal = new NullValueNode(null);| // act| var isOfType = byteArrayType.IsInstanceOfType(literal);| // assert| Assert.True(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_IntLiteral",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var literal = new IntValueNode(123);| // act| var isOfType = byteArrayType.IsInstanceOfType(literal);| // assert| Assert.False(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_Null",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var guid = Guid.NewGuid();| // act| Action action = () => byteArrayType.IsInstanceOfType(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Serialize_Base64",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var value = Encoding.ASCII.GetBytes(\"value\");| // act| var serializedValue = byteArrayType.Serialize(value);| // assert| Assert.Equal(| Convert.ToBase64String(value),| Assert.IsType<string>(serializedValue));| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| // act| var serializedValue = byteArrayType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Int",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var value = 123;| // act| Action action = () => byteArrayType.Serialize(value);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "Deserialize_Null",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| // act| var success = byteArrayType.TryDeserialize(null, out var o);| // assert| Assert.True(success);| Assert.Null(o);| }"
      },
      {
        "name": "Deserialize_String",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var bytes = Encoding.ASCII.GetBytes(\"value\");| // act| var success = byteArrayType.TryDeserialize(| Convert.ToBase64String(bytes), out var o);| // assert| Assert.True(success);| Assert.Equal(bytes, o);| }"
      },
      {
        "name": "Deserialize_Bytes",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var bytes = Encoding.ASCII.GetBytes(\"value\");| // act| var success = byteArrayType.TryDeserialize(| bytes, out var o);| // assert| Assert.True(success);| Assert.Equal(bytes, o);| }"
      },
      {
        "name": "Deserialize_Guid",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var bytes = Encoding.ASCII.GetBytes(\"value\");| // act| var success = byteArrayType.TryDeserialize(bytes, out var o);| // assert| Assert.True(success);| Assert.Equal(bytes, o);| }"
      },
      {
        "name": "Deserialize_Int",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var value = 123;| // act| var success = byteArrayType.TryDeserialize(value, out _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var expected = Encoding.ASCII.GetBytes(\"value\");| var literal = new StringValueNode(Convert.ToBase64String(expected));| // act| var actual = (byte[])byteArrayType| .ParseLiteral(literal);| // assert| Assert.Equal(expected, actual);| }"
      },
      {
        "name": "ParseLiteral_IntValueNode",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var literal = new IntValueNode(123);| // act| Action action = () => byteArrayType.ParseLiteral(literal);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var literal = NullValueNode.Default;| // act| var value = byteArrayType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseLiteral_Null",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| // act| Action action = () => byteArrayType.ParseLiteral(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "ParseValue_Guid",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var expected = Encoding.ASCII.GetBytes(\"value\");| var expectedLiteralValue = Convert.ToBase64String(expected);| // act| var stringLiteral =| (StringValueNode)byteArrayType.ParseValue(expected);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| Guid? guid = null;| // act| var stringLiteral =| byteArrayType.ParseValue(guid);| // assert| Assert.True(stringLiteral is NullValueNode);| Assert.Null(((NullValueNode)stringLiteral).Value);| }"
      },
      {
        "name": "ParseValue_Int",
        "body": "{| // arrange| var byteArrayType = new ByteArrayType();| var value = 123;| // act| Action action = () => byteArrayType.ParseValue(value);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "EnsureDateTypeKindIsCorret",
        "body": "{| // arrange| var type = new ByteArrayType();| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      }
    ]
  },
  {
    "file": "ByteTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new ByteType();| var literal = new IntValueNode(1);| // act| var result = type.IsInstanceOfType(literal);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new ByteType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new ByteType();| // act| var result = type.IsInstanceOfType(new FloatValueNode(1M));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new ByteType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new ByteType();| byte value = 123;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<byte>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new ByteType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new ByteType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new ByteType(0, 100);| byte value = 200;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new ByteType();| var literal = new IntValueNode(1);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<byte>(value);| Assert.Equal(literal.ToByte(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new ByteType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new ByteType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new ByteType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new ByteType(1, 100);| byte input = 100;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(100, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new ByteType(1, 100);| byte input = 101;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new ByteType(1, 100);| byte input = 1;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(1, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new ByteType(1, 100);| byte input = 0;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new ByteType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new ByteType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new ByteType();| byte? input = 123;| // act| var output = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(123, output.ToDouble());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new ByteType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      }
    ]
  },
  {
    "file": "CustomScalarTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange + act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<FluentCustomScalarType>()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange + act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<AnnotationCustomScalarType>()| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange + act| var schema = await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| \"\"\"| schema {| query: Query| }| type Query {| sayHello: Custom!| }| directive @custom on SCALAR| scalar Custom @custom| \"\"\")| .AddType(new StringType())| .AddType(new StringType(\"Custom\"))| .UseField(_ => _)| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DateTimeTypeTests.cs",
    "methods": [
      {
        "name": "Serialize_Utc_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| DateTimeOffset dateTime = new DateTime(| 2018,| 6,| 11,| 8,| 46,| 14,| DateTimeKind.Utc);| var expectedValue = \"2018-06-11T08:46:14.000Z\";| // act| var serializedValue = (string)dateTimeType.Serialize(dateTime);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var dateTime = new DateTimeOffset(| new DateTime(2018, 6, 11, 8, 46, 14),| new TimeSpan(4, 0, 0));| var expectedValue = \"2018-06-11T08:46:14.000+04:00\";| // act| var serializedValue = (string)dateTimeType.Serialize(dateTime);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| // act| var serializedValue = dateTimeType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_String_Exception",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| // act| Action a = () => dateTimeType.Serialize(\"foo\");| // assert| Assert.Throws<SerializationException>(a);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var literal = new StringValueNode(| \"2018-06-29T08:46:14+04:00\");| var expectedDateTime = new DateTimeOffset(| new DateTime(2018, 6, 29, 8, 46, 14),| new TimeSpan(4, 0, 0));| // act| var dateTime = (DateTimeOffset)dateTimeType| .ParseLiteral(literal);| // assert| Assert.Equal(expectedDateTime, dateTime);| }"
      },
      {
        "name": "Deserialize_IsoString_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var dateTime = new DateTimeOffset(| new DateTime(2018, 6, 11, 8, 46, 14),| new TimeSpan(4, 0, 0));| // act| var deserializedValue = (DateTimeOffset)dateTimeType| .Deserialize(\"2018-06-11T08:46:14+04:00\");| // assert| Assert.Equal(dateTime, deserializedValue);| }"
      },
      {
        "name": "Deserialize_ZuluString_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var dateTime = new DateTimeOffset(| new DateTime(2018, 6, 11, 8, 46, 14),| new TimeSpan(0, 0, 0));| // act| var deserializedValue = (DateTimeOffset)dateTimeType| .Deserialize(\"2018-06-11T08:46:14.000Z\");| // assert| Assert.Equal(dateTime, deserializedValue);| }"
      },
      {
        "name": "Deserialize_IsoString_DateTime",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var dateTime = new DateTime(| 2018,| 6,| 11,| 8,| 46,| 14,| DateTimeKind.Unspecified);| // act| var deserializedValue = ((DateTimeOffset)dateTimeType| .Deserialize(\"2018-06-11T08:46:14+04:00\")).DateTime;| // assert| Assert.Equal(dateTime, deserializedValue);| Assert.Equal(DateTimeKind.Unspecified, deserializedValue.Kind);| }"
      },
      {
        "name": "Deserialize_ZuluString_DateTime",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| DateTimeOffset dateTime = new DateTime(| 2018,| 6,| 11,| 8,| 46,| 14,| DateTimeKind.Utc);| // act| var deserializedValue = ((DateTimeOffset)dateTimeType| .Deserialize(\"2018-06-11T08:46:14.000Z\"));| // assert| Assert.Equal(dateTime, deserializedValue.UtcDateTime);| }"
      },
      {
        "name": "Deserialize_InvalidString_To_DateTimeOffset",
        "body": "{| // arrange| var type = new DateTimeType();| // act| var success = type.TryDeserialize(\"abc\", out var deserialized);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Deserialize_DateTimeOffset_To_DateTimeOffset",
        "body": "{| // arrange| var type = new DateTimeType();| var time = new DateTimeOffset(| new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc));| // act| var success = type.TryDeserialize(time, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(time, deserialized);| }"
      },
      {
        "name": "Deserialize_DateTime_To_DateTimeOffset",
        "body": "{| // arrange| var type = new DateTimeType();| var time = new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc);| // act| var success = type.TryDeserialize(time, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(time,| Assert.IsType<DateTimeOffset>(deserialized).UtcDateTime);| }"
      },
      {
        "name": "Deserialize_NullableDateTime_To_DateTimeOffset",
        "body": "{| // arrange| var type = new DateTimeType();| DateTime? time =| new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc);| // act| var success = type.TryDeserialize(time, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(time,| Assert.IsType<DateTimeOffset>(deserialized).UtcDateTime);| }"
      },
      {
        "name": "Deserialize_NullableDateTime_To_DateTimeOffset_2",
        "body": "{| // arrange| var type = new DateTimeType();| DateTime? time = null;| // act| var success = type.TryDeserialize(time, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "Deserialize_Null_To_Null",
        "body": "{| // arrange| var type = new DateTimeType();| // act| var success = type.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var literal = NullValueNode.Default;| // act| var value = dateTimeType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseValue_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| var dateTime = new DateTimeOffset(| new DateTime(2018, 6, 11, 8, 46, 14),| new TimeSpan(4, 0, 0));| var expectedLiteralValue = \"2018-06-11T08:46:14.000+04:00\";| // act| var stringLiteral =| (StringValueNode)dateTimeType.ParseValue(dateTime);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Utc_DateTimeOffset",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| DateTimeOffset dateTime =| new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc);| var expectedLiteralValue = \"2018-06-11T08:46:14.000Z\";| // act| var stringLiteral =| (StringValueNode)dateTimeType.ParseValue(dateTime);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var dateTimeType = new DateTimeType();| // act| var literal = dateTimeType.ParseValue(null);| // assert| Assert.IsType<NullValueNode>(literal);| }"
      },
      {
        "name": "EnsureDateTimeTypeKindIsCorrect",
        "body": "{| // arrange| var type = new DateTimeType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<DefaultDateTime>()| .BuildRequestExecutorAsync();| // act| var res = await executor.ExecuteAsync(\"{ test }\");| // assert| res.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DateTypeTests.cs",
    "methods": [
      {
        "name": "Serialize_DateOnly",
        "body": "{| // arrange| var dateType = new DateType();| var dateOnly = new DateOnly(2018, 6, 11);| var expectedValue = \"2018-06-11\";| // act| var serializedValue = (string)dateType.Serialize(dateOnly);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_DateTime",
        "body": "{| // arrange| var dateType = new DateType();| var dateTime = new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc);| var expectedValue = \"2018-06-11\";| // act| var serializedValue = (string)dateType.Serialize(dateTime);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_DateTimeOffset",
        "body": "{| // arrange| var dateType = new DateType();| var dateTime = new DateTimeOffset(| new DateTime(2018, 6, 11, 2, 46, 14),| new TimeSpan(4, 0, 0));| var expectedValue = \"2018-06-10\";| // act| var serializedValue = (string)dateType.Serialize(dateTime);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var dateType = new DateType();| // act| var serializedValue = dateType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_String_Exception",
        "body": "{| // arrange| var dateType = new DateType();| // act| void Action() => dateType.Serialize(\"foo\");| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "Deserialize_IsoString_DateOnly",
        "body": "{| // arrange| var dateType = new DateType();| var date = new DateOnly(2018, 6, 11);| // act| var result = (DateOnly)dateType.Deserialize(\"2018-06-11\")!;| // assert| Assert.Equal(date, result);| }"
      },
      {
        "name": "Deserialize_InvalidFormat_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| // act| var success = type.TryDeserialize(\"2018/06/11\", out _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Deserialize_InvalidString_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| // act| var success = type.TryDeserialize(\"abc\", out _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Deserialize_DateOnly_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| var date = new DateOnly(2018, 6, 11);| // act| var success = type.TryDeserialize(date, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(date, deserialized);| }"
      },
      {
        "name": "Deserialize_DateTime_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| var date = new DateTime(2018, 6, 11, 8, 46, 14, DateTimeKind.Utc);| // act| var success = type.TryDeserialize(date, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(DateOnly.FromDateTime(date),| Assert.IsType<DateOnly>(deserialized));| }"
      },
      {
        "name": "Deserialize_DateTimeOffset_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| var date = new DateTimeOffset(| new DateTime(2018, 6, 11, 2, 46, 14),| new TimeSpan(4, 0, 0));| // act| var success = type.TryDeserialize(date, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(DateOnly.FromDateTime(date.UtcDateTime),| Assert.IsType<DateOnly>(deserialized));| }"
      },
      {
        "name": "Deserialize_NullableDateOnly_To_DateOnly",
        "body": "{| // arrange| var type = new DateType();| DateOnly? date = new DateOnly(2018, 6, 11);| // act| var success = type.TryDeserialize(date, out var deserialized);| // assert| Assert.True(success);| Assert.Equal(date, Assert.IsType<DateOnly>(deserialized));| }"
      },
      {
        "name": "Deserialize_NullableDateOnly_To_DateOnly_2",
        "body": "{| // arrange| var type = new DateType();| DateOnly? date = null;| // act| var success = type.TryDeserialize(date, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "Deserialize_Null_To_Null",
        "body": "{| // arrange| var type = new DateType();| // act| var success = type.TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var dateType = new DateType();| var literal = new StringValueNode(\"2018-06-29\");| var expectedDateTime = new DateOnly(2018, 6, 29);| // act| var dateTime = (DateOnly)dateType.ParseLiteral(literal)!;| // assert| Assert.Equal(expectedDateTime, dateTime);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var dateType = new DateType();| var literal = NullValueNode.Default;| // act| var value = dateType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseValue_DateOnly",
        "body": "{| // arrange| var dateType = new DateType();| var dateOnly = new DateOnly(2018, 6, 11);| var expectedLiteralValue = \"2018-06-11\";| // act| var stringLiteral =| (StringValueNode)dateType.ParseValue(dateOnly);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var dateType = new DateType();| // act| var literal = dateType.ParseValue(null);| // assert| Assert.Equal(NullValueNode.Default, literal);| }"
      },
      {
        "name": "ParseResult_DateOnly",
        "body": "{| // arrange| var dateType = new DateType();| var resultValue = new DateOnly(2023, 6, 19);| var expectedLiteralValue = \"2023-06-19\";| // act| var literal = dateType.ParseResult(resultValue);| // assert| Assert.Equal(typeof(StringValueNode), literal.GetType());| Assert.Equal(expectedLiteralValue, literal.Value);| }"
      },
      {
        "name": "ParseResult_DateTime",
        "body": "{| // arrange| var dateType = new DateType();| var resultValue = new DateTime(2023, 6, 19, 11, 24, 0, DateTimeKind.Utc);| var expectedLiteralValue = \"2023-06-19\";| // act| var literal = dateType.ParseResult(resultValue);| // assert| Assert.Equal(typeof(StringValueNode), literal.GetType());| Assert.Equal(expectedLiteralValue, literal.Value);| }"
      },
      {
        "name": "ParseResult_DateTimeOffset",
        "body": "{| // arrange| var dateType = new DateType();| var resultValue = new DateTimeOffset(2023, 6, 19, 11, 24, 0, new TimeSpan(6, 0, 0));| var expectedLiteralValue = \"2023-06-19\";| // act| var literal = dateType.ParseResult(resultValue);| // assert| Assert.Equal(typeof(StringValueNode), literal.GetType());| Assert.Equal(expectedLiteralValue, literal.Value);| }"
      },
      {
        "name": "ParseResult_String",
        "body": "{| // arrange| var dateType = new DateType();| var resultValue = \"2023-06-19\";| var expectedLiteralValue = \"2023-06-19\";| // act| var literal = dateType.ParseResult(resultValue);| // assert| Assert.Equal(typeof(StringValueNode), literal.GetType());| Assert.Equal(expectedLiteralValue, literal.Value);| }"
      },
      {
        "name": "ParseResult_Null",
        "body": "{| // arrange| var dateType = new DateType();| // act| var literal = dateType.ParseResult(null);| // assert| Assert.Equal(NullValueNode.Default, literal);| }"
      },
      {
        "name": "ParseResult_SerializationException",
        "body": "{| // arrange| var dateType = new DateType();| var resultValue = 1;| // act| var exception = Record.Exception(() => dateType.ParseResult(resultValue));| // assert| Assert.IsType<SerializationException>(exception);| }"
      },
      {
        "name": "EnsureDateTypeKindIsCorrect",
        "body": "{| // arrange| var type = new DateType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      },
      {
        "name": "DateType_Binds_Only_Explicitly",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddType(new DateType())| .Create();| // assert| IType dateType = schema.QueryType.Fields[\"dateField\"].Type;| IType dateTimeType = schema.QueryType.Fields[\"dateTimeField\"].Type;| Assert.IsType<DateType>(dateType);| Assert.IsType<DateTimeType>(dateTimeType);| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDateTime1>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDateTime1>()| .AddType(() => new TimeSpanType(TimeSpanFormat.DotNet))| .ExecuteRequestAsync(| @\"{| foo {| time(time: \"\"11:22\"\")| date(date: \"\"2017-12-30\"\")| }| }\")| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDateTime2>()| .BuildSchemaAsync()| .MatchSnapshotAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await new ServiceCollection()| .AddGraphQL()| .AddQueryType<QueryDateTime2>()| .AddType(() => new TimeSpanType(TimeSpanFormat.DotNet))| .ExecuteRequestAsync(| @\"{| bar {| time| date| }| }\")| .MatchSnapshotAsync();| }"
      }
    ]
  },
  {
    "file": "DecimalTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new DecimalType();| // act| var result = type.IsInstanceOfType(CreateExponentialLiteral());| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new DecimalType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_IntLiteral_True",
        "body": "{| // arrange| var type = new DecimalType();| // act| var result = type.IsInstanceOfType(new IntValueNode(123));| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new DecimalType();| // act| var result = type.IsInstanceOfType(new StringValueNode(\"123\"));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new DecimalType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new DecimalType();| var value = 123.456M;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<decimal>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new DecimalType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new DecimalType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new DecimalType(0, 100);| var value = 123.456M;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_FixedPointLiteral",
        "body": "{| // arrange| var type = new DecimalType();| var literal = CreateFixedPointLiteral();| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<decimal>(value);| Assert.Equal(literal.ToDecimal(), value);| }"
      },
      {
        "name": "ParseLiteral_ExponentialLiteral",
        "body": "{| // arrange| var type = new DecimalType();| var literal = CreateExponentialLiteral();| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<decimal>(value);| Assert.Equal(literal.ToDecimal(), value);| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new DecimalType();| var literal = new IntValueNode(123);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<decimal>(value);| Assert.Equal(literal.ToDecimal(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new DecimalType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new DecimalType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new DecimalType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new DecimalType(1, 100);| var input = 100M;| // act| var literal = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(100M, literal.ToDecimal());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new DecimalType(1, 100);| var input = 101M;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new DecimalType(1, 100);| var input = 1M;| // act| var literal = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(1M, literal.ToDecimal());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new DecimalType(1, 100);| var input = 0M;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new DecimalType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new DecimalType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new DecimalType();| decimal? input = 123M;| // act| var output = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(123M, output.ToDecimal());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new DecimalType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      },
      {
        "name": "ParseValue_HandlesMoreThan6Digits",
        "body": "{| // arrange| var type = new DecimalType();| var input = 1234567.1234567m;| var output = \"1234567.1234567\";| // act| var result = type.ParseValue(input);| // assert| Assert.True(result is FloatValueNode);| Assert.True(result.Value is string);| Assert.Equal(output, (string)result.Value);| }"
      },
      {
        "name": "ParseValue_FormatsToDefaultSignificantDigits",
        "body": "{| // arrange| var type = new DecimalType();| var input = 1234567.891123456789m;| var output = \"1234567.891123456789\";| // act| var result = type.ParseValue(input);| // assert| Assert.True(result is FloatValueNode);| Assert.True(result.Value is string);| Assert.Equal(output, (string)result.Value);| }"
      },
      {
        "name": "ParseValue_Handle12Digits",
        "body": "{| // arrange| var type = new DecimalType();| var input = 1234567.890123456789m;| var output = \"1234567.890123456789\";| // act| var result = type.ParseValue(input);| // assert| Assert.True(result is FloatValueNode);| Assert.True(result.Value is string);| Assert.Equal(output, (string)result.Value);| }"
      },
      {
        "name": "ParseValue_FormatsToSpecifiedNumberOfDecimalDigitsLong",
        "body": "{| // arrange| var type = new DecimalType();| var input = 1234567.890123456789m;| var output = \"1234567.890123456789\";| // act| var result = type.ParseValue(input);| // assert| Assert.True(result is FloatValueNode);| Assert.True(result.Value is string);| Assert.Equal(output, (string)result.Value);| }"
      }
    ]
  },
  {
    "file": "FloatTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new FloatType();| // act| var result = type.IsInstanceOfType(CreateExponentialLiteral());| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new FloatType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_IntLiteral_True",
        "body": "{| // arrange| var type = new FloatType();| // act| var result = type.IsInstanceOfType(new IntValueNode(123));| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new FloatType();| // act| var result = type.IsInstanceOfType(new StringValueNode(\"123\"));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new FloatType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new FloatType();| var value = 123.456;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<double>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new FloatType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new FloatType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new FloatType(0, 100);| var value = 123.456;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_FixedPointLiteral",
        "body": "{| // arrange| var type = new FloatType();| var literal = CreateFixedPointLiteral();| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<double>(value);| Assert.Equal(literal.ToDouble(), value);| }"
      },
      {
        "name": "ParseLiteral_ExponentialLiteral",
        "body": "{| // arrange| var type = new FloatType();| var literal = CreateExponentialLiteral();| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<double>(value);| Assert.Equal(literal.ToDouble(), value);| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new FloatType();| var literal = new IntValueNode(123);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<double>(value);| Assert.Equal(literal.ToDouble(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new FloatType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new FloatType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new FloatType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new FloatType(1, 100);| double input = 100;| // act| var literal = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(100, literal.ToDouble());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new FloatType(1, 100);| double input = 101;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new FloatType(1, 100);| double input = 1;| // act| var literal = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(1, literal.ToDouble());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new FloatType(1, 100);| double input = 0;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new FloatType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new FloatType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new FloatType();| double? input = 123;| // act| var output = (FloatValueNode)type.ParseValue(input);| // assert| Assert.Equal(123, output.ToDouble());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new FloatType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      }
    ]
  },
  {
    "file": "IdTypeTests.cs",
    "methods": [
      {
        "name": "Create_With_Default_Name",
        "body": "{| // arrange| // act| var type = new IdType();| // assert| Assert.Equal(ScalarNames.ID, type.Name);| }"
      },
      {
        "name": "Create_With_Name",
        "body": "{| // arrange| // act| var type = new IdType(\"Foo\");| // assert| Assert.Equal(\"Foo\", type.Name);| }"
      },
      {
        "name": "Create_With_Name_And_Description",
        "body": "{| // arrange| // act| var type = new IdType(\"Foo\", \"Bar\");| // assert| Assert.Equal(\"Foo\", type.Name);| Assert.Equal(\"Bar\", type.Description);| }"
      },
      {
        "name": "EnsureStringTypeKindIsCorret",
        "body": "{| // arrange| var type = new IdType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "IsInstanceOfType_StringValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = new StringValueNode(\"123456\");| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_IntValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = new IntValueNode(123456);| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = NullValueNode.Default;| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_Wrong_ValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = new FloatValueNode(123456.0);| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new IdType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_String",
        "body": "{| // arrange| var type = new IdType();| var input = \"123456\";| // act| var serializedValue = type.Serialize(input);| // assert| Assert.IsType<string>(serializedValue);| Assert.Equal(\"123456\", serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new IdType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Deserialize_String",
        "body": "{| // arrange| var type = new IdType();| var serialized = \"123456\";| // act| var success = type.TryDeserialize(serialized, out var value);| // assert| Assert.True(success);| Assert.Equal(\"123456\", Assert.IsType<string>(value));| }"
      },
      {
        "name": "Deserialize_Int",
        "body": "{| // arrange| var type = SchemaBuilder.New()| .AddQueryType(c => c| .Name(\"QueryRoot\")| .Field(\"abc\")| .Type<IdType>()| .Resolve(\"abc\"))| .Create()| .GetType<IdType>(\"ID\");| var serialized = 123456;| // act| var success = type.TryDeserialize(serialized, out var value);| // assert| Assert.True(success);| Assert.Equal(\"123456\", Assert.IsType<string>(value));| }"
      },
      {
        "name": "Deserialize_Null",
        "body": "{| // arrange| var type = new IdType();| object serialized = null;| // act| var success = type.TryDeserialize(serialized, out var value);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "Deserialize_Float",
        "body": "{| // arrange| var type = new IdType();| var serialized = 1.1f;| // act| var success = type.TryDeserialize(serialized, out var value);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new IdType();| object input = Guid.NewGuid();| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = new StringValueNode(\"123456\");| // act| var output = type.ParseLiteral(input);| // assert| Assert.IsType<string>(output);| Assert.Equal(\"123456\", output);| }"
      },
      {
        "name": "ParseLiteral_IntValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = new IntValueNode(123456);| // act| var output = type.ParseLiteral(input);| // assert| Assert.IsType<string>(output);| Assert.Equal(\"123456\", output);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new IdType();| var input = NullValueNode.Default;| // act| var output = type.ParseLiteral(input);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new IdType();| var input = new FloatValueNode(123456.0);| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new IdType();| // act| // assert| Assert.Throws<ArgumentNullException>(() =>| type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new IdType();| object input = 123.456;| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(input));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new IdType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_String",
        "body": "{| // arrange| var type = new IdType();| object input = \"hello\";| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<StringValueNode>(output);| }"
      }
    ]
  },
  {
    "file": "IntTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new IntType();| var literal = new IntValueNode(1);| // act| var result = type.IsInstanceOfType(literal);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new IntType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new IntType();| // act| var result = type.IsInstanceOfType(new FloatValueNode(1M));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new IntType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new IntType();| var value = 123;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<int>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new IntType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new IntType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new IntType(0, 100);| var value = 200;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new IntType();| var literal = new IntValueNode(1);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<int>(value);| Assert.Equal(literal.ToInt32(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new IntType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new IntType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new IntType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new IntType(1, 100);| var input = 100;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(100, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new IntType(1, 100);| var input = 101;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new IntType(1, 100);| var input = 1;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(1, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new IntType(1, 100);| var input = 0;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new IntType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new IntType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new IntType();| int? input = 123;| // act| var output = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(123, output.ToDouble());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new IntType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      }
    ]
  },
  {
    "file": "LongTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new LongType();| var literal = new IntValueNode(1);| // act| var result = type.IsInstanceOfType(literal);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new LongType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new LongType();| // act| var result = type.IsInstanceOfType(new FloatValueNode(1M));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new LongType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new LongType();| long value = 123;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<long>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new LongType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new LongType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new LongType(0, 100);| long value = 200;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new LongType();| var literal = new IntValueNode(1);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<long>(value);| Assert.Equal(literal.ToInt64(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new LongType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new LongType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new LongType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new LongType(1, 100);| long input = 100;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(100, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new LongType(1, 100);| long input = 101;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new LongType(1, 100);| long input = 1;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(1, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new LongType(1, 100);| long input = 0;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new LongType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new LongType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new LongType();| long? input = 123;| // act| var output = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(123, output.ToDouble());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new LongType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      }
    ]
  },
  {
    "file": "ScalarBindingTests.cs",
    "methods": [
      {
        "name": "Ensure_That_Explicit_Binding_Behavior_Is_Respected_On_Scalars",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryA>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Ensure_That_Implicit_Binding_Behavior_Is_Respected_On_Scalars",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryB>()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ScalarsTests.cs",
    "methods": [
      {
        "name": "Decimal_Is_Float",
        "body": "{| // arrange| var d = 123.123M;| // act| var isScalar = Scalars.TryGetKind(d, out var kind);| // assert| Assert.True(isScalar);| Assert.Equal(ValueKind.Float, kind);| }"
      },
      {
        "name": "NullableDecimal_Is_Float",
        "body": "{| // arrange| decimal? d = 123.123M;| // act| var isScalar = Scalars.TryGetKind(d, out var kind);| // assert| Assert.True(isScalar);| Assert.Equal(ValueKind.Float, kind);| }"
      },
      {
        "name": "Object_Is_Not_A_Serialized_Scalar",
        "body": "{| // arrange| var o = new object();| // act| var isScalar = Scalars.TryGetKind(o, out _);| // assert| Assert.False(isScalar);| }"
      },
      {
        "name": "List_From_ListOfObject",
        "body": "{| // arrange| var list = new List<object>();| // act| var success = Scalars.TryGetKind(list, out var kind);| // assert| Assert.True(success);| Assert.Equal(ValueKind.List, kind);| }"
      },
      {
        "name": "List_From_ArrayOfObject",
        "body": "{| // arrange| var list = new object[0];| // act| var success = Scalars.TryGetKind(list, out var kind);| // assert| Assert.True(success);| Assert.Equal(ValueKind.List, kind);| }"
      },
      {
        "name": "Object_From_Dictionary",
        "body": "{| // arrange| var list = new Dictionary<string, object>();| // act| var success = Scalars.TryGetKind(list, out var kind);| // assert| Assert.True(success);| Assert.Equal(ValueKind.Object, kind);| }"
      }
    ]
  },
  {
    "file": "ShortTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_FloatLiteral_True",
        "body": "{| // arrange| var type = new ShortType();| var literal = new IntValueNode(1);| // act| var result = type.IsInstanceOfType(literal);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral_True",
        "body": "{| // arrange| var type = new ShortType();| // act| var result = type.IsInstanceOfType(NullValueNode.Default);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_StringLiteral_False",
        "body": "{| // arrange| var type = new ShortType();| // act| var result = type.IsInstanceOfType(new FloatValueNode(1M));| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new ShortType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new ShortType();| short value = 123;| // act| var serializedValue = type.Serialize(value);| // assert| Assert.IsType<short>(serializedValue);| Assert.Equal(value, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new ShortType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new ShortType();| var input = \"abc\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "Serialize_MaxValue_Violation",
        "body": "{| // arrange| var type = new ShortType(0, 100);| short value = 200;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(value));| }"
      },
      {
        "name": "ParseLiteral_IntLiteral",
        "body": "{| // arrange| var type = new ShortType();| var literal = new IntValueNode(1);| // act| var value = type.ParseLiteral(literal);| // assert| Assert.IsType<short>(value);| Assert.Equal(literal.ToInt16(), value);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new ShortType();| // act| var output = type.ParseLiteral(NullValueNode.Default);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new ShortType();| var input = new StringValueNode(\"abc\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new ShortType();| // act| // assert| Assert.Throws<ArgumentNullException>(| () => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_MaxValue",
        "body": "{| // arrange| var type = new ShortType(1, 100);| short input = 100;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(100, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MaxValue_Violation",
        "body": "{| // arrange| var type = new ShortType(1, 100);| short input = 101;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_MinValue",
        "body": "{| // arrange| var type = new ShortType(1, 100);| short input = 1;| // act| var literal = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(1, literal.ToByte());| }"
      },
      {
        "name": "ParseValue_MinValue_Violation",
        "body": "{| // arrange| var type = new ShortType(1, 100);| short input = 0;| // act| Action action = () => type.ParseValue(input);| // assert| Assert.Throws<SerializationException>(action);| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new ShortType();| var value = \"123\";| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(value));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new ShortType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      },
      {
        "name": "ParseValue_Nullable",
        "body": "{| // arrange| var type = new ShortType();| short? input = 123;| // act| var output = (IntValueNode)type.ParseValue(input);| // assert| Assert.Equal(123, output.ToDouble());| }"
      },
      {
        "name": "Ensure_TypeKind_is_Scalar",
        "body": "{| // arrange| var type = new ShortType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, kind);| }"
      }
    ]
  },
  {
    "file": "StringTypeTests.cs",
    "methods": [
      {
        "name": "EnsureStringTypeKindIsCorret",
        "body": "{| // arrange| var type = new StringType();| // act| var kind = type.Kind;| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "IsInstanceOfType_ValueNode",
        "body": "{| // arrange| var type = new StringType();| var input = new StringValueNode(\"123456\");| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullValueNode",
        "body": "{| // arrange| var type = new StringType();| var input = NullValueNode.Default;| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_Wrong_ValueNode",
        "body": "{| // arrange| var type = new StringType();| var input = new IntValueNode(123456);| // act| var result = type.IsInstanceOfType(input);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Null_Throws",
        "body": "{| // arrange| var type = new StringType();| // act| // assert| Assert.Throws<ArgumentNullException>(() => type.IsInstanceOfType(null));| }"
      },
      {
        "name": "Serialize_Type",
        "body": "{| // arrange| var type = new StringType();| var input = \"123456\";| // act| var serializedValue = type.Serialize(input);| // assert| Assert.IsType<string>(serializedValue);| Assert.Equal(\"123456\", serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var type = new StringType();| // act| var serializedValue = type.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Wrong_Type_Throws",
        "body": "{| // arrange| var type = new StringType();| object input = 123456;| // act| // assert| Assert.Throws<SerializationException>(| () => type.Serialize(input));| }"
      },
      {
        "name": "ParseLiteral_ValueNode",
        "body": "{| // arrange| var type = new StringType();| var input = new StringValueNode(\"123456\");| // act| var output = type.ParseLiteral(input);| // assert| Assert.IsType<string>(output);| Assert.Equal(\"123456\", output);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var type = new StringType();| var input = NullValueNode.Default;| // act| var output = type.ParseLiteral(input);| // assert| Assert.Null(output);| }"
      },
      {
        "name": "ParseLiteral_Wrong_ValueNode_Throws",
        "body": "{| // arrange| var type = new StringType();| var input = new IntValueNode(123456);| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| // arrange| var type = new StringType();| // act| // assert| Assert.Throws<ArgumentNullException>(() => type.ParseLiteral(null));| }"
      },
      {
        "name": "ParseValue_Wrong_Value_Throws",
        "body": "{| // arrange| var type = new StringType();| object input = 123456;| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseValue(input));| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var type = new StringType();| object input = null;| // act| object output = type.ParseValue(input);| // assert| Assert.IsType<NullValueNode>(output);| }"
      }
    ]
  },
  {
    "file": "TimeSpanTypeTests.cs",
    "methods": [
      {
        "name": "Serialize_TimeSpan_DefaultFormat",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| var timeSpan = TimeSpan.FromMinutes(5);| var expectedValue = \"PT5M\";| // act| var serializedValue = (string)timeSpanType.Serialize(timeSpan);| // assert| Assert.Equal(expectedValue, serializedValue);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| var serializedValue = timeSpanType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_String_Exception",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| Action a = () => timeSpanType.Serialize(\"bad\");| // assert| Assert.Throws<SerializationException>(a);| }"
      },
      {
        "name": "Deserialize_TimeSpan_Weeks",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| var timeSpan = TimeSpan.FromDays(79);| // act| var deserializedValue = (TimeSpan)timeSpanType| .Deserialize(\"P2M2W5D\");| // assert| Assert.Equal(timeSpan, deserializedValue);| }"
      },
      {
        "name": "Deserialize_TimeSpan_CannotEndWithDigits",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| var success = timeSpanType| .TryDeserialize(\"PT5\", out var deserialized);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Deserialize_InvalidString",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| var success = timeSpanType| .TryDeserialize(\"bad\", out var deserialized);| // assert| Assert.False(success);| }"
      },
      {
        "name": "Deserialize_Null_To_Null",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| var success = timeSpanType| .TryDeserialize(null, out var deserialized);| // assert| Assert.True(success);| Assert.Null(deserialized);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| var literal = NullValueNode.Default;| // act| var value = timeSpanType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var timeSpanType = new TimeSpanType();| // act| var literal = timeSpanType.ParseValue(null);| // assert| Assert.IsType<NullValueNode>(literal);| }"
      },
      {
        "name": "PureCodeFirst_AutomaticallyBinds_TimeSpan",
        "body": "{| SchemaBuilder.New()| .AddQueryType<Query>()| .Create()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "PureCodeFirst_Different_TimeSpan_Formats_In_Same_Type",
        "body": "{| SchemaBuilder.New()| .AddQueryType<QueryWithTwoDurations>()| .AddType(new TimeSpanType(format: TimeSpanFormat.DotNet))| .AddType(new TimeSpanType(| \"IsoTimeSpan\",| format: TimeSpanFormat.Iso8601,| bind: BindingBehavior.Explicit))| .Create()| .MakeExecutable()| .Execute(\"{ duration1 duration2 }\")| .ToJson()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "UploadTypeTests.cs",
    "methods": [
      {
        "name": "FileValueNode_Format",
        "body": "{| // arrange| var file = new Mock<IFile>();| file.Setup(t => t.Name).Returns(\"abc.json\");| var objectValue = new ObjectValueNode(| new ObjectFieldNode(| \"abc\",| new FileValueNode(file.Object)));| // act & assert| objectValue.MatchInlineSnapshot(| \"\"\"| { abc: \"abc.json\" }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "UrlTypeTests.cs",
    "methods": [
      {
        "name": "EnsureUrlTypeKindIsCorrect",
        "body": "{| // arrange| var type = new UrlType();| // act| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var urlType = new UrlType();| var expected = new Uri(\"http://domain.test/url\");| var literal = new StringValueNode(expected.AbsoluteUri);| // act| var actual = (Uri)urlType.ParseLiteral(literal);| // assert| Assert.Equal(expected, actual);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var urlType = new UrlType();| var literal = NullValueNode.Default;| // act| var value = urlType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseLiteral_RelativeUrl",
        "body": "{| // arrange| var urlType = new UrlType();| var expected = new Uri(\"/relative/path\", UriKind.Relative);| var literal = new StringValueNode($\"{expected}\");| // act| var actual = (Uri)urlType.ParseLiteral(literal);| // Assert| Assert.Equal(expected, actual);| }"
      },
      {
        "name": "ParseLiteral_Invalid_Url_Throws",
        "body": "{| // arrange| var type = new UrlType();| var input = new StringValueNode(\"$*^domain.test\");| // act| // assert| Assert.Throws<SerializationException>(| () => type.ParseLiteral(input));| }"
      },
      {
        "name": "ParseValue_Url",
        "body": "{| // arrange| var urlType = new UrlType();| var uri = new Uri(\"http://domain.test/url\");| var expectedLiteralValue = uri.AbsoluteUri;| // act| var stringLiteral =| (StringValueNode)urlType.ParseValue(uri);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Encoded",
        "body": "{| // arrange| var urlType = new UrlType();| var uri = new Uri(\"http://domain.test/ä+😄?q=a/α\");| var expectedLiteralValue = uri.AbsoluteUri;| // act| var stringLiteral =| (StringValueNode)urlType.ParseValue(uri);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var dateType = new UrlType();| // act| var serializedValue = dateType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Url",
        "body": "{| // arrange| var urlType = new UrlType();| var uri = new Uri(\"http://domain.test/url\");| // act| var serializedValue = urlType.Serialize(uri);| // assert| Assert.Equal(uri.AbsoluteUri, Assert.IsType<string>(serializedValue));| }"
      },
      {
        "name": "Serialize_RelativeUrl",
        "body": "{| // arrange| var urlType = new UrlType();| var uri = new Uri(\"/relative/path\", UriKind.Relative);| // act| var serializedValue = urlType.Serialize(uri);| // assert| Assert.Equal(uri.ToString(), Assert.IsType<string>(serializedValue));| }"
      },
      {
        "name": "IsInstanceOfType_GivenUriAsStringValueNode_ReturnsTrue",
        "body": "{| // Arrange| var urlType = new UrlType();| var uri = new Uri(\"http://domain.test/url\");| // Act| var isUrlType = urlType.IsInstanceOfType(new StringValueNode(uri.AbsoluteUri));| // Assert| Assert.True(isUrlType);| }"
      },
      {
        "name": "IsInstanceOfType_GivenNullValueNode_ReturnsTrue",
        "body": "{| // arrange| var urlType = new UrlType();| // act| var isUrlType = urlType.IsInstanceOfType(new NullValueNode(null));| // assert| Assert.True(isUrlType);| }"
      },
      {
        "name": "IsInstanceOfType_GivenInvalidUriAsStringLiteral_False",
        "body": "{| // arrange| var urlType = new UrlType();| // act| var isUrlType = urlType.IsInstanceOfType(| new StringValueNode(\"$*^domain.test\"));| // assert| Assert.False(isUrlType);| }"
      },
      {
        "name": "IsInstanceOfType_GivenNull_ThrowsArgumentException",
        "body": "{| // arrange| var urlType = new UrlType();| // act| Action action = () => urlType.IsInstanceOfType(null);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "IsInstanceOfType_GivenNonUrlValueNode_ReturnsFalse",
        "body": "{| // arrange| var urlType = new UrlType();| var intValue = new IntValueNode(1);| // act| var isUrlType = urlType.IsInstanceOfType(intValue);| // assert| Assert.False(isUrlType);| }"
      }
    ]
  },
  {
    "file": "UuidTypeTests.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_StringLiteral",
        "body": "{| // arrange| var uuidType = new UuidType();| var guid = Guid.NewGuid();| // act| var isOfType = uuidType.IsInstanceOfType(guid);| // assert| Assert.True(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_NullLiteral",
        "body": "{| // arrange| var uuidType = new UuidType();| var literal = new NullValueNode(null);| // act| var isOfType = uuidType.IsInstanceOfType(literal);| // assert| Assert.True(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_IntLiteral",
        "body": "{| // arrange| var uuidType = new UuidType();| var literal = new IntValueNode(123);| // act| var isOfType = uuidType.IsInstanceOfType(literal);| // assert| Assert.False(isOfType);| }"
      },
      {
        "name": "IsInstanceOfType_Null",
        "body": "{| // arrange| var uuidType = new UuidType();| // act| void Action() => uuidType.IsInstanceOfType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Serialize_Guid",
        "body": "{| // arrange| var uuidType = new UuidType();| var guid = Guid.NewGuid();| // act| var serializedValue = uuidType.Serialize(guid);| // assert| Assert.Equal(guid.ToString(\"D\"), Assert.IsType<string>(serializedValue));| }"
      },
      {
        "name": "Serialize_Null",
        "body": "{| // arrange| var uuidType = new UuidType();| // act| var serializedValue = uuidType.Serialize(null);| // assert| Assert.Null(serializedValue);| }"
      },
      {
        "name": "Serialize_Int",
        "body": "{| // arrange| var uuidType = new UuidType();| var value = 123;| // act| void Action() => uuidType.Serialize(value);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "Deserialize_Null",
        "body": "{| // arrange| var uuidType = new UuidType();| // act| var success = uuidType.TryDeserialize(null, out var o);| // assert| Assert.True(success);| Assert.Null(o);| }"
      },
      {
        "name": "Deserialize_String",
        "body": "{| // arrange| var uuidType = new UuidType();| var guid = Guid.NewGuid();| // act| var success = uuidType.TryDeserialize(guid.ToString(\"N\"), out var o);| // assert| Assert.True(success);| Assert.Equal(guid, o);| }"
      },
      {
        "name": "Deserialize_Guid",
        "body": "{| // arrange| var uuidType = new UuidType();| var guid = Guid.NewGuid();| // act| var success = uuidType.TryDeserialize(guid, out var o);| // assert| Assert.True(success);| Assert.Equal(guid, o);| }"
      },
      {
        "name": "Deserialize_Int",
        "body": "{| // arrange| var uuidType = new UuidType();| var value = 123;| // act| var success = uuidType.TryDeserialize(value, out _);| // assert| Assert.False(success);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode",
        "body": "{| // arrange| var uuidType = new UuidType();| var expected = Guid.NewGuid();| var literalA = new StringValueNode(expected.ToString(\"N\"));| var literalB = new StringValueNode(expected.ToString(\"P\"));| // act| var runtimeValueA = (Guid)uuidType.ParseLiteral(literalA)!;| var runtimeValueB = (Guid)uuidType.ParseLiteral(literalB)!;| // assert| Assert.Equal(expected, runtimeValueA);| Assert.Equal(expected, runtimeValueB);| }"
      },
      {
        "name": "ParseLiteral_StringValueNode_Enforce_Format",
        "body": "{| // arrange| var uuidType = new UuidType(defaultFormat: 'P', enforceFormat: true);| var expected = Guid.NewGuid();| var literal = new StringValueNode(expected.ToString(\"N\"));| // act| void Action() => uuidType.ParseLiteral(literal);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ParseLiteral_IntValueNode",
        "body": "{| // arrange| var uuidType = new UuidType();| var literal = new IntValueNode(123);| // act| void Action() => uuidType.ParseLiteral(literal);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "ParseLiteral_NullValueNode",
        "body": "{| // arrange| var uuidType = new UuidType();| var literal = NullValueNode.Default;| // act| var value = uuidType.ParseLiteral(literal);| // assert| Assert.Null(value);| }"
      },
      {
        "name": "ParseLiteral_Null",
        "body": "{| // arrange| var uuidType = new UuidType();| // act| void Action() => uuidType.ParseLiteral(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "ParseValue_Guid",
        "body": "{| // arrange| var uuidType = new UuidType();| var expected = Guid.NewGuid();| var expectedLiteralValue = expected.ToString(\"D\");| // act| var stringLiteral = (StringValueNode)uuidType.ParseValue(expected);| // assert| Assert.Equal(expectedLiteralValue, stringLiteral.Value);| }"
      },
      {
        "name": "ParseValue_Null",
        "body": "{| // arrange| var uuidType = new UuidType();| Guid? guid = null;| // act| var stringLiteral = uuidType.ParseValue(guid);| // assert| Assert.True(stringLiteral is NullValueNode);| Assert.Null(((NullValueNode)stringLiteral).Value);| }"
      },
      {
        "name": "ParseValue_Int",
        "body": "{| // arrange| var uuidType = new UuidType();| var value = 123;| // act| void Action() => uuidType.ParseValue(value);| // assert| Assert.Throws<SerializationException>(Action);| }"
      },
      {
        "name": "EnsureDateTypeKindIsCorrect",
        "body": "{| // arrange| var type = new UuidType();| // assert| Assert.Equal(TypeKind.Scalar, type.Kind);| }"
      },
      {
        "name": "Specify_Invalid_Format",
        "body": "{| // arrange| // act| void Action() => new UuidType(defaultFormat: 'z');| // assert| Assert.Throws<ArgumentException>(Action).Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "TypeExtensionsTests.cs",
    "methods": [
      {
        "name": "IsEquals_TwoStringNonNullTypes_True",
        "body": "{| // arrange| var x = new NonNullType(new StringType());| var y = new NonNullType(new StringType());| // act| var result = x.IsEqualTo(y);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEquals_TwoStringListTypes_True",
        "body": "{| // arrange| var x = new ListType(new StringType());| var y = new ListType(new StringType());| // act| var result = x.IsEqualTo(y);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEquals_TwoStringNonNullListTypes_True",
        "body": "{| // arrange| var x = new NonNullType(new ListType(new StringType()));| var y = new NonNullType(new ListType(new StringType()));| // act| var result = x.IsEqualTo(y);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEquals_NonNullStringListToStringList_False",
        "body": "{| // arrange| var x = new NonNullType(new ListType(new StringType()));| var y = new ListType(new StringType());| // act| var result = x.IsEqualTo(y);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsEquals_StringToSelf_True",
        "body": "{| // arrange| var x = new StringType();| // act| var result = x.IsEqualTo(x);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEquals_StringListToIntList_False",
        "body": "{| // arrange| var x = new ListType(new StringType());| var y = new ListType(new IntType());| // act| var result = x.IsEqualTo(y);| // assert| Assert.False(result);| }"
      },
      {
        "name": "NamedType",
        "body": "{| // arrange| var type = new NonNullType(| new ListType(| new NonNullType(| new StringType())));| // act| var stringType = type.NamedType() as StringType;| // assert| Assert.NotNull(stringType);| }"
      },
      {
        "name": "NamedType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.NamedType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsNonNullType_True",
        "body": "{| // arrange| var type = new NonNullType(new StringType());| // act| var result = type.IsNonNullType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsNonNullType_False",
        "body": "{| // arrange| var type = new StringType();| // act| var result = type.IsNonNullType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsNonNullType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsNonNullType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsCompositeType_ObjectType_True",
        "body": "{| // arrange| IType type = Mock.Of<ObjectType>();| // act| var result = type.IsCompositeType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsCompositeType_InterfaceType_True",
        "body": "{| // arrange| IType type = Mock.Of<InterfaceType>();| // act| var result = type.IsCompositeType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsCompositeType_UnionType_True",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsCompositeType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsCompositeType_False",
        "body": "{| // arrange| var type = new StringType();| // act| var result = type.IsCompositeType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsCompositeType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsCompositeType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsComplexType_ObjectType_True",
        "body": "{| // arrange| IType type = Mock.Of<ObjectType>();| // act| var result = type.IsComplexType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsComplexType_InterfaceType_True",
        "body": "{| // arrange| IType type = Mock.Of<InterfaceType>();| // act| var result = type.IsComplexType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsComplexType_UnionType_False",
        "body": "{| // arrange| var type = new Mock<UnionType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Union);| // act| var result = type.Object.IsComplexType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsComplexType_False",
        "body": "{| // arrange| var type = new StringType();| // act| var result = type.IsComplexType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsComplexType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsComplexType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsLeafType_ScalarType_True",
        "body": "{| // arrange| var type = new StringType();| // act| var result = type.IsLeafType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsLeafType_EnumType_True",
        "body": "{| // arrange| var type = new Mock<EnumType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Enum);| // act| var result = type.Object.IsLeafType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsLeafType_UnionType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsLeafType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsLeafType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsLeafType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsListType_StringListType_True",
        "body": "{| // arrange| IType type = new ListType(new StringType());| // act| var result = type.IsListType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsListType_UnionType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsListType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsListType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsListType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsScalarType_StringType_True",
        "body": "{| // arrange| IType type = new StringType();| // act| var result = type.IsScalarType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsScalarType_UnionType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsScalarType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsScalarType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsScalarType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsObjectType_True",
        "body": "{| // arrange| var type = new Mock<ObjectType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Object);| // act| var result = type.Object.IsObjectType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsObjectType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsObjectType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsObjectType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsObjectType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsInterfaceType_True",
        "body": "{| // arrange| IType type = Mock.Of<InterfaceType>();| // act| var result = type.IsInterfaceType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsScalarType_False",
        "body": "{| // arrange| var type = new Mock<UnionType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Union);| // act| var result = type.Object.IsScalarType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInterfaceType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsInterfaceType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsEnumType_True",
        "body": "{| // arrange| var type = new Mock<EnumType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Enum);| // act| var result = type.Object.IsEnumType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsEnumType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsEnumType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsEnumType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsEnumType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsUnionType_True",
        "body": "{| // arrange| var type = new Mock<UnionType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.Union);| // act| var result = type.Object.IsUnionType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsUnionType_False",
        "body": "{| // arrange| IType type = Mock.Of<ObjectType>();| // act| var result = type.IsUnionType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsUnionType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsUnionType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsInputObjectType_True",
        "body": "{| // arrange| var type = new Mock<InputObjectType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.InputObject);| // act| var result = type.Object.IsInputObjectType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInputObjectType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsInputObjectType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInputObjectType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsInputObjectType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsInputType_True",
        "body": "{| // arrange| IType type = new StringType();| // act| var result = type.IsInputType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInputType_False",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsInputType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInputType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsInputType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsOutputType_True",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsOutputType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsOutputType_False",
        "body": "{| // arrange| IType type = Mock.Of<InputObjectType>();| // act| var result = type.IsOutputType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsOutputType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsOutputType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsAbstractType_InterfaceType_True",
        "body": "{| // arrange| IType type = Mock.Of<InterfaceType>();| // act| var result = type.IsAbstractType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsAbstractType_UnionType_True",
        "body": "{| // arrange| IType type = Mock.Of<UnionType>();| // act| var result = type.IsAbstractType();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsAbstractType_False",
        "body": "{| // arrange| var type = new Mock<InputObjectType>();| type.SetupGet(t => t.Kind).Returns(TypeKind.InputObject);| // act| var result = type.Object.IsAbstractType();| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsAbstractType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsAbstractType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "IsType_StringType_True",
        "body": "{| // arrange| IType type = new StringType();| // act| var result = type.IsType(TypeKind.Scalar);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsType_NonNullStringType_True",
        "body": "{| // arrange| IType type = new NonNullType(new StringType());| // act| var result = type.IsType(TypeKind.Scalar);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsType_InputObjectType_False",
        "body": "{| // arrange| IType type = Mock.Of<InputObjectType>();| // act| var result = type.IsType(TypeKind.Scalar);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsType_Type_Is_Null",
        "body": "{| // act| void Action() => TypeExtensions.IsAbstractType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "TypeFactoryTests.cs",
    "methods": [
      {
        "name": "CreateObjectType",
        "body": "{| // arrange| var source = @\"| type Simple {| a: String| b: [String]| }| schema { query: Simple }\";| var resolvers = new| {| Simple = new { A = \"hello\", B = new[] { \"hello\", }, },| };| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddRootResolver(resolvers)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ObjectFieldDeprecationReason",
        "body": "{| // arrange| var source = @\"| type Simple {| a: String @deprecated(reason: \"\"reason123\"\")| }| schema { query: Simple }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .Use(_ => _)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "CreateObjectTypeDescriptions",
        "body": "{| // arrange| var source = @\"| \"\"SimpleDesc\"\"| type Simple {| \"\"ADesc\"\"| a(\"\"ArgDesc\"\"arg: String): String| }| schema { query: Simple }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .Use(_ => _)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "CreateInterfaceType",
        "body": "{| // arrange| var source = \"interface Simple { a: String b: [String] }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Simple\");| Assert.Equal(\"Simple\", type.Name);| Assert.Equal(2, type.Fields.Count);| Assert.True(type.Fields.ContainsField(\"a\"));| Assert.False(type.Fields[\"a\"].Type.IsNonNullType());| Assert.False(type.Fields[\"a\"].Type.IsListType());| Assert.True(type.Fields[\"a\"].Type.IsScalarType());| Assert.Equal(\"String\", type.Fields[\"a\"].Type.TypeName());| Assert.True(type.Fields.ContainsField(\"b\"));| Assert.False(type.Fields[\"b\"].Type.IsNonNullType());| Assert.True(type.Fields[\"b\"].Type.IsListType());| Assert.False(type.Fields[\"b\"].Type.IsScalarType());| Assert.Equal(\"String\", type.Fields[\"b\"].Type.TypeName());| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "InterfaceFieldDeprecationReason",
        "body": "{| // arrange| var source = @\"| interface Simple {| a: String @deprecated(reason: \"\"reason123\"\")| }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Simple\");| Assert.True(type.Fields[\"a\"].IsDeprecated);| Assert.Equal(\"reason123\", type.Fields[\"a\"].DeprecationReason);| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "InterfaceFieldDeprecationWithoutReason",
        "body": "{| // arrange| var source = @\"| interface Simple {| a: String @deprecated| }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<InterfaceType>(\"Simple\");| Assert.True(type.Fields[\"a\"].IsDeprecated);| Assert.Equal(| WellKnownDirectives.DeprecationDefaultReason,| type.Fields[\"a\"].DeprecationReason);| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "CreateUnion",
        "body": "{| // arrange| var objectTypeA = new ObjectType(d => d| .Name(\"A\")| .Field(\"a\")| .Type<StringType>()| .Resolve(\"a\"));| var objectTypeB = new ObjectType(d => d| .Name(\"B\")| .Field(\"a\")| .Type<StringType>()| .Resolve(\"b\"));| var source = \"union X = A | B\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .AddType(objectTypeA)| .AddType(objectTypeB)| .Create();| // assert| var type = schema.GetType<UnionType>(\"X\");| Assert.Equal(\"X\", type.Name);| Assert.Equal(2, type.Types.Count);| Assert.Equal(\"A\", type.Types.First().Key);| Assert.Equal(\"B\", type.Types.Last().Key);| }"
      },
      {
        "name": "CreateEnum",
        "body": "{| // arrange| var source = \"enum Abc { A B C }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .Create();| // assert| var type = schema.GetType<EnumType>(\"Abc\");| Assert.Equal(\"Abc\", type.Name);| Assert.Collection(type.Values,| t => Assert.Equal(\"A\", t.Name),| t => Assert.Equal(\"B\", t.Name),| t => Assert.Equal(\"C\", t.Name));| }"
      },
      {
        "name": "EnumValueDeprecationReason",
        "body": "{| // arrange| var source = @\"| enum Abc {| A| B @deprecated(reason: \"\"reason123\"\")| C| }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .Create();| // assert| var type = schema.GetType<EnumType>(\"Abc\");| var value = type.Values.FirstOrDefault(t => t.Name == \"B\");| Assert.NotNull(value);| Assert.True(value.IsDeprecated);| Assert.Equal(\"reason123\", value.DeprecationReason);| }"
      },
      {
        "name": "CreateInputObjectType",
        "body": "{| // arrange| var source = @\"| input Simple {| a: String @bind(to: \"\"Name\"\")| b: [String] @bind(to: \"\"Friends\"\")| }\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .BindRuntimeType<SimpleInputObject>(\"Simple\")| .Create();| // assert| var type = schema.GetType<InputObjectType>(\"Simple\");| Assert.Equal(\"Simple\", type.Name);| Assert.Equal(2, type.Fields.Count);| Assert.True(type.Fields.ContainsField(\"a\"));| Assert.False(type.Fields[\"a\"].Type.IsNonNullType());| Assert.False(type.Fields[\"a\"].Type.IsListType());| Assert.True(type.Fields[\"a\"].Type.IsScalarType());| Assert.Equal(\"String\", type.Fields[\"a\"].Type.TypeName());| Assert.True(type.Fields.ContainsField(\"b\"));| Assert.False(type.Fields[\"b\"].Type.IsNonNullType());| Assert.True(type.Fields[\"b\"].Type.IsListType());| Assert.False(type.Fields[\"b\"].Type.IsScalarType());| Assert.Equal(\"String\", type.Fields[\"b\"].Type.TypeName());| }"
      },
      {
        "name": "CreateDirectiveType",
        "body": "{| // arrange| var source = \"directive @foo(a:String) on QUERY\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .Create();| // assert| var type = schema.GetDirectiveType(\"foo\");| Assert.Equal(\"foo\", type.Name);| Assert.False(type.IsRepeatable);| Assert.Collection(| type.Locations.AsEnumerable(),| t => Assert.Equal(DirectiveLocation.Query, t));| Assert.Collection(| type.Arguments,| t =>| {| Assert.Equal(\"a\", t.Name);| Assert.IsType<StringType>(t.Type);| });| }"
      },
      {
        "name": "CreateRepeatableDirectiveType",
        "body": "{| // arrange| var source = \"directive @foo(a:String) repeatable on QUERY\";| // act| var schema = SchemaBuilder.New()| .AddDocumentFromString(source)| .AddQueryType<DummyQuery>()| .Create();| // assert| var type = schema.GetDirectiveType(\"foo\");| Assert.Equal(\"foo\", type.Name);| Assert.True(type.IsRepeatable);| Assert.Collection(type.Locations.AsEnumerable(),| t => Assert.Equal(DirectiveLocation.Query, t));| Assert.Collection(type.Arguments,| t =>| {| Assert.Equal(\"a\", t.Name);| Assert.IsType<StringType>(t.Type);| });| }"
      }
    ]
  },
  {
    "file": "UnionTypeAttributeTests.cs",
    "methods": [
      {
        "name": "SetName_Union_Interface",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddUnionType<IUnion1>()| .AddType<Foo>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.NotNull(schema.GetType<UnionType>(\"Abc\"));| }"
      },
      {
        "name": "UnionTypeAttribute_Infer_Union",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddType<IUnion2>()| .AddType<Union2Type1>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "UnionTypeExtensionTests.cs",
    "methods": [
      {
        "name": "UnionTypeExtension_AddType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType<FooTypeExtension>()| .Create();| // assert| var type = schema.GetType<FooType>(\"Foo\");| Assert.Collection(type.Types.Values,| t => Assert.IsType<AType>(t),| t => Assert.IsType<BType>(t));| }"
      },
      {
        "name": "UnionTypeExtension_SetTypeContextData",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new UnionTypeExtension(d => d| .Name(\"Foo\")| .Extend()| .OnBeforeCreate(c => c.ContextData[\"foo\"] = \"bar\")))| .Create();| // assert| var type = schema.GetType<UnionType>(\"Foo\");| Assert.True(type.ContextData.ContainsKey(\"foo\"));| }"
      },
      {
        "name": "UnionTypeExtension_SetDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new UnionTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy\")))| .AddDirectiveType<DummyDirective>()| .Create();| // assert| var type = schema.GetType<UnionType>(\"Foo\");| Assert.True(type.Directives.ContainsDirective(\"dummy\"));| }"
      },
      {
        "name": "UnionTypeExtension_ReplaceDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new UnionType(t => t| .Name(\"Foo\")| .Type<AType>()| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"a\"))))| .AddType(new UnionTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_arg\", new ArgumentNode(\"a\", \"b\"))))| .AddDirectiveType<DummyWithArgDirective>()| .Create();| // assert| var type = schema.GetType<UnionType>(\"Foo\");| var value = type.Directives[\"dummy_arg\"]| .First().GetArgumentValue<string>(\"a\");| Assert.Equal(\"b\", value);| }"
      },
      {
        "name": "UnionTypeExtension_CopyDependencies_ToType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType<FooType>()| .AddType(new UnionTypeExtension(d => d| .Name(\"Foo\")| .Type<BType>()))| .Create();| // assert| var type = schema.GetType<FooType>(\"Foo\");| Assert.Collection(type.Types.Values,| t => Assert.IsType<AType>(t),| t => Assert.IsType<BType>(t));| }"
      },
      {
        "name": "UnionTypeExtension_RepeatableDirectiveOnType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryType>()| .AddType(new UnionType(t => t| .Name(\"Foo\")| .Type<AType>()| .Directive(\"dummy_rep\")))| .AddType(new UnionTypeExtension(d => d| .Name(\"Foo\")| .Directive(\"dummy_rep\")))| .AddDirectiveType<RepeatableDummyDirective>()| .Create();| // assert| var type = schema.GetType<UnionType>(\"Foo\");| var count = type.Directives[\"dummy_rep\"].Count();| Assert.Equal(2, count);| }"
      }
    ]
  },
  {
    "file": "UnionTypeTests.cs",
    "methods": [
      {
        "name": "UnionType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddUnionType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Type<FooType>()| .Type<BarType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<UnionType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "UnionType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddUnionType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Type<FooType>()| .Type<BarType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<UnionType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericUnionType_DynamicName",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddUnionType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Type<FooType>()| .Type<BarType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<UnionType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "GenericUnionType_DynamicName_NonGeneric",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddUnionType(d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Type<FooType>()| .Type<BarType>())| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| var type = schema.GetType<UnionType>(\"StringFoo\");| Assert.NotNull(type);| }"
      },
      {
        "name": "DeclareUnion_ByProvidingExplicitTypeSet",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"FooOrBar\")| .Type<FooType>()| .Type<BarType>()));| // assert| Assert.Collection(fooBarType.Types.Values,| t => Assert.Equal(\"Foo\", t.Name),| t => Assert.Equal(\"Bar\", t.Name));| }"
      },
      {
        "name": "DeclareUnion_InferTypeSetFromMarkerInterface",
        "body": "{| // arrange| // act| var fooBarType = CreateType(| new UnionType<IFooOrBar>(),| b => b.AddTypes(new FooType(), new BarType()));| // assert| Assert.Collection(fooBarType.Types.Values,| t => Assert.Equal(\"Foo\", t.Name),| t => Assert.Equal(\"Bar\", t.Name));| }"
      },
      {
        "name": "DeclareUnion_MarkerInterfaceAndTypeSet",
        "body": "{| // arrange| // act| var fooBarType = CreateType(| new UnionType<IFooOrBar>(c => c.Type<BazType>()),| b => b.AddTypes(new FooType(), new BarType()));| // assert| Assert.Collection(fooBarType.Types.Values,| t => Assert.Equal(\"Baz\", t.Name),| t => Assert.Equal(\"Foo\", t.Name),| t => Assert.Equal(\"Bar\", t.Name));| }"
      },
      {
        "name": "UnionType_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"BarUnion\")| .Directive(\"foo\")| .Type<FooType>()| .Type<BarType>()),| b => b.AddDirectiveType<FooDirectiveType>());| // assert| Assert.NotEmpty(fooBarType.Directives[\"foo\"]);| }"
      },
      {
        "name": "UnionType_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"BarUnion\")| .Directive(\"foo\")| .Type<FooType>()| .Type<BarType>()),| b => b.AddDirectiveType<FooDirectiveType>());| // assert| Assert.NotEmpty(fooBarType.Directives[\"foo\"]);| }"
      },
      {
        "name": "UnionType_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"BarUnion\")| .Directive(new DirectiveNode(\"foo\"))| .Type<FooType>()| .Type<BarType>()),| b => b.AddDirectiveType<FooDirectiveType>());| // assert| Assert.NotEmpty(fooBarType.Directives[\"foo\"]);| }"
      },
      {
        "name": "UnionType_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"BarUnion\")| .Directive(new FooDirective())| .Type<FooType>()| .Type<BarType>()),| b => b.AddDirectiveType<FooDirectiveType>());| // assert| Assert.NotEmpty(fooBarType.Directives[\"foo\"]);| }"
      },
      {
        "name": "UnionType_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var fooBarType = CreateType(new UnionType(d => d| .Name(\"BarUnion\")| .Directive<FooDirective>()| .Type<FooType>()| .Type<BarType>()),| b => b.AddDirectiveType<FooDirectiveType>());| // assert| Assert.NotEmpty(fooBarType.Directives[\"foo\"]);| }"
      },
      {
        "name": "UnionType_InUnionType_ThrowsSchemaException",
        "body": "{| // arrange| // act| var ex = Record.Exception(| () => SchemaBuilder| .New()| .AddQueryType(x => x.Name(\"Query\").Field(\"Foo\").Resolve(\"bar\"))| .AddType<UnionType<UnionType<Foo>>>()| .ModifyOptions(o => o.StrictRuntimeTypeValidation = true)| .Create());| // assert| Assert.IsType<SchemaException>(ex);| ex.Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DirectiveValidationRuleTests.cs",
    "methods": [
      {
        "name": "RejectRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectError(@\"| type Query { stub: String }| directive @badDirective(| badArg: String! @deprecated| ) on FIELD| \");| }"
      },
      {
        "name": "AcceptNonRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| directive @badDirective(| optionalArg: String @deprecated| ) on FIELD| \");| }"
      },
      {
        "name": "RejectArgumentsWithInvalidName",
        "body": "{| ExpectError(@\"| type Query { stub: String }| directive @badDirective(| __badArg: String| ) on FIELD| \");| }"
      },
      {
        "name": "RejectDirectiveWithInvalidName",
        "body": "{| ExpectError(@\"| type Query { stub: String }| directive @__badDirective() on FIELD| \");| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeValidationRuleTests.cs",
    "methods": [
      {
        "name": "RejectInputTypeWithoutFields",
        "body": "{| ExpectError(\"\"\"| type Query { stub: String }| input Foo {}| \"\"\");| }"
      },
      {
        "name": "AcceptInputTypeWithFields",
        "body": "{| ExpectValid(\"\"\"| type Query { stub: String }| input Foo {| nullable: String| nonNullable: String!| defaultNullable: String = \"Foo\"| defaultNonNullable: String! = \"Foo\"| }| \"\"\");| }"
      },
      {
        "name": "AcceptInputTypeWithFieldsAndDirectives",
        "body": "{| ExpectValid(\"\"\"| type Query { stub: String }| input Foo @inputObject {| nullable: String @inputFieldDefinition| nonNullable: String! @inputFieldDefinition| defaultNullable: String = \"Foo\" @inputFieldDefinition| defaultNonNullable: String! = \"Foo\" @inputFieldDefinition| }| directive @inputFieldDefinition on INPUT_FIELD_DEFINITION| directive @inputObject on INPUT_OBJECT| \"\"\");| }"
      },
      {
        "name": "RejectFieldsWithInvalidName",
        "body": "{| ExpectError(\"\"\"| type Query { stub: String }| input Foo {| __badField: String| }| \"\"\");| }"
      },
      {
        "name": "AcceptOneOfWithNullableFields",
        "body": "{| ExpectValid(\"\"\"| type Query { stub: String }| input Foo @oneOf {| first: String| second: Int| }| \"\"\");| }"
      },
      {
        "name": "RejectOneOfWithNullableFields",
        "body": "{| ExpectError(\"\"\"| type Query { stub: String }| input Foo @oneOf {| first: String!| second: Int!| }| \"\"\");| }"
      },
      {
        "name": "AcceptNonRequiredInputThatIsDeprecated",
        "body": "{| ExpectValid(\"\"\"| type Query { stub: String }| input Foo {| field: Int @deprecated| }| \"\"\");| }"
      },
      {
        "name": "RejectRequiredFieldThatIsDeprecated",
        "body": "{| ExpectError(\"\"\"| type Query { stub: String }| input Foo {| field: Int! @deprecated| }| \"\"\");| }"
      },
      {
        "name": "AcceptsBreakableCircularReferences",
        "body": "{| ExpectValid(\"\"\"| type Query {| field(arg: SomeInputObject): String| }| input SomeInputObject {| self: SomeInputObject| arrayOfSelf: [SomeInputObject]| nonNullArrayOfSelf: [SomeInputObject]!| nonNullArrayOfNonNullSelf: [SomeInputObject!]!| intermediateSelf: AnotherInputObject| }| input AnotherInputObject {| parent: SomeInputObject| }| \"\"\");| }"
      },
      {
        "name": "RejectsNonBreakableDirectCircularReference",
        "body": "{| ExpectError(\"\"\"| type Query {| field(arg: SomeInputObject): String| }| input SomeInputObject {| nonNullSelf: SomeInputObject!| }| \"\"\");| }"
      },
      {
        "name": "RejectsCircularReferenceThroughOtherType",
        "body": "{| ExpectError(\"\"\"| type Query {| field(arg: SomeInputObject): String| }| input SomeInputObject {| startLoop: AnotherInputObject!| }| input AnotherInputObject {| nextInLoop: YetAnotherInputObject!| }| input YetAnotherInputObject {| closeLoop: SomeInputObject!| }| \"\"\");| }"
      },
      {
        "name": "RejectsMultipleCircularReferences",
        "body": "{| ExpectError(\"\"\"| type Query {| field(arg: SomeInputObject): String| }| input SomeInputObject {| startLoop: AnotherInputObject!| }| input AnotherInputObject {| closeLoop: SomeInputObject!| startSecondLoop: YetAnotherInputObject!| }| input YetAnotherInputObject {| closeSecondLoop: AnotherInputObject!| nonNullSelf: YetAnotherInputObject!| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "InterfaceHasAtLeastOneImplementationRuleTests.cs",
    "methods": [
      {
        "name": "RejectInterfaceWithNoImplementor",
        "body": "{| ExpectError(@\"| type Query { stub: Foo }| interface Foo {string: String}| \");| }"
      },
      {
        "name": "AcceptInterfaceWithOneImplementor",
        "body": "{| ExpectValid(@\"| type Query { stub: Foo }| type Bar implements Foo { string: String }| interface Foo { string: String }| \");| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeValidationRuleTests.cs",
    "methods": [
      {
        "name": "RejectInterfaceTypeWithoutFields",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Bar implements Foo { str: String! }| interface Foo {}| \");| }"
      },
      {
        "name": "AcceptInterfaceTypeWithFields",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Bar implements Foo {| nullable: String| nonNullable: String!| }| interface Foo {| nullable: String| nonNullable: String!| }| \");| }"
      },
      {
        "name": "AcceptInterfaceTypeWithFieldsAndDirectives",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Bar implements Foo {| nullable: String| nonNullable: String!| }| interface Foo @interfaceInterface {| nullable: String @interfaceFieldDefinition| nonNullable: String! @interfaceFieldDefinition| }| directive @interfaceFieldDefinition on FIELD_DEFINITION| directive @interfaceInterface on INTERFACE| \");| }"
      },
      {
        "name": "RejectFieldsWithInvalidName",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Bar implements Foo {| nonNullable: String!| }| interface Foo {| __badField: String| }| \");| }"
      },
      {
        "name": "AcceptInterfaceWithCorrectImplementation",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Bar implements Foo {| first: String| }| interface Foo implements Test {| first: String| }| interface Test {| first: String| }| \");| }"
      },
      {
        "name": "AcceptNonRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| interface Foo {| field(arg: Int @deprecated): String| }| \");| }"
      },
      {
        "name": "RejectNonRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Bar implements Foo {| field(arg: Int! @deprecated): String| }| interface Foo {| field(arg: Int! @deprecated): String| }| \");| }"
      }
    ]
  },
  {
    "file": "ObjectTypeValidationRuleTests.cs",
    "methods": [
      {
        "name": "RejectObjectTypeWithoutFields",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo {}| \");| }"
      },
      {
        "name": "AcceptObjectTypeWithFields",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Foo {| nullable: String| nonNullable: String!| }| \");| }"
      },
      {
        "name": "AcceptObjectTypeWithFieldsAndDirectives",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Foo @objectObject {| nullable: String @objectFieldDefinition| nonNullable: String! @objectFieldDefinition| }| directive @objectFieldDefinition on FIELD_DEFINITION| directive @objectObject on OBJECT| \");| }"
      },
      {
        "name": "RejectFieldsWithInvalidName",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo {| __badField: String| }| \");| }"
      },
      {
        "name": "AcceptInterfaceWithCorrectImplementation",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Foo implements Test {| first: String| second(foo: String): String| third(foo: String!): String| strengthen: String!| }| interface Test {| first: String| second(foo: String): String| third(foo: String!): String| strengthen: String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithMissingImplementation",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first: String| }| interface Test {| first: String| second: String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithWrongImplementation",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first: Int| }| interface Test {| first: String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithMissingImplementationOfArgument",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first(first: String): String| }| interface Test {| first(first: String, second: String): String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithWrongImplementationOfArgument",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first(first: Int): String| }| interface Test {| first(first: String): String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithNullableMismatchInImplementationOfArgument",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first(first: String): String| }| interface Test {| first(first: String!): String| }| \");| }"
      },
      {
        "name": "RejectInterfaceWithNullableMismatchInImplementationOfField",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo implements Test {| first: String| }| interface Test {| first: String!| }| \");| }"
      },
      {
        "name": "AcceptNonRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectValid(@\"| type Query { stub: String }| type Foo {| field(arg: Int @deprecated): String| }| \");| }"
      },
      {
        "name": "RejectNonRequiredArgumentThatIsDeprecated",
        "body": "{| ExpectError(@\"| type Query { stub: String }| type Foo {| field(arg: Int! @deprecated): String| }| \");| }"
      }
    ]
  },
  {
    "file": "DictionaryToObjectConverterTests.cs",
    "methods": [
      {
        "name": "Convert_Dictionary_FooObject",
        "body": "{| // arrange| var baz = new Dictionary<string, object>();| baz[\"Number\"] = \"1.5\";| var bar = new Dictionary<string, object>();| bar[\"State\"] = \"On\";| bar[\"Bazs\"] = new List<object> { baz, };| var foo = new Dictionary<string, object>();| foo[\"text\"] = \"abc\";| foo[\"BAR\"] = bar;| // assert| var converter = new DictionaryToObjectConverter(| DefaultTypeConverter.Default);| var converted = converter.Convert(foo, typeof(Foo));| // assert| converted.MatchSnapshot();| }"
      },
      {
        "name": "Convert_Dictionary_BarObjectWithArray",
        "body": "{| // arrange| var baz = new Dictionary<string, object>();| baz[\"Number\"] = \"1.5\";| var bar = new Dictionary<string, object>();| bar[\"State\"] = \"On\";| bar[\"Bazs\"] = new List<object> { baz, };| bar[\"BazArray\"] = new List<object> { baz, };| bar[\"StringArray\"] = new List<object> { \"a\", 1, true, };| // assert| var converter = new DictionaryToObjectConverter(| DefaultTypeConverter.Default);| var converted = converter.Convert(bar, typeof(Bar));| // assert| converted.MatchSnapshot();| }"
      },
      {
        "name": "Convert_List_ListOfBar",
        "body": "{| // arrange| var baz = new Dictionary<string, object>();| baz[\"Number\"] = \"1.5\";| var bar = new Dictionary<string, object>();| bar[\"State\"] = \"On\";| bar[\"Bazs\"] = new List<object> { baz, };| bar[\"BazArray\"] = new List<object> { baz, };| bar[\"StringArray\"] = new List<object> { \"a\", 1, true, };| var list = new List<object> { bar, };| // assert| var converter = new DictionaryToObjectConverter(| DefaultTypeConverter.Default);| var converted = converter.Convert(| list, typeof(ICollection<Bar>));| // assert| converted.MatchSnapshot();| }"
      },
      {
        "name": "Convert_String_Int",
        "body": "{| // arrange| var input = \"1\";| // assert| var converter = new DictionaryToObjectConverter(| DefaultTypeConverter.Default);| var converted = converter.Convert(| input, typeof(int));| // assert| converted.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ExpressionUtilsTests.cs",
    "methods": [
      {
        "name": "PublicFieldExpression_ShouldThrow",
        "body": "{| // act| Action a = () => GetMember(t => t.Field);| // assert| Assert.Throws<ArgumentException>(a);| }"
      },
      {
        "name": "PublicPropertyExpression_ShouldReturnProperty",
        "body": "{| // act| var member = GetMember(t => t.Property);| // assert| Assert.NotNull(member);| Assert.Equal(\"Property\", member.Name);| }"
      },
      {
        "name": "PublicMethodExpression_ShouldReturnMethod",
        "body": "{| // act| var member = GetMember(t => t.Method());| // assert| Assert.NotNull(member);| Assert.Equal(\"Method\", member.Name);| }"
      },
      {
        "name": "IndexerExpression_ShouldThrow",
        "body": "{| // act| void Action() => GetMember(t => t[default]);| // assert| Assert.Throws<ArgumentException>(Action);| }"
      }
    ]
  },
  {
    "file": "InputObjectToDictionaryConverterTests.cs",
    "methods": [
      {
        "name": "Convert_InputObject_Dictionary",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<InputObjectType<Foo>>()| .Create();| var type = schema.GetType<InputObjectType>(\"FooInput\");| var bar1 = new Bar { Number = 1, Baz = Baz.Bar, };| var bar2 = new Bar { Number = 2, Baz = Baz.Bar, };| var bar3 = new Bar { Number = 3, Baz = Baz.Foo, };| var foo = new Foo| {| Bar = bar1,| Bars = [bar2, bar3,],| };| // act| var converter = new InputObjectToDictionaryConverter(| DefaultTypeConverter.Default);| var dict = converter.Convert(type, foo);| // assert| dict.MatchSnapshot();| }"
      },
      {
        "name": "Convert_InputObjectWithNullField_Dictionary",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<InputObjectType<Foo>>()| .Create();| var type = schema.GetType<InputObjectType>(\"FooInput\");| var bar2 = new Bar { Number = 2, Baz = Baz.Bar, };| var bar3 = new Bar { Number = 3, Baz = Baz.Foo, };| var foo = new Foo| {| Bar = null,| Bars = [bar2, bar3,],| };| // act| var converter = new InputObjectToDictionaryConverter(| DefaultTypeConverter.Default);| var dict = converter.Convert(type, foo);| // assert| dict.MatchSnapshot();| }"
      },
      {
        "name": "Convert_InputObjectWithNullElement_Dictionary",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<DummyQuery>()| .AddType<InputObjectType<Foo>>()| .Create();| var type = schema.GetType<InputObjectType>(\"FooInput\");| var bar1 = new Bar { Number = 1, Baz = Baz.Bar, };| var bar2 = new Bar { Number = 2, Baz = Baz.Bar, };| var foo = new Foo| {| Bar = bar1,| Bars = [bar2, null,],| };| // act| var converter = new InputObjectToDictionaryConverter(| DefaultTypeConverter.Default);| var dict = converter.Convert(type, foo);| // assert| dict.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectValueToDictionaryConverterTests.cs",
    "methods": [
      {
        "name": "Convert_ObjectGraphWithScalars_DictionaryWithClrRepres",
        "body": "{| // arrange| var obj = new ObjectValueNode(| new ObjectFieldNode(\"a\", new StringValueNode(\"abc\")),| new ObjectFieldNode(\"b\", new IntValueNode(123)),| new ObjectFieldNode(\"c\", new FloatValueNode(1.5d)),| new ObjectFieldNode(\"d\", new BooleanValueNode(true)),| new ObjectFieldNode(\"e\", new EnumValueNode(\"DEF\")),| new ObjectFieldNode(\"f\", NullValueNode.Default));| // act| var converter = new ObjectValueToDictionaryConverter();| var dict = converter.Convert(obj);| // assert| dict.MatchSnapshot();| }"
      },
      {
        "name": "Convert_ObjectGraphOfObjects_DictionaryWithClrRepres",
        "body": "{| // arrange| var child = new ObjectValueNode(| new ObjectFieldNode(\"a\", new StringValueNode(\"abc\")),| new ObjectFieldNode(\"b\", new IntValueNode(123)),| new ObjectFieldNode(\"c\", new FloatValueNode(1.5d)),| new ObjectFieldNode(\"d\", new BooleanValueNode(true)),| new ObjectFieldNode(\"e\", new EnumValueNode(\"DEF\")),| new ObjectFieldNode(\"f\", NullValueNode.Default));| var obj = new ObjectValueNode(| new ObjectFieldNode(\"a\", child));| // act| var converter = new ObjectValueToDictionaryConverter();| var dict = converter.Convert(obj);| // assert| dict.MatchSnapshot();| }"
      },
      {
        "name": "Convert_ObjectGraphWithList_DictionaryWithClrRepres",
        "body": "{| // arrange| var child = new ObjectValueNode(| new ObjectFieldNode(\"a\", new StringValueNode(\"abc\")),| new ObjectFieldNode(\"b\", new IntValueNode(123)),| new ObjectFieldNode(\"c\", new FloatValueNode(1.5d)),| new ObjectFieldNode(\"d\", new BooleanValueNode(true)),| new ObjectFieldNode(\"e\", new EnumValueNode(\"DEF\")),| new ObjectFieldNode(\"f\", NullValueNode.Default));| var obj = new ObjectValueNode(| new ObjectFieldNode(\"a\",| new ListValueNode([child, child,])),| new ObjectFieldNode(\"b\",| new ListValueNode(| [| new StringValueNode(\"a\"),| new StringValueNode(\"b\"),| ])));| // act| var converter = new ObjectValueToDictionaryConverter();| var dict = converter.Convert(obj);| // assert| dict.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ReflectionUtilsTests.cs",
    "methods": [
      {
        "name": "GetTypeNameFromGenericType",
        "body": "{| // arrange| var type = typeof(GenericNonNestedFoo<string>);| // act| var typeName = type.GetTypeName();| // assert| Assert.Equal(| \"HotChocolate.Utilities.GenericNonNestedFoo<System.String>\",| typeName);| }"
      },
      {
        "name": "GetTypeNameFromType",
        "body": "{| // arrange| var type = typeof(ReflectionUtilsTests);| // act| var typeName = type.GetTypeName();| // assert| Assert.Equal(| \"HotChocolate.Utilities.ReflectionUtilsTests\",| typeName);| }"
      },
      {
        "name": "GetTypeNameFromGenericNestedType",
        "body": "{| // arrange| var type = typeof(GenericNestedFoo<string>);| // act| var typeName = type.GetTypeName();| // assert| Assert.Equal(| \"HotChocolate.Utilities.ReflectionUtilsTests\" +| \".GenericNestedFoo<System.String>\",| typeName);| }"
      },
      {
        "name": "GetTypeNameFromNestedType",
        "body": "{| // arrange| var type = typeof(Foo);| // act| var typeName = type.GetTypeName();| // assert| Assert.Equal(| \"HotChocolate.Utilities.ReflectionUtilsTests.Foo\",| typeName);| }"
      }
    ]
  },
  {
    "file": "TypeConversionTests.cs",
    "methods": [
      {
        "name": "Convert_Int_NullableLong",
        "body": "{| // arrange| var source = 55;| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(int), typeof(long?),| source, out var output);| // assert| Assert.True(success);| Assert.IsType<long>(output);| Assert.Equal(55L, output);| }"
      },
      {
        "name": "Convert_NullableInt_NullableLong",
        "body": "{| // arrange| int? source = 55;| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(int?), typeof(long?),| source, out var output);| // assert| Assert.True(success);| Assert.IsType<long>(output);| Assert.Equal(55L, output);| }"
      },
      {
        "name": "Convert_NullString_NullableLong",
        "body": "{| // arrange| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string), typeof(long?),| null, out var output);| // assert| Assert.True(success);| Assert.Null(output);| }"
      },
      {
        "name": "Convert_NullableLong_Int",
        "body": "{| // arrange| long? source = 55;| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(long?), typeof(int),| source, out var output);| // assert| Assert.True(success);| Assert.IsType<int>(output);| Assert.Equal(55, output);| }"
      },
      {
        "name": "Convert_Guid_String",
        "body": "{| // arrange| const string expectedOutput = \"2d84dcd634394ebe8427f4b1e1730c47\";| var input = Guid.Parse(expectedOutput);| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(Guid), typeof(string),| input, out var output);| // assert| Assert.True(success);| Assert.IsType<string>(output);| Assert.Equal(expectedOutput, output);| }"
      },
      {
        "name": "Convert_String_Uri",
        "body": "{| // arrange| const string expectedOutput = \"http://foo/\";| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string), typeof(Uri),| expectedOutput, out var output);| // assert| Assert.True(success);| Assert.IsType<Uri>(output);| Assert.Equal(expectedOutput, output.ToString());| }"
      },
      {
        "name": "Convert_Uri_String",
        "body": "{| // arrange| const string expectedOutput = \"http://foo/\";| var input = new Uri(expectedOutput);| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(Uri), typeof(string),| input, out var output);| // assert| Assert.True(success);| Assert.IsType<string>(output);| Assert.Equal(expectedOutput, output);| }"
      },
      {
        "name": "Convert_String_String",
        "body": "{| // arrange| const string expectedOutput = \"2d84dcd634394ebe8427f4b1e1730c47\";| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string), typeof(string),| expectedOutput, out var output);| // assert| Assert.True(success);| Assert.IsType<string>(output);| Assert.Equal(expectedOutput, output);| }"
      },
      {
        "name": "Convert_ArrayOfString_ListOfString",
        "body": "{| // arrange| string[] list = [\"a\", \"b\", \"c\",];| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(List<string>),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<string>>(output);| Assert.Collection((List<string>)output,| t => Assert.Equal(\"a\", t),| t => Assert.Equal(\"b\", t),| t => Assert.Equal(\"c\", t));| }"
      },
      {
        "name": "Convert_ArrayOfString_ListOfInt",
        "body": "{| // arrange| string[] list = [\"1\", \"2\", \"3\",];| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(List<int>),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<int>>(output);| Assert.Collection((List<int>)output,| t => Assert.Equal(1, t),| t => Assert.Equal(2, t),| t => Assert.Equal(3, t));| }"
      },
      {
        "name": "Convert_ArrayOfString_ArrayOfInt",
        "body": "{| // arrange| string[] list = [\"1\", \"2\", \"3\",];| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(int[]),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<int[]>(output);| Assert.Collection((int[])output,| t => Assert.Equal(1, t),| t => Assert.Equal(2, t),| t => Assert.Equal(3, t));| }"
      },
      {
        "name": "Convert_ArrayOfString_IListOfInt",
        "body": "{| // arrange| string[] list = [\"1\", \"2\", \"3\",];| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(IList<int>),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<int>>(output);| Assert.Collection((List<int>)output,| t => Assert.Equal(1, t),| t => Assert.Equal(2, t),| t => Assert.Equal(3, t));| }"
      },
      {
        "name": "Convert_ArrayOfString_ICollectionOfInt",
        "body": "{| // arrange| string[] list = [\"1\", \"2\", \"3\",];| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(ICollection<int>),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<int>>(output);| Assert.Collection((List<int>)output,| t => Assert.Equal(1, t),| t => Assert.Equal(2, t),| t => Assert.Equal(3, t));| }"
      },
      {
        "name": "Convert_ArrayOfString_String",
        "body": "{| // arrange| var list = new[] { \"1\", \"2\", \"3\", };| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(string),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<string>(output);| Assert.Equal(\"1,2,3\", output);| }"
      },
      {
        "name": "Convert_ArrayOfString_NullableListOfFooOrBar",
        "body": "{| // arrange| var list = new[] { \"Foo\", \"Bar\", };| // act| var success = DefaultTypeConverter.Default.TryConvert(| typeof(string[]), typeof(List<FooOrBar?>),| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<FooOrBar?>>(output);| Assert.Collection((List<FooOrBar?>)output,| t => Assert.Equal(FooOrBar.Foo, t),| t => Assert.Equal(FooOrBar.Bar, t));| }"
      },
      {
        "name": "GenericTryConvert_ArrayOfString_NullableListOfFooOrBar",
        "body": "{| // arrange| var list = new[] { \"Foo\", \"Bar\", };| // act| var success =| TypeConverterExtensions.TryConvert<string[], List<FooOrBar?>>(| DefaultTypeConverter.Default,| list, out var output);| // assert| Assert.True(success);| Assert.IsType<List<FooOrBar?>>(output);| Assert.Collection((List<FooOrBar?>)output,| t => Assert.Equal(FooOrBar.Foo, t),| t => Assert.Equal(FooOrBar.Bar, t));| }"
      },
      {
        "name": "GenericTryConvert_TypeconverterIsNull_ArgumentNullExc",
        "body": "{| // arrange| var list = new[] { \"Foo\", \"Bar\", };| // act| Action action = () =>| TypeConverterExtensions.TryConvert<string[], List<FooOrBar?>>(| null,| list, out var output);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "GenericConvert_TypeconverterIsNull_ArgumentNullExc",
        "body": "{| // arrange| var list = new[] { \"Foo\", \"Bar\", };| // act| Action action = () =>| TypeConverterExtensions.Convert<string[], List<FooOrBar?>>(| null, list);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Convert_WithDependencyInjection",
        "body": "{| // arrange| var services = new ServiceCollection();| services.AddSingleton<ITypeConverter, DefaultTypeConverter>();| services.AddTypeConverter<bool, string>(input => \"Bar\");| IServiceProvider serviceProvider = services.BuildServiceProvider();| // act| var converter =| serviceProvider.GetService<ITypeConverter>();| var converted = converter.Convert<bool, string>(true);| // assert| Assert.Equal(\"Bar\", converted);| }"
      }
    ]
  },
  {
    "file": "AllVariableUsagesAreAllowedRuleTests.cs",
    "methods": [
      {
        "name": "IntCannotGoIntoBoolean",
        "body": "{| // arrange| ExpectErrors(@\"| query intCannotGoIntoBoolean($intArg: Int) {| arguments {| booleanArgField(booleanArg: $intArg)| }| }| \",| t => Assert.Equal(| \"The variable `intArg` is not compatible with the \" +| \"type of the current location.\",| t.Message));| }"
      },
      {
        "name": "BooleanListCannotGoIntoBoolean",
        "body": "{| // arrange| ExpectErrors(@\"| query booleanListCannotGoIntoBoolean($booleanListArg: [Boolean]) {| arguments {| booleanArgField(booleanArg: $booleanListArg)| }| }| \",| t => Assert.Equal(| \"The variable `booleanListArg` is not compatible with the \" +| \"type of the current location.\",| t.Message));| }"
      },
      {
        "name": "BooleanArgQuery",
        "body": "{| // arrange| ExpectErrors(@\"| query booleanArgQuery($booleanArg: Boolean) {| arguments {| nonNullBooleanArgField(nonNullBooleanArg: $booleanArg)| }| }| \",| t => Assert.Equal(| \"The variable `booleanArg` is not compatible with the \" +| \"type of the current location.\",| t.Message));| }"
      },
      {
        "name": "NonNullListToList",
        "body": "{| // arrange| ExpectValid(@\"| query nonNullListToList($nonNullBooleanList: [Boolean]!) {| arguments {| booleanListArgField(booleanListArg: $nonNullBooleanList)| }| }| \");| }"
      },
      {
        "name": "BooleanVariableAsListElement",
        "body": "{| // arrange| ExpectValid(@\"| query nonNullListToList($b: Boolean) {| arguments {| booleanListArgField(booleanListArg: [$b])| }| }| \");| }"
      },
      {
        "name": "NullableBooleanVariableAsListElement",
        "body": "{| // arrange| ExpectErrors(@\"| query nonNullBooleanListArgField($nullableBoolean: Boolean) {| arguments {| nonNullBooleanListArgField(booleanListArg: [$nullableBoolean])| }| }| \",| t => Assert.Equal(| \"The variable `nullableBoolean` is not compatible with the \" +| \"type of the current location.\",| t.Message));| }"
      },
      {
        "name": "ListToNonNullList",
        "body": "{| // arrange| ExpectErrors(@\"| query listToNonNullList($booleanList: [Boolean]) {| arguments {| nonNullBooleanListField(nonNullBooleanListArg: $booleanList)| }| }| \",| t => Assert.Equal(| \"The variable `booleanList` is not compatible with the \" +| \"type of the current location.\",| t.Message));| }"
      },
      {
        "name": "BooleanArgQueryWithDefault1",
        "body": "{| ExpectValid(@\"| query booleanArgQueryWithDefault($booleanArg: Boolean) {| arguments {| optionalNonNullBooleanArgField(optionalBooleanArg: $booleanArg)| }| }| \");| }"
      },
      {
        "name": "BooleanArgQueryWithDefault2",
        "body": "{| ExpectValid(@\"| query booleanArgQueryWithDefault($booleanArg: Boolean = true) {| arguments {| nonNullBooleanArgField(nonNullBooleanArg: $booleanArg)| }| }| \");| }"
      },
      {
        "name": "BooleanToBoolean",
        "body": "{| ExpectValid(@\"| query Query($booleanArg: Boolean)| {| arguments {| booleanArgField(booleanArg: $booleanArg)| }| }| \");| }"
      },
      {
        "name": "BooleanToBooleanWithinFragment",
        "body": "{| ExpectValid(@\"| fragment booleanArgFrag on Arguments {| booleanArgField(booleanArg: $booleanArg)| }| query Query($booleanArg: Boolean)| {| arguments {| ...booleanArgFrag| }| }| \");| }"
      },
      {
        "name": "NonNullableBooleanToBoolean",
        "body": "{| ExpectValid(@\"| query Query($nonNullBooleanArg: Boolean!)| {| arguments {| booleanArgField(booleanArg: $nonNullBooleanArg)| }| }| \");| }"
      },
      {
        "name": "NonNullableBooleanToBooleanWithinFragment",
        "body": "{| ExpectValid(@\"| fragment booleanArgFrag on Arguments {| booleanArgField(booleanArg: $nonNullBooleanArg)| }| query Query($nonNullBooleanArg: Boolean!)| {| arguments {| ...booleanArgFrag| }| }| \");| }"
      },
      {
        "name": "StringArrayToStringArray",
        "body": "{| ExpectValid(@\"| query Query($stringListVar: [String])| {| arguments {| stringListArgField(stringListArg: $stringListVar)| }| }| \");| }"
      },
      {
        "name": "ElemenIsNonNullableStringArrayToStringArray",
        "body": "{| ExpectValid(@\"| query Query($stringListVar: [String!])| {| arguments {| stringListArgField(stringListArg: $stringListVar)| }| }| \");| }"
      },
      {
        "name": "StringToStringInItemPosition",
        "body": "{| ExpectValid(@\"| query Query($stringVar: String)| {| arguments {| stringListArgField(stringListArg: [$stringVar])| }| }| \");| }"
      },
      {
        "name": "NonNullableStringToStringInItemPosition",
        "body": "{| ExpectValid(@\"| query Query($stringVar: String!)| {| arguments {| stringListArgField(stringListArg: [$stringVar])| }| }| \");| }"
      },
      {
        "name": "ComplexInputToComplexInput",
        "body": "{| ExpectValid(@\"| query Query($complexVar: Complex3Input)| {| arguments {| complexArgField(complexArg: $complexVar)| }| }| \");| }"
      },
      {
        "name": "ComplexInputToComplexInputInFieldPosition",
        "body": "{| ExpectValid(@\"| query Query($boolVar: Boolean = false)| {| arguments {| complexArgField(complexArg: {requiredField: $boolVar})| }| }| \");| }"
      },
      {
        "name": "NullableBooleanToBooleanInDirective",
        "body": "{| ExpectValid(@\"| query Query($boolVar: Boolean!)| {| dog @include(if: $boolVar)| }| \");| }"
      },
      {
        "name": "IntToNullableInt",
        "body": "{| ExpectErrors(@\"| query Query($intArg: Int) {| arguments {| nonNullIntArgField(intArg: $intArg)| }| }| \");| }"
      },
      {
        "name": "IntNullableToIntWithinFragment",
        "body": "{| ExpectErrors(@\"| fragment nonNullIntArgFieldFrag on Arguments {| nonNullIntArgField(intArg: $intArg)| }| query Query($intArg: Int) {| arguments {| ...nonNullIntArgFieldFrag| }| }| \");| }"
      },
      {
        "name": "IntNullableToIntWithinNestedFragment",
        "body": "{| ExpectErrors(@\"| fragment outerFrag on Arguments {| ...nonNullIntArgFieldFrag| }| fragment nonNullIntArgFieldFrag on Arguments {| nonNullIntArgField(intArg: $intArg)| }| query Query($intArg: Int) {| arguments {| ...outerFrag| }| }| \");| }"
      },
      {
        "name": "StringOverBoolean",
        "body": "{| ExpectErrors(@\"| query Query($stringVar: String) {| arguments {| booleanArgField(booleanArg: $stringVar)| }| }| \");| }"
      },
      {
        "name": "StringToStringArray",
        "body": "{| ExpectErrors(@\"| query Query($stringVar: String) {| arguments {| stringListArgField(stringListArg: $stringVar)| }| }| \");| }"
      },
      {
        "name": "BooleanToBooleanInDirective",
        "body": "{| ExpectErrors(@\"| query Query($boolVar: Boolean) {| dog @include(if: $boolVar)| }| \");| }"
      },
      {
        "name": "StringToNullableBooleanInDirective",
        "body": "{| ExpectErrors(@\"| query Query($stringVar: String) {| dog @include(if: $stringVar)| }| \");| }"
      },
      {
        "name": "StringToElementIsNullableString",
        "body": "{| ExpectErrors(@\"| query Query($stringListVar: [String])| {| arguments {| stringListNonNullArgField(stringListNonNullArg: $stringListVar)| }| }| \");| }"
      },
      {
        "name": "IntToNullableIntFailsWhenVariableProvidesNullDefaultValue",
        "body": "{| ExpectErrors(@\"| query Query($intVar: Int = null) {| arguments {| nonNullIntArgField(intArg: $intVar)| }| }| \");| }"
      },
      {
        "name": "IntToNullableIntWhenVariableProvidesNonNullDefaultValue",
        "body": "{| ExpectValid(@\"| query Query($intVar: Int = 1) {| arguments {| nonNullIntArgField(intArg: $intVar)| }| }| \");| }"
      },
      {
        "name": "IntToNullableIntWhenOptionalArgumentProvidesDefaultValue",
        "body": "{| ExpectValid(@\"| query Query($intVar: Int) {| arguments {| nonNullFieldWithDefault(nonNullIntArg: $intVar)| }| }| \");| }"
      },
      {
        "name": "BooleanToNullableBooleanInDirectiveWithDefaultValueWithOption",
        "body": "{| ExpectValid(@\"| query Query($boolVar: Boolean = false) {| dog @include(if: $boolVar)| }| \");| }"
      }
    ]
  },
  {
    "file": "AllVariablesUsedRuleTests.cs",
    "methods": [
      {
        "name": "VariableUnused",
        "body": "{| // arrange| ExpectErrors(@\"| query variableUnused($atOtherHomes: Boolean) {| dog {| isHouseTrained| }| }| \",| t => Assert.Equal(| \"The following variables were not used: \" +| \"atOtherHomes.\", t.Message));| }"
      },
      {
        "name": "VariableUsedInFragment",
        "body": "{| ExpectValid(@\"| query variableUsedInFragment($atOtherHomes: Boolean) {| dog {| ...isHousetrainedFragment| }| }| fragment isHousetrainedFragment on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| \");| }"
      },
      {
        "name": "VariableUsedInSecondLevelFragment",
        "body": "{| ExpectValid(@\"| query variableUsedInFragment($atOtherHomes: Boolean) {| dog {| ...isHousetrainedFragment| }| }| fragment isHousetrainedFragment on Dog {| ...isHousetrainedFragmentLevel2| }| fragment isHousetrainedFragmentLevel2 on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| \");| }"
      },
      {
        "name": "VariableUsedInDirective",
        "body": "{| ExpectValid(@\"| query variableUsedInFragment($atOtherHomes: Boolean!) {| dog {| ...isHousetrainedFragment| }| }| fragment isHousetrainedFragment on Dog {| isHouseTrained @skip(if: $atOtherHomes)| }| \");| ExpectValid(@\"| query variableUsedInFragment($atOtherHomes: Boolean!) {| dog {| ...isHousetrainedFragment @skip(if: $atOtherHomes)| }| }| fragment isHousetrainedFragment on Dog {| isHouseTrained| }| \");| }"
      },
      {
        "name": "VariableNotUsedWithinFragment",
        "body": "{| // arrange| ExpectErrors(@\"| query variableNotUsedWithinFragment($atOtherHomes: Boolean) {| dog {| ...isHousetrainedWithoutVariableFragment| }| }| fragment isHousetrainedWithoutVariableFragment on Dog {| isHouseTrained| }| \",| t => Assert.Equal(| \"The following variables were not used: \" +| \"atOtherHomes.\", t.Message));| }"
      },
      {
        "name": "QueryWithExtraVar",
        "body": "{| ExpectErrors(@\"| query queryWithUsedVar($atOtherHomes: Boolean) {| dog {| ...isHousetrainedFragment| }| }| query queryWithExtraVar($atOtherHomes: Boolean, $extra: Int) {| dog {| ...isHousetrainedFragment| }| }| fragment isHousetrainedFragment on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| \",| t => Assert.Equal(| \"The following variables were not used: \" +| \"extra.\", t.Message));| }"
      },
      {
        "name": "VariableUsedAndDeclared",
        "body": "{| ExpectValid(@\"| query variableIsDefined($atOtherHomes: Boolean)| {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }\");| }"
      },
      {
        "name": "VariableUsedInComplexInput",
        "body": "{| ExpectValid(@\"| query queryWithComplexInput($name: String)| {| findDog(complex: { name: $name }) {| name| }| }\");| }"
      },
      {
        "name": "VariableUsedInListInput",
        "body": "{| ExpectValid(@\"| query queryWithListInput($value: Boolean!)| {| booleanList(booleanListArg: [ $value ])| }\");| }"
      },
      {
        "name": "VariableUsedAndNotDeclared",
        "body": "{| // arrange| ExpectErrors(@\"| query variableIsDefined| {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }\",| t => Assert.Equal(| \"The following variables were not declared: \" +| \"atOtherHomes.\", t.Message));| }"
      },
      {
        "name": "VariableUsedAndNotDeclared2",
        "body": "{| ExpectErrors(@\"| query variableIsNotDefinedUsedInNestedFragment {| dog {| ...outerHousetrainedFragment| }| }| fragment outerHousetrainedFragment on Dog {| ...isHousetrainedFragment| }| fragment isHousetrainedFragment on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }\",| t => Assert.Equal(| \"The following variables were not declared: \" +| \"atOtherHomes.\", t.Message));| }"
      },
      {
        "name": "VarsMustBeDefinedInAllOperationsInWhichAFragmentIsUsed",
        "body": "{| ExpectValid(@\"| query housetrainedQueryOne($atOtherHomes: Boolean) {| dog {| ...isHousetrainedFragment| }| }| query housetrainedQueryTwo($atOtherHomes: Boolean) {| dog {| ...isHousetrainedFragment| }| }| query housetrainedQueryThree {| dog {| isHouseTrained(atOtherHomes: true)| }| }| fragment isHousetrainedFragment on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }\");| }"
      },
      {
        "name": "VarsMustBeDefinedInAllOperationsInWhichAFragmentIsUsedErr",
        "body": "{| ExpectErrors(@\"| query variableIsNotDefinedUsedInNestedFragment {| dog {| ...outerHousetrainedFragment| }| }| fragment outerHousetrainedFragment on Dog {| ...isHousetrainedFragment| }| fragment isHousetrainedFragment on Dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }\",| t => Assert.Equal(| \"The following variables were not declared: \" +| \"atOtherHomes.\", t.Message));| }"
      }
    ]
  },
  {
    "file": "ArgumentNamesRuleTests.cs",
    "methods": [
      {
        "name": "ArgOnRequiredArg",
        "body": "{| ExpectValid(@\"| query {| dog {| ... argOnRequiredArg| }| }| fragment argOnRequiredArg on Dog {| doesKnowCommand(dogCommand: SIT)| }| \");| }"
      },
      {
        "name": "ArgOnOptional",
        "body": "{| ExpectValid(@\"| query {| dog {| ... argOnOptional| }| }| fragment argOnOptional on Dog {| isHouseTrained(atOtherHomes: true) @include(if: true)| }| \");| }"
      },
      {
        "name": "InvalidFieldArgName",
        "body": "{| ExpectErrors(@\"| query {| dog {| ... invalidArgName| }| }| fragment invalidArgName on Dog {| doesKnowCommand(command: CLEAN_UP_HOUSE)| }| \",| t => Assert.Equal(| $\"The argument `command` does not exist.\", t.Message),| t => Assert.Equal(| $\"The argument `dogCommand` is required.\", t.Message));| }"
      },
      {
        "name": "InvalidDirectiveArgName",
        "body": "{| ExpectErrors(@\"| query {| dog {| ... invalidArgName| }| }| fragment invalidArgName on Dog {| isHouseTrained(atOtherHomes: true) @include(unless: false)| }| \",| t => Assert.Equal(| $\"The argument `unless` does not exist.\", t.Message),| t => Assert.Equal(| $\"The argument `if` is required.\", t.Message));| }"
      },
      {
        "name": "ArgumentOrderDoesNotMatter",
        "body": "{| ExpectValid(@\"| query {| arguments {| ... multipleArgs| ... multipleArgsReverseOrder| }| }| fragment multipleArgs on Arguments {| multipleReqs(x: 1, y: 2)| }| fragment multipleArgsReverseOrder on Arguments {| multipleReqs(y: 1, x: 2)| }| \");| }"
      },
      {
        "name": "ArgsAreKnowDeeply",
        "body": "{| ExpectValid(@\"| {| dog {| doesKnowCommand(dogCommand: SIT)| }| human {| pets {| ... on Dog {| doesKnowCommand(dogCommand: SIT)| }| }| }| }| \");| }"
      },
      {
        "name": "DirectiveArgsAreKnown",
        "body": "{| ExpectValid(@\"| {| dog @skip(if: true)| }| \");| }"
      },
      {
        "name": "DirectiveWithoutArgsIsValid",
        "body": "{| ExpectValid(@\"| {| dog @complex| }| \");| }"
      },
      {
        "name": "DirectiveWithWrongArgsIsInvalid",
        "body": "{| ExpectErrors(@\"| {| dog @complex(if:false)| }| \");| }"
      },
      {
        "name": "MisspelledDirectiveArgsAreReported",
        "body": "{| ExpectErrors(@\"| {| dog @skip(iff: true)| }| \");| }"
      },
      {
        "name": "MisspelledFieldArgsAreReported",
        "body": "{| ExpectErrors(@\"| query {| dog {| ... invalidArgName| }| }| fragment invalidArgName on Dog {| doesKnowCommand(DogCommand: true)| }| \");| }"
      },
      {
        "name": "UnknownArgsAmongstKnowArgs",
        "body": "{| ExpectErrors(@\"| query {| dog {| ... oneGoodArgOneInvalidArg| }| }| fragment oneGoodArgOneInvalidArg on Dog {| doesKnowCommand(whoKnows: 1, dogCommand: SIT, unknown: true)| }| \");| }"
      },
      {
        "name": "UnknownArgsDeeply",
        "body": "{| ExpectErrors(@\"| {| dog {| doesKnowCommand(unknown: true)| }| human {| pet {| ... on Dog {| doesKnowCommand(unknown: true)| }| }| }| }| \");| }"
      },
      {
        "name": "NoArgumentsOnField",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg| }| \");| }"
      },
      {
        "name": "NoArgumentsOnDirective",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg @directive| }| \");| }"
      },
      {
        "name": "ArgumentOnField",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg(arg: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "ArgumentOnDirective",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg @directive(arg: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "SameArgumentOnTwoFields",
        "body": "{| // arrange| ExpectValid(@\"| {| one: fieldWithArg(arg: \"\"value\"\")| two: fieldWithArg(arg: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "SameArgumentOnFieldAndDirective",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg(arg: \"\"value\"\") @directive(arg: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "SameArgumentOnTwoDirectives",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg @directive1(arg: \"\"value\"\") @directive2(arg: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "MultipleFieldArguments",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg(arg1: \"\"value\"\", arg2: \"\"value\"\", arg3: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "MultipleDirectiveArguments",
        "body": "{| // arrange| ExpectValid(@\"| {| fieldWithArg @directive(arg1: \"\"value\"\", arg2: \"\"value\"\", arg3: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "DuplicateFieldArguments",
        "body": "{| // arrange| ExpectErrors(@\"| {| fieldWithArg(arg1: \"\"value\"\", arg1: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "ManyDuplicateFieldArguments",
        "body": "{| // arrange| ExpectErrors(@\"| {| fieldWithArg(arg1: \"\"value\"\", arg1: \"\"value\"\", arg1: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "DuplicateDirectiveArguments",
        "body": "{| // arrange| ExpectErrors(@\"| {| fieldWithArg @directive(arg1: \"\"value\"\", arg1: \"\"value\"\")| }| \");| }"
      },
      {
        "name": "ManyDuplicateDirectiveArguments",
        "body": "{| // arrange| ExpectErrors(@\"| {| fieldWithArg @directive(arg1: \"\"value\"\", arg1: \"\"value\"\", arg1: \"\"value\"\")| }| \");| }"
      }
    ]
  },
  {
    "file": "ArgumentUniquenessRuleTests.cs",
    "methods": [
      {
        "name": "NoDuplicateArgument",
        "body": "{| ExpectValid(@\"| query {| arguments {| ... goodNonNullArg| }| }| fragment goodNonNullArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: true)| }| \");| }"
      },
      {
        "name": "DuplicateArgument",
        "body": "{| ExpectErrors(@\"| query {| arguments {| ... goodNonNullArg| }| }| fragment goodNonNullArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: true, nonNullBooleanArg: true)| }| \",| t => Assert.Equal(| \"More than one argument with the same name in an argument \" +| \"set is ambiguous and invalid.\",| t.Message));| }"
      }
    ]
  },
  {
    "file": "DeferAndStreamDirectiveLabelsAreUniqueTests.cs",
    "methods": [
      {
        "name": "Label_Duplicate_On_Defer",
        "body": "{| ExpectErrors(| @\"query {| ... @defer(label: \"\"a\"\") {| a: __typename| }| ... @defer(label: \"\"a\"\") {| b: __typename| }| }\",| t => Assert.Equal(| \"If a label is passed, it must be unique within all other @defer \" +| \"and @stream directives in the document.\",| t.Message));| }"
      },
      {
        "name": "Label_Duplicate_On_Stream",
        "body": "{| ExpectErrors(| @\"query {| a: __schema {| _types @stream(label: \"\"a\"\") {| name| }| }| b: __schema {| _types @stream(label: \"\"a\"\") {| name| }| }| }\",| t => Assert.Equal(| \"If a label is passed, it must be unique within all other @defer \" +| \"and @stream directives in the document.\",| t.Message));| }"
      },
      {
        "name": "Label_Duplicate_On_Either_Stream_Or_Defer",
        "body": "{| ExpectErrors(| @\"query {| ... @defer(label: \"\"a\"\") {| a: __typename| }| b: __schema {| _types @stream(label: \"\"a\"\") {| name| }| }| }\",| t => Assert.Equal(| \"If a label is passed, it must be unique within all other @defer \" +| \"and @stream directives in the document.\",| t.Message));| }"
      },
      {
        "name": "Label_Is_Variable_On_Defer",
        "body": "{| ExpectErrors(| @\"query($a: String) {| ... @defer(label: $a) {| a: __typename| }| }\",| t => Assert.Equal(| \"If a label for @defer or @stream is passed, it must not be a variable.\",| t.Message));| }"
      },
      {
        "name": "Label_Can_Be_Null_And_Is_Optional_And_Can_Be_A_Unique_Name",
        "body": "{| ExpectValid(| @\"query {| ... @defer(label: null) {| a: __typename| }| ... @defer {| a: __typename| }| ... @defer(label: \"\"c\"\") {| c: __typename| }| d: __schema {| _types @stream(label: null) {| name| }| }| e: __schema {| _types @stream {| name| }| }| f: __schema {| _types @stream(label: \"\"b\"\") {| name| }| }| }\");| }"
      }
    ]
  },
  {
    "file": "DeferAndStreamDirectivesAreUsedOnValidRootFieldTests.cs",
    "methods": [
      {
        "name": "Defer_On_Subscriptions_Root",
        "body": "{| ExpectErrors(| @\"subscription {| ... @defer {| disallowedSecondRootField| }| }\",| t => Assert.Equal(| \"The defer and stream directives are not allowed to \" +| \"be used on root fields of the mutation or subscription type.\",| t.Message));| }"
      },
      {
        "name": "Defer_On_Subscriptions_Root_In_Nested_Fragment",
        "body": "{| ExpectErrors(| @\"subscription {| ... a| }| fragment a on Subscription {| ... b| }| fragment b on Subscription {| ... @defer {| disallowedSecondRootField| }| }\",| t => Assert.Equal(| \"The defer and stream directives are not allowed to \" +| \"be used on root fields of the mutation or subscription type.\",| t.Message));| }"
      },
      {
        "name": "Stream_On_Subscriptions_Root",
        "body": "{| ExpectErrors(| @\"subscription {| listEvent @stream| }\",| t => Assert.Equal(| \"The defer and stream directives are not allowed to \" +| \"be used on root fields of the mutation or subscription type.\",| t.Message));| }"
      },
      {
        "name": "Defer_On_Subscriptions_Sub_Selection",
        "body": "{| ExpectValid(| @\"subscription {| newMessage {| ... @defer {| body| }| }| }\");| }"
      }
    ]
  },
  {
    "file": "DirectivesAreDefinedRuleTests.cs",
    "methods": [
      {
        "name": "SupportedDirective",
        "body": "{| ExpectValid(@\"| {| dog {| name @skip(if: true)| }| }| \");| }"
      },
      {
        "name": "UnsupportedDirective",
        "body": "{| ExpectErrors(@\"| {| dog {| name @foo(bar: true)| }| }| \",| t => Assert.Equal(| \"The specified directive `foo` \" +| \"is not supported by the current schema.\",| t.Message));| }"
      },
      {
        "name": "SkipDirectiveIsInTheWrongPlace",
        "body": "{| ExpectErrors(@\"| query @skip(if: $foo) {| field| }| \",| t => Assert.Equal(| \"The specified directive is not valid the \" +| \"current location.\", t.Message));| }"
      },
      {
        "name": "SkipDirectiveIsInTheRightPlace",
        "body": "{| ExpectValid(@\"| query a {| field @skip(if: $foo)| }| \");| }"
      },
      {
        "name": "DuplicateSkipDirectives",
        "body": "{| ExpectErrors(@\"| query ($foo: Boolean = true, $bar: Boolean = false) {| field @skip(if: $foo) @skip(if: $bar)| }| \",| t => Assert.Equal(| \"Only one of each directive is allowed per location.\",| t.Message));| }"
      },
      {
        "name": "SkipOnTwoDifferentFields",
        "body": "{| ExpectValid(@\"| query ($foo: Boolean = true, $bar: Boolean = false) {| field @skip(if: $foo) {| subfieldA| }| field @skip(if: $bar) {| subfieldB| }| }| \");| }"
      },
      {
        "name": "WithNoDirectives",
        "body": "{| ExpectValid(@\"| query Foo {| name| ...Frag| }| fragment Frag on Dog {| name| }| \");| }"
      },
      {
        "name": "WithKnownDirectives",
        "body": "{| ExpectValid(@\"| {| dog @include(if: true) {| name| }| human @skip(if: false) {| name| }| }| \");| }"
      },
      {
        "name": "WithUnknownDirectives",
        "body": "{| ExpectErrors(@\"| {| dog @unknown(directive: \"\"value\"\") {| name| }| }| \");| }"
      },
      {
        "name": "WithManyUnknownDirectives",
        "body": "{| ExpectErrors(@\"| {| dog @unknown(directive: \"\"value\"\") {| name| }| human @unknown(directive: \"\"value\"\") {| name| pets @unknown(directive: \"\"value\"\") {| name| }| }| }| \");| }"
      },
      {
        "name": "WithWellPlacedDirectives",
        "body": "{| ExpectValid(@\"| query ($var: Boolean) @onQuery {| name @include(if: $var)| ...Frag @include(if: true)| skippedField @skip(if: true)| ...SkippedFrag @skip(if: true)| ... @skip(if: true) {| skippedField| }| }| mutation @onMutation {| someField| }| subscription @onSubscription {| someField| }| fragment Frag on SomeType @onFragmentDefinition {| someField| }| \");| }"
      },
      {
        "name": "WithWellPlacedVariableDefinitionDirective",
        "body": "{| ExpectValid(@\"| query Foo($var: Boolean @onVariableDefinition) {| name| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectiveOnQuery",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean) @include(if: true) {| name| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnField",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean) {| name @onQuery| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnFieldRepeatedly",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean) {| name @onQuery @include(if: $var)| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnMutation",
        "body": "{| ExpectErrors(@\"| mutation Bar @onQuery {| someField| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnSubscription",
        "body": "{| ExpectErrors(@\"| subscription Bar @onQuery {| someField| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnVariableDefinition",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean @onQuery(if: true)) {| name| }| \");| }"
      },
      {
        "name": "WithMisplacedDirectivesOnFragemnt",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean) {| ...Frag @onQuery| }| fragment Frag on Query {| name| }| \");| }"
      },
      {
        "name": "WithMisplacedVariableDefinitionDirective",
        "body": "{| ExpectErrors(@\"| query Foo($var: Boolean @onField) {| name| }| \");| }"
      },
      {
        "name": "NoDirectives",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query {| name| }| \");| }"
      },
      {
        "name": "UniqueDirectivesInDifferentLocations",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query @directiveA {| field @directiveB| }| \");| }"
      },
      {
        "name": "UniqueDirectivesInSameLocations",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query @directiveA @directiveB {| field @directiveA @directiveB| }| \");| }"
      },
      {
        "name": "SameDirectivesInDifferentLocations",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query @directiveA {| field @directiveA| }| \");| }"
      },
      {
        "name": "SameDirectivesInSimilarLocations",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query {| field @directiveA| field @directiveA| }| \");| }"
      },
      {
        "name": "RepeatableDirectivesInSameLocation",
        "body": "{| ExpectValid(@\"| {| ...Test| }| fragment Test on Query @repeatable @repeatable {| field @repeatable @repeatable| }| \");| }"
      },
      {
        "name": "DuplicateDirectivesInOneLocation",
        "body": "{| ExpectErrors(@\"| {| ...Test| }| fragment Test on Query {| field @directiveA @directiveA| }| \");| }"
      },
      {
        "name": "ManyDuplicateDirectivesInOneLocation",
        "body": "{| ExpectErrors(@\"| {| ...Test| }| fragment Test on Query {| field @directiveA @directiveA @directiveA| }| \");| }"
      },
      {
        "name": "DifferentDuplicateDirectivesInOneLocation",
        "body": "{| ExpectErrors(@\"| {| ...Test| }| fragment Test on Query {| field @directiveA @directiveB @directiveA @directiveB| }| \");| }"
      },
      {
        "name": "DuplicateDirectivesInManyLocations",
        "body": "{| ExpectErrors(@\"| {| ...Test| }| fragment Test on Query @directiveA @directiveA {| field @directiveA @directiveA| }| \");| }"
      }
    ]
  },
  {
    "file": "DocumentValidatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = ValidationUtils.CreateSchema();| var queryValidator = CreateValidator();| // act| async Task Error() =>| await queryValidator.ValidateAsync(| schema,| null!,| new OperationDocumentId(\"abc\"),| new Dictionary<string, object?>(),| false);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var queryValidator = CreateValidator();| // act| async Task Error() =>| await queryValidator.ValidateAsync(| null!,| new DocumentNode(null, new List<IDefinitionNode>()),| new OperationDocumentId(\"abc\"),| new Dictionary<string, object?>(),| false);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| \"\"\"| query getDogName {| dog {| name| color| }| }| extend type Dog {| color: String| }| \"\"\",| t => Assert.Equal(| \"A document containing TypeSystemDefinition \" +| \"is invalid for execution.\",| t.Message),| t => Assert.Equal(| \"The field `color` does not exist \" +| \"on the type `Dog`.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| \"\"\"| {| dog {| name| }| }| query getName {| dog {| owner {| name| }| }| }| \"\"\",| t =>| {| Assert.Equal(| \"GraphQL allows a short‐hand form for defining query \" +| \"operations when only that one operation exists in \" +| \"the document.\",| t.Message);| });| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| \"\"\"| query getName {| dog {| name| }| }| query getName {| dog {| owner {| name| }| }| }| \"\"\",| t => Assert.Equal(| \"The operation name `getName` is not unique.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| query houseTrainedQuery(| $atOtherHomes: Boolean, $atOtherHomes: Boolean) {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }| \",| t => Assert.Equal(| \"A document containing operations that \" +| \"define more than one variable with the same \" +| \"name is invalid for execution.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| arguments {| ... goodNonNullArg| }| }| fragment goodNonNullArg on Arguments {| nonNullBooleanArgField(| nonNullBooleanArg: true, nonNullBooleanArg: true)| }| \",| t => Assert.Equal(| $\"More than one argument with the same name in an argument set \" +| \"is ambiguous and invalid.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| arguments {| ... missingRequiredArg| }| }| fragment missingRequiredArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: null)| }| \",| t => Assert.Equal(| \"The argument `nonNullBooleanArg` is required.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| subscription sub {| newMessage {| body| sender| }| disallowedSecondRootFieldNonExisting| }| \",| t => Assert.Equal(| $\"Subscription operations must have exactly one root field.\",| t.Message),| t => Assert.Equal(| \"The field `disallowedSecondRootFieldNonExisting` does not exist \" +| \"on the type `Subscription`.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ... fieldNotDefined| ... aliasedLyingFieldTargetNotDefined| }| }| fragment fieldNotDefined on Dog {| meowVolume| }| fragment aliasedLyingFieldTargetNotDefined on Dog {| barkVolume: kawVolume| }| \",| t => Assert.Equal(| \"The field `meowVolume` does not exist \" +| \"on the type `Dog`.\",| t.Message),| t => Assert.Equal(| \"The field `kawVolume` does not exist \" +| \"on the type `Dog`.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| query variableNotUsedWithinFragment($atOtherHomes: Boolean) {| dog {| ...isHouseTrainedWithoutVariableFragment| }| }| fragment isHouseTrainedWithoutVariableFragment on Dog {| barkVolume| }| \",| t => Assert.Equal(| \"The following variables were not used: \" +| \"atOtherHomes.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| query @skip(if: $foo) {| field| }| \");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await ExpectErrors(| null,| new ServiceCollection()| .AddValidation()| .ModifyValidationOptions(o => o.MaxAllowedErrors = int.MaxValue)| .Services| .BuildServiceProvider()| .GetRequiredService<IDocumentValidatorFactory>()| .CreateValidator(),| @\"| query takesCat($cat: Cat) {| # ...| }| query takesDogBang($dog: Dog!) {| # ...| }| query takesListOfPet($pets: [Pet]) {| # ...| }| query takesCatOrDog($catOrDog: CatOrDog) {| # ...| }\",| t => Assert.Equal(| \"Operation `takesCat` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message),| t => Assert.Equal(| \"Operation `takesDogBang` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message),| t => Assert.Equal(| \"Operation `takesListOfPet` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message),| t => Assert.Equal(| \"Operation `takesCatOrDog` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message),| t => Assert.Equal(| \"The type of variable `cat` is not an input type.\",| t.Message),| t => Assert.Equal(| \"The following variables were not used: cat.\",| t.Message),| t => Assert.Equal(| \"The type of variable `dog` is not an input type.\",| t.Message),| t => Assert.Equal(| \"The following variables were not used: dog.\",| t.Message),| t => Assert.Equal(| \"The type of variable `pets` is not an input type.\",| t.Message),| t => Assert.Equal(| \"The following variables were not used: pets.\",| t.Message),| t => Assert.Equal(| \"The type of variable `catOrDog` is not an input type.\",| t.Message),| t => Assert.Equal(| \"The following variables were not used: catOrDog.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| fragment conflictingBecauseAlias on Dog {| name: nickname| name| }| \",| t => Assert.Equal(| \"The specified fragment `conflictingBecauseAlias` \" +| \"is not used within the current document.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ... invalidArgName| }| }| fragment invalidArgName on Dog {| doesKnowCommand(command: CLEAN_UP_HOUSE)| }| \",| t => Assert.Equal(| \"The argument `command` does not exist.\",| t.Message),| t => Assert.Equal(| \"The argument `dogCommand` is required.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| fragment nameFragment on Dog { # unused| name| }| {| dog {| name| }| }| \",| t => Assert.Equal(| \"The specified fragment `nameFragment` \" +| \"is not used within the current document.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ...fragmentOne| }| }| fragment fragmentOne on Dog {| name| }| fragment fragmentOne on Dog {| owner {| name| }| }| \",| t => Assert.Equal(| \"There are multiple fragments with the name `fragmentOne`.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| barkVolume {| sinceWhen| }| }| }| \",| t => Assert.Equal(| \"Field \\\"barkVolume\\\" must not have a selection since type \\\"Int\\\" has no \" +| \"subfields.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ... inlineFragOnScalar| }| }| fragment inlineFragOnScalar on Dog {| ... on Boolean {| somethingElse| }| }| \",| t => Assert.Equal(| \"Fragments can only be declared on unions, interfaces, and objects.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ...nameFragment| }| }| fragment nameFragment on Dog {| name| ...barkVolumeFragment| }| fragment barkVolumeFragment on Dog {| barkVolume| ...nameFragment| }| \",| t => Assert.Equal(| \"The graph of fragment spreads must not form any \" +| \"cycles including spreading itself. Otherwise an \" +| \"operation could infinitely spread or infinitely \" +| \"execute on cycles in the underlying data.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ...undefinedFragment| }| }| \",| t => Assert.Equal(| \"The specified fragment `undefinedFragment` \" +| \"does not exist.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ...fragmentDoesNotMatchType| }| }| fragment fragmentDoesNotMatchType on Human {| name| }| \",| t => Assert.Equal(| \"The parent type does not match the type condition on \" +| \"the fragment.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| ...inlineNotExistingType| }| }| fragment inlineNotExistingType on Dog {| ... on NotInSchema {| name| }| }| \",| t =>| {| Assert.Equal(| \"Unknown type `NotInSchema`.\",| t.Message);| });| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| findDog(complex: { favoriteCookieFlavor: \"\"Bacon\"\" })| {| name| }| }| \",| t => Assert.Equal(| \"The specified input object field \" +| \"`favoriteCookieFlavor` does not exist.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| findDog2(complex: { name: null })| {| name| }| }| \",| t => Assert.Equal(| \"`name` is a required field and cannot be null.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| findDog(complex: { name: \"\"A\"\", name: \"\"B\"\" })| {| name| }| }| \",| t =>| Assert.Equal(\"There can be only one input field named `name`.\", t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| dog {| name @foo(bar: true)| }| }| \",| t => Assert.Equal(| \"The specified directive `foo` \" +| \"is not supported by the current schema.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| {| arguments {| ...stringIntoInt| }| }| fragment stringIntoInt on Arguments {| intArgField(intArg: \"\"123\"\")| }| \",| t => Assert.Equal(| \"The specified argument value does not match the \" +| \"argument type.\",| t.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| null,| new ServiceCollection()| .AddValidation()| .AddMaxExecutionDepthRule(1)| .Services| .BuildServiceProvider()| .GetRequiredService<IDocumentValidatorFactory>()| .CreateValidator(),| @\"| query {| catOrDog| {| ... on Cat {| name| }| }| }| \",| t =>| {| Assert.Equal(| \"The GraphQL document has an execution depth of 2 \" +| \"which exceeds the max allowed execution depth of 1.\",| t.Message);| });| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| query {| arguments {| ... goodBooleanArgDefault| }| }| fragment goodBooleanArgDefault on Arguments {| optionalNonNullBooleanArgField2| }| \");| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| SchemaBuilder.New().AddStarWarsTypes().Create(),| null,| FileResource.Open(\"StarWars_Request.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddStarWarsTypes()| .Create();| var document = Utf8GraphQLParser.Parse(| FileResource.Open(\"InvalidIntrospectionQuery.graphql\"));| var originalOperation = ((OperationDefinitionNode)document.Definitions[0]);| var operationWithDuplicates = originalOperation.WithSelectionSet(| originalOperation.SelectionSet.WithSelections(| new List<ISelectionNode>| {| originalOperation.SelectionSet.Selections[0],| originalOperation.SelectionSet.Selections[0],| }));| document = document.WithDefinitions(| new List<IDefinitionNode>(document.Definitions.Skip(1)) { operationWithDuplicates, });| var services = new ServiceCollection()| .AddValidation()| .Services| .BuildServiceProvider();| var factory = services.GetRequiredService<IDocumentValidatorFactory>();| var validator = factory.CreateValidator();| // act| var result = await validator.ValidateAsync(| schema,| document,| new OperationDocumentId(\"abc\"),| new Dictionary<string, object?>(),| false);| // assert| Assert.False(result.HasErrors);| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(| @\"| query ($a: Boolean!) {| dog {| ... inlineFragOnScalar| owner @include(if: $a) {| address| }| }| }| fragment inlineFragOnScalar on Dog {| owner @include(if: $a) {| name| }| }| \");| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(\"fragment f on Query{...f} {...f}\");| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(| @\"| fragment f on Query {| ...f| f {| ...f| f {| ...f| }| }| }| {...f}\");| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"short_long_names_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"anonymous_empty_query_repeated_25000.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"__type_query_repeated_6250.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"__typename_query_repeated_4167.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectValid(FileResource.Open(\"__typename_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"100_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"1000_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"10000_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"25000_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"30000_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"50000_query.graphql\"));| }"
      },
      {
        "name": "Task",
        "body": "{| await ExpectErrors(FileResource.Open(\"introspection_with_cycle.graphql\"));| }"
      }
    ]
  },
  {
    "file": "DocumentValidatorVisitorTestBase.cs",
    "methods": [
      {
        "name": "ContextIsNull",
        "body": "{| // arrange| var query = Utf8GraphQLParser.Parse(@\"{ foo }\");| // act| var a = () => Rule.Validate(null!, query);| // assert| Assert.Throws<ArgumentNullException>(a);| }"
      },
      {
        "name": "QueryIsNull",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| // act| var a = () => Rule.Validate(context, null!);| // assert| Assert.Throws<ArgumentNullException>(a);| }"
      }
    ]
  },
  {
    "file": "ExecutableDefinitionsRuleTests.cs",
    "methods": [
      {
        "name": "QueryWithTypeSystemDefinitions",
        "body": "{| ExpectErrors(@\"| query getDogName {| dog {| name| color| }| }| extend type Dog {| color: String| }| \",| t => Assert.Equal(| \"A document containing TypeSystemDefinition \" +| \"is invalid for execution.\", t.Message));| }"
      },
      {
        "name": "QueryWithoutTypeSystemDefinitions",
        "body": "{| ExpectValid(@\"| query getDogName {| dog {| name| color| }| }| \");| }"
      },
      {
        "name": "GoodExecuableDefinitionsWithOnlyOperation",
        "body": "{| ExpectValid(@\"| query Foo {| dog {| name| }| }| \");| }"
      },
      {
        "name": "GoodExecuableDefinitionsWithOperationAndFragment",
        "body": "{| ExpectValid(@\"| query Foo {| dog {| name| ...Frag| }| }| fragment Frag on Dog {| name| }| \");| }"
      },
      {
        "name": "GoodExecuableDefinitionsWithTypeDefinitions",
        "body": "{| ExpectErrors(@\"| query Foo {| dog {| name| }| }| type Cow {| name: String| }| extend type Dog {| color: String| }| \");| }"
      },
      {
        "name": "GoodExecuableDefinitionsWithSchemaDefinitions",
        "body": "{| ExpectErrors(@\"| schema {| query: Query| }| type Query {| test: String| }| extend schema @directive| \");| }"
      }
    ]
  },
  {
    "file": "HotChocolateValidationBuilderExtensionsTests.cs",
    "methods": [
      {
        "name": "AddMaxExecutionDepthRule1_Builder_Is_Null",
        "body": "{| void Fail()| => HotChocolateValidationBuilderExtensions.AddMaxExecutionDepthRule(null!, 5);| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "AddMaxExecutionDepthRule2_Builder_Is_Null",
        "body": "{| void Fail()| => HotChocolateValidationBuilderExtensions.AddMaxExecutionDepthRule(null!, 5, true);| Assert.Throws<ArgumentNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "FieldMustBeDefinedRuleTests.cs",
    "methods": [
      {
        "name": "FieldIsNotDefinedOnTypeInFragment",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... fieldNotDefined| ... aliasedLyingFieldTargetNotDefined| }| }| fragment fieldNotDefined on Dog {| meowVolume| }| fragment aliasedLyingFieldTargetNotDefined on Dog {| barkVolume: kawVolume| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t => Assert.Equal(| \"The field `meowVolume` does not exist \" +| \"on the type `Dog`.\", t.Message),| t => Assert.Equal(| \"The field `kawVolume` does not exist \" +| \"on the type `Dog`.\", t.Message));| context.Errors.MatchSnapshot();| }"
      },
      {
        "name": "InterfaceFieldSelectionOnPet",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... interfaceFieldSelection| }| }| fragment interfaceFieldSelection on Pet {| name| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "DefinedOnImplementorsButNotInterfaceOnPet",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... definedOnImplementorsButNotInterface| }| }| fragment definedOnImplementorsButNotInterface on Pet {| nickname| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t => Assert.Equal(| \"The field `nickname` does not exist \" +| \"on the type `Pet`.\", t.Message));| context.Errors.First().MatchSnapshot();| }"
      },
      {
        "name": "InDirectFieldSelectionOnUnion",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... inDirectFieldSelectionOnUnion| }| }| fragment inDirectFieldSelectionOnUnion on CatOrDog {| __typename| ... on Pet {| name| }| ... on Dog {| barkVolume| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "DirectFieldSelectionOnUnion",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| query {| catOrDog {| ... directFieldSelectionOnUnion| }| }| fragment directFieldSelectionOnUnion on CatOrDog {| name| barkVolume| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t => Assert.Equal(| \"A union type cannot declare a field directly. \" +| \"Use inline fragments or fragments instead.\", t.Message));| context.Errors.First().MatchSnapshot();| }"
      },
      {
        "name": "IntrospectionFieldsOnInterface",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... interfaceFieldSelection| }| }| fragment interfaceFieldSelection on Pet {| __typename| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "IntrospectionFieldsOnUnion",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query {| dog {| ... unionFieldSelection| }| }| fragment unionFieldSelection on CatOrDog {| __typename| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "IntrospectionFieldsOnObject",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query {| catOrDog {| ... unionFieldSelection| }| }| fragment interfaceFieldSelection on Cat {| __typename| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      }
    ]
  },
  {
    "file": "FieldSelectionMergingRuleTests.cs",
    "methods": [
      {
        "name": "MergeIdenticalFields",
        "body": "{| ExpectValid(| \"\"\"| {| dog {| ... mergeIdenticalFields| }| }| fragment mergeIdenticalFields on Dog {| name| name| }| \"\"\");| }"
      },
      {
        "name": "MergeIdenticalAliasesAndFields",
        "body": "{| ExpectValid(| \"\"\"| {| dog {| ... mergeIdenticalAliasesAndFields| }| }| fragment mergeIdenticalAliasesAndFields on Dog {| otherName: name| otherName: name| }| \"\"\");| }"
      },
      {
        "name": "ConflictingBecauseAlias",
        "body": "{| ExpectErrors(| \"\"\"| {| dog {| ... conflictingBecauseAlias| }| }| fragment conflictingBecauseAlias on Dog {| name: nickname| name| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "MergeIdenticalFieldsWithIdenticalArgs",
        "body": "{| ExpectValid(| \"\"\"| {| dog {| ... mergeIdenticalFieldsWithIdenticalArgs| }| }| fragment mergeIdenticalFieldsWithIdenticalArgs on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand(dogCommand: SIT)| }| \"\"\");| }"
      },
      {
        "name": "MergeIdenticalFieldsWithIdenticalValues",
        "body": "{| ExpectValid(| \"\"\"| {| dog {| ... mergeIdenticalFieldsWithIdenticalValues| }| }| fragment mergeIdenticalFieldsWithIdenticalValues on Dog {| doesKnowCommand(dogCommand: $dogCommand)| doesKnowCommand(dogCommand: $dogCommand)| }| \"\"\");| }"
      },
      {
        "name": "ConflictingArgsOnValues",
        "body": "{| ExpectErrors(| \"\"\"| {| dog {| ... conflictingArgsOnValues| }| }| fragment conflictingArgsOnValues on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand(dogCommand: HEEL)| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "ConflictingArgsValueAndVar",
        "body": "{| ExpectErrors(| \"\"\"| query($dogCommand: DogCommand!) {| dog {| ... conflictingArgsValueAndVar| }| }| fragment conflictingArgsValueAndVar on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand(dogCommand: $dogCommand)| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "ConflictingArgsWithVars",
        "body": "{| ExpectErrors(| \"\"\"| query($varOne: DogCommand! $varTwo: DogCommand!) {| dog {| ... conflictingArgsWithVars| }| }| fragment conflictingArgsWithVars on Dog {| doesKnowCommand(dogCommand: $varOne)| doesKnowCommand(dogCommand: $varTwo)| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "DifferingArgs",
        "body": "{| ExpectErrors(| \"\"\"| {| dog {| ... differingArgs| }| }| fragment differingArgs on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "SameResponseNameDifferentFieldName",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... dog| }| catOrDog: dogOrHuman {| ... dog| }| }| fragment dog on Dog {| doesKnowCommand| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "SafeDifferingFields",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... safeDifferingFields| }| }| fragment safeDifferingFields on Pet {| ... on Dog {| volume: barkVolume| }| ... on Cat {| volume: meowVolume| }| }| \"\"\");| }"
      },
      {
        "name": "SafeDifferingArgs",
        "body": "{| ExpectValid(| \"\"\"| {| dog {| ... safeDifferingArgs| }| }| fragment safeDifferingArgs on Pet {| ... on Dog {| doesKnowCommand(dogCommand: SIT)| }| ... on Cat {| doesKnowCommand(catCommand: JUMP)| }| }| \"\"\");| }"
      },
      {
        "name": "ConflictingDifferingResponses",
        "body": "{| ExpectErrors(| \"\"\"| {| dog {| ... conflictingDifferingResponses| }| }| fragment conflictingDifferingResponses on Pet {| ... on Dog {| someValue: nickname| }| ... on Cat {| someValue: meowVolume| }| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "ShortHandQueryWithNoDuplicateFields",
        "body": "{| ExpectValid(| \"\"\"| {| __type (type: \"Foo\") {| name| fields {| name| type {| name| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "Stream_Mergeable",
        "body": "{| ExpectValid(| \"\"\"| {| __type (type: \"Foo\") {| name| fields @stream(initialCount: 1) {| type {| name| }| }| fields @stream(initialCount: 1) {| name| }| }| }| \"\"\");| }"
      },
      {
        "name": "Stream_Argument_Mismatch",
        "body": "{| ExpectErrors(| \"\"\"| {| __type (type: \"Foo\") {| name| fields @stream(initialCount: 1) {| type {| name| }| }| fields @stream(initialCount: 2) {| name| }| }| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "Stream_On_Some_Fields",
        "body": "{| ExpectErrors(| \"\"\"| {| __type (type: \"Foo\") {| name| fields @stream(initialCount: 1) {| type {| name| }| }| fields {| name| }| }| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "ShortHandQueryWithDuplicateFieldInSecondLevelFragment",
        "body": "{| ExpectErrors(| \"\"\"| {| dog {| doesKnowCommand(dogCommand: DOWN)| ... FooLevel1| }| }| fragment FooLevel1 on Dog {| ... FooLevel2| }| fragment FooLevel2 on Dog {| doesKnowCommand(dogCommand: HEEL)| }| \"\"\",| t => Assert.Equal(| \"Encountered fields for the same object that cannot be merged.\",| t.Message));| }"
      },
      {
        "name": "ShortHandQueryWithDupMergeableFieldInSecondLevelFragment",
        "body": "{| // arrange| ExpectValid(| \"\"\"| {| dog {| doesKnowCommand(dogCommand: DOWN)| ... FooLevel1| }| }| fragment FooLevel1 on Dog {| ... FooLevel2| }| fragment FooLevel2 on Dog {| doesKnowCommand(dogCommand: DOWN)| }| \"\"\");| }"
      },
      {
        "name": "TypeNameFieldOnInterfaceIsMergeable",
        "body": "{| // arrange| ExpectValid(| \"\"\"| {| dog {| ... interfaceFieldSelection| }| }| fragment interfaceFieldSelection on Pet {| __typename| __typename| }| \"\"\");| }"
      },
      {
        "name": "TypeNameFieldOnUnionIsMergeable",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... interfaceFieldSelection| }| }| fragment interfaceFieldSelection on CatOrDog {| __typename| __typename| }| \"\"\");| }"
      },
      {
        "name": "TypeNameFieldOnObjectIsMergeable",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... interfaceFieldSelection| }| }| fragment interfaceFieldSelection on Cat {| __typename| __typename| }| \"\"\");| }"
      },
      {
        "name": "InvalidFieldsShouldNotRaiseValidationError",
        "body": "No body available"
      },
      {
        "name": "UniqueFields",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... uniqueFields| }| }| fragment uniqueFields on Dog {| name| nickname| }| \"\"\");| }"
      },
      {
        "name": "IdenticalFields",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... mergeIdenticalFields| }| }| fragment mergeIdenticalFields on Dog {| name| name| }| \"\"\");| }"
      },
      {
        "name": "IdenticalFieldsWithIdenticalArgs",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... mergeIdenticalFieldsWithIdenticalArgs| }| }| fragment mergeIdenticalFieldsWithIdenticalArgs on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand(dogCommand: SIT)| }| \"\"\");| }"
      },
      {
        "name": "DifferentArgsWithDifferentAliases",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... differentArgsWithDifferentAliases| }| }| fragment differentArgsWithDifferentAliases on Dog {| knowsSit: doesKnowCommand(dogCommand: SIT)| knowsDown: doesKnowCommand(dogCommand: DOWN)| }| \"\"\");| }"
      },
      {
        "name": "DifferentDirectivesWithDifferentAliases",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... differentDirectivesWithDifferentAliases| }| }| fragment differentDirectivesWithDifferentAliases on Dog {| nameIfTrue: name @include(if: true)| nameIfFalse: name @include(if: false)| }| \"\"\");| }"
      },
      {
        "name": "DifferentSkipIncludeDirectivesAccepted",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... differentDirectivesWithDifferentAliases| }| }| fragment differentDirectivesWithDifferentAliases on Dog {| name @include(if: true)| name @include(if: false)| }| \"\"\");| }"
      },
      {
        "name": "SameAliasesWithDifferentFieldTargets",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... sameAliasesWithDifferentFieldTargets| }| }| fragment sameAliasesWithDifferentFieldTargets on Dog {| fido: name| fido: nickname| }| \"\"\");| }"
      },
      {
        "name": "SameAliasesAllowedOnNonOverlappingFields",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... sameAliasesWithDifferentFieldTargets| }| }| fragment sameAliasesWithDifferentFieldTargets on Pet {| ... on Dog {| name| }| ... on Cat {| name: nickname| }| }| \"\"\");| }"
      },
      {
        "name": "AliasMaskingDirectFieldAccess",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... aliasMaskingDirectFieldAccess| }| }| fragment aliasMaskingDirectFieldAccess on Dog {| name: nickname| name| }| \"\"\");| }"
      },
      {
        "name": "DifferentArgsSecondAddsAnArgument",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... conflictingArgs| }| }| fragment conflictingArgs on Dog {| doesKnowCommand| doesKnowCommand(dogCommand: HEEL)| }| \"\"\");| }"
      },
      {
        "name": "DifferentArgsSecondMissingAnArgument",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... conflictingArgs| }| }| fragment conflictingArgs on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand| }| \"\"\");| }"
      },
      {
        "name": "ConflictingArgValues",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... conflictingArgs| }| }| fragment conflictingArgs on Dog {| doesKnowCommand(dogCommand: SIT)| doesKnowCommand(dogCommand: HEEL)| }| \"\"\");| }"
      },
      {
        "name": "ConflictingArgNames",
        "body": "{| ExpectErrors(| \"\"\"| {| catOrDog {| ... conflictingArgs| }| }| fragment conflictingArgs on Dog {| isAtLocation(x: 0)| isAtLocation(y: 0)| }| \"\"\");| }"
      },
      {
        "name": "AllowsDifferentArgsWhereNoConflictIsPossible",
        "body": "{| ExpectValid(| \"\"\"| {| catOrDog {| ... conflictingArgs| }| }| fragment conflictingArgs on Pet {| ... on Dog {| name(surname: true)| }| ... on Cat {| name| }| }| \"\"\");| }"
      },
      {
        "name": "EncountersConflictInFragments",
        "body": "{| ExpectErrors(| \"\"\"| {| ...A| ...B| }| fragment A on Query {| x: a| }| fragment B on Query {| x: b| }| \"\"\");| }"
      },
      {
        "name": "ReportsEachConflictOnce",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| ...A| ...B| }| f2 {| ...B| ...A| }| f3 {| ...A| ...B| x: c| }| }| fragment A on Query {| x: a| }| fragment B on Query {| x: b| }| \"\"\");| }"
      },
      {
        "name": "DeepConflict",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| x: a| }| f1 {| x: b| }| }| \"\"\");| }"
      },
      {
        "name": "DeepConflictWithMultipleIssues",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| x: a| y: c| },| f1 {| x: b| y: d| }| }| \"\"\");| }"
      },
      {
        "name": "VeryDeepConflict",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| f2 {| x: a| }| }| f1 {| f2 {| x: b| }| }| }| \"\"\");| }"
      },
      {
        "name": "ReportsDeepConflictToNearestCommonAncestor",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| f2 {| x: a| }| f2 {| x: b| }| }| f1 {| f2 {| y| }| }| }| \"\"\");| }"
      },
      {
        "name": "ReportsDeepConflictToNearestCommonAncestorInFragments",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| ...F| }| f1 {| ...F| }| }| fragment F on Query {| f2 {| f3 {| x: a| }| f3 {| x: b| }| }| f2 {| f3 {| y| }| }| }| \"\"\");| }"
      },
      {
        "name": "ReportsDeepConflictInNestedFragments",
        "body": "{| ExpectErrors(| \"\"\"| {| f1 {| ...F| }| f1 {| ...I| }| }| fragment F on Query {| x: a| ...G| }| fragment G on Query {| y: c| }| fragment I on Query {| y: d| ...J| }| fragment J on Query {| x: b| }| \"\"\");| }"
      },
      {
        "name": "ConflictingReturnTypesWhichPotentiallyOverlap",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ...on IntBox {| scalar| }| ...on NonNullStringBox1 {| scalar| }| }| }| \"\"\");| }"
      },
      {
        "name": "CompatibleReturnShapesOnDifferentReturnTypes",
        "body": "{| ExpectValid(| TestSchema,| \"\"\"| {| someBox {| ... on SomeBox {| deepBox {| unrelatedField| }| }| ... on StringBox {| deepBox {| unrelatedField| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingReturnTypesDespiteNoOverlap",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| scalar| }| ... on StringBox {| scalar| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingReturnTypeNullabilityDespiteNoOverlap",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on NonNullStringBox1 {| scalar| }| ... on StringBox {| scalar| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingReturnTypeListDespiteNoOverlap",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| box: listStringBox {| scalar| }| }| ... on StringBox {| box: stringBox {| scalar| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingReturnTypeListDespiteNoOverlapReverse",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| box: stringBox {| scalar| }| }| ... on StringBox {| box: listStringBox {| scalar| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingSubfields",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| box: stringBox {| val: scalar| val: unrelatedField| }| }| ... on StringBox {| box: stringBox {| val: scalar| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "DisallowsDifferingDeepReturnTypesDespiteNoOverlap",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| box: stringBox {| scalar| }| }| ... on StringBox {| box: intBox {| scalar| }| }| }| }| \"\"\");| }"
      },
      {
        "name": "AllowsNonConflictingOverlappingTypes",
        "body": "{| ExpectValid(| TestSchema,| \"\"\"| {| someBox {| ... on IntBox {| scalar: unrelatedField| }| ... on StringBox {| scalar| }| }| }| \"\"\");| }"
      },
      {
        "name": "SameWrappedScalarReturnTypes",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| someBox {| ...on NonNullStringBox1 {| scalar| }| ...on NonNullStringBox2 {| scalar| }| }| }| \"\"\");| }"
      },
      {
        "name": "AllowsInlineFragmentsWithoutTypeCondition",
        "body": "{| ExpectValid(| TestSchema,| \"\"\"| {| a| ... {| a| }| }| \"\"\");| }"
      },
      {
        "name": "ComparesDeepTypesIncludingList",
        "body": "{| ExpectErrors(| TestSchema,| \"\"\"| {| connection {| ...edgeID| edges {| node {| id: name| }| }| }| }| fragment edgeID on Connection {| edges {| node {| id| }| }| }| \"\"\");| }"
      },
      {
        "name": "FindsInvalidCaseEvenWithImmediatelyRecursiveFragment",
        "body": "{| ExpectErrors(| \"\"\"| {| dogOrHuman {| ... sameAliasesWithDifferentFieldTargets| }| }| fragment sameAliasesWithDifferentFieldTargets on Dog {| ...sameAliasesWithDifferentFieldTargets| fido: name| fido: nickname| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "FragmentNameUniquenessRuleTests.cs",
    "methods": [
      {
        "name": "UniqueFragments",
        "body": "{| ExpectValid(@\"| {| dog {| ...fragmentOne| ...fragmentTwo| }| }| fragment fragmentOne on Dog {| name| }| fragment fragmentTwo on Dog {| owner {| name| }| }| \");| }"
      },
      {
        "name": "DuplicateFragments",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragmentOne| }| }| fragment fragmentOne on Dog {| name| }| fragment fragmentOne on Dog {| owner {| name| }| }| \",| t => Assert.Equal(| \"There are multiple fragments with the name `fragmentOne`.\",| t.Message));| }"
      },
      {
        "name": "OneFragment",
        "body": "{| // arrange| ExpectValid(@\"| {| ...fragA| }| fragment fragA on Query {| arguments {| idArgField| }| }| \");| }"
      },
      {
        "name": "ManyFragments",
        "body": "{| // arrange| ExpectValid(@\"| {| ...fragA| ...fragB| ...fragC| }| fragment fragA on Query {| arguments {| idArgField| }| }| fragment fragB on Query {| dog {| name| }| }| fragment fragC on Query {| anyArg| }| \");| }"
      },
      {
        "name": "InlineFragmentsAreAlwaysUnique",
        "body": "{| // arrange| ExpectValid(@\"| {| ...on Query {| arguments {| idArgField| }| }| ...on Query {| dog {| name| }| }| }| \");| }"
      },
      {
        "name": "FragmentAndOperationNamedTheSame",
        "body": "{| // arrange| ExpectValid(@\"| query Foo {| ...Foo| }| fragment Foo on Query {| dog {| name| }| }| \");| }"
      },
      {
        "name": "FragmentsNamedTheSame",
        "body": "{| // arrange| ExpectErrors(@\"| {| ...fragA| }| fragment fragA on Query {| arguments {| idArgField| }| }| fragment fragA on Query {| dog {| name| }| }| \");| }"
      },
      {
        "name": "FragmentsNamedTheSameWithoutBeingReferenced",
        "body": "{| // arrange| ExpectErrors(@\"| fragment fragA on Query {| arguments {| idArgField| }| }| fragment fragA on Query {| dog {| name| }| }| \");| }"
      }
    ]
  },
  {
    "file": "FragmentSpreadIsPossibleRuleTests.cs",
    "methods": [
      {
        "name": "FragmentDoesNotMatchType",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragmentDoesNotMatchType| }| }| fragment fragmentDoesNotMatchType on Human {| name| }| \",| t => Assert.Equal(| \"The parent type does not match the type condition on the fragment.\",| t.Message));| }"
      },
      {
        "name": "InterfaceTypeDoesMatch",
        "body": "{| ExpectValid(@\"| {| dog {| ...interfaceTypeDoesMatch| }| }| fragment interfaceTypeDoesMatch on Pet {| name| }| \");| }"
      },
      {
        "name": "UnionTypeDoesMatch",
        "body": "{| ExpectValid(@\"| {| dog {| ...unionTypeDoesMatch| }| }| fragment unionTypeDoesMatch on CatOrDog {| __typename| }| \");| }"
      },
      {
        "name": "ObjectTypeDoesMatch",
        "body": "{| ExpectValid(@\"| {| dog {| ...objectTypeDoesMatch| }| }| fragment objectTypeDoesMatch on Dog {| name| }| \");| }"
      },
      {
        "name": "Star_Wars_With_Inline_Fragments",
        "body": "{| ExpectValid(| StarWars,| @\"| query ExecutionDepthShouldNotLeadToEmptyObects {| hero(episode: NEW_HOPE) {| __typename| id| name| ... on Human {| __typename| homePlanet| }| ... on Droid {| __typename| primaryFunction| }| friends {| nodes {| __typename| ... on Human {| __typename| homePlanet| friends {| __typename| }| }| ... on Droid {| __typename| primaryFunction| friends {| __typename| }| }| }| }| }| }\");| }"
      },
      {
        "name": "OfTheSameObject",
        "body": "{| ExpectValid(@\"| {| dog {| ...objectWithinObject| }| }| fragment objectWithinObject on Dog { ...dogFragment }| fragment dogFragment on Dog { barkVolume }| \");| }"
      },
      {
        "name": "OfTheSameObjectWithInlineFragment",
        "body": "{| ExpectValid(@\"| {| dog {| ...objectWithinObjectAnon| }| }| fragment objectWithinObjectAnon on Dog { ... on Dog { barkVolume } }| \");| }"
      },
      {
        "name": "ObjectIntoAnImplementedInterface",
        "body": "{| ExpectValid(@\"| {| human{| pets {| ...objectWithinInterface| }| }| }| fragment objectWithinInterface on Pet { ...dogFragment }| fragment dogFragment on Dog { barkVolume }| \");| }"
      },
      {
        "name": "ObjectIntoContainingUnion",
        "body": "{| ExpectValid(@\"| {| catOrDog {| ...objectWithinUnion| }| }| fragment objectWithinUnion on CatOrDog { ...dogFragment }| fragment dogFragment on Dog { barkVolume }| \");| }"
      },
      {
        "name": "UnionIntoContainedObject",
        "body": "{| ExpectValid(@\"| {| dog {| ...unionWithinObject| }| }| fragment unionWithinObject on Dog { ...catOrDogFragment }| fragment catOrDogFragment on CatOrDog { __typename }| \");| }"
      },
      {
        "name": "UnionIntoOverlappingInterface",
        "body": "{| ExpectValid(@\"| {| human{| pets {| ...unionWithinInterface| }| }| }| fragment unionWithinInterface on Pet { ...catOrDogFragment }| fragment catOrDogFragment on CatOrDog { __typename }| \");| }"
      },
      {
        "name": "UnionIntoOverlappingUnion",
        "body": "{| ExpectValid(@\"| {| dogOrHuman {| ...unionWithinUnion| }| }| fragment unionWithinUnion on DogOrHuman { ...catOrDogFragment }| fragment catOrDogFragment on CatOrDog { __typename }| \");| }"
      },
      {
        "name": "InterfaceIntoImplementedObject",
        "body": "{| ExpectValid(@\"| {| dog {| ...interfaceWithinObject| }| }| fragment interfaceWithinObject on Dog { ...petFragment }| fragment petFragment on Pet { name }| \");| }"
      },
      {
        "name": "InterfaceIntoOverlappingInterface",
        "body": "{| ExpectValid(@\"| {| human{| pets {| ...interfaceWithinInterface| }| }| }| fragment interfaceWithinInterface on Pet { ...beingFragment }| fragment beingFragment on Being { name }| \");| }"
      },
      {
        "name": "InterfaceIntoOverlappingInterfaceInInlineFragment",
        "body": "{| ExpectValid(@\"| {| human{| pets {| ...interfaceWithinInterface| }| }| }| fragment interfaceWithinInterface on Pet { ... on Being { name } }| \");| }"
      },
      {
        "name": "InterfaceIntoOverlappingUnion",
        "body": "{| ExpectValid(@\"| {| catOrDog {| ...objectWithinUnion| }| }| fragment objectWithinUnion on CatOrDog { ...dogFragment }| fragment dogFragment on Dog { barkVolume }| \");| }"
      },
      {
        "name": "DifferentObjectIntoObject",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidObjectWithinObject| }| }| }| fragment invalidObjectWithinObject on Cat { ...dogFragment }| fragment dogFragment on Dog { barkVolume }| \");| }"
      },
      {
        "name": "DifferentObjectIntoObjectInInlineFragment",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidObjectWithinObjectAnon| }| }| }| fragment invalidObjectWithinObjectAnon on Cat {| ... on Dog { barkVolume }| }| \");| }"
      },
      {
        "name": "ObjectIntoNotImplementingInterface",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidObjectWithinInterface| }| }| }| fragment invalidObjectWithinInterface on Pet { ...humanFragment }| fragment humanFragment on Human { pets { name } }| \");| }"
      },
      {
        "name": "ObjectIntoNotContainingUnion",
        "body": "{| ExpectErrors(@\"| {| catOrDog {| ...invalidObjectWithinUnion| }| }| fragment invalidObjectWithinUnion on CatOrDog { ...humanFragment }| fragment humanFragment on Human { pets { name } }| \");| }"
      },
      {
        "name": "UnionIntoNotContainedObject",
        "body": "{| ExpectErrors(@\"| {| human {| ...invalidUnionWithinObject| }| }| fragment invalidUnionWithinObject on Human { ...catOrDogFragment }| fragment catOrDogFragment on CatOrDog { __typename }| \");| }"
      },
      {
        "name": "UnionIntoNonOverlappingInterface",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidUnionWithinInterface| }| }| }| fragment invalidUnionWithinInterface on Pet { ...humanOrAlienFragment }| fragment humanOrAlienFragment on HumanOrAlien { __typename }| \");| }"
      },
      {
        "name": "UnionIntoNonOverlappingUnion",
        "body": "{| ExpectErrors(@\"| {| catOrDog {| ...invalidUnionWithinUnion| }| }| fragment invalidUnionWithinUnion on CatOrDog { ...humanOrAlienFragment }| fragment humanOrAlienFragment on HumanOrAlien { __typename }| \");| }"
      },
      {
        "name": "InterfaceIntoNonImplementingObject",
        "body": "{| ExpectErrors(@\"| {| catOrDog {| ...invalidInterfaceWithinObject| }| }| fragment invalidInterfaceWithinObject on Cat { ...intelligentFragment }| fragment intelligentFragment on Intelligent { iq }| \");| }"
      },
      {
        "name": "InterfaceIntoNonOverlappingInterface",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidInterfaceWithinInterface| }| }| }| fragment invalidInterfaceWithinInterface on Pet {| ...intelligentFragment| }| fragment intelligentFragment on Intelligent { iq }| \");| }"
      },
      {
        "name": "InterfaceIntoNonOverlappingInterfaceInInlineFragment",
        "body": "{| ExpectErrors(@\"| {| human{| pets {| ...invalidInterfaceWithinInterfaceAnon| }| }| }| fragment invalidInterfaceWithinInterfaceAnon on Pet {| ...on Intelligent { iq }| }| \");| }"
      },
      {
        "name": "InterfaceIntoNonOverlappingUnion",
        "body": "{| ExpectErrors(@\"| {| catOrDog {| ...invalidInterfaceWithinUnion| }| }| fragment invalidInterfaceWithinUnion on CatOrDog { ...petFragment }| fragment petFragment on HumanOrAlien { name }| \");| }"
      }
    ]
  },
  {
    "file": "FragmentSpreadTargetDefinedRuleTests.cs",
    "methods": [
      {
        "name": "UndefinedFragment",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...undefinedFragment| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t => Assert.Equal(| \"The specified fragment `undefinedFragment` \" +| \"does not exist.\",| t.Message));| context.Errors.MatchSnapshot();| }"
      },
      {
        "name": "DefinedFragment",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...definedFragment| }| }| fragment definedFragment on Dog| {| barkVolume| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      }
    ]
  },
  {
    "file": "FragmentSpreadTypeExistenceRuleTests.cs",
    "methods": [
      {
        "name": "CorrectTypeOnFragment",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...correctType| }| }| fragment correctType on Dog {| name| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "CorrectTypeOnInlineFragment",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...inlineFragment| }| }| fragment inlineFragment on Dog {| ... on Dog {| name| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "CorrectTypeOnInlineFragment2",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...inlineFragment2| }| }| fragment inlineFragment2 on Dog {| ... @include(if: true) {| name| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "NotOnExistingTypeOnFragment",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...notOnExistingType| }| }| fragment notOnExistingType on NotInSchema {| name| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t =>| {| Assert.Equal(| \"Unknown type `NotInSchema`.\",| t.Message);| });| context.Errors.MatchSnapshot();| }"
      },
      {
        "name": "NotExistingTypeOnInlineFragment",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| {| dog {| ...inlineNotExistingType| }| }| fragment inlineNotExistingType on Dog {| ... on NotInSchema {| name| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t =>| {| Assert.Equal(| \"Unknown type `NotInSchema`.\",| t.Message);| });| context.Errors.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FragmentSpreadsMustNotFormCyclesRuleTests.cs",
    "methods": [
      {
        "name": "FragmentCycle1",
        "body": "{| ExpectErrors(@\"| {| dog {| ...nameFragment| }| }| fragment nameFragment on Dog {| name| ...barkVolumeFragment| }| fragment barkVolumeFragment on Dog {| barkVolume| ...nameFragment| }| \",| t => Assert.Equal(| \"The graph of fragment spreads must not form any \" +| \"cycles including spreading itself. Otherwise an \" +| \"operation could infinitely spread or infinitely \" +| \"execute on cycles in the underlying data.\",| t.Message));| }"
      },
      {
        "name": "FragmentCycle2",
        "body": "{| ExpectErrors(@\"| {| dog {| ...nameFragment| }| }| fragment nameFragment on Dog {| name| ...barkVolumeFragment| }| fragment barkVolumeFragment on Dog {| barkVolume| ...barkVolumeFragment1| }| fragment barkVolumeFragment1 on Dog {| barkVolume| ...barkVolumeFragment2| }| fragment barkVolumeFragment2 on Dog {| barkVolume| ...nameFragment| }| \",| t => Assert.Equal(| \"The graph of fragment spreads must not form any \" +| \"cycles including spreading itself. Otherwise an \" +| \"operation could infinitely spread or infinitely \" +| \"execute on cycles in the underlying data.\",| t.Message));| }"
      },
      {
        "name": "InfiniteRecursion",
        "body": "{| ExpectErrors(@\"| {| dog {| ...dogFragment| }| }| fragment dogFragment on Dog {| name| owner {| ...ownerFragment| }| }| fragment ownerFragment on Human {| name| pets {| ...dogFragment| }| }| \",| t => Assert.Equal(| \"The graph of fragment spreads must not form any \" +| \"cycles including spreading itself. Otherwise an \" +| \"operation could infinitely spread or infinitely \" +| \"execute on cycles in the underlying data.\",| t.Message));| }"
      },
      {
        "name": "QueryWithSideBySideFragSpreads",
        "body": "{| ExpectValid(@\"| {| dog {| ...dogFragment| ...dogFragment| ...dogFragment| ...dogFragment| ...dogFragment| ...dogFragment| ...dogFragment| }| }| fragment dogFragment on Dog {| name| }| \");| }"
      },
      {
        "name": "SingleReferenceIsValid",
        "body": "{| ExpectValid(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB }| fragment fragB on Dog { name }| \");| }"
      },
      {
        "name": "SpreadTwiceIsNotCircular",
        "body": "{| ExpectValid(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB, ...fragB }| fragment fragB on Dog { name }| \");| }"
      },
      {
        "name": "SpreadTwiceIndirectlyIsNotCircular",
        "body": "{| ExpectValid(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB, ...fragC }| fragment fragB on Dog { ...fragC }| fragment fragC on Dog { name }| \");| }"
      },
      {
        "name": "DoubleSpreadWithinAbstractTypes",
        "body": "{| ExpectValid(@\"| {| human {| pets {| ...spreadsInAnon| }| }| }| fragment nameFragment on Pet {| ... on Dog { name }| ... on Cat { name }| }| fragment spreadsInAnon on Pet {| ... on Dog { ...nameFragment }| ... on Cat { ...nameFragment }| }| \");| }"
      },
      {
        "name": "SpeardingRecursivelyWithinFieldFails",
        "body": "{| ExpectErrors(@\"| {| human {| ...fragA| }| }| fragment fragA on Human { relatives { ...fragA } },| \");| }"
      },
      {
        "name": "NoSpreadingItselfDirectly",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragA }| \");| }"
      },
      {
        "name": "NoSpreadingItselfDirectlyWithinInlineFragment",
        "body": "{| ExpectErrors(@\"| {| human {| pets {| ...fragA| }| }| }| fragment fragA on Pet {| ... on Dog {| ...fragA| }| }| \");| }"
      },
      {
        "name": "NoSpreadingItselfIndirectly",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB }| fragment fragB on Dog { ...fragA }| \");| }"
      },
      {
        "name": "NoSpreadingItselfIndirectlyWithinInlineFragment",
        "body": "{| ExpectErrors(@\"| {| human {| pets {| ...fragA| }| }| }| fragment fragA on Pet {| ... on Dog {| ...fragB| }| }| fragment fragB on Pet {| ... on Dog {| ...fragA| }| }| \");| }"
      },
      {
        "name": "NoSpreadingItselfDeeply",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB }| fragment fragB on Dog { ...fragC }| fragment fragC on Dog { ...fragO }| fragment fragX on Dog { ...fragY }| fragment fragY on Dog { ...fragZ }| fragment fragZ on Dog { ...fragO }| fragment fragO on Dog { ...fragP }| fragment fragP on Dog { ...fragA, ...fragX }| \");| }"
      },
      {
        "name": "NoSpreadingItselfDeeplyTwoPaths",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB, ...fragC }| fragment fragB on Dog { ...fragA }| fragment fragC on Dog { ...fragA }| \");| }"
      },
      {
        "name": "NoSpreadingItselfDeeplyTwoPathsAltTraverseOrder",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragC }| fragment fragB on Dog { ...fragC }| fragment fragC on Dog { ...fragA, ...fragB }| \");| }"
      },
      {
        "name": "NoSpreadingItselfDeeplyAndImmediately",
        "body": "{| ExpectErrors(@\"| {| dog {| ...fragA| }| }| fragment fragA on Dog { ...fragB }| fragment fragB on Dog { ...fragB, ...fragC }| fragment fragC on Dog { ...fragA, ...fragB }| \");| }"
      },
      {
        "name": "DoesNotInfiniteLoopOnRecursiveFragment",
        "body": "{| ExpectErrors(@\"| {| dogOrHuman {| ... fragA| }| }| fragment fragA on Human {| name| ... fragA| }\");| }"
      },
      {
        "name": "DoesNotInfiniteLoopOnImmediatelyRecursiveFragment",
        "body": "{| ExpectErrors(@\"| {| dogOrHuman {| ... fragA| }| }| fragment fragA on Human {| name| relatives {| name| ... fragA| }| }\");| }"
      },
      {
        "name": "DoesNotInfiniteLoopOnTransitivelyRecursiveFragment",
        "body": "{| ExpectErrors(@\"| {| dogOrHuman {| ... fragA| ... fragB| ... fragC| }| }| fragment fragA on Human { name, ...fragB }| fragment fragB on Human { name, ...fragC }| fragment fragC on Human { name, ...fragA }\");| }"
      }
    ]
  },
  {
    "file": "FragmentsMustBeUsedRuleTests.cs",
    "methods": [
      {
        "name": "UnusedFragment",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| fragment nameFragment on Dog { # unused| name| }| {| dog {| name| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Collection(context.Errors,| t => Assert.Equal(| \"The specified fragment `nameFragment` \" +| \"is not used within the current document.\", t.Message));| context.Errors.MatchSnapshot();| }"
      },
      {
        "name": "UsedFragment",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| fragment nameFragment on Dog {| name| }| {| dog {| name| ... nameFragment| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "UsedNestedFragment",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| fragment nameFragment on Dog {| name| ... nestedNameFragment| }| fragment nestedNameFragment on Dog {| name| }| {| dog {| name| ... nameFragment| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      }
    ]
  },
  {
    "file": "InputObjectFieldNamesRuleTests.cs",
    "methods": [
      {
        "name": "AllInputObjectFieldsExist",
        "body": "{| ExpectValid(@\"| {| findDog(complex: { name: \"\"Fido\"\" })| }| \");| }"
      },
      {
        "name": "InvalidInputObjectFieldsExist",
        "body": "{| ExpectErrors(@\"| {| findDog(complex: { favoriteCookieFlavor: \"\"Bacon\"\" })| }| \",| t => Assert.Equal(| \"The specified input object field \" +| \"`favoriteCookieFlavor` does not exist.\",| t.Message));| }"
      },
      {
        "name": "InvalidNestedInputObjectFieldsExist",
        "body": "{| // arrange| ExpectErrors(@\"| {| findDog(complex: { child: { favoriteCookieFlavor: \"\"Bacon\"\" } })| }| \",| t => Assert.Equal(| \"The specified input object field \" +| \"`favoriteCookieFlavor` does not exist.\",| t.Message));| }"
      }
    ]
  },
  {
    "file": "InputObjectFieldUniquenessRuleTests.cs",
    "methods": [
      {
        "name": "NoFieldAmbiguity",
        "body": "{| ExpectValid(| @\"{| findDog(complex: { name: \"\"A\"\", owner: \"\"B\"\" })| }\");| }"
      },
      {
        "name": "NameFieldIsAmbiguous",
        "body": "{| // arrange| ExpectErrors(@\"| {| findDog(complex: { name: \"\"A\"\", name: \"\"B\"\" })| }| \",| error =>| Assert.Equal(\"There can be only one input field named `name`.\", error.Message));| }"
      },
      {
        "name": "InputObjectWithField",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: {requiredField: true, f: true })| }| }| \");| }"
      },
      {
        "name": "SameInputObjectWithinTwoArgs",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(| complexArg1: {requiredField: true, f: true },| complexArg2: {requiredField: true, f: true })| }| }| \");| }"
      },
      {
        "name": "MultipleInputObjectFields",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| f1: \"\"value\"\",| f2: \"\"value\"\",| f3: \"\"value\"\" })| }| }| \");| }"
      },
      {
        "name": "AllowsForNestedInputObjectsWithSimilarFields",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true| deep: {| requiredField: true| deep: {| requiredField: true| id: 1| }| id: 1| }| id: 1| })| }| }| \");| }"
      },
      {
        "name": "DuplicateInputObjectFields",
        "body": "{| ExpectErrors(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| f1: \"\"value\"\",| f1: \"\"value\"\" })| }| }| \");| }"
      },
      {
        "name": "ManyDuplicateInputObjectFields",
        "body": "{| ExpectErrors(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| f1: \"\"value\"\",| f1: \"\"value\"\",| f1: \"\"value\"\" })| }| }| \");| }"
      },
      {
        "name": "NestedDuplicateInputObjectFields",
        "body": "{| ExpectErrors(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| deep: {| requiredField:true| f2: \"\"value\"\",| f2: \"\"value\"\" }})| }| }| \");| }"
      }
    ]
  },
  {
    "file": "InputObjectRequiredFieldsRuleTests.cs",
    "methods": [
      {
        "name": "RequiredFieldsHaveValidValue",
        "body": "{| ExpectValid(@\"| {| findDog2(complex: { name: \"\"Foo\"\" })| }| \");| }"
      },
      {
        "name": "NestedRequiredFieldsHaveValidValue",
        "body": "{| ExpectValid(@\"| {| findDog2(complex: { name: \"\"Foo\"\" child: { name: \"\"123\"\" } })| }| \");| }"
      },
      {
        "name": "RequiredFieldIsNull",
        "body": "{| ExpectErrors(@\"| {| findDog2(complex: { name: null })| }| \",| t => Assert.Equal(| \"`name` is a required field and cannot be null.\",| t.Message));| }"
      },
      {
        "name": "RequiredFieldIsNotSet",
        "body": "{| // arrange| ExpectErrors(@\"| {| findDog2(complex: { })| }| \",| t => Assert.Equal(| \"`name` is a required field and cannot be null.\",| t.Message));| }"
      },
      {
        "name": "NestedRequiredFieldIsNotSet",
        "body": "{| // arrange| ExpectErrors(@\"| {| findDog2(complex: { name: \"\"foo\"\" child: { owner: \"\"bar\"\" } })| }| \",| t => Assert.Equal(| \"`name` is a required field and cannot be null.\",| t.Message));| }"
      },
      {
        "name": "BadNullToNonNullField",
        "body": "{| ExpectErrors(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| nonNullField: null,| })| }| }| \");| }"
      }
    ]
  },
  {
    "file": "IntrospectionDepthRuleTests.cs",
    "methods": [
      {
        "name": "Introspection_With_Cycles_Will_Fail",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(FileResource.Open(\"introspection_with_cycle.graphql\"));| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Equal(| \"Maximum allowed introspection depth exceeded.\",| Assert.Single(context.Errors).Message);| }"
      },
      {
        "name": "Introspection_Without_Cycles",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(FileResource.Open(\"introspection_without_cycle.graphql\"));| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "Max_3_Cycles_Allowed_Success",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(| \"\"\"| {| human {| relatives {| relatives {| relatives {| name| }| }| }| }| }| \"\"\");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| Assert.False(context.FatalErrorDetected);| Assert.False(context.UnexpectedErrorsDetected);| }"
      },
      {
        "name": "Max_3_Cycles_Allowed_Fail",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(| \"\"\"| {| human {| relatives {| relatives {| relatives {| relatives {| name| }| }| }| }| }| }| \"\"\");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Equal(| \"Maximum allowed coordinate cycle depth was exceeded.\",| Assert.Single(context.Errors).Message);| Assert.True(context.FatalErrorDetected);| Assert.False(context.UnexpectedErrorsDetected);| }"
      },
      {
        "name": "Max_2_Relative_Field_Allowed_Success",
        "body": "{| // arrange| var serviceCollection = new ServiceCollection();| var builder = serviceCollection| .AddValidation()| .ConfigureValidation(c => c.RulesModifiers.Add((_, r) => r.Rules.Clear()))| .ModifyValidationOptions(o => o.MaxAllowedErrors = int.MaxValue);| builder.AddMaxAllowedFieldCycleDepthRule(| null,| [(new SchemaCoordinate(\"Human\", \"relatives\"), 2)]);| IServiceProvider services = serviceCollection.BuildServiceProvider();| var rule = services| .GetRequiredService<IValidationConfiguration>()| .GetRules(Schema.DefaultName).First();| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(| \"\"\"| {| human {| relatives {| relatives {| name| }| }| }| }| \"\"\");| context.Prepare(query);| // act| rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| Assert.False(context.FatalErrorDetected);| Assert.False(context.UnexpectedErrorsDetected);| }"
      },
      {
        "name": "Max_1_Relative_Field_Allowed_Fail",
        "body": "{| // arrange| var serviceCollection = new ServiceCollection();| var builder = serviceCollection| .AddValidation()| .ConfigureValidation(c => c.RulesModifiers.Add((_, r) => r.Rules.Clear()))| .ModifyValidationOptions(o => o.MaxAllowedErrors = int.MaxValue);| builder.AddMaxAllowedFieldCycleDepthRule(| null,| [(new SchemaCoordinate(\"Human\", \"relatives\"), 1)]);| IServiceProvider services = serviceCollection.BuildServiceProvider();| var rule = services| .GetRequiredService<IValidationConfiguration>()| .GetRules(Schema.DefaultName).First();| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(| \"\"\"| {| human {| relatives {| relatives {| name| }| }| }| }| \"\"\");| context.Prepare(query);| // act| rule.Validate(context, query);| // assert| Assert.Equal(| \"Maximum allowed coordinate cycle depth was exceeded.\",| Assert.Single(context.Errors).Message);| Assert.True(context.FatalErrorDetected);| Assert.False(context.UnexpectedErrorsDetected);| }"
      }
    ]
  },
  {
    "file": "IntrospectionRuleTests.cs",
    "methods": [
      {
        "name": "IntrospectionNotAllowed_Schema_Field",
        "body": "{| ExpectErrors(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __schema| }| \"\"\");| }"
      },
      {
        "name": "IntrospectionNotAllowed_Schema_Field_Custom_MessageFactory",
        "body": "{| ExpectErrors(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __schema| }| \"\"\",| [| new(WellKnownContextData.IntrospectionMessage, new Func<string>(() => \"Bar\"))| ]);| }"
      },
      {
        "name": "IntrospectionNotAllowed_Schema_Field_Custom_Message",
        "body": "{| ExpectErrors(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __schema| }| \"\"\",| [| new(WellKnownContextData.IntrospectionMessage, \"Baz\")| ]);| }"
      },
      {
        "name": "IntrospectionNotAllowed_Type_Field",
        "body": "{| ExpectErrors(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __type(name: \"foo\")| }| \"\"\");| }"
      },
      {
        "name": "IntrospectionAllowed_Typename_Field",
        "body": "{| ExpectValid(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __typename| }| \"\"\");| }"
      },
      {
        "name": "IntrospectionAllowed_Schema_Field",
        "body": "{| ExpectValid(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __schema {| name| }| }| \"\"\",| [| new(WellKnownContextData.IntrospectionAllowed, null)| ]);| }"
      },
      {
        "name": "IntrospectionAllowed_Type_Field",
        "body": "{| ExpectValid(| CreateSchema(),| b => b.AddIntrospectionAllowedRule()| .ModifyValidationOptions(o => o.DisableIntrospection = true),| \"\"\"| {| __type(name: \"foo\")| }| \"\"\",| [| new(WellKnownContextData.IntrospectionAllowed, null)| ]);| }"
      }
    ]
  },
  {
    "file": "LeafFieldSelectionsRuleTests.cs",
    "methods": [
      {
        "name": "ScalarSelection",
        "body": "{| ExpectValid(@\"| {| dog {| barkVolume| }| }| \");| }"
      },
      {
        "name": "StringList",
        "body": "{| ExpectValid(@\"| {| stringList| }| \");| }"
      },
      {
        "name": "ScalarSelectionsNotAllowedOnInt",
        "body": "{| ExpectErrors(@\"| {| dog {| barkVolume {| sinceWhen| }| }| }| \",| t => Assert.Equal(| \"Field \\\"barkVolume\\\" must not have a selection since type \\\"Int\\\" has no \" +| \"subfields.\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnObjectWithoutSubFields",
        "body": "{| ExpectErrors(@\"| query directQueryOnObjectWithoutSubFields {| human| }| \",| t => Assert.Equal(| \"Field \\\"human\\\" of type \\\"Human\\\" must have a selection of subfields. Did you \" +| \"mean \\\"human { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnObjectWithoutSubFieldsEmptySelection",
        "body": "{| ExpectErrors(@\"| query directQueryOnObjectWithoutSubFields {| human {}| }| \",| t => Assert.Equal(| \"Field \\\"human\\\" of type \\\"Human\\\" must have a selection of subfields. Did you \" +| \"mean \\\"human { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnInterfaceWithoutSubFields",
        "body": "{| ExpectErrors(@\"| query directQueryOnInterfaceWithoutSubFields {| pet| }| \",| t => Assert.Equal(| \"Field \\\"pet\\\" of type \\\"Human\\\" must have a selection of subfields. Did you mean \" +| \"\\\"pet { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnInterfaceWithoutSubFieldsEmptySelection",
        "body": "{| ExpectErrors(@\"| query directQueryOnInterfaceWithoutSubFields {| pet {}| }| \",| t => Assert.Equal(| \"Field \\\"pet\\\" of type \\\"Human\\\" must have a selection of subfields. Did you mean \" +| \"\\\"pet { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnUnionWithoutSubFields",
        "body": "{| ExpectErrors(@\"| query directQueryOnUnionWithoutSubFields {| catOrDog| }| \",| t => Assert.Equal(| \"Field \\\"catOrDog\\\" of type \\\"CatOrDog\\\" must have a selection of subfields. Did \" +| \"you mean \\\"catOrDog { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "DirectQueryOnUnionWithoutSubFieldsEmptySelection",
        "body": "{| ExpectErrors(@\"| query directQueryOnUnionWithoutSubFields {| catOrDog {}| }| \",| t => Assert.Equal(| \"Field \\\"catOrDog\\\" of type \\\"CatOrDog\\\" must have a selection of subfields. Did \" +| \"you mean \\\"catOrDog { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "InterfaceTypeMissingSelection",
        "body": "{| ExpectErrors(@\"| {| human { pets }| }| \",| t => Assert.Equal(| \"Field \\\"pets\\\" of type \\\"[Pet]\\\" must have a selection of subfields. Did you \" +| \"mean \\\"pets { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "InterfaceTypeMissingSelectionEmptySelection",
        "body": "{| ExpectErrors(@\"| {| human { pets {} }| }| \",| t => Assert.Equal(| \"Field \\\"pets\\\" of type \\\"[Pet]\\\" must have a selection of subfields. Did you \" +| \"mean \\\"pets { ... }\\\"?\",| t.Message));| }"
      },
      {
        "name": "EmptyQueryType",
        "body": "{| ExpectErrors(@\"| { }| \",| t => Assert.Equal(| \"Operation `Unnamed` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "EmptyNamedQueryType",
        "body": "{| ExpectErrors(@\"| query Foo { }| \",| t => Assert.Equal(| \"Operation `Foo` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "EmptyMutationType",
        "body": "{| ExpectErrors(@\"| mutation { }| \",| t => Assert.Equal(| \"Operation `Unnamed` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "EmptyNamedMutationType",
        "body": "{| ExpectErrors(@\"| mutation Foo { }| \",| t => Assert.Equal(| \"Operation `Foo` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "EmptySubscriptionType",
        "body": "{| ExpectErrors(@\"| subscription { }| \",| t => Assert.Equal(| \"Operation `Unnamed` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "EmptyNamedSubscriptionType",
        "body": "{| ExpectErrors(@\"| subscription Foo { }| \",| t => Assert.Equal(| \"Operation `Foo` has a empty selection set. Root types without \" +| \"subfields are disallowed.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedOnBoolean",
        "body": "{| ExpectErrors(@\"| {| dog {| barks {| sinceWhen| }| }| }| \",| t => Assert.Equal(| \"Field \\\"barks\\\" must not have a selection since type \\\"Boolean!\\\" has no \" +| \"subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedOnEnum",
        "body": "{| ExpectErrors(@\"| {| catOrDog {| ... on Cat {| furColor {| inHexDec| }| }| }| }| \",| t => Assert.Equal(| \"Field \\\"furColor\\\" must not have a selection since type \\\"FurColor\\\" has no \" +| \"subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedOnListOfScalars",
        "body": "{| ExpectErrors(@\"| {| listOfScalars {| x| }| }| \",| t => Assert.Equal(| \"Field \\\"listOfScalars\\\" must not have a selection since type \\\"[String]\\\" has \" +| \"no subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedOnListOfListOfScalars",
        "body": "{| ExpectErrors(@\"| {| listOfListOfScalars {| x| }| }| \",| t => Assert.Equal(| \"Field \\\"listOfListOfScalars\\\" must not have a selection since type \" +| \"\\\"[[String]]\\\" has no subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedWithArgs",
        "body": "{| ExpectErrors(@\"| {| dog {| doesKnowCommand(dogCommand: SIT) { sinceWhen }| }| }| \",| t => Assert.Equal(| \"Field \\\"doesKnowCommand\\\" must not have a selection since type \\\"Boolean!\\\" has \" +| \"no subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedWithDirectives",
        "body": "{| ExpectErrors(@\"| {| dog {| name @include(if: true) { isAlsoHumanName }| }| }| \",| t => Assert.Equal(| \"Field \\\"name\\\" must not have a selection since type \\\"String!\\\" has no subfields.\",| t.Message));| }"
      },
      {
        "name": "ScalarSelectionNotAllowedWithDirectivesAndArgs",
        "body": "{| ExpectErrors(@\"| {| dog {| doesKnowCommand(dogCommand: SIT) @include(if: true) { sinceWhen }| }| }| \",| t => Assert.Equal(| \"Field \\\"doesKnowCommand\\\" must not have a selection since type \\\"Boolean!\\\" has \" +| \"no subfields.\",| t.Message));| }"
      }
    ]
  },
  {
    "file": "LoneAnonymousOperationRuleTests.cs",
    "methods": [
      {
        "name": "QueryContainsOneAnonymousOperation",
        "body": "{| ExpectValid(@\"| {| dog {| name| }| }| \");| }"
      },
      {
        "name": "QueryWithOneAnonymousAndOneNamedOperation",
        "body": "{| ExpectErrors(@\"| {| dog {| name| }| }| query getName {| dog {| owner {| name| }| }| }| \",| t => Assert.Equal(| \"GraphQL allows a short‐hand form for defining query \" +| \"operations when only that one operation exists in the \" +| \"document.\", t.Message));| }"
      },
      {
        "name": "QueryWithTwoAnonymousOperations",
        "body": "{| ExpectErrors(@\"| {| dog {| name| }| }| {| dog {| name| }| }| \",| t => Assert.Equal(| \"GraphQL allows a short‐hand form for defining query \" +| \"operations when only that one operation exists in the \" +| \"document.\", t.Message));| }"
      },
      {
        "name": "MultipleNamedOperations",
        "body": "{| ExpectValid(@\"| query Foo {| dog {| name| }| }| query Bar {| dog {| name| }| }| \");| }"
      },
      {
        "name": "AnonymousOperationWithFragment",
        "body": "{| ExpectValid(@\"| {| ...Foo| }| fragment Foo on Query {| dog {| name| }| }| \");| }"
      },
      {
        "name": "AnonymousOperationWithAMutation",
        "body": "{| ExpectErrors(@\"| {| dog {| name| }| }| mutation Foo {| fieldB| }| \");| }"
      },
      {
        "name": "AnonymousOperationWithASubscription",
        "body": "{| ExpectErrors(@\"| {| dog {| name| }| }| subscription Foo {| newMessage| }| \");| }"
      }
    ]
  },
  {
    "file": "MaxDepthRuleTests.cs",
    "methods": [
      {
        "name": "MaxDepth3_QueryWith4Levels_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| level2_1 {| level3_1 {| level4| }| }| }| level1_2| level1_2| {| level2_2| level2_3| {| level3_2| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith4LevelsViaFragments_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| ... level2| }| }| fragment level2 on Level2| {| level2_1 {| ... level3| }| }| fragment level3 on Level3| {| level3_1 {| ... level4| }| }| fragment level4 on Level4| {| level4| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith4LevelsWithInlineFragment_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| ... on Level2 {| level2_1 {| ... on Level3 {| level3_1| {| level4| }| }| }| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_IntrospectionQuery_Exceeds_Allowed_Depth_Error",
        "body": "{| ExpectErrors(@\"| query {| __schema {| types {| fields {| type {| kind| name| ofType {| kind| name| ofType {| kind| name| ofType {| kind| name| }| }| }| }| }| }| }| }\");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3Levels_Valid",
        "body": "{| ExpectValid(@\"| query {| level1_1 {| level2_1 {| level3_1| }| }| level1_2| level1_2| {| level2_2| level2_3| {| level3_2| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3LevelsViaFragments_Valid",
        "body": "{| ExpectValid(@\"| query {| level1_1 {| ... level2| }| }| fragment level2 on Level2| {| level2_1 {| ... level3| }| }| fragment level3 on Level3| {| level3_1| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3LevelsWithInlineFragment_Valid",
        "body": "{| // arrange| ExpectValid(@\"| query {| level1_1 {| ... on Level2 {| level2_1 {| ... on Level3 {| level3_1| }| }| }| }| }| \");| }"
      }
    ]
  },
  {
    "file": "MaxDepthRuleTestsSkipIntrospection.cs",
    "methods": [
      {
        "name": "MaxDepth3_QueryWith4Levels_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| level2_1 {| level3_1 {| level4| }| }| }| level1_2| level1_2| {| level2_2| level2_3| {| level3_2| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith4LevelsViaFragments_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| ... level2| }| }| fragment level2 on Level2| {| level2_1 {| ... level3| }| }| fragment level3 on Level3| {| level3_1 {| ... level4| }| }| fragment level4 on Level4| {| level4| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith4LevelsWithInlineFragment_MaxDepthReached",
        "body": "{| ExpectErrors(@\"| query {| level1_1 {| ... on Level2 {| level2_1 {| ... on Level3 {| level3_1| {| level4| }| }| }| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_IntrospectionQuery_Exceeds_Allowed_Depth_Valid",
        "body": "{| ExpectValid(@\"| query {| __schema {| types {| fields {| type {| kind| name| ofType {| kind| name| ofType {| kind| name| ofType {| kind| name| }| }| }| }| }| }| }| }\");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3Levels_Valid",
        "body": "{| ExpectValid(@\"| query {| level1_1 {| level2_1 {| level3_1| }| }| level1_2| level1_2| {| level2_2| level2_3| {| level3_2| }| }| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3LevelsViaFragments_Valid",
        "body": "{| ExpectValid(@\"| query {| level1_1 {| ... level2| }| }| fragment level2 on Level2| {| level2_1 {| ... level3| }| }| fragment level3 on Level3| {| level3_1| }| \");| }"
      },
      {
        "name": "MaxDepth3_QueryWith3LevelsWithInlineFragment_Valid",
        "body": "{| // arrange| ExpectValid(@\"| query {| level1_1 {| ... on Level2 {| level2_1 {| ... on Level3 {| level3_1| }| }| }| }| }| \");| }"
      }
    ]
  },
  {
    "file": "NoUndefinedVariablesRuleTests.cs",
    "methods": [
      {
        "name": "AllVariablesDefined",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| field(a: $a, b: $b, c: $c)| }| \");| }"
      },
      {
        "name": "AllVariablesDeeplyDefined",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| field(a: $a) {| field(b: $b) {| field(c: $c)| }| }| }| \");| }"
      },
      {
        "name": "AllVariablesDeeplyInInlineFragmentsDefined",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| ... on Query {| field(a: $a) {| field(b: $b) {| ... on Query {| field(c: $c)| }| }| }| }| }| \");| }"
      },
      {
        "name": "AllVariablesInFragmentsDeeplyDefined",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field(c: $c)| }| \");| }"
      },
      {
        "name": "VariableWithinSingleFragmentDefinedInMultipleOperations",
        "body": "{| ExpectValid(@\"| query Foo($a: String) {| ...FragA| }| query Bar($a: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a)| }| \");| }"
      },
      {
        "name": "VariableWithinFragmentsDefinedInOperations",
        "body": "{| ExpectValid(@\"| query Foo($a: String) {| ...FragA| }| query Bar($b: String) {| ...FragB| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      },
      {
        "name": "VariableWithinRecursiveFragmentDefined",
        "body": "{| ExpectValid(@\"| query Foo($a: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragA| }| }| \");| }"
      },
      {
        "name": "VariableNotDefined",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String, $c: String) {| field(a: $a, b: $b, c: $c, d: $d)| }| \");| }"
      },
      {
        "name": "VariableNotDefinedByUnNamedQuery",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String, $c: String) {| field(a: $a, b: $b, c: $c, d: $d)| }| \");| }"
      },
      {
        "name": "MultipleVariablesNotDefined",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| field(a: $a, b: $b, c: $c)| }| \");| }"
      },
      {
        "name": "VariableInFragmentNotDefinedByUnNamedQuery",
        "body": "{| ExpectErrors(@\"| {| ...FragA| }| fragment FragA on Query {| field(a: $a)| }| \");| }"
      },
      {
        "name": "VariableInFragmentNotDefinedByOperation",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field(c: $c)| }| \");| }"
      },
      {
        "name": "MultipleVariablesInFragmentsNotDefined",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field(c: $c)| }| \");| }"
      },
      {
        "name": "SingleVariableInFragmentNotDefinedByMultipleOperations",
        "body": "{| ExpectErrors(@\"| query Foo($a: String) {| ...FragAB| }| query Bar($a: String) {| ...FragAB| }| fragment FragAB on Query {| field(a: $a, b: $b)| }| \");| }"
      },
      {
        "name": "VariablesInFragmentNotDefinedByMultipleOperations",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragAB| }| query Bar($a: String) {| ...FragAB| }| fragment FragAB on Query {| field(a: $a, b: $b)| }| \");| }"
      },
      {
        "name": "VariableInFragmentUsedByOtherOperation",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragA| }| query Bar($a: String) {| ...FragB| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      },
      {
        "name": "MultipleUndefinedVariablesProduceMultipleErrors",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragA| }| query Bar($a: String) {| ...FragB| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      }
    ]
  },
  {
    "file": "NoUnusedFragmentsRuleTests.cs",
    "methods": [
      {
        "name": "AllFragmentNamesAreUsed",
        "body": "{| ExpectValid(@\"| {| human {| ...HumanFields1| ... on Human {| ...HumanFields2| }| }| }| fragment HumanFields1 on Human {| name| ...HumanFields3| }| fragment HumanFields2 on Human {| name| }| fragment HumanFields3 on Human {| name| }| \");| }"
      },
      {
        "name": "AllFragmentNamesAreUsedByMultipleOperations",
        "body": "{| ExpectValid(@\"| query Foo {| human(id: 4) {| ...HumanFields1| }| }| query Bar {| human(id: 4) {| ...HumanFields2| }| }| fragment HumanFields1 on Human {| name| ...HumanFields3| }| fragment HumanFields2 on Human {| name| }| fragment HumanFields3 on Human {| name| }| \");| }"
      },
      {
        "name": "ContainsUnknownFragments",
        "body": "{| ExpectErrors(@\"| query Foo {| human(id: 4) {| ...HumanFields1| }| }| query Bar {| human(id: 4) {| ...HumanFields2| }| }| fragment HumanFields1 on Human {| name| ...HumanFields3| }| fragment HumanFields2 on Human {| name| }| fragment HumanFields3 on Human {| name| }| fragment Unused1 on Human {| name| }| fragment Unused2 on Human {| name| }| \");| }"
      },
      {
        "name": "ContainsUnknownFragmentsWithRefCycle",
        "body": "{| ExpectErrors(@\"| query Foo {| human(id: 4) {| ...HumanFields1| }| }| query Bar {| human(id: 4) {| ...HumanFields2| }| }| fragment HumanFields1 on Human {| name| ...HumanFields3| }| fragment HumanFields2 on Human {| name| }| fragment HumanFields3 on Human {| name| }| fragment Unused1 on Human {| name| ...Unused2| }| fragment Unused2 on Human {| name| ...Unused1| }| \");| }"
      },
      {
        "name": "ContainsUnknownAndUndefFragments",
        "body": "{| ExpectErrors(@\"| query Foo {| human(id: 4) {| ...bar| }| }| fragment foo on Human {| name| }| \");| }"
      }
    ]
  },
  {
    "file": "NoUnusedVariablesRuleTests.cs",
    "methods": [
      {
        "name": "UsesAllVariables",
        "body": "{| ExpectValid(@\"| query ($a: String, $b: String, $c: String) {| field(a: $a, b: $b, c: $c)| }| \");| }"
      },
      {
        "name": "UsesAllVariablesDeeply",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| field(a: $a) {| field(b: $b) {| field(c: $c)| }| }| }| \");| }"
      },
      {
        "name": "UsesAllVariablesDeeplyInInlineFragments",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| ... on Query {| field(a: $a) {| field(b: $b) {| ... on Query {| field(c: $c)| }| }| }| }| }| \");| }"
      },
      {
        "name": "UsesAllVariablesInFragments",
        "body": "{| ExpectValid(@\"| query Foo($a: String, $b: String, $c: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field(c: $c)| }| \");| }"
      },
      {
        "name": "VariableUsedByFragmentInMultipleOperations",
        "body": "{| ExpectValid(@\"| query Foo($a: String) {| ...FragA| }| query Bar($b: String) {| ...FragB| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      },
      {
        "name": "VariableUsedByRecursiveFragment",
        "body": "{| ExpectValid(@\"| query Foo($a: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragA| }| }| \");| }"
      },
      {
        "name": "MultipleVariablesNotUsed",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String, $c: String) {| field(b: $b)| }| \");| }"
      },
      {
        "name": "VariableNotUsedInFragments",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String, $c: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field| }| \");| }"
      },
      {
        "name": "MultipleVariablesNotUsedInFragments",
        "body": "{| ExpectErrors(@\"| query Foo($a: String, $b: String, $c: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a) {| ...FragB| }| }| fragment FragB on Query {| field(b: $b) {| ...FragC| }| }| fragment FragC on Query {| field| }| \");| }"
      },
      {
        "name": "VariableNotUsedByUnreferencedFragment",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragA| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      },
      {
        "name": "VariableNotUsedByFragmentUsedByOtherOperation",
        "body": "{| ExpectErrors(@\"| query Foo($b: String) {| ...FragA| }| query Bar($a: String) {| ...FragB| }| fragment FragA on Query {| field(a: $a)| }| fragment FragB on Query {| field(b: $b)| }| \");| }"
      }
    ]
  },
  {
    "file": "OneOfRuleTests.cs",
    "methods": [
      {
        "name": "EmptyOneOf",
        "body": "{| ExpectErrors(@\"| mutation addPet {| addPet(pet: { }) {| name| }| }| \");| }"
      },
      {
        "name": "MultipleFieldsAreNotAllowed_1",
        "body": "{| ExpectErrors(@\"| mutation addPet($cat: CatInput, $dog: DogInput) {| addPet(pet: {cat: $cat, dog: $dog}) {| name| }| }\");| }"
      },
      {
        "name": "MultipleFieldsAreNotAllowed_2",
        "body": "{| ExpectErrors(@\"| mutation addPet($dog: DogInput) {| addPet(pet: { cat: { name: \"\"Brontie\"\" }, dog: $dog }) {| name| }| }\");| }"
      },
      {
        "name": "MultipleFieldsAreNotAllowed_3",
        "body": "{| ExpectErrors(@\"| mutation addPet($cat: CatInput, $dog: DogInput) {| addPet(pet: {cat: $cat, dog: $dog}) {| name| }| }\");| }"
      },
      {
        "name": "VariablesUsedForOneofInputObjectFieldsMustBeNonNullable_Valid",
        "body": "{| ExpectValid(@\"| mutation addPet($cat: CatInput!) {| addPet(pet: { cat: $cat }) {| name| }| }\");| }"
      },
      {
        "name": "VariablesUsedForOneofInputObjectFieldsMustBeNonNullable_Error",
        "body": "{| ExpectErrors(@\"| mutation addPet($cat: CatInput) {| addPet(pet: { cat: $cat }) {| name| }| }\");| }"
      },
      {
        "name": "IfFieldWithLiteralValueIsPresentThenTheValueMustNotBeNull_Valid",
        "body": "{| ExpectValid(@\"| mutation addPet {| addPet(pet: { cat: { name: \"\"Brontie\"\" } }) {| name| }| }\");| }"
      },
      {
        "name": "IfFieldWithLiteralValueIsPresentThenTheValueMustNotBeNull_Error",
        "body": "{| ExpectErrors(@\"| mutation addPet {| addPet(pet: { cat: null }) {| name| }| }\");| }"
      }
    ]
  },
  {
    "file": "OperationNameUniquenessRuleTests.cs",
    "methods": [
      {
        "name": "TwoUniqueQueryOperations",
        "body": "{| ExpectValid(@\"| query getDogName {| dog {| name| }| }| query getOwnerName {| dog {| owner {| name| }| }| }| \");| }"
      },
      {
        "name": "TwoQueryOperationsWithTheSameName",
        "body": "{| ExpectErrors(@\"| query getName {| dog {| name| }| }| query getName {| dog {| owner {| name| }| }| }| \",| t => Assert.Equal(| $\"The operation name `getName` is not unique.\",| t.Message));| }"
      },
      {
        "name": "TwoOperationsWithTheSameName",
        "body": "{| ExpectErrors(@\"| query dogOperation {| dog {| name| }| }| mutation dogOperation {| mutateDog {| id| }| }| \",| t => Assert.Equal(| $\"The operation name `dogOperation` is not unique.\",| t.Message));| }"
      },
      {
        "name": "OneAnonOperation",
        "body": "{| ExpectValid(@\"| {| anyArg| }| \");| }"
      },
      {
        "name": "OneNamedOperation",
        "body": "{| ExpectValid(@\"| query Foo {| anyArg| }| \");| }"
      },
      {
        "name": "MultipleOperationsOfDifferentTypes",
        "body": "{| ExpectValid(@\"| query Foo {| anyArg| }| mutation Bar {| field| }| subscription Baz {| newMessage {| bdoy| }| }| \");| }"
      },
      {
        "name": "FragmentAndOperationNamedTheSame",
        "body": "{| ExpectValid(@\"| query Foo {| ...Foo| }| fragment Foo on Query {| anyArg| }| \");| }"
      },
      {
        "name": "MultipleOperationsOfSameName",
        "body": "{| ExpectErrors(@\"| query Foo {| anyArg| }| query Foo {| anyArg| }| \");| }"
      },
      {
        "name": "MultipleOpsOfSameNameOfDifferentTypesMutation",
        "body": "{| ExpectErrors(@\"| query Foo {| anyArg| }| mutation Foo {| fieldB| }| \");| }"
      },
      {
        "name": "MultipleOpsOfSameNameOfDifferentTypesSubscription",
        "body": "{| ExpectErrors(@\"| query Foo {| anyArg| }| subscription Foo {| newMessage {| bdoy| }| }| \");| }"
      }
    ]
  },
  {
    "file": "RequiredArgumentRuleTests.cs",
    "methods": [
      {
        "name": "BooleanArgFieldAndNonNullBooleanArgField",
        "body": "{| ExpectValid(@\"| query {| arguments {| ... goodBooleanArg| ... goodNonNullArg| }| }| fragment goodBooleanArg on Arguments {| booleanArgField(booleanArg: true)| }| fragment goodNonNullArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: true)| }| \");| }"
      },
      {
        "name": "GoodBooleanArgDefault",
        "body": "{| ExpectValid(@\"| query {| arguments {| ... goodBooleanArgDefault| }| }| fragment goodBooleanArgDefault on Arguments {| booleanArgField| }| \");| }"
      },
      {
        "name": "GoodBooleanArgDefault2",
        "body": "{| ExpectValid(@\"| query {| arguments {| ... goodBooleanArgDefault| }| }| fragment goodBooleanArgDefault on Arguments {| optionalNonNullBooleanArgField2| }| \");| }"
      },
      {
        "name": "MissingRequiredArg",
        "body": "{| // arrange| ExpectErrors(@\"| query {| arguments {| ... missingRequiredArg| }| }| fragment missingRequiredArg on Arguments {| nonNullBooleanArgField| }| \",| t => Assert.Equal(| $\"The argument `nonNullBooleanArg` is required.\", t.Message));| }"
      },
      {
        "name": "MissingRequiredArgNonNullBooleanArg",
        "body": "{| ExpectErrors(@\"| query {| arguments {| ... missingRequiredArg| }| }| fragment missingRequiredArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: null)| }| \",| t => Assert.Equal(| $\"The argument `nonNullBooleanArg` is required.\", t.Message));| }"
      },
      {
        "name": "MissingRequiredDirectiveArg",
        "body": "{| ExpectErrors(@\"| query {| arguments {| ... missingRequiredArg| }| }| fragment missingRequiredArg on Arguments {| nonNullBooleanArgField(nonNullBooleanArg: true) @skip()| }| \",| t => Assert.Equal(| $\"The argument `if` is required.\", t.Message));| }"
      },
      {
        "name": "BadMultipleNullValueType",
        "body": "{| ExpectErrors(@\"| {| arguments {| multipleReqs(x: 1, y: null)| }| }| \");| }"
      },
      {
        "name": "BadNullIntoNonNullBool",
        "body": "{| ExpectErrors(@\"| {| arguments {| nonNullBooleanArgField(nonNullBooleanArg: null)| }| }| \");| }"
      },
      {
        "name": "BadNullIntoNonNullFloat",
        "body": "{| ExpectErrors(@\"| {| arguments {| nonNullFloatArgField(floatArg: null)| }| }| \");| }"
      },
      {
        "name": "BadNullIntoNonNullId",
        "body": "{| ExpectErrors(@\"| {| arguments {| nonNullIdArgField(idArg: null)| }| }| \");| }"
      },
      {
        "name": "BadNullIntoNonNullInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| nonNullIntArgField(intArg: null)| }| }| \");| }"
      },
      {
        "name": "BadNullIntoNonNullString",
        "body": "{| ExpectErrors(@\"| {| arguments {| nonNullStringArgField(stringArg: null)| }| }| \");| }"
      },
      {
        "name": "ArgOnOptionalArg",
        "body": "{| ExpectValid(@\"| {| dog {| isHouseTrained(atOtherHomes: true)| }| }| \");| }"
      },
      {
        "name": "ArgOnNoArgOnOptionalArg",
        "body": "{| ExpectValid(@\"| {| dog {| isHouseTrained| }| }| \");| }"
      },
      {
        "name": "NoArgOnNonNullFieldWithDefault",
        "body": "{| ExpectValid(@\"| {| arguments {| optionalNonNullBooleanArgField(y:1)| }| }| \");| }"
      },
      {
        "name": "MultipleArgs",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleReqs(x: 1, y: 2)| }| }| \");| }"
      },
      {
        "name": "MultipleArgsReverseOrder",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleReqs(x: 2, y: 1)| }| }| \");| }"
      },
      {
        "name": "NoArgsOnMultipleOptional",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts| }| }| \");| }"
      },
      {
        "name": "OneArgOnMultipleOptional",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts(opt1: 1)| }| }| \");| }"
      },
      {
        "name": "SecondArgOnMultipleOptional",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts(opt2: 2)| }| }| \");| }"
      },
      {
        "name": "MultipleRequiredArgsOnMixedList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4)| }| }| \");| }"
      },
      {
        "name": "MultipleRequiredAndOneOptionalArgOnMixedList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4, opt1: 5)| }| }| \");| }"
      },
      {
        "name": "AllRequiredAndOptionalArgsOnMixedList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4, opt1: 5, opt2: 6)| }| }| \");| }"
      },
      {
        "name": "MissingOneNonNullableArgument",
        "body": "{| ExpectErrors(@\"| {| arguments {| multipleReqs(req2: 2)| }| }| \");| }"
      },
      {
        "name": "MissingMultipleNonNullableArguments",
        "body": "{| ExpectErrors(@\"| {| arguments {| multipleReqs| }| }| \");| }"
      },
      {
        "name": "IncorrectValueAndMissingArgument",
        "body": "{| ExpectErrors(@\"| {| arguments {| multipleReqs(req1: \"\"one\"\")| }| }| \");| }"
      },
      {
        "name": "WithDirectivesOfValidTypes",
        "body": "{| ExpectValid(@\"| {| dog @include(if: true) {| name| }| human @skip(if: false) {| name| }| }| \");| }"
      },
      {
        "name": "WithDirectiveWithMissingTypes",
        "body": "{| ExpectErrors(@\"| {| dog @include {| name @skip| }| }| \");| }"
      }
    ]
  },
  {
    "file": "StreamDirectivesAreUsedOnListFieldsTests.cs",
    "methods": [
      {
        "name": "Stream_On_String_Field_1",
        "body": "{| ExpectErrors(| @\"query {| __typename @stream| }\",| t => Assert.Equal(| \"@stream directive is only valid on list fields.\",| t.Message));| }"
      },
      {
        "name": "Stream_On_String_Field_2",
        "body": "{| ExpectErrors(| @\"query {| __schema {| description @stream| }| }\",| t => Assert.Equal(| \"@stream directive is only valid on list fields.\",| t.Message));| }"
      },
      {
        "name": "Stream_On_Types",
        "body": "{| ExpectValid(| @\"query {| __schema {| types @stream {| name| }| }| }\");| }"
      }
    ]
  },
  {
    "file": "SubscriptionSingleRootFieldRuleTests.cs",
    "methods": [
      {
        "name": "SubscriptionWithOneRootField",
        "body": "{| ExpectValid(@\"| subscription sub {| newMessage {| body| sender| }| }| \");| }"
      },
      {
        "name": "SubscriptionWithOneRootFieldAnonymous",
        "body": "{| ExpectValid(@\"| subscription {| newMessage {| body| sender| }| }| \");| }"
      },
      {
        "name": "SubscriptionWithDirectiveThatContainsOneRootField",
        "body": "{| // arrange| ExpectValid(@\"| subscription sub {| ...newMessageFields| }| fragment newMessageFields on Subscription {| newMessage {| body| sender| }| }| \");| }"
      },
      {
        "name": "DisallowedSecondRootField",
        "body": "{| ExpectErrors(@\"| subscription sub {| newMessage {| body| sender| }| disallowedSecondRootField| }| \",| t => Assert.Equal(| $\"Subscription operations must \" +| \"have exactly one root field.\", t.Message));| }"
      },
      {
        "name": "DisallowedSecondRootFieldAnonymous",
        "body": "{| ExpectErrors(@\"| subscription sub {| newMessage {| body| sender| }| disallowedSecondRootField| }| \",| t => Assert.Equal(| $\"Subscription operations must \" +| \"have exactly one root field.\", t.Message));| }"
      },
      {
        "name": "FailsWithManyMoreThanOneRootField",
        "body": "{| ExpectErrors(@\"| subscription sub {| newMessage {| body| sender| }| disallowedSecondRootField| disallowedThirdRootField| }| \",| t => Assert.Equal(| $\"Subscription operations must \" +| \"have exactly one root field.\", t.Message));| }"
      },
      {
        "name": "DisallowedSecondRootFieldWithinDirective",
        "body": "{| ExpectErrors(@\"| subscription sub {| ...multipleSubscriptions| }| fragment multipleSubscriptions on Subscription {| newMessage {| body| sender| }| disallowedSecondRootField| }| \",| t => Assert.Equal(| $\"Subscription operations must \" +| \"have exactly one root field.\", t.Message));| }"
      },
      {
        "name": "DisallowedIntrospectionField",
        "body": "{| ExpectErrors(@\"| subscription sub {| newMessage {| body| sender| }| __typename| }| \",| t => Assert.Equal(| $\"Subscription operations must \" +| \"have exactly one root field.\", t.Message));| }"
      },
      {
        "name": "DisallowedOnlyIntrospectionField",
        "body": "{| ExpectErrors(@\"| subscription sub {| __typename| }| \",| t => Assert.Equal(| \"Subscription must not select an introspection top level field.\", t.Message));| }"
      }
    ]
  },
  {
    "file": "ValuesOfCorrectTypeRuleTests.cs",
    "methods": [
      {
        "name": "GoodBooleanArg",
        "body": "{| ExpectValid(@\"| {| arguments {| ...goodBooleanArg| }| }| fragment goodBooleanArg on Arguments {| booleanArgField(booleanArg: true)| }| \");| }"
      },
      {
        "name": "GoodBooleanListArg",
        "body": "{| ExpectValid(@\"| query queryWithListInput()| {| booleanList(booleanListArg: [ true, false ])| }\");| }"
      },
      {
        "name": "GoodBooleanListVariableArg",
        "body": "{| ExpectValid(@\"| query queryWithListInput($value: Boolean!)| {| booleanList(booleanListArg: [ true, $value ])| }\");| }"
      },
      {
        "name": "BadBooleanListArg",
        "body": "{| ExpectErrors(@\"| query queryWithListInput()| {| booleanList(booleanListArg: [ true, \"\"false\"\" ])| }\",| t =>| {| Assert.Equal(| \"The specified argument value does not\" +| \" match the argument type.\",| t.Message);| Assert.Equal(\"[Boolean!]\", t.Extensions![\"locationType\"]);| Assert.Equal(\"booleanListArg\", t.Extensions[\"argument\"]);| });| }"
      },
      {
        "name": "BadBooleanListArgString",
        "body": "{| ExpectErrors(@\"| query queryWithListInput()| {| booleanList(booleanListArg: \"\"false\"\" )| }\",| t =>| {| Assert.Equal(| \"The specified argument value does not\" +| \" match the argument type.\",| t.Message);| Assert.Equal(\"[Boolean!]\", t.Extensions![\"locationType\"]);| Assert.Equal(\"booleanListArg\", t.Extensions[\"argument\"]);| });| }"
      },
      {
        "name": "CoercedIntIntoFloatArg",
        "body": "{| ExpectValid(@\"| {| arguments {| ...coercedIntIntoFloatArg| }| }| fragment coercedIntIntoFloatArg on Arguments {| # Note: The input coercion rules for Float allow Int literals.| floatArgField(floatArg: 123)| }| \");| }"
      },
      {
        "name": "GoodComplexDefaultValue",
        "body": "{| ExpectValid(@\"| query goodComplexDefaultValue($search: ComplexInput = { name: \"\"Fido\"\" }) {| findDog(complex: $search)| }| \");| }"
      },
      {
        "name": "StringIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| ...stringIntoInt| }| }| fragment stringIntoInt on Arguments {| intArgField(intArg: \"\"123\"\")| }| \",| t => Assert.Equal(| \"The specified argument value does not match the \" +| \"argument type.\",| t.Message));| }"
      },
      {
        "name": "BadComplexValueArgument",
        "body": "{| ExpectErrors(@\"| query badComplexValue {| findDog(complex: { name: 123 })| }| \",| t => Assert.Equal(| \"The specified value type of field `name` \" +| \"does not match the field type.\",| t.Message));| }"
      },
      {
        "name": "BadComplexValueVariable",
        "body": "{| ExpectErrors(@\"| query goodComplexDefaultValue($search: ComplexInput = { name: 123 }) {| findDog(complex: $search)| }| \",| t => Assert.Equal(| \"The specified value type of field `name` \" +| \"does not match the field type.\",| t.Message));| }"
      },
      {
        "name": "BadValueVariable",
        "body": "{| ExpectErrors(@\"| query goodComplexDefaultValue($search: ComplexInput = 123) {| findDog(complex: $search)| }| \",| t => Assert.Equal(| \"The specified value type of variable `search` \" +| \"does not match the variable type.\",| t.Message));| }"
      },
      {
        "name": "GoodNullToIntNullableValue",
        "body": "{| ExpectValid(@\"| {| arguments {| intArgField(intArg: null)| }| }| \");| }"
      },
      {
        "name": "GoodIntValue",
        "body": "{| ExpectValid(@\"| {| arguments {| intArgField(intArg: 2)| }| }| \");| }"
      },
      {
        "name": "GoodIntNegativeValue",
        "body": "{| ExpectValid(@\"| {| arguments {| intArgField(intArg: -2)| }| }| \");| }"
      },
      {
        "name": "OverflowInt",
        "body": "{| ExpectErrors($@\"| {{| arguments {{| intArgField(intArg: {long.MaxValue})| }}| }}\");| }"
      },
      {
        "name": "GoodNullToBooleanNullableValue",
        "body": "{| ExpectValid(@\"| {| arguments {| booleanArgField(booleanArg: true)| }| }| \");| }"
      },
      {
        "name": "GoodBooleanValue",
        "body": "{| ExpectValid(@\"| {| arguments {| booleanArgField(booleanArg: true)| }| }| \");| }"
      },
      {
        "name": "GoodStringValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringArgField(stringArg: \"\"foo\"\")| }| }| \");| }"
      },
      {
        "name": "GoodNullToStringNullableValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringArgField(stringArg: null)| }| }| \");| }"
      },
      {
        "name": "GoodNullToFloatNullableValue",
        "body": "{| ExpectValid(@\"| {| arguments {| floatArgField(floatArg: null)| }| }| \");| }"
      },
      {
        "name": "GoodFloatValue",
        "body": "{| ExpectValid(@\"| {| arguments {| floatArgField(floatArg: 1.1)| }| }| \");| }"
      },
      {
        "name": "GoodNegativeFloatValue",
        "body": "{| ExpectValid(@\"| {| arguments {| floatArgField(floatArg: -1.1)| }| }| \");| }"
      },
      {
        "name": "GoodIntToFloat",
        "body": "{| ExpectValid(@\"| {| arguments {| floatArgField(floatArg: 1)| }| }| \");| }"
      },
      {
        "name": "GoodIntToId",
        "body": "{| ExpectValid(@\"| {| arguments {| idArgField(idArg: 1)| }| }| \");| }"
      },
      {
        "name": "GoodStringToId",
        "body": "{| ExpectValid(@\"| {| arguments {| idArgField(idArg: \"\"someIdString\"\")| }| }| \");| }"
      },
      {
        "name": "GoodNullToIdNullable",
        "body": "{| ExpectValid(@\"| {| arguments {| idArgField(idArg: null)| }| }| \");| }"
      },
      {
        "name": "GoodEnumValue",
        "body": "{| ExpectValid(@\"| {| arguments {| enumArgField(enumArg: SIT)| }| }| \");| }"
      },
      {
        "name": "GoodNullToEnumNullableValue",
        "body": "{| ExpectValid(@\"| {| arguments {| enumArgField(enumArg: null)| }| }| \");| }"
      },
      {
        "name": "BadIntIntoString",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringArgField(stringArg: 1)| }| }| \");| }"
      },
      {
        "name": "BadFloatIntoString",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringArgField(stringArg: 1.0)| }| }| \");| }"
      },
      {
        "name": "BadBooleanIntoString",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringArgField(stringArg: true)| }| }| \");| }"
      },
      {
        "name": "BadEnumIntoString",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringArgField(stringArg: BAR)| }| }| \");| }"
      },
      {
        "name": "BadStringIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: \"\"3\"\")| }| }| \");| }"
      },
      {
        "name": "BadBooleanIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: false)| }| }| \");| }"
      },
      {
        "name": "BadEnumIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: BAR)| }| }| \");| }"
      },
      {
        "name": "BadSimpleFloatIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: 3.0)| }| }| \");| }"
      },
      {
        "name": "BadFloatIntoInt",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: 3.333)| }| }| \");| }"
      },
      {
        "name": "BadStringIntoFloat",
        "body": "{| ExpectErrors(@\"| {| arguments {| floatArgField(floatArg: \"\"3.333\"\")| }| }| \");| }"
      },
      {
        "name": "BadBooleanIntoFloat",
        "body": "{| ExpectErrors(@\"| {| arguments {| floatArgField(floatArg: true)| }| }| \");| }"
      },
      {
        "name": "BadEnumIntoFloat",
        "body": "{| ExpectErrors(@\"| {| arguments {| floatArgField(floatArg: BAR)| }| }| \");| }"
      },
      {
        "name": "BadStringIntoBool",
        "body": "{| ExpectErrors(@\"| {| arguments {| intArgField(intArg: \"\"true\"\")| }| }| \");| }"
      },
      {
        "name": "BadEnumIntoBool",
        "body": "{| ExpectErrors(@\"| {| arguments {| booleanArgField(booleanArg: BAR)| }| }| \");| }"
      },
      {
        "name": "BadSimpleFloatIntoBool",
        "body": "{| ExpectErrors(@\"| {| arguments {| booleanArgField(booleanArg: 3.0)| }| }| \");| }"
      },
      {
        "name": "BadFloatIntoBool",
        "body": "{| ExpectErrors(@\"| {| arguments {| booleanArgField(booleanArg: 3.333)| }| }| \");| }"
      },
      {
        "name": "BadFloatIntoId",
        "body": "{| ExpectErrors(@\"| {| arguments {| idArgField(idArg: 1.0)| }| }| \");| }"
      },
      {
        "name": "BadBooleanIntoId",
        "body": "{| ExpectErrors(@\"| {| arguments {| idArgField(idArg: true)| }| }| \");| }"
      },
      {
        "name": "BadEnumIntoId",
        "body": "{| ExpectErrors(@\"| {| arguments {| idArgField(idArg: TRUE)| }| }| \");| }"
      },
      {
        "name": "BadIntIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: 2)| }| }| \");| }"
      },
      {
        "name": "BadFloatIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: 1.0)| }| }| \");| }"
      },
      {
        "name": "BadStringIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: \"\"SIT\"\")| }| }| \");| }"
      },
      {
        "name": "BadBooleanIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: true)| }| }| \");| }"
      },
      {
        "name": "BadUnknowEnumIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: HELLO)| }| }| \");| }"
      },
      {
        "name": "BadWrongCasingEnumIntoEnum",
        "body": "{| ExpectErrors(@\"| {| arguments {| enumArgField(enumArg: sit)| }| }| \");| }"
      },
      {
        "name": "BadNullToString",
        "body": "{| ExpectErrors(@\"| query InvalidItem {| nonNull(a: null)| }| \");| }"
      },
      {
        "name": "GoodListValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringListArgField(stringListArg: [\"\"one\"\", null, \"\"two\"\"])| }| }| \");| }"
      },
      {
        "name": "GoodEmptyListValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringListArgField(stringListArg: [])| }| }| \");| }"
      },
      {
        "name": "GoodNullListValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringListArgField(stringListArg: null)| }| }| \");| }"
      },
      {
        "name": "GoodSingleValueListValue",
        "body": "{| ExpectValid(@\"| {| arguments {| stringListArgField(stringListArg: \"\"singleValueInList\"\")| }| }| \");| }"
      },
      {
        "name": "BadIncorrectItemType",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringListArgField(stringListArg: [\"\"one\"\", 2])| }| }| \");| }"
      },
      {
        "name": "BadSingleValueInvalid",
        "body": "{| ExpectErrors(@\"| {| arguments {| stringListArgField(stringListArg: 2)| }| }| \");| }"
      },
      {
        "name": "GoodArgOnOptionalArg",
        "body": "{| ExpectValid(@\"| {| dog {| isHouseTrained(atOtherHomes: true)| }| }| \");| }"
      },
      {
        "name": "GoodNoArgOnOptionalArg",
        "body": "{| ExpectValid(@\"| {| dog {| isHouseTrained| }| }| \");| }"
      },
      {
        "name": "GoodMultipleArgs",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleReqs(x: 1, y: 2)| }| }| \");| }"
      },
      {
        "name": "GoodMultipleArgsReversed",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleReqs(y: 2, x: 1)| }| }| \");| }"
      },
      {
        "name": "GoodNoMultipleArgsOps",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts| }| }| \");| }"
      },
      {
        "name": "GoodOneMultipleArgsOps",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts(opt1: 1)| }| }| \");| }"
      },
      {
        "name": "GoodSecondOneMultipleArgsOps",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOpts(opt2: 1)| }| }| \");| }"
      },
      {
        "name": "GoodMultipleRequiredArgsOnMixedList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4)| }| }| \");| }"
      },
      {
        "name": "GoodMultipleRequiredArgsOnMixedOneOptionalList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4, opt1: 1)| }| }| \");| }"
      },
      {
        "name": "GoodMultipleRequiredArgsOnMixedAllOptionalList",
        "body": "{| ExpectValid(@\"| {| arguments {| multipleOptsAndReqs(req1: 3, req2: 4, opt1: 1, opt2: 2)| }| }| \");| }"
      },
      {
        "name": "BadMultipleIncorrectValueType",
        "body": "{| ExpectErrors(@\"| {| arguments {| multipleReqs(x: \"\"two\"\", y: \"\"one\"\")| }| }| \");| }"
      },
      {
        "name": "GoodOptionalArgDespiteRequiredFieldInType",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField| }| }| \");| }"
      },
      {
        "name": "GoodPartialObjectOnlyRequired",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: { requiredField: true })| }| }| \");| }"
      },
      {
        "name": "GoodPartialObjectOnlyRequiredCanBeFalse",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: { requiredField: false })| }| }| \");| }"
      },
      {
        "name": "GoodPartialObjectIncludingRequired",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: { requiredField: true, intField: 4 })| }| }| \");| }"
      },
      {
        "name": "GoodComplexFullObject",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: {| requiredField: true,| intField: 4,| stringField: \"\"foo\"\",| booleanField: false,| stringListField: [\"\"one\"\", \"\"two\"\"]| })| }| }| \");| }"
      },
      {
        "name": "GoodComplexFullDfferentOrderObject",
        "body": "{| ExpectValid(@\"| {| arguments {| complexArgField(complexArg: {| stringListField: [\"\"one\"\", \"\"two\"\"],| booleanField: false,| requiredField: true,| stringField: \"\"foo\"\",| intField: 4,| })| }| }| \");| }"
      },
      {
        "name": "BadComplexInputInvalidElementType",
        "body": "{| ExpectErrors(@\"| {| arguments {| complexArgField(complexArg: {| stringListField: [\"\"one\"\", 2],| requiredField: true,| })| }| }| \");| }"
      },
      {
        "name": "BadUnknownFieldOnComplexType",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| {| complicatedArgs {| complexArgField(complexArg: {| requiredField: true,| invalidField: \"\"value\"\"| })| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.True(context.UnexpectedErrorsDetected);| }"
      },
      {
        "name": "BadCustomerScalarIsInvalid",
        "body": "{| ExpectErrors(@\"| {| invalidArg(arg: 123)| }| \");| }"
      },
      {
        "name": "GoodCustomerScalarAcceptsComplexLiterals",
        "body": "{| ExpectValid(@\"| {| test1: anyArg(arg: 123)| test2: anyArg(arg: \"\"abc\"\")| test3: anyArg(arg: [123, \"\"abc\"\"])| test4: anyArg(arg: {deep: [123, \"\"abc\"\"]})| }| \");| }"
      },
      {
        "name": "GoodDirectiveValidTypes",
        "body": "{| ExpectValid(@\"| {| dog @include(if: true) {| name| }| human @skip(if: false) {| name| }| }| \");| }"
      },
      {
        "name": "GoodDirectiveAnyTypes",
        "body": "{| ExpectValid(@\"| {| dog @complex(anyArg: 123)| @complex(anyArg: \"\"abc\"\")| @complex(anyArg: [123, \"\"abc\"\"])| @complex(anyArg: {deep: [123, \"\"abc\"\"]}) {| name| }| }| \");| }"
      },
      {
        "name": "BadDirectiveInvalidTypes",
        "body": "{| ExpectErrors(@\"| {| dog @include(if: \"\"yes\"\") {| name @skip(if: ENUM)| }| }| \");| }"
      },
      {
        "name": "GoodQueryVariablesDefaultValues",
        "body": "{| ExpectValid(@\"| query WithDefaultValues(| $a: Int = 1,| $b: String = \"\"ok\"\",| $c: Complex3Input = { requiredField: true, intField: 3 }| $d: Int! = 123| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "GoodQueryVariablesDefaultNullValues",
        "body": "{| ExpectValid(@\"| query WithDefaultValues(| $a: Int = null,| $b: String = null,| $c: Complex3Input = { requiredField: true, intField: null }| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "GoodQueryVariablesDefaultAnyValues",
        "body": "{| ExpectValid(@\"| query WithDefaultValues(| $test1: Any = 123| $test2: Any = \"\"abc\"\"| $test3: Any = [123, \"\"abc\"\"]| $test4: Any = {deep: [123, \"\"abc\"\"]}| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "BadVariablesWithInvalidDefaultValues",
        "body": "{| ExpectErrors(@\"| query WithDefaultValues(| $a: Int! = null,| $b: String! = null,| $c: ComplexInput = { requiredField: null, intField: null }| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "BadVariablesWithInvalidDefaultValuesTypes",
        "body": "{| ExpectErrors(@\"| query InvalidDefaultValues(| $a: Int = \"\"one\"\",| $b: String = 4,| $c: ComplexInput = \"\"NotVeryComplex\"\"| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "BadVariablesWithInvalidComplexDefaultValues",
        "body": "{| ExpectErrors(@\"| query WithDefaultValues(| $a: ComplexInput = { requiredField: 123, intField: \"\"abc\"\" }| ) {| dog { name }| }| \");| }"
      },
      {
        "name": "BadVariablesComplexVariableMissingRequiredField",
        "body": "{| ExpectErrors(@\"| query MissingRequiredField($a: ComplexInput = {intField: 3}) {| dog { name }| }| \");| }"
      },
      {
        "name": "BadVariablesListWithInvalidItem",
        "body": "{| ExpectErrors(@\"| query InvalidItem($a: [String] = [\"\"one\"\", 2]) {| dog { name }| }| \");| }"
      }
    ]
  },
  {
    "file": "VariableUniquenessRuleTests.cs",
    "methods": [
      {
        "name": "OperationWithTwoVariablesThatHaveTheSameName",
        "body": "{| // arrange| var context = ValidationUtils.CreateContext();| context.MaxAllowedErrors = int.MaxValue;| var query = Utf8GraphQLParser.Parse(@\"| query houseTrainedQuery($atOtherHomes: Boolean, $atOtherHomes: Boolean) {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Single(context.Errors);| Assert.Collection(context.Errors,| t => Assert.Equal(| \"A document containing operations that \" +| \"define more than one variable with the same \" +| \"name is invalid for execution.\", t.Message));| }"
      },
      {
        "name": "NoOperationHasVariablesThatShareTheSameName",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query ($foo: Boolean = true, $bar: Boolean = false) {| dog @skip(if: $foo) {| isHouseTrained| }| dog @skip(if: $bar) {| isHouseTrained| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "TwoOperationsThatShareVariableName",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query A($atOtherHomes: Boolean) {| ...HouseTrainedFragment| }| query B($atOtherHomes: Boolean) {| ...HouseTrainedFragment| }| fragment HouseTrainedFragment on Query {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      }
    ]
  },
  {
    "file": "VariablesAreInputTypesRuleTests.cs",
    "methods": [
      {
        "name": "QueriesWithValidVariableTypes",
        "body": "{| // arrange| IDocumentValidatorContext context = ValidationUtils.CreateContext();| var query = Utf8GraphQLParser.Parse(@\"| query takesBoolean($atOtherHomes: Boolean) {| dog {| isHouseTrained(atOtherHomes: $atOtherHomes)| }| }| query takesComplexInput($complexInput: ComplexInput) {| findDog(complex: $complexInput) {| name| }| }| query TakesListOfBooleanBang($booleans: [Boolean!]) {| booleanList(booleanListArg: $booleans)| }| \");| context.Prepare(query);| // act| Rule.Validate(context, query);| // assert| Assert.Empty(context.Errors);| }"
      },
      {
        "name": "QueriesWithInvalidVariableTypes",
        "body": "{| ExpectErrors(@\"| query takesCat($cat: Cat) {| # ...| }| query takesDogBang($dog: Dog!) {| # ...| }| query takesListOfPet($pets: [Pet]) {| # ...| }| query takesCatOrDog($catOrDog: CatOrDog) {| # ...| }| \");| }"
      }
    ]
  },
  {
    "file": "AttributeTests.cs",
    "methods": [
      {
        "name": "Cost_ArgumentAttribute_AppliesDirective",
        "body": "{| // arrange & act| var query = CreateSchema().GetType<ObjectType>(OperationTypeNames.Query);| var costDirective = query.Fields[\"examples\"]| .Arguments[\"_\"]| .Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(8.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_EnumTypeAttribute_AppliesDirective",
        "body": "{| // arrange & act| var exampleEnum = CreateSchema().GetType<EnumType>(nameof(ExampleEnum));| var costDirective = exampleEnum| .Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(0.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_InputFieldAttribute_AppliesDirective",
        "body": "{| // arrange & act| var exampleInput = CreateSchema().GetType<InputObjectType>(nameof(ExampleInput));| var costDirective = exampleInput.Fields[\"field\"]| .Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(-3.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_ObjectFieldAttribute_AppliesDirective",
        "body": "{| // arrange & act| var query = CreateSchema().GetType<ObjectType>(OperationTypeNames.Query);| var costDirective = query.Fields[\"examples\"]| .Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_ObjectTypeAttribute_AppliesDirective",
        "body": "{| // arrange & act| var example = CreateSchema().GetType<ObjectType>(nameof(Example));| var costDirective = example.Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(10.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_ScalarTypeAttribute_AppliesDirective",
        "body": "{| // arrange & act| var exampleScalar = CreateSchema().GetType<ExampleScalar>(nameof(ExampleScalar));| var costDirective = exampleScalar.Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(1.0, costDirective.Weight);| }"
      },
      {
        "name": "ListSize_ObjectFieldAttribute_AppliesDirective",
        "body": "{| // arrange & act| var query = CreateSchema().GetType<ObjectType>(OperationTypeNames.Query);| var costDirective = query.Fields[\"examples\"]| .Directives| .Single(d => d.Type.Name == \"listSize\")| .AsValue<ListSizeDirective>();| // assert| Assert.Equal(10, costDirective.AssumedSize);| Assert.Equal([\"first\", \"last\"], costDirective.SlicingArguments, StringComparer.Ordinal);| Assert.Equal([\"edges\", \"nodes\"], costDirective.SizedFields, StringComparer.Ordinal);| Assert.False(costDirective.RequireOneSlicingArgument);| }"
      }
    ]
  },
  {
    "file": "CachingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| const string schema =| \"\"\"| type Query {| examples(limit: Int! @cost(weight: \"2.0\")): [Example!]!| @cost(weight: \"3.0\") @listSize(slicingArguments: [\"limit\"])| }| type Example @cost(weight: \"4.0\") {| exampleField1: Boolean!| exampleField2: Int!| }| \"\"\";| const string operation =| \"\"\"| query {| examples(limit: 10) {| exampleField1| exampleField2| }| }| \"\"\";| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var requestExecutor = await CreateRequestExecutorBuilder()| .AddDocumentFromString(schema)| .BuildRequestExecutorAsync();| var cache = (FakeCostMetricsCache)requestExecutor.Schema.Services| .GetRequiredService<ICostMetricsCache>();| // act| await requestExecutor.ExecuteAsync(request);| await requestExecutor.ExecuteAsync(request);| // assert| Assert.Equal(1, cache.Misses);| Assert.Equal(1, cache.Additions);| Assert.Equal(1, cache.Hits);| }"
      }
    ]
  },
  {
    "file": "CostSyntaxRewriterTests.cs",
    "methods": [
      {
        "name": "Rewrite_DefaultWeights_RemovesCostDirectives",
        "body": "{| // arrange| var schema = CreateSchema(| \"\"\"| type Query {| compositeField(| inputArg: Input @cost(weight: \"1\") # ARGUMENT_DEFINITION (input type)| listArg: [Scalar] @cost(weight: \"1\") # ARGUMENT_DEFINITION (list type)| scalarArg: Scalar @cost(weight: \"0\") # ARGUMENT_DEFINITION (scalar type)| ): CompositeType @cost(weight: \"1\") # FIELD_DEFINITION (composite type)| }| type CompositeType @cost(weight: \"1\") { # OBJECT| listField: [ElementType] @cost(weight: \"1\") # FIELD_DEFINITION (list type)| }| type ElementType {| scalarField: Scalar @cost(weight: \"0\") # FIELD_DEFINITION (scalar type)| }| input Input {| inputField: Input @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (input type)| listField: [Scalar] @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (list type)| scalarField: Scalar @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (scalar type)| }| enum Enum @cost(weight: \"0\") { ENUM_VALUE } # ENUM| scalar Scalar @cost(weight: \"0\") # SCALAR| \"\"\");| // act| var result = _costSyntaxRewriter.Rewrite(| schema.ToDocument(),| new CostSyntaxRewriter.Context(schema));| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Rewrite_NonDefaultWeights_DoesNotRemoveCostDirectives",
        "body": "{| // arrange| var schema = CreateSchema(| \"\"\"| type Query {| compositeField(| inputArg: Input @cost(weight: \"0\") # ARGUMENT_DEFINITION (input type)| listArg: [Scalar] @cost(weight: \"0\") # ARGUMENT_DEFINITION (list type)| scalarArg: Scalar @cost(weight: \"1\") # ARGUMENT_DEFINITION (scalar type)| ): CompositeType @cost(weight: \"0\") # FIELD_DEFINITION (composite type)| }| type CompositeType @cost(weight: \"0\") { # OBJECT| listField: [ElementType] @cost(weight: \"0\") # FIELD_DEFINITION (list type)| }| type ElementType {| scalarField: Scalar @cost(weight: \"1\") # FIELD_DEFINITION (scalar type)| }| input Input {| inputField: Input @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (input type)| listField: [Scalar] @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (list type)| scalarField: Scalar @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (scalar type)| }| enum Enum @cost(weight: \"1\") { ENUM_VALUE } # ENUM| scalar Scalar @cost(weight: \"1\") # SCALAR| \"\"\");| // act| var result = _costSyntaxRewriter.Rewrite(| schema.ToDocument(),| new CostSyntaxRewriter.Context(schema));| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "DescriptorExtensionTests.cs",
    "methods": [
      {
        "name": "Cost_ArgumentDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Field(\"field\")| .Argument(\"a\", a => a.Type<StringType>().Cost(5.0))| .Type<StringType>())| .AddDirectiveType<CostDirectiveType>()| .Use(next => next)| .Create();| var query = schema.GetType<ObjectType>(OperationTypeNames.Query);| var costDirective = query.Fields[\"field\"]| .Arguments[\"a\"]| .Directives| .Single(d => d.Type.Name == \"cost\")| .AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_EnumTypeDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CostDirectiveType>()| .AddEnumType(d => d.Name(\"Example\").Cost(5.0).Value(\"EnumMember1\"))| .AddEnumType<ExampleEnum>(d => d.Cost(10.0))| .Use(next => next)| .Create();| var enumType1 = schema.GetType<EnumType>(\"Example\");| var directive1 = enumType1.Directives.Single(d => d.Type.Name == \"cost\");| var costDirective1 = directive1.AsValue<CostDirective>();| var enumType2 = schema.GetType<EnumType>(nameof(ExampleEnum));| var directive2 = enumType2.Directives.Single(d => d.Type.Name == \"cost\");| var costDirective2 = directive2.AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective1.Weight);| Assert.Equal(10.0, costDirective2.Weight);| }"
      },
      {
        "name": "Cost_InputFieldDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CostDirectiveType>()| .AddInputObjectType(| d => d| .Name(\"input\")| .Field(\"field\")| .Type<StringType>()| .Cost(5.0))| .Use(next => next)| .Create();| var input = schema.GetType<InputObjectType>(\"input\");| var directive = input.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"cost\");| var costDirective = directive.AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_ObjectFieldDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Field(\"field\")| .Type<StringType>()| .Cost(5.0))| .AddDirectiveType<CostDirectiveType>()| .Use(next => next)| .Create();| var query = schema.GetType<ObjectType>(OperationTypeNames.Query);| var directive = query.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"cost\");| var costDirective = directive.AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective.Weight);| }"
      },
      {
        "name": "Cost_ObjectTypeDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Cost(5.0)| .Field(\"field\")| .Type<StringType>())| .AddDirectiveType<CostDirectiveType>()| .Use(next => next)| .Create();| var query = schema.GetType<ObjectType>(OperationTypeNames.Query);| var directive = query.Directives.Single(d => d.Type.Name == \"cost\");| var costDirective = directive.AsValue<CostDirective>();| // assert| Assert.Equal(5.0, costDirective.Weight);| }"
      },
      {
        "name": "ListSize_ObjectFieldDescriptor_AppliesDirective",
        "body": "{| // arrange & act| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(OperationTypeNames.Query)| .Field(\"field\")| .Type<ListType<StringType>>()| .ListSize(| assumedSize: 10,| slicingArguments: [\"first\", \"last\"],| sizedFields: [\"edges\", \"nodes\"],| requireOneSlicingArgument: false))| .AddDirectiveType<ListSizeDirectiveType>()| .Use(next => next)| .Create();| var query = schema.GetType<ObjectType>(OperationTypeNames.Query);| var directive = query.Fields[\"field\"].Directives.Single(d => d.Type.Name == \"listSize\");| var listSizeDirective = directive.AsValue<ListSizeDirective>();| // assert| Assert.Equal(10, listSizeDirective.AssumedSize);| Assert.Equal([\"first\", \"last\"], listSizeDirective.SlicingArguments, StringComparer.Ordinal);| Assert.Equal([\"edges\", \"nodes\"], listSizeDirective.SizedFields, StringComparer.Ordinal);| Assert.False(listSizeDirective.RequireOneSlicingArgument);| }"
      }
    ]
  },
  {
    "file": "PagingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = false)| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| var expectation =| JsonDocument.Parse(| \"\"\"| {| \"fieldCost\": 6,| \"typeCost\": 52| }| \"\"\");| await snapshot| .Add(operation, \"Operation\")| .Add(expectation.RootElement, \"Expected\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books(first: 1) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| query($first: Int) {| books(first: $first) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| query($first: Int, $last: Int) {| books(first: $first, last: $last) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| query($first: Int) {| books(first: $first, last: 1) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books {| nodes {| title| authors {| nodes {| name| }| }| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .AddFiltering()| .AddSorting()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| await snapshot| .Add(operation, \"Operation\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books(where: { title: { eq: \"abc\" } }) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = false)| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| var expectation =| JsonDocument.Parse(| \"\"\"| {| \"fieldCost\": 9,| \"typeCost\": 52| }| \"\"\");| await snapshot| .Add(operation, \"Operation\")| .Add(expectation.RootElement, \"Expected\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| {| books(where: { title: { contains: \"abc\" } }) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = false)| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| var expectation =| JsonDocument.Parse(| \"\"\"| {| \"fieldCost\": 10,| \"typeCost\": 52| }| \"\"\");| await snapshot| .Add(operation, \"Operation\")| .Add(expectation.RootElement, \"Expected\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var snapshot = new Snapshot();| var operation =| Utf8GraphQLParser.Parse(| \"\"\"| query($where: BookFilterInput){| books(where: $where) {| nodes {| title| }| }| }| \"\"\");| var request =| OperationRequestBuilder.New()| .SetDocument(operation)| .ReportCost()| .Build();| var executor =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = false)| .AddFiltering()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var response = await executor.ExecuteAsync(request);| // assert| var expectation =| JsonDocument.Parse(| \"\"\"| {| \"fieldCost\": 10,| \"typeCost\": 52| }| \"\"\");| await snapshot| .Add(operation, \"Operation\")| .Add(expectation.RootElement, \"Expected\")| .Add(response, \"Response\")| .MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "SchemaIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await CreateSchemaAsync(| \"\"\"| type Query {| compositeField(| inputArg: Input @cost(weight: \"1\") # ARGUMENT_DEFINITION (input type)| listArg: [Scalar] @cost(weight: \"1\") # ARGUMENT_DEFINITION (list type)| scalarArg: Scalar @cost(weight: \"0\") # ARGUMENT_DEFINITION (scalar type)| ): CompositeType @cost(weight: \"1\") # FIELD_DEFINITION (composite type)| }| type CompositeType @cost(weight: \"1\") { # OBJECT| listField: [ElementType] @cost(weight: \"1\") # FIELD_DEFINITION (list type)| }| type ElementType {| scalarField: Scalar @cost(weight: \"0\") # FIELD_DEFINITION (scalar type)| }| input Input {| inputField: Input @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (input type)| listField: [Scalar] @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (list type)| scalarField: Scalar @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (scalar type)| }| enum Enum @cost(weight: \"0\") { ENUM_VALUE } # ENUM| scalar Scalar @cost(weight: \"0\") # SCALAR| \"\"\");| // act| var result = schema.ToDocument();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await CreateSchemaAsync(| \"\"\"| type Query {| compositeField(| inputArg: Input @cost(weight: \"0\") # ARGUMENT_DEFINITION (input type)| listArg: [Scalar] @cost(weight: \"0\") # ARGUMENT_DEFINITION (list type)| scalarArg: Scalar @cost(weight: \"1\") # ARGUMENT_DEFINITION (scalar type)| ): CompositeType @cost(weight: \"0\") # FIELD_DEFINITION (composite type)| }| type CompositeType @cost(weight: \"0\") { # OBJECT| listField: [ElementType] @cost(weight: \"0\") # FIELD_DEFINITION (list type)| }| type ElementType {| scalarField: Scalar @cost(weight: \"1\") # FIELD_DEFINITION (scalar type)| }| input Input {| inputField: Input @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (input type)| listField: [Scalar] @cost(weight: \"0\") # INPUT_FIELD_DEFINITION (list type)| scalarField: Scalar @cost(weight: \"1\") # INPUT_FIELD_DEFINITION (scalar type)| }| enum Enum @cost(weight: \"1\") { ENUM_VALUE } # ENUM| scalar Scalar @cost(weight: \"1\") # SCALAR| \"\"\");| // act| var result = schema.ToDocument();| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SlicingArgumentsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .ExecuteRequestAsync(| \"\"\"| {| foos {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"errors\": [| {| \"message\": \"Exactly one slicing argument must be defined.\",| \"locations\": [| {| \"line\": 2,| \"column\": 5| }| ],| \"path\": [| \"foos\"| ],| \"extensions\": {| \"code\": \"HC0082\"| }| }| ]| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .ExecuteRequestAsync(| \"\"\"| {| foos(first: null) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"errors\": [| {| \"message\": \"Exactly one slicing argument must be defined.\",| \"locations\": [| {| \"line\": 2,| \"column\": 5| }| ],| \"path\": [| \"foos\"| ],| \"extensions\": {| \"code\": \"HC0082\"| }| }| ]| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ModifyPagingOptions(o => o.RequirePagingBoundaries = true)| .ExecuteRequestAsync(| \"\"\"| {| foos(first: null last: null) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"errors\": [| {| \"message\": \"Exactly one slicing argument must be defined.\",| \"locations\": [| {| \"line\": 2,| \"column\": 5| }| ],| \"path\": [| \"foos\"| ],| \"extensions\": {| \"code\": \"HC0082\"| }| }| ]| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| foos(first: null, last: 1) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foos\": {| \"nodes\": [| 100| ]| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| {| foos(first: 1, last: null) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foos\": {| \"nodes\": [| 1| ]| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query($first: Int = 1) {| foos(first: $first, last: null) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foos\": {| \"nodes\": [| 1| ]| }| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var result =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<Query>()| .ExecuteRequestAsync(| \"\"\"| query($first: Int = 1, $last: Int = null) {| foos(first: $first, last: $last) {| nodes| }| }| \"\"\");| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"foos\": {| \"nodes\": [| 1| ]| }| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "ProjectToTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| posts {| postId| title| blog {| url| }| }| }\")| .Build());| var snapshot = new Snapshot(postFix: TestEnvironment.TargetFramework);| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| query Test {| posts {| postId| title| blog {| url| posts {| title| blog {| url| posts {| title| }| }| }| }| }| }\")| .Build());| var snapshot = new Snapshot(postFix: TestEnvironment.TargetFramework);| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| blogs {| url| titleImage {| url| }| }| }\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| query Test {| posts {| postId| title| blog {| url| titleImage {| url| }| }| }| }\")| .Build());| var snapshot = new Snapshot(postFix: TestEnvironment.TargetFramework);| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| query Test {| members {| name| ... on PremiumMemberDto { premium }| ... on StandardMemberDto { standard }| }| }\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema();| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| query Test {| members {| name| ... on PremiumMemberDto { premium }| }| }\")| .Build());| var snapshot = new Snapshot();| snapshot.AddSqlFrom(res1);| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "EntityFrameworkExecutableTests.cs",
    "methods": [
      {
        "name": "Extensions_Should_ReturnEntityFrameworkExecutable_When_DBSet",
        "body": "{| // arrange| // act| var executable = _context.Authors.AsDbContextExecutable();| // assert| Assert.True(executable is IQueryableExecutable<Author>);| executable.MatchSnapshot();| }"
      },
      {
        "name": "Extensions_Should_ReturnEntityFrameworkExecutable_When_Queryable",
        "body": "{| // arrange| // act| var executable = _context| .Authors| .AsQueryable()| .AsDbContextExecutable();| // assert| Assert.True(executable is IQueryableExecutable<Author>);| executable.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executable = _context| .Authors| .AsDbContextExecutable();| // act| object result = await executable.ToListAsync(default);| // assert| new { result, executable = executable.Print(), }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IExecutable executable = _context.Authors.Take(1).AsDbContextExecutable();| // act| var result = await executable.SingleOrDefaultAsync(default);| // assert| new { result, executable = executable.Print(), }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IExecutable executable = _context.Authors.AsDbContextExecutable();| // act| var result = await executable.FirstOrDefaultAsync(default);| // assert| new { result, executable = executable.Print(), }.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EntityFrameworkResolverCompilerIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using AuthorFixture authorFixture = new();| var contextFactory = new Mock<IDbContextFactory<BookContext>>();| contextFactory| .Setup(t => t.CreateDbContext())| .Returns(authorFixture.Context);| var result = await new ServiceCollection()| .AddSingleton(contextFactory.Object)| .AddGraphQL()| .AddQueryType<Query>()| .RegisterDbContextFactory<BookContext>()| .ExecuteRequestAsync(\"{ books { title } }\");| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| using AuthorFixture authorFixture = new();| using var scope = new ServiceCollection()| .AddScoped(_ => authorFixture.Context)| .AddGraphQL()| .AddQueryType<Query>()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .Services| .BuildServiceProvider()| .CreateScope();| var result = await scope.ServiceProvider.ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ books { title } }\")| .SetServices(scope.ServiceProvider)| .Build());| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| using AuthorFixture authorFixture = new();| await using var service = new ServiceCollection()| .AddScoped(_ => authorFixture.Context)| .AddGraphQL()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var result = await service.ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ books { title } }\")| .SetServices(service)| .Build());| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| using AuthorFixture authorFixture = new();| await using var service = new ServiceCollection()| .AddScoped(_ => authorFixture.Context)| .AddGraphQL()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var result = await service.ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ books { title } }\")| .SetServices(service)| .Build());| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "SqlCursorCursorPagingIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root1 {| foo| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root(first: 2) {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root(first: 2) {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root(first: 2 after: \"MQ==\") {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root(first: 2 after: \"MQ==\") {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| edges {| node {| foo| }| cursor| }| nodes {foo}| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| nodes { foo }| totalCount| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(EmptyData);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| nodes { foo }| totalCount| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| root {| totalCount| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SqlOffsetPagingIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root(take: 2) {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root(take: 2) {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root(take: 2) {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root(take: 2) {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| items {| foo| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = CreateSchema(Data);| // act| var result = await executor.ExecuteAsync(| @\"{| root {| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "UseDbContextTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using var scope = services.CreateAsyncScope();| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.SaveChangesAsync();| // act| var result = await executor.ExecuteAsync(\"{ authors { name } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(\"{ authors { name } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryValueTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(\"{ authors { name } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| queryableExtensionsOffset {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryValueTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| \"\"\"| query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryValueTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| \"\"\"| query Test {| authorOffsetPaging {| items {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(\"{ author { name } }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .BuildSchemaAsync();| // assert| schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryTask>()| .BuildSchemaAsync();| // assert| schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryValueTask>()| .BuildSchemaAsync();| // assert| schema.Print().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor =| await new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddQueryType<QueryType>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| @\"query Test {| books {| id| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| \"\"\"| query Test {| queryableExtensionsCursor {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<QueryValueTask>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IServiceProvider services =| new ServiceCollection()| .AddDbContextPool<BookContext>(| b => b.UseInMemoryDatabase(CreateConnectionString()))| .AddGraphQL()| .AddFiltering()| .AddSorting()| .AddProjections()| .AddQueryType<Query>()| .Services| .BuildServiceProvider();| var executor =| await services.GetRequiredService<IRequestExecutorResolver>()| .GetRequestExecutorAsync();| await using (var scope = services.CreateAsyncScope())| {| await using var context = scope.ServiceProvider.GetRequiredService<BookContext>();| await context.Authors.AddAsync(new Author { Name = \"foo\", });| await context.Authors.AddAsync(new Author { Name = \"bar\", });| await context.SaveChangesAsync();| }| // act| var result = await executor.ExecuteAsync(| @\"query Test {| authorCursorPaging {| nodes {| name| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterCombinatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| \"\"\"| {| root(where: { }) {| bar| }| }| \"\"\");| res1.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: \\\"Sam Sampleman\\\"}}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: \\\"NoMatch\\\"}}){ name lastName}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: null}}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"Sam_Sampleman\")| .Add(res2, \"NoMatch\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseFiltering())| .AddType(new FilterInputType<Foo>(x => x| .Field(f => f.LastName)| .Extend()| .OnBeforeCreate(f => f.Expression = (Foo foo, string bar) => foo.LastName == bar)))| .AddFiltering();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.Single().Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: 1}}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: 0}}){ name lastName}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: null}}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"1\")| .Add(res2, \"0\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorIdTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(| _fooEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"Rm86dGVzdGF0ZXN0\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"Rm86dGVzdGJ0ZXN0\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(| _fooEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"Rm86dGVzdGF0ZXN0\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"Rm86dGVzdGJ0ZXN0\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(| _fooEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(@\"{| root(where: {| bar: {| in: [ \"\"Rm86dGVzdGF0ZXN0\"\" \"\"Rm86dGVzdGJ0ZXN0\"\" ]| }| }){| bar| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { in: [\\\"Rm86dGVzdGJ0ZXN0\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"Rm86dGVzdGF0ZXN0\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(| _fooEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(@\"{| root(where: {| bar: {| nin: [ \"\"Rm86dGVzdGF0ZXN0\"\" \"\"Rm86dGVzdGJ0ZXN0\"\" ]| }| }){| bar| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { nin: [\\\"Rm86dGVzdGJ0ZXN0\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"Rm86dGVzdGF0ZXN0\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"Rm86dGVzdGF0ZXN0\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"Rm86dGVzdGF0ZXN0\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"Rm86dGVzdGF0ZXN0\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"Rm86dGVzdGJ0ZXN0\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(@\"{| root(where: {| bar: {| in: [ \"\"Rm86dGVzdGF0ZXN0\"\" \"\"Rm86dGVzdGJ0ZXN0\"\" ]| }| }){| bar| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { in: [\\\"Rm86dGVzdGJ0ZXN0\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"Rm86dGVzdGF0ZXN0\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| root(where: {| bar: {| nin: [ \"Rm86dGVzdGF0ZXN0\" \"Rm86dGVzdGJ0ZXN0\" ]| }| }){| bar| }| }| \"\"\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"Rm86dGVzdGJ0ZXN0\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"Rm86dGVzdGF0ZXN0\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooShort, FooShortFilterInput>(| _fooShortEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: \\\"Rm9vOjEy\\\"}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: \\\"Rm9vOjEz\\\"}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooShort, FooShortFilterInput>(| _fooShortEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: \\\"Rm9vOjEy\\\"}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: \\\"Rm9vOjEz\\\"}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<FooShortNullable, FooShortNullableFilterInput>(| _fooShortNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: \\\"Rm9vOjEy\\\"}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: \\\"Rm9vOjEz\\\"}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<FooShortNullable, FooShortNullableFilterInput>(| _fooShortNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: \\\"Rm9vOjEy\\\"}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: \\\"Rm9vOjEz\\\"}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooShort, FooShortFilterInput>(| _fooShortEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| in: [ \"\"Rm9vOjEy\"\", \"\"Rm9vOjEz\"\"]| }| }){| barShort| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| in: [ \"\"Rm9vOjEz\"\", \"\"Rm9vOjE0\"\"]| }| }){| barShort| }| }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, \\\"Rm9vOjE0\\\"]}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooShort, FooShortFilterInput>(| _fooShortEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| nin: [ \"\"Rm9vOjEy\"\", \"\"Rm9vOjEz\"\"]| }| }){| barShort| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { barShort: { nin: \" +| \"[ \\\"Rm9vOjEy\\\", \\\"Rm9vOjE0\\\"]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { barShort: { nin: [ null, \\\"Rm9vOjE0\\\"]}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<FooShortNullable, FooShortNullableFilterInput>(| _fooShortNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| in: [ \"\"Rm9vOjEy\"\", \"\"Rm9vOjEz\"\"]| }| }){| barShort| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{ root(where: {| barShort: {| in: [ \"\"Rm9vOjEz\"\", \"\"Rm9vOjE0\"\"]| }| }){| barShort| }| }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { barShort: { in: [ \\\"Rm9vOjEz\\\", null ]}}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester =| _cache.CreateSchema<FooShortNullable, FooShortNullableFilterInput>(| _fooShortNullableEntities,| configure: sb => sb.AddGlobalObjectIdentification(false));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| nin: [ \"\"Rm9vOjEy\"\", \"\"Rm9vOjEz\"\"]| }| }){| barShort| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| nin: [ \"\"Rm9vOjEz\"\", \"\"Rm9vOjE0\"\"]| }| }){| barShort| }| }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| barShort: {| nin: [ \"\"Rm9vOjEz\"\", null ]| }| }){| barShort| }| }\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorInterfacesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema<BarInterface, FilterInputType<BarInterface>>(| _barEntities,| configure: Configure);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"a\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"b\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: null}}}) \" +| \"{ test{ prop}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { neq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument( \"{ root { foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStructTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: 12}}}) { foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: 13}}}) { foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: null}}}) { foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: 12}}}) { foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: 13}}}) { foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { eq: null}}}) { foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: { barShort: { neq: 123}}}) { foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { foo { barShort }}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNullableList:{ some: { barShort: { eq: 12}}}}) { foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNullableList:{ some: { barShort: { eq: 13}}}}) { foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNullableList:{ some: { barShort: { eq: null}}}}) { foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooList:{ some: { barShort: { eq: 12}}}}) { foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooList:{ some: { barShort: { eq: 13}}}}) { foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooList:{ some: { barShort: { eq: null}}}}) { foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorVariablesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| const string query =| \"query Test($where: Boolean){ root(where: {bar: { eq: $where}}){ bar}}\";| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"where\", true }, })| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"where\", false }, })| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| const string query =| \"query Test($where: Boolean!){ root(where: {bar: { eq: $where}}){ bar}}\";| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"where\", true}, })| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"where\", false}, })| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "DataLoaderTests.cs",
    "methods": [
      {
        "name": "ClearCacheNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var services = new ServiceCollection()| .AddScoped<IBatchScheduler, ManualBatchScheduler>()| .AddDataLoader(sp => new DataLoader<string, string>(fetch, sp.GetRequiredService<IBatchScheduler>()));| var scope = services.BuildServiceProvider().CreateScope();| var dataLoader = scope.ServiceProvider.GetRequiredService<DataLoader<string, string>>();| // act| void Verify() => dataLoader.ClearCache();| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "ClearCacheAllEntries",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| loader.SetCacheEntry(\"Bar\", Task.FromResult<string?>(\"Baz\"));| // act| loader.ClearCache();| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<string?> Verify() => loader.LoadAsync(default(string)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // first load.| (await loader.LoadAsync(key)).MatchSnapshot();| // act| var result = await loader.LoadAsync(key);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| Task<string?> Verify() => loader.LoadAsync(key, CancellationToken.None);| // assert| var task = Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify() => loader.LoadAsync(default(string[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers.CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<string>();| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = TestHelpers| .CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<string?>> Verify()| => loader.LoadAsync(default(List<string>)!, CancellationToken.None);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string>();| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| Assert.Empty(await loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new DelayDispatcher();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| (await loader.LoadAsync(keys, CancellationToken.None)).MatchSnapshot();| // act| var result = await loader.LoadAsync(keys, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(| fetch,| batchScheduler);| var keys = new List<string> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys, CancellationToken.None);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var repository = new Dictionary<string, string?>| {| { \"Foo\", \"Bar\" },| { \"Bar\", null },| { \"Baz\", \"Foo\" },| { \"Qux\", null },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string?>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| var loadResult = loader.LoadAsync(requestKeys);| batchScheduler.Dispatch();| // assert| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = Errors.CreateKeysAndValuesMustMatch(4, 3);| var repository = new Dictionary<string, string>| {| { \"Foo\", \"Bar\" },| { \"Bar\", \"Baz\" },| { \"Baz\", \"Foo\" },| };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| {| var span = results.Span;| for (var i = 0; i < keys.Count; i++)| {| if (repository.TryGetValue(keys[i], out var result))| {| span[i] = result;| }| }| return default;| }| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException.Message, actualException.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var expectedException = new Exception(\"Foo\");| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(Fetch, batchScheduler);| var requestKeys = new[] { \"Foo\", \"Bar\", \"Baz\", \"Qux\", };| ValueTask Fetch(| IReadOnlyList<string> keys,| Memory<Result<string?>> results,| CancellationToken cancellationToken)| => throw expectedException;| // act| Task Verify() => loader.LoadAsync(requestKeys);| // assert| var task = Assert.ThrowsAsync<Exception>(Verify);| batchScheduler.Dispatch();| var actualException = await task;| Assert.Equal(expectedException, actualException);| }"
      },
      {
        "name": "RemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult<string?>(\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(default!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "RemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "RemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult<string?>(\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<string?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "SetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var loader = new DataLoader<string, string>(fetch, batchScheduler);| var key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "SetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var value = Task.FromResult<string?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "SetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| var loader = new DataLoader<string, string>(fetch, batchScheduler, options);| var key = \"Foo\";| var first = Task.FromResult<string?>(\"Bar\");| var second = Task.FromResult<string?>(\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<object?> Verify() => loader.LoadAsync(default(object)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| var loadResult = loader.LoadAsync(key);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| Task<object?> Verify() => loader.LoadAsync(key);| // assert| var task =| Assert.ThrowsAsync<InvalidOperationException>(Verify);| await Task.Delay(25);| batchScheduler.Dispatch();| await task;| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify() => loader.LoadAsync(default(object[])!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = Array.Empty<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new object[] { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| // act| Task<IReadOnlyList<object?>> Verify()| => loader.LoadAsync(default(List<object>)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(\"keys\", Verify);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object>();| // act| var loadResult = await loader.LoadAsync(keys);| // assert| Assert.Empty(loadResult);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>(\"Bar\");| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var keys = new List<object> { \"Foo\", };| // act| var loadResult = loader.LoadAsync(keys);| // assert| await Task.Delay(25);| batchScheduler.Dispatch();| (await loadResult).MatchSnapshot();| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| loader.SetCacheEntry(\"Foo\", Task.FromResult((object?)\"Bar\"));| // act| void Verify() => loader.RemoveCacheEntry(null!);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.RemoveCacheEntry(key);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderRemoveCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| loader.SetCacheEntry(key, Task.FromResult((object?)\"Bar\"));| // act| loader.RemoveCacheEntry(key);| // assert| Assert.Equal(0, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryKeyNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| var value = Task.FromResult<object?>(\"Foo\");| // act| void Verify() => loader.SetCacheEntry(null!, value);| // assert| Assert.Throws<ArgumentNullException>(\"key\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryValueNull",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| // act| void Verify() => loader.SetCacheEntry(key, default!);| // assert| Assert.Throws<ArgumentNullException>(\"value\", Verify);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryNoException",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| void Verify() => loader.SetCacheEntry(key, value);| // assert| Assert.Null(Record.Exception(Verify));| }"
      },
      {
        "name": "IDataLoaderSetCacheEntry",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| object key = \"Foo\";| var value = Task.FromResult<object?>(\"Bar\");| // act| loader.SetCacheEntry(key, value);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "IDataLoaderSetCacheEntryTwice",
        "body": "{| // arrange| var fetch = CreateFetch<string, string>();| var batchScheduler = new ManualBatchScheduler();| var cache = new PromiseCache(10);| var options = new DataLoaderOptions { Cache = cache, };| IDataLoader loader = new DataLoader<string, string>(fetch, batchScheduler, options);| const string key = \"Foo\";| var first = Task.FromResult((object?)\"Bar\");| var second = Task.FromResult((object?)\"Baz\");| // act| loader.SetCacheEntry(key, first);| loader.SetCacheEntry(key, second);| // assert| Assert.Equal(1, cache.Usage);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cache = new PromiseCache(10);| var dataLoader1 = new TestDataLoader1(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity1 = await dataLoader1.LoadAsync(1, CancellationToken.None);| await Task.Delay(500);| // act| var dataLoader2 = new TestDataLoader2(| new AutoBatchScheduler(),| new DataLoaderOptions { Cache = cache });| var entity2 = await dataLoader2.LoadAsync(2, CancellationToken.None);| // assert| Assert.Same(entity1, entity2);| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: \\\"Sam Sampleman\\\"}}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: \\\"NoMatch\\\"}}){ name lastName}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { displayName: { eq: null}}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"Sam_Sampleman\")| .Add(res2, \"NoMatch\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseFiltering())| .AddType(new FilterInputType<Foo>(x => x| .Field(f => f.LastName)| .Extend()| .OnBeforeCreate(f => f.Expression = (Foo foo, string bar) => foo.LastName == bar)))| .AddFiltering();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.Single().Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: 1}}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: 0}}){ name lastName}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barLength: { eq: null}}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"1\")| .Add(res2, \"0\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorInterfacesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema<BarInterface, FilterInputType<BarInterface>>(| _barEntities,| configure: Configure);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"a\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"b\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: null}}}) \" +| \"{ test{ prop}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { neq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument( \"{ root { foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "FilterContextParameterExpressionBuilderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| books(where: { title: { eq: \"\"test\"\" } }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(Query.Context);| }"
      }
    ]
  },
  {
    "file": "FilterContextTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: { title: { eq: \"\"test\"\" } }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var field = Assert.Single(context!.GetFields());| Assert.Empty(context.GetOperations());| var operation = Assert.Single(Assert.IsType<FilterInfo>(field.Value).GetOperations());| Assert.Empty(Assert.IsType<FilterInfo>(field.Value).GetFields());| Assert.Equal(\"title\", field.Field.Name);| Assert.Equal(\"eq\", operation.Field.Name);| Assert.Equal(\"test\", Assert.IsType<FilterValue>(operation.Value).Value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query =| \"\"\"| {| test {| title| }| }| \"\"\";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| Assert.False(context!.IsDefined);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query =| \"\"\"| {| test(where: { title: { eq: \"test\" } }) {| title| }| }| \"\"\";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| Assert.True(context!.IsDefined);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: { title: { in: [\"\"a\"\", \"\"b\"\"] } }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var field = Assert.Single(context!.GetFields());| Assert.Empty(context.GetOperations());| var operation =| Assert.Single(Assert.IsType<FilterInfo>(field.Value).GetOperations());| Assert.Empty(Assert.IsType<FilterInfo>(field.Value).GetFields());| Assert.Equal(\"title\", field.Field.Name);| Assert.Equal(\"in\", operation.Field.Name);| var value = Assert.IsType<FilterValue>(operation.Value!).Value as IEnumerable<string>;| Assert.Equal(\"a\", value!.FirstOrDefault());| Assert.Equal(\"b\", value!.LastOrDefault());| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(x =>| {| context = x.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: {| or: [| { title: { eq: \"\"a\"\" } }| { title: { eq: \"\"b\"\" } }| ]| }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var operation = Assert.Single(context!.GetOperations());| Assert.Empty(context!.GetFields());| var valueCollection = Assert.IsType<FilterValueCollection>(operation.Value);| var field0 = Assert.Single(Assert.IsType<FilterInfo>(valueCollection[0]).GetFields());| Assert.Equal(\"title\", field0.Field.Name);| var operation0 = Assert.Single(Assert.IsType<FilterInfo>(field0.Value).GetOperations());| Assert.Equal(\"eq\", operation0.Field.Name);| Assert.Equal(\"a\", Assert.IsType<FilterValue>(operation0.Value).Value);| var field1 = Assert.Single(Assert.IsType<FilterInfo>(valueCollection[1]).GetFields());| Assert.Equal(\"title\", field1.Field.Name);| var operation1 = Assert.Single(Assert.IsType<FilterInfo>(field1.Value).GetOperations());| Assert.Equal(\"eq\", operation1.Field.Name);| Assert.Equal(\"b\", Assert.IsType<FilterValue>(operation1.Value).Value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: { author: { name: { eq: \"\"test\"\" } } }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var author = Assert.Single(context!.GetFields());| Assert.Empty(context.GetOperations());| var name = Assert.Single(Assert.IsType<FilterInfo>(author.Value).GetFields());| Assert.Empty(Assert.IsType<FilterInfo>(author.Value).GetOperations());| var operation =| Assert.Single(Assert.IsType<FilterInfo>(name.Value).GetOperations());| Assert.Empty(Assert.IsType<FilterInfo>(name.Value).GetFields());| Assert.Equal(\"author\", author.Field.Name);| Assert.Equal(\"name\", name.Field.Name);| Assert.Equal(\"eq\", operation.Field.Name);| Assert.Equal(\"test\", Assert.IsType<FilterValue>(operation.Value).Value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(t => t| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(ctx =>| {| context = ctx.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: {| and: [| {| title: {| in: [\"\"a\"\", \"\"b\"\"]| }| author: {| name: {| eq: \"\"test\"\"| neq: \"\"test\"\"| }| }| }| { pages: { eq: 1 } }| { isActive: { eq: true } }| ],| or: [| { title: { eq: \"\"a\"\" } }| { title: { eq: \"\"b\"\" } }| ]| }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| context!.ToDictionary().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| IImmutableDictionary<string, object?>? localContextData = null;| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(x =>| {| x.GetFilterContext()?.Handled(false);| localContextData = x.LocalContextData.Add(\"foo\", true);| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: {| title: {| in: [\"\"a\"\", \"\"b\"\"]| }| author: {| name: {| eq: \"\"test\"\"| neq: \"\"test\"\"| }| }| }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(localContextData);| Assert.False(localContextData!.ContainsKey(QueryableFilterProvider.SkipFilteringKey));| }"
      },
      {
        "name": "Task",
        "body": "{| IImmutableDictionary<string, object?>? localContextData = null;| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(x =>| {| x.GetFilterContext();| localContextData = x.LocalContextData.Add(\"foo\", true);| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(where: {| title: {| in: [\"\"a\"\", \"\"b\"\"]| eq: null| }| author: {| name: {| eq: \"\"test\"\"| neq: \"\"test\"\"| }| }| }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(localContextData);| Assert.True(localContextData!.ContainsKey(QueryableFilterProvider.SkipFilteringKey));| }"
      },
      {
        "name": "Task",
        "body": "{| var obj = new object();| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .Resolve(x =>| {| obj = x.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.Null(obj);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IFilterContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseFiltering()| .Resolve(x =>| {| context = x.GetFilterContext();| return Array.Empty<Book>();| }))| .AddFiltering()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| context!.ToDictionary().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FilterConventionScopeTests.cs",
    "methods": [
      {
        "name": "FilterConvention_Should_Work_When_ConfiguredWithAttributes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<IFilterConvention, BarFilterConvention>(\"Bar\")| .AddQueryType<Query1>()| .AddFiltering()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Work_When_ConfiguredWithType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<IFilterConvention, BarFilterConvention>(\"Bar\")| .AddQueryType<QueryType>()| .AddFiltering()| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FilterConventionTests.cs",
    "methods": [
      {
        "name": "FilterConvention_Should_Work_When_ConfigurationIsComplete",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: { eq:\\\"a\\\" }}\");| var type = new FooFilterInput();| //act| CreateSchemaWith(type, convention);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new Foo { Bar = \"a\", };| Assert.True(func(a));| var b = new Foo { Bar = \"b\", };| Assert.False(func(b));| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_OperationHandlerIsNotRegistered",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var type = new FooFilterInput();| // act| var error = Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| // assert| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_FieldHandlerIsNotRegistered",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var type = new FooFilterInput();| //act| var error = Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| // assert| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_OperationsInUknown",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var type = new FooFilterInput();| //act| var error = Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| // assert| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_OperationsIsNotNamed",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Description(\"eq\");| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var type = new FooFilterInput();| //act| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_NoProviderWasRegistered",
        "body": "{| // arrange| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| });| var type = new FooFilterInput();| //act| var error = Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Fail_When_NoMatchingBindingWasFound",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.Provider(provider);| });| var type = new FooFilterInput();| //act| var error = Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| // assert| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterConvention_Should_Work_With_Extensions",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| });| var extension1 = new FilterConventionExtension(| descriptor =>| {| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var extension2 = new FilterConventionExtension(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: { eq:\\\"a\\\" }}\");| var type = new FooFilterInput();| //act| CreateSchemaWith(type, convention, extension1, extension2);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new Foo { Bar = \"a\", };| Assert.True(func(a));| var b = new Foo { Bar = \"b\", };| Assert.False(func(b));| }"
      },
      {
        "name": "FilterConvention_Should_Work_With_ExtensionsType",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableStringEqualsHandler>();| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: { eq:\\\"a\\\" }}\");| var type = new FooFilterInput();| //act| CreateSchemaWithTypes(| type,| convention,| typeof(MockFilterExtensionConvention));| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new Foo { Bar = \"a\", };| Assert.True(func(a));| var b = new Foo { Bar = \"b\", };| Assert.False(func(b));| }"
      },
      {
        "name": "FilterConvention_Should_Work_With_ProviderExtensionsType",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableDefaultFieldHandler>();| });| var convention = new FilterConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.Provider(provider);| });| var extension1 = new FilterConventionExtension(| descriptor =>| {| descriptor.Operation(DefaultFilterOperations.Equals).Name(\"eq\");| descriptor.AddProviderExtension<MockFilterProviderExtensionConvention>();| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: { eq:\\\"a\\\" }}\");| var type = new FooFilterInput();| //act| CreateSchemaWith(type, convention, extension1);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new Foo { Bar = \"a\", };| Assert.True(func(a));| var b = new Foo { Bar = \"b\", };| Assert.False(func(b));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var convention = new FilterConvention(| descriptor =>| {| descriptor.AddDefaults();| descriptor.BindRuntimeType<string, TestOperationFilterInputType>();| descriptor.BindRuntimeType<Foo, CustomFooFilterInput>();| });| var builder = new ServiceCollection()| .AddGraphQL()| .AddConvention<IFilterConvention>(convention)| .AddFiltering()| .AddQueryType(| x => x.Name(\"Query\").Field(\"foos\").UseFiltering().Resolve(new List<Foo>()));| //act| var schema = await builder.BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterProvider_Throws_Exception_When_NotInitializedByConvention",
        "body": "{| // arrange| var provider = new QueryableFilterProvider(| descriptor => descriptor.AddFieldHandler<QueryableStringEqualsHandler>());| var context = ConventionContext.Create(| null,| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| // act| provider.Initialize(context);| // assert| var exception =| Assert.Throws<SchemaException>(() => provider.Complete(context));| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var convention = new FilterConvention(| descriptor =>| {| descriptor.AddDefaults();| descriptor.AllowAnd(false);| });| var builder = new ServiceCollection()| .AddGraphQL()| .AddConvention<IFilterConvention>(convention)| .AddFiltering()| .AddQueryType(| x => x.Name(\"Query\").Field(\"foos\").UseFiltering().Resolve(new List<Foo>()));| //act| var schema = await builder.BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var convention = new FilterConvention(| descriptor =>| {| descriptor.AddDefaults();| descriptor.AllowOr(false);| });| var builder = new ServiceCollection()| .AddGraphQL()| .AddConvention<IFilterConvention>(convention)| .AddFiltering()| .AddQueryType(| x => x.Name(\"Query\").Field(\"foos\").UseFiltering().Resolve(new List<Foo>()));| //act| var schema = await builder.BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorDateOnlyTests.cs",
    "methods": [
      {
        "name": "Create_ShortEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { eq: \\\"2020-12-12\\\" }}\");| var tester = CreateProviderTester(new FooFilterInput());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo { Value = new DateOnly(2020,12,12), };| Assert.True(func(a));| var b = new Foo { Value = new DateOnly(2020,12,13), };| Assert.False(func(b));| }"
      },
      {
        "name": "Create_ShortNotEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { neq: \\\"2020-12-12\\\" }}\");| var tester = CreateProviderTester(new FooFilterInput());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo { Value = new DateOnly(2020,12,13), };| Assert.True(func(a));| var b = new Foo { Value = new DateOnly(2020,12,12), };| Assert.False(func(b));| }"
      },
      {
        "name": "Create_ShortNullableEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { eq: null }}\");| var tester = CreateProviderTester(new FooNullableFilterInput());| // act| var func = tester.Build<FooNullable>(value);| // assert| var a = new FooNullable { Value = null, };| Assert.True(func(a));| var b = new FooNullable { Value = new DateOnly(2020,12,13), };| Assert.False(func(b));| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorMethodTests.cs",
    "methods": [
      {
        "name": "Create_MethodSimple_Expression",
        "body": "{| // arrange| var value = Syntax.ParseValueLiteral(\"{ simple: { eq:\\\"a\\\" }}\");| var tester = CreateProviderTester(| new FooFilterInput(),| new FilterConvention(| x =>| {| x.Operation(155).Name(\"simple\");| x.Operation(156).Name(\"complex\");| x.AddDefaults();| x.Provider(| new QueryableFilterProvider(| p => p.AddFieldHandler<QueryableSimpleMethodTest>()| .AddFieldHandler<QueryableComplexMethodTest>()| .AddDefaultFieldHandlers()));| }));| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo { Bar = \"a\", };| Assert.True(func(a));| var b = new Foo { Bar = \"b\", };| Assert.False(func(b));| }"
      },
      {
        "name": "Create_MethodComplex_Expression",
        "body": "{| // arrange| var tester = CreateProviderTester(| new FooFilterInput(),| new FilterConvention(| x =>| {| x.Operation(155).Name(\"simple\");| x.Operation(156).Name(\"complex\");| x.AddDefaults();| x.Provider(| new QueryableFilterProvider(| p => p.AddFieldHandler<QueryableSimpleMethodTest>()| .AddFieldHandler<QueryableComplexMethodTest>()| .AddDefaultFieldHandlers()));| }));| var valueTrue = Syntax.ParseValueLiteral(| \"{ complex: {parameter:\\\"a\\\", eq:\\\"a\\\" }}\");| var valueFalse = Syntax.ParseValueLiteral(| \"{ complex: {parameter:\\\"a\\\", eq:\\\"b\\\" }}\");| // act| var funcTrue = tester.Build<Foo>(valueTrue);| var funcFalse = tester.Build<Foo>(valueFalse);| // assert| var a = new Foo();| Assert.True(funcTrue(a));| var b = new Foo();| Assert.False(funcFalse(b));| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { neq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument( \"{ root { foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorTimeOnlyTests.cs",
    "methods": [
      {
        "name": "Create_ShortEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { eq: \\\"23:59:59\\\" }}\");| var tester = CreateProviderTester(new FooFilterInput());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo { Value = new TimeOnly(23, 59, 59), };| Assert.True(func(a));| var b = new Foo { Value = new TimeOnly(1, 59, 59), };| Assert.False(func(b));| }"
      },
      {
        "name": "Create_ShortNotEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { neq: \\\"23:59:59\\\" }}\");| var tester = CreateProviderTester(new FooFilterInput());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo { Value = new TimeOnly(1, 59, 59), };| Assert.True(func(a));| var b = new Foo { Value = new TimeOnly(23, 59, 59), };| Assert.False(func(b));| }"
      },
      {
        "name": "Create_ShortNullableEqual_Expression",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| \"{ value: { eq: null }}\");| var tester = CreateProviderTester(new FooNullableFilterInput());| // act| var func = tester.Build<FooNullable>(value);| // assert| var a = new FooNullable { Value = null, };| Assert.True(func(a));| var b = new FooNullable { Value = new TimeOnly(23, 59, 59), };| Assert.False(func(b));| }"
      }
    ]
  },
  {
    "file": "ExtensionsTest.cs",
    "methods": [
      {
        "name": "Convention_DefaultScope_Extensions",
        "body": "{| // arrange| // act| var convention = new FilterConvention(| x => x.UseMock()| .Configure<StringOperationFilterInputType>(y => y| .Operation(DefaultFilterOperations.Like)| .Type<StringType>())| .Operation(DefaultFilterOperations.Like)| .Name(\"like\"));| var builder = SchemaBuilder.New()| .AddConvention<IFilterConvention>(convention)| .TryAddTypeInterceptor<FilterTypeInterceptor>()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\")| .Argument(\"test\", x => x.Type<TestFilter>()));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(| c =>| c.Field(x => x.GetFoos()).UseFiltering());| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Generic_RuntimeType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c| .Field(x => x.GetFoos())| .UseFiltering<Bar>());| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Generic_SchemaType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c.Field(x => x.GetFoos()).UseFiltering<BarFilterInput>());| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Type_RuntimeType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c.Field(x => x.GetFoos()).UseFiltering(typeof(Bar)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Type_SchemaType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(| c =>| c.Field(x => x.GetFoos()).UseFiltering(typeof(BarFilterInput)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Descriptor",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c| .Field(a => a.GetFoos())| .UseFiltering<Bar>(b => b| .Name(\"foo\").Field(d => d.Foo)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FilterAttributeTests.cs",
    "methods": [
      {
        "name": "Create_Schema_With_FilterInput",
        "body": "No body available"
      },
      {
        "name": "Create_Schema_With_FilterInput_With_Fluent_API_Ctor_Param",
        "body": "No body available"
      },
      {
        "name": "Create_Schema_With_FilterInput_With_Fluent_API",
        "body": "No body available"
      },
      {
        "name": "Create_Schema_With_FilterAttributes",
        "body": "No body available"
      },
      {
        "name": "Create_Schema_With_FilterInput_With_GenericAttribute",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "FilterConventionExtensionsTests.cs",
    "methods": [
      {
        "name": "Merge_Should_Merge_ArgumentName",
        "body": "{| // arrange| var convention = new MockFilterConvention(x => x.ArgumentName(\"Foo\"));| var extension = new FilterConventionExtension(x => x.ArgumentName(\"Bar\"));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(\"Bar\", convention.DefinitionAccessor?.ArgumentName);| }"
      },
      {
        "name": "Merge_Should_NotMerge_ArgumentName_When_Default",
        "body": "{| // arrange| var convention = new MockFilterConvention(x => x.ArgumentName(\"Foo\"));| var extension = new FilterConventionExtension(| x => x.ArgumentName(FilterConventionDefinition.DefaultArgumentName));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(\"Foo\", convention.DefinitionAccessor?.ArgumentName);| }"
      },
      {
        "name": "Merge_Should_Merge_Provider",
        "body": "{| // arrange| var convention = new MockFilterConvention(x => x.Provider<QueryableFilterProvider>());| var extension = new FilterConventionExtension(x => x.Provider<MockProvider>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(typeof(MockProvider), convention.DefinitionAccessor?.Provider);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderInstance",
        "body": "{| // arrange| var providerInstance = new MockProvider();| var convention = new MockFilterConvention(| x => x.Provider(new QueryableFilterProvider()));| var extension = new FilterConventionExtension(| x => x.Provider(providerInstance));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(providerInstance, convention.DefinitionAccessor?.ProviderInstance);| }"
      },
      {
        "name": "Merge_Should_Merge_Operations",
        "body": "{| // arrange| var convention = new MockFilterConvention(x => x.Operation(1));| var extension = new FilterConventionExtension(x => x.Operation(2));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.Operations,| x => Assert.Equal(1, x.Id),| x => Assert.Equal(2, x.Id));| }"
      },
      {
        "name": "Merge_Should_Merge_Bindings",
        "body": "{| // arrange| var convention = new MockFilterConvention(| x => x.BindRuntimeType<int, ComparableOperationFilterInputType<int>>());| var extension = new FilterConventionExtension(| x => x.BindRuntimeType<double, ComparableOperationFilterInputType<double>>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Contains(typeof(int), convention.DefinitionAccessor!.Bindings);| Assert.Contains(typeof(double), convention.DefinitionAccessor!.Bindings);| }"
      },
      {
        "name": "Merge_Should_DeepMerge_Configurations",
        "body": "{| // arrange| var convention = new MockFilterConvention(| x => x.Configure<ComparableOperationFilterInputType<int>>(d => d.Name(\"Foo\")));| var extension = new FilterConventionExtension(| x => x.Configure<ComparableOperationFilterInputType<int>>(d => d.Name(\"Bar\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| var configuration = Assert.Single(convention.DefinitionAccessor!.Configurations.Values)!;| Assert.Equal(2, configuration.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_Configurations",
        "body": "{| // arrange| var convention = new MockFilterConvention(| x => x.Configure<ComparableOperationFilterInputType<int>>(d => d.Name(\"Foo\")));| var extension = new FilterConventionExtension(| x => x.Configure<ComparableOperationFilterInputType<double>>(d => d.Name(\"Bar\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.Configurations.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensionsTypes",
        "body": "{| // arrange| var convention =| new MockFilterConvention(x => x.AddProviderExtension<MockProviderExtensions>());| var extension =| new FilterConventionExtension(| x => x.AddProviderExtension<MockProviderExtensions>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.ProviderExtensionsTypes.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensions",
        "body": "{| // arrange| var provider1 = new MockProviderExtensions();| var convention = new MockFilterConvention(x => x.AddProviderExtension(provider1));| var provider2 = new MockProviderExtensions();| var extension = new FilterConventionExtension(x => x.AddProviderExtension(provider2));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.ProviderExtensions,| x => Assert.Equal(provider1, x),| x => Assert.Equal(provider2, x));| }"
      }
    ]
  },
  {
    "file": "FilterInputTypeTest.cs",
    "methods": [
      {
        "name": "FilterInputType_DynamicName",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new FilterInputType<Foo>(| d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_DynamicName_NonGeneric",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new FilterInputType<Foo>(| d => d.Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Struct",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s| .AddType(new FilterInputType<FilterWithStruct>()));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new FilterInputType<Foo>(| d => d.Directive(\"foo\")| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s| .AddDirectiveType<FooDirectiveType>()| .AddType(new FilterInputType<Foo>(d => d.Directive(\"foo\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s| .AddDirectiveType<FooDirectiveType>()| .AddType(new FilterInputType<Foo>(d => d| .Directive(new DirectiveNode(\"foo\"))| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new FilterInputType<Foo>(| d => d| .Directive(new FooDirective())| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new FilterInputType<Foo>(| d => d| .Directive<FooDirective>()| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddDescription",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new FilterInputType<Foo>(| d => d.Description(\"Test\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInput_AddName",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new FilterInputType<Foo>(| d => d.Name(\"Test\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_ImplicitBinding",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .ModifyOptions(x => x.DefaultBindingBehavior = BindingBehavior.Explicit)| .AddFiltering()| .AddType(new ObjectType<Foo>(x => x.Field(x => x.Bar)))| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Type<ObjectType<Foo>>()| .Resolve(\"bar\")| .UseFiltering<Foo>(x => x.BindFieldsImplicitly()))| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_ImplicitBinding_BindFields",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .ModifyOptions(x => x.DefaultBindingBehavior = BindingBehavior.Explicit)| .AddFiltering()| .AddType(new ObjectType<Foo>(x => x.Field(x => x.Bar)))| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Type<ObjectType<Foo>>()| .Resolve(\"bar\")| .UseFiltering<Foo>(x => x.BindFields(BindingBehavior.Implicit)))| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_ExplicitBinding",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .ModifyOptions(x => x.DefaultBindingBehavior = BindingBehavior.Implicit)| .AddFiltering()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Type<ObjectType<Bar>>()| .Resolve(\"bar\")| .UseFiltering<Bar>(x => x.BindFieldsExplicitly().Field(y => y.Qux)))| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_ExplicitBinding_BindFields",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .ModifyOptions(x => x.DefaultBindingBehavior = BindingBehavior.Implicit)| .AddFiltering()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Type<ObjectType<Bar>>()| .Resolve(\"bar\")| .UseFiltering<Bar>(| x => x.BindFields(BindingBehavior.Explicit).Field(y => y.Qux)))| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Should_ThrowException_WhenNoConventionIsRegistered",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<Foo>())| .UseFiltering(\"Foo\"));| // act| // assert| var exception = Assert.Throws<SchemaException>(() => builder.Create());| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Should_ThrowException_WhenNoConventionIsRegisteredDefault",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<Foo>())| .UseFiltering());| // act| // assert| var exception = Assert.Throws<SchemaException>(() => builder.Create());| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Should_UseCustomFilterInput_When_Nested",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<UserQueryType>();| // act| // assert| builder.Create().Print().MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Should_NotOverrideHandler_OnBeforeCreate",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<CustomHandlerQueryType>()| .Create();| // act| builder.TryGetType<CustomHandlerFilterInputType>(| \"TestName\",| out var type);| // assert| Assert.NotNull(type);| Assert.IsType<CustomHandler>(Assert.IsType<FilterField>(type!.Fields[\"id\"]).Handler);| }"
      },
      {
        "name": "FilterInputType_Should_NotOverrideHandler_OnBeforeCompletion",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<CustomHandlerQueryType>()| .Create();| // act| builder.TryGetType<CustomHandlerFilterInputType>(| \"TestName\",| out var type);| // assert| Assert.NotNull(type);| Assert.IsType<CustomHandler>(| Assert.IsType<FilterField>(type!.Fields[\"friends\"]).Handler);| Assert.IsType<QueryableDefaultFieldHandler>(| Assert.IsType<FilterField>(type.Fields[\"name\"]).Handler);| }"
      },
      {
        "name": "FilterInputType_Should_IgnoreFieldWithoutCallingConvention",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering(| x => x.AddDefaultOperations()| .BindRuntimeType<string, StringOperationFilterInputType>()| .Provider(new QueryableFilterProvider(y => y.AddDefaultFieldHandlers())))| .AddQueryType(| new ObjectType(| x => x.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<IgnoreTest>())| .UseFiltering<IgnoreTestFilterInputType>()));| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "FilterInputType_Should_InfereType_When_ItIsAInterface",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<TestingType<ITest<Foo>>>()| .AddObjectType<ITest<Foo>>();| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType(| d => d| .Field(\"bars\")| .UseFiltering()| .Use(next => async context =>| {| context.OperationResult.SetExtension(| \"where\",| context.ArgumentValue<object>(\"where\"));| await next(context);| })| .Resolve(new List<Bar>()));| var schema = builder.Create();| // act| var result = await schema.MakeExecutable().ExecuteAsync(| \"\"\"{ bars(where: { baz: { contains: \"test\" } }) { baz } }\"\"\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "FilterProviderExtensionsTests.cs",
    "methods": [
      {
        "name": "Merge_Should_Merge_HandlersAndPrependExtensionHandlers",
        "body": "{| // arrange| var typeConverterMock = new Mock<ITypeConverter>();| var inputParser = new InputParser(typeConverterMock.Object);| var firstFieldHandler = new QueryableStringContainsHandler(inputParser);| var extensionFieldHandler = new QueryableStringContainsHandler(inputParser);| var convention = new MockProvider(x => x.AddFieldHandler(firstFieldHandler));| var extension = new MockProviderExtensions(| x => x.AddFieldHandler(extensionFieldHandler));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.Handlers,| x => Assert.Equal(extensionFieldHandler, x.HandlerInstance),| x => Assert.Equal(firstFieldHandler, x.HandlerInstance));| }"
      }
    ]
  },
  {
    "file": "FilterTypeAttributeTests.cs",
    "methods": [
      {
        "name": "GenericTypeDescriptorAttribute_Changes_Name",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddFiltering()| .AddType<FilterInputType<FooGeneric>>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.Equal(| GenericTypeFilterAttribute.TypeName,| schema.GetType<FilterInputType<FooGeneric>>(| GenericTypeFilterAttribute.TypeName).TypeName());| }"
      },
      {
        "name": "FilterFieldAttribute_Changes_Name",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddFiltering()| .AddType<FilterInputType<FooFields>>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.NotNull(| schema.GetType<FilterInputType<FooFields>>(\"FooFieldsFilterInput\")| .Fields| .FirstOrDefault(x => x.Name == FilterFieldAttributeTest.Field));| }"
      }
    ]
  },
  {
    "file": "IdFilterTypeInterceptorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(\"a\"))| .AddType(new FilterInputType<Foo>(x =>| x.Field(y => y.Bar).Type<IdOperationFilterInputType>()))| .AddFiltering()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(\"a\"))| .AddType(new FilterInputType<FooId>())| .AddFiltering()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x.Name(\"Query\").Field(\"test\").Resolve(\"a\"))| .AddType(new FilterInputType<FooIdGeneric>())| .AddFiltering()| .BuildSchemaAsync();| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilteringExtensionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x =>| {| x.Name(\"Query\");| x.Field(\"foo\")| .Type(new ObjectType(x => x.Name(\"A\").Field(\"bar\").Resolve(\"a\")))| .Resolve(new object());| x.Field(\"bar\")| .Type(new ObjectType(x => x.Name(\"B\").Field(\"bar\").Resolve(\"a\")))| .Resolve(new object());| })| .BuildRequestExecutorAsync();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ shouldWork(where: {bar: {eq: true}}) { bar baz }}\")| .Build());| // assert| res1.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddFiltering()| .BuildRequestExecutorAsync();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ shouldWork(where: {bar: {eq: true}}) { bar baz }}\")| .Build());| // assert| res1.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddFiltering()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ typeMismatch(where: {bar: {eq: true}}) { bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddFiltering()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ missingMiddleware { bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "TypeInspectorTests.cs",
    "methods": [
      {
        "name": "FilterInputType_Should_BeASchemaType_When_Inferred",
        "body": "{| // arrange| var inspector = new DefaultTypeInspector();| // act| var extendedType = inspector.GetType(typeof(FilterInputType<Foo>));| // assert| Assert.True(extendedType.IsSchemaType);| }"
      },
      {
        "name": "FilterInputType_Should_BeASchemaType_When_NonGeneric",
        "body": "{| // arrange| var inspector = new DefaultTypeInspector();| // act| var extendedType = inspector.GetType(typeof(NonGenericType));| // assert| Assert.True(extendedType.IsSchemaType);| }"
      },
      {
        "name": "FilterInputType_Should_BeASchemaType_When_Generic",
        "body": "{| // arrange| var inspector = new DefaultTypeInspector();| // act| var extendedType = inspector.GetType(typeof(GenericType));| // assert| Assert.True(extendedType.IsSchemaType);| }"
      },
      {
        "name": "FilterInputType_Should_BeASchemaType_When_List",
        "body": "{| // arrange| var inspector = new DefaultTypeInspector();| // act| var extendedType =| inspector.GetType(typeof(ListFilterInputType<FilterInputType<Foo>>));| // assert| Assert.True(extendedType.IsSchemaType);| var typeArgument = Assert.Single(extendedType.TypeArguments);| Assert.NotNull(typeArgument);| Assert.True(typeArgument!.IsSchemaType);| }"
      }
    ]
  },
  {
    "file": "BooleanOperationInputTests.cs",
    "methods": [
      {
        "name": "Create_OperationType",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ComparableOperationInputTests.cs",
    "methods": [
      {
        "name": "Create_OperationType",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation_Normalized",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "EnumOperationInputTypeTests.cs",
    "methods": [
      {
        "name": "Create_OperationType",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ListFilterInputTests.cs",
    "methods": [
      {
        "name": "Create_OperationType",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "MethodOperationInputTests.cs",
    "methods": [
      {
        "name": "Create_Explicit_Operation",
        "body": "{| // arrange| var convention = new FilterConvention(| x =>| {| x.UseMock();| x.Operation(155).Name(\"SimpleMethod\");| x.Operation(156).Name(\"ComplexMethod\");| });| // act| var schema = SchemaBuilder.New()| .AddQueryType<QueryExplicit>()| .AddConvention<IFilterConvention>(convention)| .AddFiltering()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "{| // arrange| var convention = new FilterConvention(x => x.UseMock().Operation(155).Name(\"Method155\"));| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddConvention<IFilterConvention>(convention)| .AddFiltering()| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ObjectInputTests.cs",
    "methods": [
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "StringOperationInputTests.cs",
    "methods": [
      {
        "name": "Create_OperationType",
        "body": "No body available"
      },
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "QueryableFirstOrDefaultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| rootExecutable {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionExtensionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddProjections()| .BuildRequestExecutorAsync();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ shouldWork { bar baz }}\")| .Build());| // assert| res1.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddProjections()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ typeMismatch { bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddProjections()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ missingMiddleware { bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| id| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| id| foo {| id| barEnum| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| id| foo {| id| barEnum| nestedObject {| foo {| barString| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionHashSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionInterfaceTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities,| OnModelCreating,| configure: x =>| {| ConfigureSchema(x);| var typeExtension =| new ObjectTypeExtension<StubObject<AbstractType>>(| y =>| {| y.Name(\"Query\");| y.Field(z => z.Root).UsePaging<InterfaceType<AbstractType>>();| });| x.AddType(typeExtension);| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barNestedEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nested {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barListEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| list {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(| _barEntities,| OnModelCreating,| configure: ConfigureSchema,| schemaType: typeof(InterfaceType<AbstractType>),| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(| _barEntities,| OnModelCreating,| configure: ConfigureSchema,| schemaType: typeof(InterfaceType<AbstractType>),| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| items {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionNestedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| notSettable {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| notSettableList {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| method {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| methodList {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSortedSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSortingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _barNullableEntities,| OnModelCreatingNullable);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _barNullableEntities,| OnModelCreatingNullable);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionUnionTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities,| OnModelCreating,| configure: x =>| {| ConfigureSchema(x);| var typeExtension =| new ObjectTypeExtension<StubObject<AbstractType>>(| y =>| {| y.Name(\"Query\");| y.Field(z => z.Root).UsePaging<UnionType<AbstractType>>();| });| x.AddType(typeExtension);| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barNestedEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nested {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barListEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| list {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| objectType: new ObjectType<Foo>(| x => x| .Field(\"foo\")| .Resolve(new[] { \"foo\", })| .Type<ListType<StringType>>()));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ baz foo }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorIsProjectedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse isProjectedTrue }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooMultipleEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorPagingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ bar paging { nodes {barBaz }} } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(take:10, skip:1){ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar paging { nodes {barBaz }} } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ b: nodes{ baz } a: edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorScalarTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ notSettable }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ computed }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| objectType: new ObjectType<Foo>(| x => x| .Field(\"foo\")| .Resolve(new[] { \"foo\", })| .Type<ListType<StringType>>()));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz foo }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSingleOrDefaultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| rootExecutable {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "ProjectionConventionExtensionsTests.cs",
    "methods": [
      {
        "name": "Merge_Should_Merge_Provider",
        "body": "{| // arrange| var convention =| new MockProjectionConvention(x => x.Provider<QueryableProjectionProvider>());| var extension = new ProjectionConventionExtension(x => x.Provider<MockProvider>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(typeof(MockProvider), convention.DefinitionAccessor?.Provider);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderInstance",
        "body": "{| // arrange| var providerInstance = new MockProvider();| var convention = new MockProjectionConvention(| x => x.Provider(new QueryableProjectionProvider()));| var extension = new ProjectionConventionExtension(| x => x.Provider(providerInstance));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(providerInstance, convention.DefinitionAccessor?.ProviderInstance);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensionsTypes",
        "body": "{| // arrange| var convention =| new MockProjectionConvention(x => x.AddProviderExtension<MockProviderExtensions>());| var extension =| new ProjectionConventionExtension(| x => x.AddProviderExtension<MockProviderExtensions>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.ProviderExtensionsTypes.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensions",
        "body": "{| // arrange| var provider1 = new MockProviderExtensions();| var convention = new MockProjectionConvention(x => x.AddProviderExtension(provider1));| var provider2 = new MockProviderExtensions();| var extension =| new ProjectionConventionExtension(x => x.AddProviderExtension(provider2));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.ProviderExtensions,| x => Assert.Equal(provider1, x),| x => Assert.Equal(provider2, x));| }"
      }
    ]
  },
  {
    "file": "ProjectionsAttributeTests.cs",
    "methods": [
      {
        "name": "FirstOrDefault_Attribute",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<FirstOrDefaultQuery>()| .AddProjections()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "SingleOrDefault_Attribute",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<SingleOrDefaultQuery>()| .AddProjections()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "FirstOrDefault_Attribute_CustomType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<FirstOrDefaultQuery>()| .AddType<FooType>()| .AddProjections()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      },
      {
        "name": "SingleOrDefault_Attribute_CustomType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<SingleOrDefaultQuery>()| .AddType<FooType>()| .AddProjections()| .Create();| // assert| schema.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SelectionContextTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<string>();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| @\"| type Query {| foo: Foo| }| type Foo {| bar: Bar| }| type Bar {| baz: String| }\")| .UseField(_ => context =>| {| if (list.Count > 0)| {| return ValueTask.CompletedTask;| }| Stack<string> visitedFields = new();| VisitFields(context.GetSelectedField());| void VisitFields(ISelectedField field)| {| visitedFields.Push(field.Field.Name);| list.Add(string.Join(\".\", visitedFields.Reverse()));| foreach (var subField in field.GetFields())| {| VisitFields(subField);| }| visitedFields.Pop();| }| return ValueTask.CompletedTask;| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(@\"| {| foo {| bar {| baz| }| }| }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| string.Join(\"\\n\", list).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<string>();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| @\"| type Query {| foo: Foo| }| type Foo {| bar: Bar| }| type Bar {| baz: String| }\")| .UseField(_ => context =>| {| if (list.Count > 0)| {| return ValueTask.CompletedTask;| }| Stack<string> visitedFields = new();| VisitFields(context.GetSelectedField());| void VisitFields(ISelectedField field)| {| visitedFields.Push(field.Selection.ResponseName);| list.Add(string.Join(\".\", visitedFields.Reverse()));| foreach (var subField in field.GetFields())| {| VisitFields(subField);| }| visitedFields.Pop();| }| return ValueTask.CompletedTask;| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(@\"| {| foo {| bar {| a: baz| b: baz| c: baz| }| }| }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| string.Join(\"\\n\", list).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<string>();| var executor = await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| @\"| type Query {| foo: Qux| }| union Qux = Foo | Bar| type Foo {| bar: Bar| }| type Bar {| baz: String| }\")| .UseField(_ => context =>| {| if (list.Count > 0)| {| return ValueTask.CompletedTask;| }| Stack<string> visitedFields = new();| VisitFields(context.GetSelectedField());| void VisitFields(ISelectedField field)| {| visitedFields.Push(field.Field.Name);| list.Add(string.Join(\".\", visitedFields.Reverse()));| if (field.IsAbstractType)| {| var possibleTypes =| context.Schema.GetPossibleTypes(field.Type.NamedType());| foreach (var type in possibleTypes)| {| foreach (var subField in field.GetFields(type))| {| VisitFields(subField);| }| }| }| else| {| foreach (var subField in field.GetFields())| {| VisitFields(subField);| }| }| visitedFields.Pop();| }| return ValueTask.CompletedTask;| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(@\"| {| foo {| ... on Foo {| bar {| baz| }| }| ... on Bar {| baz| }| }| }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| string.Join(\"\\n\", list).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Exception? ex = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddDocumentFromString(| @\"| type Query {| foo: Qux| }| union Qux = Foo | Bar| type Foo {| bar: Bar| }| type Bar {| baz: String| }\")| .UseField(_ => context =>| {| if (ex is not null)| {| return ValueTask.CompletedTask;| }| try| {| VisitFields(context.GetSelectedField());| void VisitFields(ISelectedField field)| {| foreach (var subField in field.GetFields())| {| VisitFields(subField);| }| }| }| catch (Exception e)| {| ex = e;| }| return ValueTask.CompletedTask;| })| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(@\"| {| foo {| ... on Foo {| bar {| baz| }| }| ... on Bar {| baz| }| }| }\");| // assert| Assert.Null(Assert.IsType<OperationResult>(result).Errors);| Assert.IsType<InvalidOperationException>(ex).Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorInterfacesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema<BarInterface, FilterInputType<BarInterface>>(| _barEntities,| configure: Configure);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"a\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"b\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: null}}}) \" +| \"{ test{ prop}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: DESC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: ASC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"DESC\")| .Add(res2, \"ASC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseSorting())| .AddType(new SortInputType<Foo>(x => x| .Field(x => x.LastName)| .Extend()| .OnBeforeCreate(x => x.Expression = (Foo x, string bar) => x.LastName == bar)))| .AddSorting();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: ASC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: DESC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC, barShort: ASC }}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root(order: [| { foo: { barBool: ASC } },| { foo: { barShort: ASC } }]) {| foo {| barBool| barShort| }| }| }| \")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC, barShort: DESC}}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(order: [| { foo: { barBool: DESC } },| { foo: { barShort: DESC } }]) {| foo {| barBool| barShort| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"ASC\")| .Add(res3, \"DESC\")| .Add(res4, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorVariablesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema<Foo, FooSortType>(_fooEntities);| const string query =| \"query Test($order: SortEnumType){ root(order: { bar: $order}){ bar}}\";| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"order\", \"ASC\" }, })| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"order\", \"DESC\" }, })| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchema<Foo, FooSortType>(_fooEntities);| const string query =| \"query Test($order: SortEnumType!){ root(order: { bar: $order}){ bar}}\";| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"order\", \"ASC\" }, })| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(query)| .SetVariableValues(new Dictionary<string, object?> { { \"order\", \"DESC\" }, })| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer<Foo, FooSortType>(_fooEntities);| const string query =| \"query Test($order: SortEnumType){ root(order: { bar: $order}){ bar}}\";| // act| ClientQueryRequest request1 =| new() { Query = query, Variables = new() { [\"order\"] = \"ASC\", }, };| var res1 = await server.PostAsync(request1);| ClientQueryRequest request2 =| new() { Query = query, Variables = new() { [\"order\"] = \"DESC\", }, };| var res2 = await server.PostAsync(request2);| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateServer<Foo, FooSortType>(_fooEntities);| const string query =| \"query Test($order: SortEnumType!){ root(order: { bar: $order}){ bar}}\";| // act| ClientQueryRequest request1 =| new() { Query = query, Variables = new() { [\"order\"] = \"ASC\", }, };| var res1 = await server.PostAsync(request1);| ClientQueryRequest request2 =| new() { Query = query, Variables = new() { [\"order\"] = \"DESC\", }, };| var res2 = await server.PostAsync(request2);| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: DESC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: ASC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"DESC\")| .Add(res2, \"ASC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseSorting())| .AddType(new SortInputType<Foo>(x => x| .Field(x => x.LastName)| .Extend()| .OnBeforeCreate(x => x.Expression = (Foo x, string bar) => x.LastName == bar)))| .AddSorting();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: ASC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: DESC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC, barShort: ASC }}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root(order: [| { foo: { barBool: ASC } },| { foo: { barShort: ASC } }]) {| foo {| barBool| barShort| }| }| }| \")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC, barShort: DESC}}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(order: [| { foo: { barBool: DESC } },| { foo: { barShort: DESC } }]) {| foo {| barBool| barShort| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"ASC\")| .Add(res3, \"DESC\")| .Add(res4, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "SortingContextParameterExpressionBuilderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| books(order: { title: DESC }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(Query.Context);| }"
      }
    ]
  },
  {
    "file": "SortingContextTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: { title: DESC }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var field = Assert.Single(Assert.Single(context!.GetFields()));| var operation = Assert.IsType<SortingValue>(field.Value).Value;| Assert.Equal(\"title\", field.Field.Name);| Assert.Equal(\"DESC\", operation);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query =| \"\"\"| {| test {| title| }| }| \"\"\";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| Assert.False(context!.IsDefined);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query =| \"\"\"| {| test(order: { title: DESC }) {| title| }| }| \"\"\";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| Assert.True(context!.IsDefined);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: [{ title: DESC }, { pages: DESC }]) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| Assert.Equal(2, context!.GetFields().Count);| var field = Assert.Single(context!.GetFields()[0]);| var operation = Assert.IsType<SortingValue>(field.Value).Value;| Assert.Equal(\"title\", field.Field.Name);| Assert.Equal(\"DESC\", operation);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: { author: { name: DESC }}) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| var field = Assert.Single(Assert.Single(context!.GetFields()));| var name =| Assert.Single(Assert.IsType<SortingInfo>(field.Value).GetFields());| var operation = Assert.IsType<SortingValue>(name.Value).Value;| Assert.Equal(\"author\", field.Field.Name);| Assert.Equal(\"name\", name.Field.Name);| Assert.Equal(\"DESC\", operation);| }"
      },
      {
        "name": "Task",
        "body": "{| IImmutableDictionary<string, object?>? localContextData = null;| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| x.GetSortingContext()?.Handled(false);| localContextData = x.LocalContextData.Add(\"foo\", true);| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: { title: DESC }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(localContextData);| Assert.False(localContextData!.ContainsKey(QueryableSortProvider.SkipSortingKey));| }"
      },
      {
        "name": "Task",
        "body": "{| IImmutableDictionary<string, object?>? localContextData = null;| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| x.GetSortingContext();| localContextData = x.LocalContextData.Add(\"foo\", true);| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: { title: DESC }) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(localContextData);| Assert.True(localContextData!.ContainsKey(QueryableSortProvider.SkipSortingKey));| }"
      },
      {
        "name": "Task",
        "body": "{| var obj = new object();| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .Resolve(x =>| {| obj = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.Null(obj);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: [{ title: DESC }, { author: { name: DESC } }]) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| context!.ToList().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| context!.ToList().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ISortingContext? context = null;| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"test\")| .Type<ListType<ObjectType<Book>>>()| .UseSorting<TestSortType>()| .Resolve(x =>| {| context = x.GetSortingContext();| return Array.Empty<Book>();| }))| .AddSorting()| .BuildRequestExecutorAsync();| // act| const string query = @\"| {| test(order: {title: 1, id: [1,2,3], author: [{name:DESC}]}) {| title| }| }| \";| await executor.ExecuteAsync(query);| // assert| Assert.NotNull(context);| context!.ToList().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SortConventionScopeTests.cs",
    "methods": [
      {
        "name": "SortConvention_Should_Work_When_ConfiguredWithAttributes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<ISortConvention, BarSortConvention>(\"Bar\")| .AddQueryType<Query1>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Work_When_ConfiguredWithType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<ISortConvention, BarSortConvention>(\"Bar\")| .AddQueryType<QueryType>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SortConventionTests.cs",
    "methods": [
      {
        "name": "SortConvention_Should_Work_When_ConfigurationIsComplete",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"ASC\");| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: ASC}\");| var type = new FooSortType();| //act| CreateSchemaWith(type, convention);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new[] { new Foo { Bar = \"a\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"c\", }, };| Assert.Collection(| func(a),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| var b = new[] { new Foo { Bar = \"c\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"a\", }, };| Assert.Collection(| func(b),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_OperationHandlerIsNotRegistered",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"asc\");| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_FieldHandlerIsNotRegistered",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"asc\");| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_OperationsInUknown",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_OperationsIsNotNamed",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Description(\"asc\");| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| error.Message.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_NoProviderWasRegistered",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"asc\");| descriptor.BindRuntimeType<string, TestEnumType>();| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Fail_When_NoMatchingBindingWasFound",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"asc\");| descriptor.Provider(provider);| });| var type = new FooSortType();| //act| var error =| Assert.Throws<SchemaException>(() => CreateSchemaWith(type, convention));| Assert.Single(error.Errors);| error.Errors[0].Message.MatchSnapshot();| }"
      },
      {
        "name": "SortConvention_Should_Work_With_Extensions",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| });| var extension1 = new SortConventionExtension(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"ASC\");| descriptor.Provider(provider);| });| var extension2 = new SortConventionExtension(| descriptor =>| {| descriptor.BindRuntimeType<string, TestEnumType>();| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: ASC}\");| var type = new FooSortType();| //act| CreateSchemaWith(type, convention, extension1, extension2);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new[] { new Foo { Bar = \"a\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"c\", }, };| Assert.Collection(| func(a),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| var b = new[] { new Foo { Bar = \"c\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"a\", }, };| Assert.Collection(| func(b),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| }"
      },
      {
        "name": "SortConvention_Should_Work_With_ExtensionsType",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddOperationHandler<QueryableAscendingSortOperationHandler>();| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: ASC}\");| var type = new FooSortType();| //act| CreateSchemaWithTypes(| type,| convention,| typeof(MockSortExtensionConvention));| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new[] { new Foo { Bar = \"a\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"c\", }, };| Assert.Collection(| func(a),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| var b = new[] { new Foo { Bar = \"c\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"a\", }, };| Assert.Collection(| func(b),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| }"
      },
      {
        "name": "SortConvention_Should_Work_With_ProviderExtensionsType",
        "body": "{| // arrange| var provider = new QueryableSortProvider(| descriptor =>| {| descriptor.AddFieldHandler<QueryableDefaultSortFieldHandler>();| });| var convention = new SortConvention(| descriptor =>| {| descriptor.BindRuntimeType<string, TestEnumType>();| descriptor.Provider(provider);| });| var extension1 = new SortConventionExtension(| descriptor =>| {| descriptor.Operation(DefaultSortOperations.Ascending).Name(\"ASC\");| descriptor.AddProviderExtension<MockSortProviderExtensionConvention>();| });| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"{ bar: ASC}\");| var type = new FooSortType();| //act| CreateSchemaWith(type, convention, extension1);| var executor = new ExecutorBuilder(type);| var func = executor.Build<Foo>(value);| // assert| var a = new[] { new Foo { Bar = \"a\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"c\", }, };| Assert.Collection(| func(a),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| var b = new[] { new Foo { Bar = \"c\", }, new Foo { Bar = \"b\", }, new Foo { Bar = \"a\", }, };| Assert.Collection(| func(b),| x => Assert.Equal(\"a\", x.Bar),| x => Assert.Equal(\"b\", x.Bar),| x => Assert.Equal(\"c\", x.Bar));| }"
      }
    ]
  },
  {
    "file": "ExtensionsTest.cs",
    "methods": [
      {
        "name": "Convention_DefaultScope_Extensions",
        "body": "{| // arrange| // act| var convention = new FilterConvention(| x => x.UseMock()| .Configure<StringOperationFilterInputType>(y => y| .Operation(DefaultFilterOperations.Like)| .Type<StringType>())| .Operation(DefaultFilterOperations.Like)| .Name(\"like\"));| var builder = SchemaBuilder.New()| .AddConvention<IFilterConvention>(convention)| .TryAddTypeInterceptor<FilterTypeInterceptor>()| .AddQueryType(c => c| .Name(\"Query\")| .Field(\"foo\")| .Type<StringType>()| .Resolve(\"bar\")| .Argument(\"test\", x => x.Type<TestFilter>()));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(| c =>| c.Field(x => x.GetFoos()).UseFiltering());| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Generic_RuntimeType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c| .Field(x => x.GetFoos())| .UseFiltering<Bar>());| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Generic_SchemaType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c.Field(x => x.GetFoos()).UseFiltering<BarFilterInput>());| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Type_RuntimeType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c.Field(x => x.GetFoos()).UseFiltering(typeof(Bar)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Type_SchemaType",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(| c =>| c.Field(x => x.GetFoos()).UseFiltering(typeof(BarFilterInput)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "ObjectField_UseFiltering_Descriptor",
        "body": "{| // arrange| // act| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<Query>(c => c| .Field(a => a.GetFoos())| .UseFiltering<Bar>(b => b| .Name(\"foo\").Field(d => d.Foo)));| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableSortingExtensionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddSorting()| .BuildRequestExecutorAsync();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ shouldWork(order: {bar: DESC}) { bar baz }}\")| .Build());| // assert| res1.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddSorting()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ typeMismatch(order: {bar: DESC}) { bar baz }}\")| .Build());| // assert| await SnapshotExtensions.AddResult(| Snapshot| .Create(), res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddSorting()| .CreateExceptionExecutor();| // act| var res1 = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(\"{ missingMiddleware { bar baz }}\")| .Build());| // assert| await SnapshotExtensions.AddResult(| Snapshot| .Create(), res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "SortAttributeTests.cs",
    "methods": [
      {
        "name": "Create_Schema_With_SortType",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query1>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Create_Schema_With_SortType_With_Fluent_API",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query2>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Create_Schema_With_SortType_With_Fluent_API_Ctor_Param",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query3>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Create_Schema_With_SortAttributes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query4>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Create_Schema_With_GenericSortAttributes",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddQueryType<Query5>()| .AddSorting()| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SortConventionExtensionsTests.cs",
    "methods": [
      {
        "name": "Merge_Should_Merge_ArgumentName",
        "body": "{| // arrange| var convention = new MockSortConvention(x => x.ArgumentName(\"Foo\"));| var extension = new SortConventionExtension(x => x.ArgumentName(\"Bar\"));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(\"Bar\", convention.DefinitionAccessor?.ArgumentName);| }"
      },
      {
        "name": "Merge_Should_NotMerge_ArgumentName_When_Default",
        "body": "{| // arrange| var convention = new MockSortConvention(x => x.ArgumentName(\"Foo\"));| var extension = new SortConventionExtension(| x => x.ArgumentName(SortConventionDefinition.DefaultArgumentName));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(\"Foo\", convention.DefinitionAccessor?.ArgumentName);| }"
      },
      {
        "name": "Merge_Should_Merge_Provider",
        "body": "{| // arrange| var convention = new MockSortConvention(x => x.Provider<QueryableSortProvider>());| var extension = new SortConventionExtension(x => x.Provider<MockProvider>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(typeof(MockProvider), convention.DefinitionAccessor?.Provider);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderInstance",
        "body": "{| // arrange| var providerInstance = new MockProvider();| var convention = new MockSortConvention(| x => x.Provider(new QueryableSortProvider()));| var extension = new SortConventionExtension(| x => x.Provider(providerInstance));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(providerInstance, convention.DefinitionAccessor?.ProviderInstance);| }"
      },
      {
        "name": "Merge_Should_Merge_DefaultBinding",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.DefaultBinding<DefaultSortEnumType>());| var extension = new SortConventionExtension(| x => x.DefaultBinding<MockSortEnumType>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.Equal(| typeof(MockSortEnumType),| convention.DefinitionAccessor?.DefaultBinding);| }"
      },
      {
        "name": "Merge_Should_Merge_Operations",
        "body": "{| // arrange| var convention = new MockSortConvention(x => x.Operation(1));| var extension = new SortConventionExtension(x => x.Operation(2));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.Operations,| x => Assert.Equal(1, x.Id),| x => Assert.Equal(2, x.Id));| }"
      },
      {
        "name": "Merge_Should_Merge_Bindings",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.BindRuntimeType<int, DefaultSortEnumType>());| var extension = new SortConventionExtension(| x => x.BindRuntimeType<double, DefaultSortEnumType>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Contains(typeof(int), convention.DefinitionAccessor!.Bindings);| Assert.Contains(typeof(double), convention.DefinitionAccessor!.Bindings);| }"
      },
      {
        "name": "Merge_Should_DeepMerge_Configurations",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.Configure<SortInputType<Foo>>(d => d.Name(\"Foo\")));| var extension = new SortConventionExtension(| x => x.Configure<SortInputType<Foo>>(d => d.Name(\"Bar\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| var configuration =| Assert.Single(convention.DefinitionAccessor!.Configurations.Values)!;| Assert.Equal(2, configuration.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_Configurations",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.Configure<SortInputType<Foo>>(d => d.Name(\"Foo\")));| var extension = new SortConventionExtension(| x => x.Configure<SortInputType<Bar>>(d => d.Name(\"Foo\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.Configurations.Count);| }"
      },
      {
        "name": "Merge_Should_DeepMerge_EnumConfigurations",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.ConfigureEnum<DefaultSortEnumType>(d => d.Name(\"Foo\")));| var extension = new SortConventionExtension(| x => x.ConfigureEnum<DefaultSortEnumType>(d => d.Name(\"Foo\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| var configuration =| Assert.Single(convention.DefinitionAccessor!.EnumConfigurations.Values)!;| Assert.Equal(2, configuration.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_EnumConfigurations",
        "body": "{| // arrange| var convention = new MockSortConvention(| x => x.ConfigureEnum<DefaultSortEnumType>(d => d.Name(\"Foo\")));| var extension = new SortConventionExtension(| x => x.ConfigureEnum<MockSortEnumType>(d => d.Name(\"Foo\")));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.EnumConfigurations.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensionsTypes",
        "body": "{| // arrange| var convention =| new MockSortConvention(x => x.AddProviderExtension<MockProviderExtensions>());| var extension =| new SortConventionExtension(| x => x.AddProviderExtension<MockProviderExtensions>());| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Equal(2, convention.DefinitionAccessor!.ProviderExtensionsTypes.Count);| }"
      },
      {
        "name": "Merge_Should_Merge_ProviderExtensions",
        "body": "{| // arrange| var provider1 = new MockProviderExtensions();| var convention = new MockSortConvention(x => x.AddProviderExtension(provider1));| var provider2 = new MockProviderExtensions();| var extension = new SortConventionExtension(x => x.AddProviderExtension(provider2));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.ProviderExtensions,| x => Assert.Equal(provider1, x),| x => Assert.Equal(provider2, x));| }"
      }
    ]
  },
  {
    "file": "SortInputTypeTests.cs",
    "methods": [
      {
        "name": "SortInputType_DynamicName",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new SortInputType<Foo>(| d => d| .Name(dep => dep.Name + \"Foo\")| .DependsOn<StringType>()| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_DynamicName_NonGeneric",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new SortInputType<Foo>(| d => d.Name(dep => dep.Name + \"Foo\")| .DependsOn(typeof(StringType))| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDirectives_NameArgs",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new SortInputType<Foo>(| d => d.Directive(\"foo\")| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDirectives_NameArgs2",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s| .AddDirectiveType<FooDirectiveType>()| .AddType(new SortInputType<Foo>(d => d.Directive(\"foo\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDirectives_DirectiveNode",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new SortInputType<Foo>(| d => d.Directive(new DirectiveNode(\"foo\")).Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDirectives_DirectiveClassInstance",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new SortInputType<Foo>(| d => d| .Directive(new FooDirective())| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDirectives_DirectiveType",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddDirectiveType<FooDirectiveType>()| .AddType(| new SortInputType<Foo>(| d => d| .Directive<FooDirective>()| .Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddDescription",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new SortInputType<Foo>(| d => d.Description(\"Test\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInput_AddName",
        "body": "{| // arrange| // act| var schema = CreateSchema(| s => s.AddType(| new SortInputType<Foo>(| d => d.Name(\"Test\").Field(x => x.Bar))));| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_Should_ThrowException_WhenNoConventionIsRegistered",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<Foo>())| .UseSorting(\"Foo\"));| // act| // assert| var exception = Assert.Throws<SchemaException>(() => builder.Create());| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_Should_ThrowException_WhenNoConventionIsRegisteredDefault",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddQueryType(| c =>| c.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<Foo>())| .UseSorting());| // act| // assert| var exception = Assert.Throws<SchemaException>(() => builder.Create());| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_Should_UseCustomSortType_When_Nested",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddSorting()| .AddQueryType<UserQueryType>();| // act| // assert| builder.Create().Print().MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_Should_IgnoreFieldWithoutCallingConvention",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddSorting(| x => x.AddDefaultOperations()| .BindRuntimeType<int, DefaultSortEnumType>()| //should fail when not ignore properly because string is no explicitly bound| .Provider(new QueryableSortProvider(y => y.AddDefaultFieldHandlers())))| .AddQueryType(| new ObjectType(| x => x.Name(\"Query\")| .Field(\"foo\")| .Resolve(new List<IgnoreTest>())| .UseSorting<IgnoreTestSortInputType>()));| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "SortInputType_Should_InfereType_When_ItIsAInterface",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddFiltering()| .AddQueryType<TestingType<ITest<Foo>>>()| .AddObjectType<ITest<Foo>>();| // act| var schema = builder.Create();| // assert| schema.MatchSnapshot();| schema.Print().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SortProviderExtensionsTests.cs",
    "methods": [
      {
        "name": "Merge_Should_Merge_OperationHandlersAndPrependExtensionHandlers",
        "body": "{| // arrange| var firstFieldHandler = new QueryableAscendingSortOperationHandler();| var extensionFieldHandler = new QueryableDescendingSortOperationHandler();| var convention = new MockProvider(x => x.AddOperationHandler(firstFieldHandler));| var extension = new MockProviderExtensions(| x => x.AddOperationHandler(extensionFieldHandler));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.OperationHandlers,| x => Assert.Equal(extensionFieldHandler, x.HandlerInstance),| x => Assert.Equal(firstFieldHandler, x.HandlerInstance));| }"
      },
      {
        "name": "Merge_Should_Merge_HandlersAndPrependExtensionHandlers",
        "body": "{| // arrange| var firstFieldHandler = new QueryableDefaultSortFieldHandler();| var extensionFieldHandler = new MockFieldHandler();| var convention = new MockProvider(x => x.AddFieldHandler(firstFieldHandler));| var extension = new MockProviderExtensions(| x => x.AddFieldHandler(extensionFieldHandler));| var context = new ConventionContext(| \"Scope\",| new ServiceCollection().BuildServiceProvider(),| DescriptorContext.Create());| convention.Initialize(context);| extension.Initialize(context);| // act| extension.Merge(context, convention);| // assert| Assert.NotNull(convention.DefinitionAccessor);| Assert.Collection(| convention.DefinitionAccessor!.Handlers,| x => Assert.Equal(extensionFieldHandler, x.HandlerInstance),| x => Assert.Equal(firstFieldHandler, x.HandlerInstance));| }"
      }
    ]
  },
  {
    "file": "SortTypeAttributeTests.cs",
    "methods": [
      {
        "name": "GenericTypeDescriptorAttribute_Changes_Name",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddSorting()| .AddType<SortInputType<FooGeneric>>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.Equal(| TypeName,| schema.GetType<SortInputType<FooGeneric>>(TypeName).TypeName());| }"
      },
      {
        "name": "SortFieldAttribute_Changes_Name",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddSorting()| .AddType<SortInputType<FooFields>>()| .ModifyOptions(o => o.StrictValidation = false)| .Create();| // assert| Assert.NotNull(| schema.GetType<SortInputType<FooFields>>(\"FooFieldsSortInput\")| .Fields| .FirstOrDefault(x => x.Name == SortFieldAttributeTest.Field));| }"
      }
    ]
  },
  {
    "file": "ObjectInputTests.cs",
    "methods": [
      {
        "name": "Create_Implicit_Operation",
        "body": "No body available"
      },
      {
        "name": "Create_Explicit_Operation",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ExecutableTests.cs",
    "methods": [
      {
        "name": "Extensions_Should_ReturnExecutable_When_DBSet",
        "body": "{| // arrange| // act| IExecutable<Author> executable = _authors.AsExecutable();| // assert| Assert.True(executable is IQueryableExecutable<Author>);| executable.MatchSnapshot();| }"
      },
      {
        "name": "Extensions_Should_ReturnExecutable_When_Queryable",
        "body": "{| // arrange| // act| IExecutable<Author> executable = _authors| .AsQueryable()| .AsExecutable();| // assert| Assert.True(executable is IQueryableExecutable<Author>);| executable.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IExecutable<Author> executable = _authors| .AsExecutable();| // act| object result = await executable.ToListAsync(default);| // assert| new { result, executable = executable.Print(), }.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IExecutable executable = _authors.Take(1).AsExecutable();| // act| var result = await executable.SingleOrDefaultAsync(default);| // assert| new { result, executable = executable.Print(), }| .MatchSnapshot(postFix: TestEnvironment.TargetFramework);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| IExecutable executable = _authors.AsExecutable();| // act| var result = await executable.FirstOrDefaultAsync(default);| // assert| new { result, executable = executable.Print(), }.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "TypeValidationTests.cs",
    "methods": [
      {
        "name": "EnsurePagingIsFirst",
        "body": "{| void Action() =>| SchemaBuilder.New()| .AddQueryType<InvalidMiddlewarePipeline1>()| .AddProjections()| .AddFiltering()| .AddSorting()| .Create();| var exception = Assert.Throws<SchemaException>(Action);| Assert.Collection(| exception.Errors,| error => Assert.Equal(\"HC0050\", error.Code));| exception.MatchSnapshot();| }"
      },
      {
        "name": "EnsureProjectionComesAfterDbContext",
        "body": "{| void Action() =>| SchemaBuilder.New()| .AddQueryType<InvalidMiddlewarePipeline2>()| .AddProjections()| .AddFiltering()| .AddSorting()| .Create();| var exception = Assert.Throws<SchemaException>(Action);| Assert.Collection(| exception.Errors,| error => Assert.Equal(\"HC0050\", error.Code));| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "UseOrderProperty",
        "body": "{| void Action() =>| SchemaBuilder.New()| .AddQueryType<InvalidMiddlewarePipeline3>()| .AddProjections()| .AddFiltering()| .AddSorting()| .Create();| var exception = Assert.Throws<SchemaException>(Action);| Assert.Collection(| exception.Errors,| error => Assert.Equal(\"HC0050\", error.Code));| exception.Message.MatchSnapshot();| }"
      },
      {
        "name": "EnsureCorrectlyOrderedMiddlewarePassValidation",
        "body": "{| SchemaBuilder.New()| .AddQueryType<CorrectMiddlewarePipeline>()| .AddProjections()| .AddFiltering()| .AddSorting()| .Create()| .ToString()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryInstrumentationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation()| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation()| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ dataLoader(key: \\\"abc\\\") }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o => o.IncludeDataLoaderKeys = true)| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ dataLoader(key: \\\"abc\\\") }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ sayHello }\");| // assert| Assert.Equal(\"CaptureActivities: query { sayHello }\", Activity.Current!.DisplayName);| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ sayHello\");| // assert| Assert.Equal(\"CaptureActivities: Begin Parse Document\", Activity.Current!.DisplayName);| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ abc123 }\");| // assert| Assert.Equal(\"CaptureActivities: Begin Validate Document\",| Activity.Current!.DisplayName);| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ a: sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"query GetA { a: sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ a: sayHello b: sayHello c: sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.RenameRootActivity = true;| o.Scopes = ActivityScopes.All;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ a: sayHello b: sayHello c: sayHello d: sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o => o.Scopes = ActivityScopes.All)| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"{ sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o => o.Scopes = ActivityScopes.All)| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"query SayHelloOperation { sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.Scopes = ActivityScopes.All;| o.IncludeDocument = true;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"query SayHelloOperation { sayHello }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.Scopes = ActivityScopes.All;| o.IncludeDocument = true;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"query SayHelloOperation { sayHello_ }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.Scopes = ActivityScopes.All;| o.IncludeDocument = true;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(\"query SayHelloOperation { causeFatalError }\");| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange & act| await new ServiceCollection()| .AddGraphQL()| .AddInstrumentation(o =>| {| o.Scopes = ActivityScopes.All;| o.IncludeDocument = true;| })| .AddQueryType<SimpleQuery>()| .ExecuteRequestAsync(| \"\"\"| query SayHelloOperation {| deep {| deeper {| deeps {| deeper {| causeFatalError| }| }| }| }| }| \"\"\");| // assert| activities.MatchSnapshot();| }| }"
      }
    ]
  },
  {
    "file": "ServerInstrumentationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer();| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o => o.Scopes = ActivityScopes.All);| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o => o.Scopes = ActivityScopes.All);| // act| await server.GetAsync(new ClientQueryRequest| {| Query = @\"| {| hero {| name| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o => o.Scopes = ActivityScopes.All);| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o =>| {| o.Scopes = ActivityScopes.All;| o.RequestDetails = RequestDetails.Default | RequestDetails.Variables;| });| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o =>| {| o.Scopes = ActivityScopes.All;| o.RequestDetails = RequestDetails.Default | RequestDetails.Variables;| });| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o => o.Scopes = ActivityScopes.All);| // act| await server.PostAsync(new ClientQueryRequest| {| Query = @\"| query ($episode: Episode!) {| hero(episode: $episode) {| name| }| }\",| Variables = new Dictionary<string, object?> { { \"episode\", \"NEW_HOPE\" }, },| Extensions = new Dictionary<string, object?> { { \"test\", \"abc\" }, },| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(o => o.Scopes = ActivityScopes.All);| var url = TestServerExtensions.CreateUrl(\"/graphql?sdl\");| var request = new HttpRequestMessage(HttpMethod.Get, url);| // act| var response = await server.CreateClient().SendAsync(request);| // assert| await response.Content.ReadAsStringAsync();| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(o => o.Scopes = ActivityScopes.All);| // act| await server.PostRawAsync(new ClientQueryRequest| {| Query = @\"| {| hero(episode: NEW_HOPE)| {| name| ... on Droid @defer(label: \"\"my_id\"\")| {| id| }| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(o => o.Scopes = ActivityScopes.All);| // act| await server.PostRawAsync(new ClientQueryRequest| {| Query = @\"| {| hero(episode: NEW_HOPE)| {| name| friends {| nodes {| name| friends {| nodes {| name| }| }| }| }| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(o => o.Scopes = ActivityScopes.All);| // act| await server.PostRawAsync(new ClientQueryRequest| {| Query = @\"| {| hero(episode: NEW_HOPE)| {| name| friends {| nodes {| name| friends {| 1nodes {| name| }| }| }| }| }| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o =>| {| o.Scopes = ActivityScopes.All;| o.RenameRootActivity = true;| });| // act| await server.PostRawAsync(new ClientQueryRequest| {| Query = @\"| {| 1| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      },
      {
        "name": "Task",
        "body": "{| using (CaptureActivities(out var activities))| {| // arrange| using var server = CreateInstrumentedServer(| o =>| {| o.Scopes = ActivityScopes.All;| o.RenameRootActivity = true;| });| // act| await server.PostRawAsync(new ClientQueryRequest| {| Query = @\"| {| abc| }\",| });| // assert| activities.MatchSnapshot();| }| }"
      }
    ]
  },
  {
    "file": "OperationPlannerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var compositeSchemaDoc = Utf8GraphQLParser.Parse(FileResource.Open(\"fusion1.graphql\"));| var compositeSchema = CompositeSchemaBuilder.Create(compositeSchemaDoc);| var doc = Utf8GraphQLParser.Parse(| \"\"\"| {| productById(id: 1) {| ... Product| }| }| fragment Product on Product {| id| name| }| \"\"\");| var rewriter = new InlineFragmentOperationRewriter(compositeSchema);| var rewritten = rewriter.RewriteDocument(doc, null);| // act| var planner = new OperationPlanner(compositeSchema);| var plan = planner.CreatePlan(rewritten, null);| // assert| await Assert| .That(plan.ToSyntaxNode().ToString(indented: true))| .IsEqualTo(| \"\"\"| {| productById {| id| name| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| var compositeSchemaDoc = Utf8GraphQLParser.Parse(FileResource.Open(\"fusion1.graphql\"));| var compositeSchema = CompositeSchemaBuilder.Create(compositeSchemaDoc);| var doc = Utf8GraphQLParser.Parse(| \"\"\"| {| productById(id: 1) {| ... Product| }| }| fragment Product on Product {| id| name| estimatedDelivery(postCode: \"12345\")| }| \"\"\");| var rewriter = new InlineFragmentOperationRewriter(compositeSchema);| var rewritten = rewriter.RewriteDocument(doc, null);| // act| var planner = new OperationPlanner(compositeSchema);| var plan = planner.CreatePlan(rewritten, null);| // assert| await Assert| .That(plan.ToSyntaxNode().ToString(indented: true))| .IsEqualTo(| \"\"\"| {| productById {| id| name| }| }| {| productById {| estimatedDelivery| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "FusionTypeNamesTests.cs",
    "methods": [
      {
        "name": "Create_DefaultPrefix_ReturnsDefaultNames",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create();| // act/assert| Assert.Null(fusionTypeNames.Prefix);| Assert.Equal(\"variable\", fusionTypeNames.VariableDirective);| Assert.Equal(\"resolver\", fusionTypeNames.ResolverDirective);| Assert.Equal(\"source\", fusionTypeNames.SourceDirective);| Assert.Equal(\"is\", fusionTypeNames.IsDirective);| Assert.Equal(\"transport\", fusionTypeNames.TransportDirective);| Assert.Equal(\"fusion\", fusionTypeNames.FusionDirective);| Assert.Equal(\"_Selection\", fusionTypeNames.SelectionScalar);| Assert.Equal(\"_SelectionSet\", fusionTypeNames.SelectionSetScalar);| Assert.Equal(\"_TypeName\", fusionTypeNames.TypeNameScalar);| Assert.Equal(\"_Type\", fusionTypeNames.TypeScalar);| Assert.Equal(\"_Uri\", fusionTypeNames.UriScalar);| }"
      },
      {
        "name": "Create_CustomPrefix_ReturnsCustomNames",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"MyPrefix\", prefixSelf: true);| // act/assert| Assert.Equal(\"MyPrefix\", fusionTypeNames.Prefix);| Assert.Equal(\"MyPrefix_variable\", fusionTypeNames.VariableDirective);| Assert.Equal(\"MyPrefix_resolver\", fusionTypeNames.ResolverDirective);| Assert.Equal(\"MyPrefix_source\", fusionTypeNames.SourceDirective);| Assert.Equal(\"MyPrefix_is\", fusionTypeNames.IsDirective);| Assert.Equal(\"MyPrefix_transport\", fusionTypeNames.TransportDirective);| Assert.Equal(\"MyPrefix_fusion\", fusionTypeNames.FusionDirective);| Assert.Equal(\"MyPrefix_Selection\", fusionTypeNames.SelectionScalar);| Assert.Equal(\"MyPrefix_SelectionSet\", fusionTypeNames.SelectionSetScalar);| Assert.Equal(\"MyPrefix_TypeName\", fusionTypeNames.TypeNameScalar);| Assert.Equal(\"MyPrefix_Type\", fusionTypeNames.TypeScalar);| Assert.Equal(\"MyPrefix_Uri\", fusionTypeNames.UriScalar);| }"
      },
      {
        "name": "From_SchemaWithFusionDirective_ReturnsCustomNames",
        "body": "{| // arrange| var schema = \"schema @fusion(prefix: \\\"MyPrefix\\\") {}\";| var document = Utf8GraphQLParser.Parse(schema);| var fusionTypeNames = FusionTypeNames.From(document);| // act/assert| Assert.Equal(\"MyPrefix\", fusionTypeNames.Prefix);| Assert.Equal(\"MyPrefix_variable\", fusionTypeNames.VariableDirective);| Assert.Equal(\"MyPrefix_resolver\", fusionTypeNames.ResolverDirective);| Assert.Equal(\"MyPrefix_source\", fusionTypeNames.SourceDirective);| Assert.Equal(\"MyPrefix_is\", fusionTypeNames.IsDirective);| Assert.Equal(\"MyPrefix_transport\", fusionTypeNames.TransportDirective);| Assert.Equal(\"fusion\", fusionTypeNames.FusionDirective);| Assert.Equal(\"MyPrefix_Selection\", fusionTypeNames.SelectionScalar);| Assert.Equal(\"MyPrefix_SelectionSet\", fusionTypeNames.SelectionSetScalar);| Assert.Equal(\"MyPrefix_TypeName\", fusionTypeNames.TypeNameScalar);| Assert.Equal(\"MyPrefix_Type\", fusionTypeNames.TypeScalar);| Assert.Equal(\"MyPrefix_Uri\", fusionTypeNames.UriScalar);| }"
      },
      {
        "name": "From_SchemaWithPrefixedFusionDirective_ReturnsCustomNames",
        "body": "{| // arrange| var schema = \"schema @MyOtherPrefix_fusion(prefixSelf: true, prefix: \\\"MyOtherPrefix\\\") {}\";| var document = Utf8GraphQLParser.Parse(schema);| var fusionTypeNames = FusionTypeNames.From(document);| // act/assert| Assert.Equal(\"MyOtherPrefix\", fusionTypeNames.Prefix);| Assert.Equal(\"MyOtherPrefix_variable\", fusionTypeNames.VariableDirective);| Assert.Equal(\"MyOtherPrefix_resolver\", fusionTypeNames.ResolverDirective);| Assert.Equal(\"MyOtherPrefix_source\", fusionTypeNames.SourceDirective);| Assert.Equal(\"MyOtherPrefix_is\", fusionTypeNames.IsDirective);| Assert.Equal(\"MyOtherPrefix_transport\", fusionTypeNames.TransportDirective);| Assert.Equal(\"MyOtherPrefix_fusion\", fusionTypeNames.FusionDirective);| Assert.Equal(\"MyOtherPrefix_Selection\", fusionTypeNames.SelectionScalar);| Assert.Equal(\"MyOtherPrefix_SelectionSet\", fusionTypeNames.SelectionSetScalar);| Assert.Equal(\"MyOtherPrefix_TypeName\", fusionTypeNames.TypeNameScalar);| Assert.Equal(\"MyOtherPrefix_Type\", fusionTypeNames.TypeScalar);| Assert.Equal(\"MyOtherPrefix_Uri\", fusionTypeNames.UriScalar);| }"
      },
      {
        "name": "IsFusionType_ValidFusionType_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create();| var typeName = \"_Selection\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.True(isFusionType);| }"
      },
      {
        "name": "IsFusionType_InvalidFusionType_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create();| var typeName = \"InvalidType\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.False(isFusionType);| }"
      },
      {
        "name": "IsFusionType_ValidFusionTypeWithPrefix_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\");| var typeName = \"prefix_Selection\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.True(isFusionType);| }"
      },
      {
        "name": "IsFusionType_ValidFusionTypeWithPrefixSelf_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\", prefixSelf: true);| var typeName = \"prefix_type\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.True(isFusionType);| }"
      },
      {
        "name": "IsFusionType_InvalidFusionTypeWithPrefix_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\");| var typeName = \"invalid_type\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.False(isFusionType);| }"
      },
      {
        "name": "IsFusionType_InvalidFusionTypeWithPrefixSelf_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\", prefixSelf: true);| var typeName = \"invalid_type\";| // act| var isFusionType = fusionTypeNames.IsFusionType(typeName);| // assert| Assert.False(isFusionType);| }"
      },
      {
        "name": "IsFusionDirective_ValidFusionDirective_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create();| var directiveName = \"variable\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.True(isFusionDirective);| }"
      },
      {
        "name": "IsFusionDirective_InvalidFusionDirective_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create();| var directiveName = \"InvalidDirective\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.False(isFusionDirective);| }"
      },
      {
        "name": "IsFusionDirective_ValidFusionDirectiveWithPrefix_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\");| var directiveName = \"prefix_variable\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.True(isFusionDirective);| }"
      },
      {
        "name": "IsFusionDirective_ValidFusionDirectiveWithPrefixSelf_ReturnsTrue",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\", prefixSelf: true);| var directiveName = \"prefix_fusion\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.True(isFusionDirective);| }"
      },
      {
        "name": "IsFusionDirective_InvalidFusionDirectiveWithPrefix_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\");| var directiveName = \"invalid_directive\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.False(isFusionDirective);| }"
      },
      {
        "name": "IsFusionDirective_InvalidFusionDirectiveWithPrefixSelf_ReturnsFalse",
        "body": "{| // arrange| var fusionTypeNames = FusionTypeNames.Create(\"prefix\", prefixSelf: true);| var directiveName = \"invalid_directive\";| // act| var isFusionDirective = fusionTypeNames.IsFusionDirective(directiveName);| // assert| Assert.False(isFusionDirective);| }"
      }
    ]
  },
  {
    "file": "ComposeCommandTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var subgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| subgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphPackageFile,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| var fusionGraph = await package.GetFusionGraphAsync();| var schema = await package.GetSchemaAsync();| var subgraphs = await package.GetSubgraphConfigurationsAsync();| var snapshot = new Snapshot();| snapshot.Add(schema, \"Schema Document\");| snapshot.Add(fusionGraph, \"Fusion Graph Document\");| foreach (var subgraph in subgraphs)| {| snapshot.Add(subgraph, $\"{subgraph.Name} Subgraph Configuration\");| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var accountSubgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| accountSubgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var reviewConfig = demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl);| var review = CreateFiles(reviewConfig);| var reviewSubgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| reviewSubgraphPackageFile,| new SubgraphFiles(| review.SchemaFile,| review.TransportConfigFile,| review.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", accountSubgraphPackageFile,]);| // act| app = App.CreateBuilder().Build();| await app.InvokeAsync(| [\"compose\", \"-p\", packageFile, \"-s\", reviewSubgraphPackageFile,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| var fusionGraph = await package.GetFusionGraphAsync();| var schema = await package.GetSchemaAsync();| var subgraphs = await package.GetSubgraphConfigurationsAsync();| var snapshot = new Snapshot();| snapshot.Add(schema, \"Schema Document\");| snapshot.Add(fusionGraph, \"Fusion Graph Document\");| foreach (var subgraph in subgraphs)| {| snapshot.Add(subgraph, $\"{subgraph.Name} Subgraph Configuration\");| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var subgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| subgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphPackageFile,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| using var settings = await package.GetFusionGraphSettingsAsync();| settings.RootElement.ToString().MatchSnapshot(extension: \".json\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var subgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| subgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphPackageFile, \"--enable-nodes\",]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| using var settings = await package.GetFusionGraphSettingsAsync();| settings.RootElement.ToString().MatchSnapshot(extension: \".json\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var subgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| subgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| var settingsFile = Path.Combine(| Path.GetDirectoryName(packageFile)!,| $\"{Path.GetFileNameWithoutExtension(packageFile)}-settings.json\");| await File.WriteAllTextAsync(| settingsFile,| \"\"\"| {| \"fusionTypePrefix\": null,| \"fusionTypeSelf\": false,| \"nodeField\": { \"enabled\": true },| \"tagDirective\": {| \"enabled\": true,| \"makePublic\": true,| \"exclude\": [\"internal\"]| }| }| \"\"\");| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphPackageFile,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| using var settings = await package.GetFusionGraphSettingsAsync();| settings.RootElement.ToString().MatchSnapshot(extension: \".json\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var subgraphDir = CreateTempDir();| Directory.CreateDirectory(subgraphDir);| var schemaFile = Path.Combine(subgraphDir, \"schema.graphql\");| var configFile = Path.Combine(subgraphDir, \"subgraph-config.json\");| await File.WriteAllTextAsync(schemaFile, FileResource.Open(\"test1.graphql\"), Encoding.UTF8);| await File.WriteAllTextAsync(configFile, FileResource.Open(\"test1.subgraph-config.json\"), Encoding.UTF8);| var packageFile = CreateTempFile(Extensions.FusionPackage);| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphDir,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| var fusionGraph = await package.GetFusionGraphAsync();| var schema = await package.GetSchemaAsync();| var subgraphs = await package.GetSubgraphConfigurationsAsync();| var snapshot = new Snapshot();| snapshot.Add(schema, \"Schema Document\");| snapshot.Add(fusionGraph, \"Fusion Graph Document\");| foreach (var subgraph in subgraphs)| {| snapshot.Add(subgraph, $\"{subgraph.Name} Subgraph Configuration\");| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var accountSubgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| accountSubgraphPackageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| var reviewConfig = demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl);| var review = CreateFiles(reviewConfig);| var reviewSubgraphPackageFile = CreateTempFile();| await PackageHelper.CreateSubgraphPackageAsync(| reviewSubgraphPackageFile,| new SubgraphFiles(| review.SchemaFile,| review.TransportConfigFile,| review.ExtensionFiles));| var packageFile = CreateTempFile(Extensions.FusionPackage);| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", accountSubgraphPackageFile,]);| app = App.CreateBuilder().Build();| await app.InvokeAsync(| [\"compose\", \"-p\", packageFile, \"-s\", reviewSubgraphPackageFile,]);| // act| app = App.CreateBuilder().Build();| await app.InvokeAsync(| [\"compose\", \"-p\", packageFile, \"-r\", \"Reviews2\",]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| var fusionGraph = await package.GetFusionGraphAsync();| var schema = await package.GetSchemaAsync();| var subgraphs = await package.GetSubgraphConfigurationsAsync();| var snapshot = new Snapshot();| snapshot.Add(schema, \"Schema Document\");| snapshot.Add(fusionGraph, \"Fusion Graph Document\");| foreach (var subgraph in subgraphs)| {| snapshot.Add(subgraph, $\"{subgraph.Name} Subgraph Configuration\");| }| await snapshot.MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var subgraphDir = CreateTempDir();| Directory.CreateDirectory(subgraphDir);| var schemaFile = Path.Combine(subgraphDir, \"schema.graphql\");| var configFile = Path.Combine(subgraphDir, \"subgraph-config.json\");| await File.WriteAllTextAsync(schemaFile, FileResource.Open(\"test2.graphql\"), Encoding.UTF8);| await File.WriteAllTextAsync(configFile, FileResource.Open(\"test2.subgraph-config.json\"), Encoding.UTF8);| var packageFile = CreateTempFile(Extensions.FusionPackage);| var gatewayConfig = Path.Combine(| Path.GetDirectoryName(packageFile)!,| Path.GetFileNameWithoutExtension(packageFile) + \"-settings.json\");| File.Delete(packageFile);| await File.WriteAllTextAsync(gatewayConfig, FileResource.Open(\"test2.gateway-config.json\"), Encoding.UTF8);| // act| var app = App.CreateBuilder().Build();| await app.InvokeAsync([\"compose\", \"-p\", packageFile, \"-s\", subgraphDir,]);| // assert| Assert.True(File.Exists(packageFile));| await using var package = FusionGraphPackage.Open(packageFile, FileAccess.Read);| var fusionGraph = await package.GetFusionGraphAsync();| var schema = await package.GetSchemaAsync();| var subgraphs = await package.GetSubgraphConfigurationsAsync();| var snapshot = new Snapshot();| snapshot.Add(schema, \"Schema Document\");| snapshot.Add(fusionGraph, \"Fusion Graph Document\");| foreach (var subgraph in subgraphs)| {| snapshot.Add(subgraph, $\"{subgraph.Name} Subgraph Configuration\");| }| await snapshot.MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "PackageHelperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl);| var account = CreateFiles(accountConfig);| var packageFile = CreateTempFile();| // act| await CreateSubgraphPackageAsync(| packageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| // assert| Assert.True(File.Exists(packageFile));| var accountConfigRead = await ReadSubgraphPackageAsync(packageFile);| Match(accountConfig);| Match(accountConfigRead);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var extensions = JsonDocument.Parse(\"{ \\\"foo\\\": \\\"bar\\\" }\").RootElement;| var accountConfig = demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, extensions);| var account = CreateFiles(accountConfig);| var packageFile = CreateTempFile();| // act| await CreateSubgraphPackageAsync(| packageFile,| new SubgraphFiles(| account.SchemaFile,| account.TransportConfigFile,| account.ExtensionFiles));| // assert| Assert.True(File.Exists(packageFile));| var accountConfigRead = await ReadSubgraphPackageAsync(packageFile);| Match(accountConfig);| Match(accountConfigRead);| }"
      }
    ]
  },
  {
    "file": "DataTypesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var configA = new SubgraphConfiguration(| \"A\",| \"\"\"| schema {| query: Query| }| type Query {| someData: SomeData| }| type SomeData {| other: OtherData| }| type OtherData {| a: String| }| \"\"\",| Array.Empty<string>(),| new[] { new HttpClientConfiguration(new Uri(\"https://localhost:5001/graphql\")), },| null);| var configB = new SubgraphConfiguration(| \"B\",| \"\"\"| schema {| query: Query| }| type Query {| someData: SomeData| }| type SomeData {| other: OtherData| }| type OtherData {| b: String| }| \"\"\",| Array.Empty<string>(),| new[] { new HttpClientConfiguration(new Uri(\"https://localhost:5002/graphql\")), },| null);| // act| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(new[] { configA, configB, });| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "DemoIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ],| new FusionFeatureCollection(FusionFeatures.NodeField));| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ],| new FusionFeatureCollection(FusionFeatures.NodeField));| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(),| demoProject.Products.ToConfiguration()| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(),| demoProject.Products.ToConfiguration(),| demoProject.Shipping2.ToConfiguration()| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| new SubgraphConfiguration(| \"Schema1\",| \"\"\"| schema {| query: Query| }| type Query {| user(id: Int! @is(field: \"id\")): User @lookup| }| type User {| id: Int!| name: String!| email: String!| password: String!| }| \"\"\",| Array.Empty<string>(),| [| new HttpClientConfiguration(| new Uri(\"http://localhost:5000/graphql\"),| \"Schema1\")| ],| default)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| new SubgraphConfiguration(| \"Schema1\",| \"\"\"| schema {| query: Query| }| type Query {| user(id: Int!): User @lookup| }| type User {| id: Int!| name: String!| email: String!| password: String!| }| \"\"\",| Array.Empty<string>(),| [| new HttpClientConfiguration(| new Uri(\"http://localhost:5000/graphql\"),| \"Schema1\")| ],| default)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "DeprecationMergeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "DescriptionMergeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "DirectiveTests.cs",
    "methods": [
      {
        "name": "Directive_AsSyntaxNode",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var directiveNode = directive.AsSyntaxNode();| // assert| Assert.Equal(directiveType.Name, directiveNode.Name.Value);| Assert.Collection(| directiveNode.Arguments,| t =>| {| Assert.Equal(\"bar\", t.Name.Value);| Assert.Equal(\"123\", ((StringValueNode)t.Value).Value);| },| t =>| {| Assert.Equal(\"child\", t.Name.Value);| Assert.Collection(| ((ObjectValueNode)t.Value).Fields,| x =>| {| Assert.Equal(\"bar\", x.Name.Value);| Assert.Equal(| \"456\",| ((StringValueNode)x.Value).Value);| });| });| }"
      },
      {
        "name": "Directive_AsValue_FooDirective",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var syntaxNode = directiveType.Format(fooDirective);| var value = directiveType.Parse(syntaxNode);| var directive = new Directive(directiveType, syntaxNode, value);| var runtimeValue = directive.AsValue<FooDirective>();| // assert| Assert.Equal(\"123\", runtimeValue.Bar);| Assert.Equal(\"456\", runtimeValue.Child.Bar);| }"
      },
      {
        "name": "Directive_AsValue_Object",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var syntaxNode = directiveType.Format(fooDirective);| var value = directiveType.Parse(syntaxNode);| var directive = new Directive(directiveType, syntaxNode, value);| // assert| var runtimeValue = Assert.IsType<FooDirective>(directive.AsValue<object>());| Assert.Equal(\"123\", runtimeValue.Bar);| Assert.Equal(\"456\", runtimeValue.Child.Bar);| }"
      },
      {
        "name": "Directive_AsValue_Same",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var runtimeValue = directive.AsValue<FooDirective>();| // assert| Assert.Same(fooDirective, runtimeValue);| }"
      },
      {
        "name": "Directive_GetArgumentValue",
        "body": "{| // arrange| var schema = CreateSchema();| var directiveType = schema.GetDirectiveType(\"Foo\");| var fooDirective = new FooDirective { Bar = \"123\", Child = new FooChild { Bar = \"456\", }, };| // act| var directive = new Directive(| directiveType,| directiveType.Format(fooDirective),| fooDirective);| var barValue = directive.GetArgumentValue<string>(\"bar\");| // assert| Assert.Equal(\"123\", barValue);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = await new ServiceCollection()| .AddGraphQL()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"foo\")| .Resolve(\"Bar\"))| .AddType<FooQueryDirectiveType>()| .BuildSchemaAsync();| // act| var printedSchema = schema.Print();| // assert| printedSchema.MatchSnapshot();| }"
      },
      {
        "name": "Directive_With_Explicit_Arguments",
        "body": "{| SchemaBuilder.New()| .AddDirectiveType<FooDirectiveTypeExplicit>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"abc\")| .Resolve(\"def\")| .Directive(new FooDirective()))| .Create()| .Print()| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EnumMergeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ErrorTests.cs",
    "methods": [
      {
        "name": "WithCode",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithCode(\"foo\");| // assert| Assert.Equal(\"foo\", error.Code);| }"
      },
      {
        "name": "RemoveCode",
        "body": "{| // arrange| IError error = new Error(\"123\", code: \"foo\");| // act| error = error.RemoveCode();| // assert| Assert.Null(error.Code);| }"
      },
      {
        "name": "WithException",
        "body": "{| // arrange| IError error = new Error| (| \"123\"| );| var exception = new Exception();| // act| error = error.WithException(exception);| // assert| Assert.Equal(exception, error.Exception);| }"
      },
      {
        "name": "RemoveException",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| exception: new Exception()| );| Assert.NotNull(error.Exception);| // act| error = error.RemoveException();| // assert| Assert.Null(error.Exception);| }"
      },
      {
        "name": "WithExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithExtensions(| new Dictionary<string, object?> { { \"a\", \"b\" }, });| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| });| }"
      },
      {
        "name": "AddExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.SetExtension(\"a\", \"b\").SetExtension(\"c\", \"d\");| // assert| Assert.Collection(| error.Extensions!.OrderBy(t => t.Key),| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| },| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "RemoveExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| error = error.WithExtensions(| new Dictionary<string, object?>| {| { \"a\", \"b\" },| { \"c\", \"d\" },| });| // act| error = error.RemoveExtension(\"a\");| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "WithLocations",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithLocations(new List<Location> { new(1, 2), });| // assert| Assert.Collection(| error.Locations!,| t =>| {| Assert.Equal(1, t.Line);| Assert.Equal(2, t.Column);| });| }"
      },
      {
        "name": "WithMessage",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithMessage(\"456\");| // assert| Assert.Equal(\"456\", error.Message);| }"
      },
      {
        "name": "WithMessage_MessageNull_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(null!);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithMessage_MessageEmpty_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(string.Empty);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithPath",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithPath(Path.FromList(\"foo\"));| // assert| Assert.Equal(\"/foo\", error.Path!.Print());| }"
      }
    ]
  },
  {
    "file": "RemoveTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var subgraphA = await TestSubgraph.CreateAsync(| \"\"\"| type Query {| field: String!| }| \"\"\",| \"\"\"| schema @remove(coordinate: \"Query.field\") {| }| \"\"\"| );| var subgraphB = await TestSubgraph.CreateAsync(| \"\"\"| type Query {| field: String!| }| \"\"\"| );| using var subgraphs = new TestSubgraphCollection(output, [subgraphA, subgraphB]);| // act| var fusionGraph = await subgraphs.GetFusionGraphAsync();| // assert| fusionGraph.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var subgraphA = await TestSubgraph.CreateAsync(| \"\"\"| type Query {| someField: SomeObject!| }| type SomeObject {| property: String!| }| \"\"\",| \"\"\"| schema @remove(coordinate: \"Query.someField\") {| }| \"\"\"| );| var subgraphB = await TestSubgraph.CreateAsync(| \"\"\"| type Query {| otherField: AnotherObject!| }| type AnotherObject {| property: String!| }| \"\"\"| );| using var subgraphs = new TestSubgraphCollection(output, [subgraphA, subgraphB]);| // act| var fusionGraph = await subgraphs.GetFusionGraphAsync();| // assert| fusionGraph.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequireTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(),| demoProject.Products.ToConfiguration(| \"\"\"| extend type Query {| productById(id: ID! @is(field: \"id\")): Product| }| \"\"\"),| demoProject.Shipping.ToConfiguration(| \"\"\"| extend type Query {| productById(id: ID! @is(field: \"id\")): Product| }| extend type Product {| deliveryEstimate(| size: Int! @require(field: \"dimension { size }\"),| weight: Int! @require(field: \"dimension { weight }\"),| zip: String!): DeliveryEstimate!| }| \"\"\"),| });| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "ResolverCompositionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ResolverTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([LocalState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([ScopedState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([GlobalState(\"Test\")] int test)| {| return test;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([LocalState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([ScopedState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| await TestHelper.GetGeneratedSourceSnapshot(| \"\"\"| using HotChocolate;| using HotChocolate.Types;| namespace TestNamespace;| [ObjectType<Test>]| internal static partial class TestType| {| public static int GetTest([GlobalState] SetState<int> test)| {| test(1);| return 1;| }| }| internal class Test;| \"\"\").MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "TagTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(AccountsExtensionWithTagSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| },| FusionFeatureCollection.Empty);| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(AccountsExtensionWithTagSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| },| new FusionFeatureCollection(FusionFeatures.TagDirective(makeTagsPublic: true)));| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(AccountsExtensionWithTagSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionWithTagSdl),| },| new FusionFeatureCollection(FusionFeatures.TagDirective(| makeTagsPublic: true,| exclude: new[] {\"review\", })));| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(AccountsExtensionWithTagSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionWithTagSdl),| },| new FusionFeatureCollection(FusionFeatures.TagDirective(| makeTagsPublic: true,| exclude: new[] {\"internal\", })));| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| new[]| {| demoProject.Accounts.ToConfiguration(AccountsExtensionWithTagSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionWithTagSdl),| },| new FusionFeatureCollection(FusionFeatures.TagDirective(| makeTagsPublic: false,| exclude: new[] {\"internal\", })));| SchemaFormatter| .FormatAsString(fusionConfig)| .MatchSnapshot(extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "TypeMismatchTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ConfigurationRewriterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| });| var configuration = SchemaFormatter.FormatAsDocument(fusionGraph);| // act| var rewriter = new CustomRewriter();| var rewritten = await rewriter.RewriteAsync(configuration);| // assert| var snapshot = new Snapshot();| snapshot.Add(configuration, \"Original:\");| snapshot.Add(rewritten, \"Rewritten:\");| await snapshot.MatchMarkdownAsync();| // this should not throw| var reader = new FusionGraphConfigurationReader();| var config = reader.Read(rewritten);| Assert.Contains(config.HttpClients, t => t.EndpointUri == new Uri(\"http://client\"));| }"
      }
    ]
  },
  {
    "file": "DataTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| });| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton(demoProject.WebSocketConnectionFactory)| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync();| var request = Parse(| \"\"\"| query GetUser {| viewer {| data {| accountValue| reviewsValue| }| }| }| \"\"\");| // act| await using var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .Build());| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync();| Assert.Null(result.ExpectOperationResult().Errors);| }"
      }
    ]
  },
  {
    "file": "DemoIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews.ToConfiguration(ReviewsExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ],| new FusionFeatureCollection(FusionFeatures.NodeField));| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl),| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl),| demoProject.Products.ToConfiguration(ProductsExtensionSdl)| ],| new FusionFeatureCollection(FusionFeatures.NodeField));| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(),| demoProject.Products.ToConfiguration()| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| demoProject.Accounts.ToConfiguration(),| demoProject.Reviews.ToConfiguration(),| demoProject.Products.ToConfiguration(),| demoProject.Shipping2.ToConfiguration()| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| new SubgraphConfiguration(| \"Schema1\",| \"\"\"| schema {| query: Query| }| type Query {| user(id: Int! @is(field: \"id\")): User @lookup| }| type User {| id: Int!| name: String!| email: String!| password: String!| }| \"\"\",| Array.Empty<string>(),| [| new HttpClientConfiguration(| new Uri(\"http://localhost:5000/graphql\"),| \"Schema1\")| ],| default)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var composer = new FusionGraphComposer(logFactory: _logFactory);| var fusionConfig = await composer.ComposeAsync(| [| new SubgraphConfiguration(| \"Schema1\",| \"\"\"| schema {| query: Query| }| type Query {| user(id: Int!): User @lookup| }| type User {| id: Int!| name: String!| email: String!| password: String!| }| \"\"\",| Array.Empty<string>(),| [| new HttpClientConfiguration(| new Uri(\"http://localhost:5000/graphql\"),| \"Schema1\")| ],| default)| ]);| fusionConfig.MatchSnapshot(extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "EventStreamTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(10_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| subscription OnNewReview {| onNewReview {| body| author {| name| }| }| }| \"\"\");| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| await CollectStreamSnapshotData(snapshot, request, result, cts.Token);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      }
    ]
  },
  {
    "file": "FileUploadTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| });| // assert| fusionGraph.MatchSnapshot(extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(10_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($file: Upload!) {| uploadProductPicture(input: { productId: 1, file: $file }) {| boolean| }| }| \"\"\");| var stream = new MemoryStream(\"abc\"u8.ToArray());| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"file\", new StreamFile(\"abc\", () => stream) }, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($input: UploadProductPictureInput!) {| uploadProductPicture(input: $input) {| boolean| }| }| \"\"\");| var input = new Dictionary<string, object?>()| {| [\"productId\"] = 1,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"input\", input }, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation UploadMultiple($input: UploadMultipleProductPicturesInput!) {| uploadMultipleProductPictures(input: $input) {| boolean| }| }| \"\"\");| var input = new Dictionary<string, object?>| {| [\"products\"] = new List<Dictionary<string, object?>> {| new () {| [\"productId\"] = 1,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| },| new () {| [\"productId\"] = 2,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| },| },| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { { \"input\", input } })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      }
    ]
  },
  {
    "file": "InterfaceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| // act| var fusionGraph = await FusionGraphComposer.ComposeAsync(| new[]| {| demoProject.Appointment.ToConfiguration(),| },| new FusionFeatureCollection(FusionFeatures.NodeField));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton(demoProject.WebSocketConnectionFactory)| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync();| var request = Parse(| \"\"\"| query Appointments {| appointments {| nodes {| patient {| id| }| }| }| }| \"\"\");| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .Build());| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync();| Assert.Null(result.ExpectOperationResult().Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| // act| var fusionGraph = await FusionGraphComposer.ComposeAsync(| new[]| {| demoProject.Appointment.ToConfiguration(),| demoProject.Patient1.ToConfiguration(),| },| new FusionFeatureCollection(FusionFeatures.NodeField));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton(demoProject.WebSocketConnectionFactory)| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync();| var request = Parse(| \"\"\"| query Appointments {| appointments {| nodes {| patient {| id| ... on Patient1 {| name| }| }| }| }| }| \"\"\");| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .Build());| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync();| Assert.Null(result.ExpectOperationResult().Errors);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| // act| var fusionGraph =| await new FusionGraphComposer(logFactory: _logFactory)| .ComposeAsync(| new[]| {| demoProject.Appointment.ToConfiguration(),| demoProject.Patient1.ToConfiguration(),| },| new FusionFeatureCollection(FusionFeatures.NodeField));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton(demoProject.WebSocketConnectionFactory)| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync();| var request = Parse(| \"\"\"| query Appointments {| appointments {| nodes {| patient {| id| ... on Patient1 {| name| }| }| }| }| }| \"\"\");| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .Build());| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync();| Assert.Null(result.ExpectOperationResult().Errors);| }"
      }
    ]
  },
  {
    "file": "IntrospectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var client = GetClient(Environments.Development);| // act| var response = await client.PostAsync(| \"\"\"| {| __type(name: \"Query\") {| name| }| }| \"\"\",| Url);| // assert| response.HttpResponseMessage.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 1,| maxAllowedListRecursiveDepth: 1)| .Services| .AddValidation()| .ConfigureValidation(b => b.Modifiers.Add(o => o.DisableDepthRule = true)));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .DisableIntrospection());| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.BadRequest, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer(| configureServices: s => s| .AddGraphQL()| .SetIntrospectionAllowedDepth(| maxAllowedOfTypeDepth: 2,| maxAllowedListRecursiveDepth: 1));| var request = new GraphQLHttpRequest(| new OperationRequest(| \"\"\"| {| __schema {| types {| ofType {| ofType {| name| }| }| }| }| }| \"\"\"),| new Uri(\"http://localhost:5000/graphql\"));| // act| var client = new DefaultGraphQLHttpClient(server.CreateClient());| using var response = await client.SendAsync(request);| // assert| Assert.Equal(HttpStatusCode.OK, response.StatusCode);| }"
      }
    ]
  },
  {
    "file": "OptionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph = await FusionGraphComposer.ComposeAsync(| new[]| {| demoProject.Appointment.ToConfiguration(),| },| new FusionFeatureCollection(FusionFeatures.NodeField));| var services = new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory);| var executor1 = await services| .AddFusionGatewayServer(\"graph1\")| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .ModifyFusionOptions(options => options.AllowQueryPlan = !options.AllowQueryPlan)| .BuildRequestExecutorAsync(\"graph1\");| var executor2 = await services.AddFusionGatewayServer(\"graph2\")| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(\"graph2\");| var options1 = executor1.Services.GetRequiredService<FusionOptions>();| var options2 = executor2.Services.GetRequiredService<FusionOptions>();| var defaultOptions = new FusionOptions();| Assert.Equal(options1.AllowQueryPlan, !defaultOptions.AllowQueryPlan);| Assert.Equal(options2.AllowQueryPlan, defaultOptions.AllowQueryPlan);| }"
      },
      {
        "name": "Task",
        "body": "{| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph = await FusionGraphComposer.ComposeAsync(| new[]| {| demoProject.Appointment.ToConfiguration(),| },| new FusionFeatureCollection(FusionFeatures.NodeField));| var services = new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory);| var executor = await services| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .ModifyFusionOptions(options => options.AllowQueryPlan = !options.AllowQueryPlan)| .ModifyFusionOptions(options => options.IncludeDebugInfo = !options.IncludeDebugInfo)| .BuildRequestExecutorAsync();| var options = executor.Services.GetRequiredService<FusionOptions>();| var defaultOptions = new FusionOptions();| Assert.Equal(options.AllowQueryPlan, !defaultOptions.AllowQueryPlan);| Assert.Equal(options.IncludeDebugInfo, !defaultOptions.IncludeDebugInfo);| }"
      }
    ]
  },
  {
    "file": "RequestPipelineTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph =| await new FusionGraphComposer(logFactory: _logFactory)| .ComposeAsync(new[] { demoProject.Accounts.ToConfiguration() });| var config = new DemoIntegrationTests.HotReloadConfiguration(| new GatewayConfiguration(| SchemaFormatter.FormatAsDocument(fusionGraph)));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddFusionGatewayServer()| .RegisterGatewayConfiguration(_ => config)| .UseRequest<TestMiddleware>()| .UseDefaultPipeline()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ __typename }\")| .AddGlobalState(\"short-circuit\", true)| .Build());| // assert| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"result\": true| },| \"extensions\": {| \"state\": \"custom middleware short-circuited\"| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph =| await new FusionGraphComposer(logFactory: _logFactory)| .ComposeAsync(new[] { demoProject.Accounts.ToConfiguration() });| var config = new DemoIntegrationTests.HotReloadConfiguration(| new GatewayConfiguration(| SchemaFormatter.FormatAsDocument(fusionGraph)));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddFusionGatewayServer()| .RegisterGatewayConfiguration(_ => config)| .UseRequest<TestMiddleware>()| .UseDefaultPipeline()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ __typename }\");| // assert| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"__typename\": \"Query\"| }| }| \"\"\");| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var demoProject = await DemoProject.CreateAsync();| var fusionGraph =| await new FusionGraphComposer(logFactory: _logFactory)| .ComposeAsync(new[] { demoProject.Accounts.ToConfiguration() });| var config = new DemoIntegrationTests.HotReloadConfiguration(| new GatewayConfiguration(| SchemaFormatter.FormatAsDocument(fusionGraph)));| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddFusionGatewayServer()| .RegisterGatewayConfiguration(_ => config)| .UseRequest<TestMiddleware>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"{ __typename }\");| // assert| result.MatchInlineSnapshot(| \"\"\"| {| \"data\": {| \"result\": true| },| \"extensions\": {| \"state\": \"default pipeline didn't run\"| }| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "SourceSchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| // act| var schema =| await new ServiceCollection()| .AddGraphQLServer()| .AddQueryType<ShippingQuery>()| .AddGlobalObjectIdentification(registerNodeInterface: false)| .BuildSchemaAsync();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "UnionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($input: UploadProductPictureInput!) {| uploadProductPicture(input: $input) {| boolean| errors {| __typename| ... on ProductNotFoundError {| productId| }| }| }| }| \"\"\");| var input = new Dictionary<string, object?>()| {| [\"productId\"] = 1,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"input\", input }, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($input: UploadProductPictureInput!) {| uploadProductPicture(input: $input) {| boolean| errors {| __typename| ... on ProductNotFoundError {| productId| }| }| }| }| \"\"\");| var input = new Dictionary<string, object?>()| {| [\"productId\"] = 0,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"input\", input}, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($input: UploadProductPictureInput!) {| uploadProductPicture(input: $input) {| boolean| errors {| __typename| }| }| }| \"\"\");| var input = new Dictionary<string, object?>()| {| [\"productId\"] = 1,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"input\", input}, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(100_000);| using var demoProject = await DemoProject.CreateAsync(cts.Token);| // act| var fusionGraph = await new FusionGraphComposer(logFactory: _logFactory).ComposeAsync(| new[]| {| demoProject.Reviews2.ToConfiguration(Reviews2ExtensionSdl, onlyHttp: true),| demoProject.Accounts.ToConfiguration(AccountsExtensionSdl, onlyHttp: true),| demoProject.Products.ToConfiguration(ProductsExtensionSdl, onlyHttp: true),| demoProject.Shipping.ToConfiguration(ShippingExtensionSdl, onlyHttp: true),| },| default,| cts.Token);| var executor = await new ServiceCollection()| .AddSingleton(demoProject.HttpClientFactory)| .AddSingleton<IWebSocketConnectionFactory>(new NoWebSockets())| .AddFusionGatewayServer()| .ConfigureFromDocument(SchemaFormatter.FormatAsDocument(fusionGraph))| .BuildRequestExecutorAsync(cancellationToken: cts.Token);| var request = Parse(| \"\"\"| mutation Upload($input: UploadProductPictureInput!) {| uploadProductPicture(input: $input) {| boolean| errors {| __typename| }| }| }| \"\"\");| var input = new Dictionary<string, object?>()| {| [\"productId\"] = 0,| [\"file\"] = new StreamFile(\"abc\", () => new MemoryStream(\"abc\"u8.ToArray())),| };| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(request)| .SetVariableValues(new Dictionary<string, object?> { {\"input\", input}, })| .Build(),| cts.Token);| // assert| var snapshot = new Snapshot();| CollectSnapshotData(snapshot, request, result);| await snapshot.MatchMarkdownAsync(cts.Token);| }"
      }
    ]
  },
  {
    "file": "ArgumentNodeTests.cs",
    "methods": [
      {
        "name": "CreateArgumentWithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(location, name, value);| // assert| Assert.Equal(SyntaxKind.Argument, argument.Kind);| Assert.Equal(location, argument.Location);| Assert.Equal(name, argument.Name);| Assert.Equal(value, argument.Value);| }"
      },
      {
        "name": "CreateArgumentWithoutLocation",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(name, value);| // assert| Assert.Equal(SyntaxKind.Argument, argument.Kind);| Assert.Null(argument.Location);| Assert.Equal(name, argument.Name);| Assert.Equal(value, argument.Value);| }"
      },
      {
        "name": "CreateArgumentWithConvenienceConstructor",
        "body": "{| // arrange| var name = \"foo\";| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(name, value);| // assert| Assert.Equal(SyntaxKind.Argument, argument.Kind);| Assert.Null(argument.Location);| Assert.Equal(name, argument.Name.Value);| Assert.Equal(value, argument.Value);| }"
      },
      {
        "name": "CreateArgumentWithoutName",
        "body": "{| // arrange| var value = new StringValueNode(\"bar\");| // act| void Action() => new ArgumentNode(null, null!, value);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "CreateArgumentWithoutValue",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| // act| Action action = () => new ArgumentNode(null, name, null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "ArgumentNode_WithNewName_NewNameIsSet",
        "body": "{| // arrange| var argument = new ArgumentNode(| \"foo\", new StringValueNode(\"bar\"));| // act| argument = argument.WithName(new NameNode(\"bar\"));| // assert| Assert.Equal(\"bar\", argument.Name.Value);| }"
      },
      {
        "name": "ArgumentNode_WithNewValue_NewValueIsSet",
        "body": "{| // arrange| var argument = new ArgumentNode(| \"foo\", new StringValueNode(\"bar\"));| // act| argument = argument.WithValue(new StringValueNode(\"foo\"));| // assert| Assert.Equal(\"foo\", ((StringValueNode)argument.Value).Value);| }"
      },
      {
        "name": "ArgumentNode_WithNewLocation_NewLocationIsSet",
        "body": "{| // arrange| var argument = new ArgumentNode(| \"foo\",| new StringValueNode(\"bar\"));| Assert.Null(argument.Location);| var location = new Location(0, 0, 0, 0);| // act| argument = argument.WithLocation(location);| // assert| Assert.Equal(location, argument.Location);| }"
      },
      {
        "name": "Argument_ToString",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(null, name, value);| // assert| argument.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Argument_ToString_Indented",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(null, name, value);| // assert| argument.ToString(true).MatchSnapshot();| }"
      },
      {
        "name": "Argument_ToString_UnIndented",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| // act| var argument = new ArgumentNode(null, name, value);| // assert| argument.ToString(false).MatchSnapshot();| }"
      },
      {
        "name": "Argument_GetNodes",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var value = new StringValueNode(\"bar\");| var argument = new ArgumentNode(null, name, value);| // act| ISyntaxNode[] nodes = argument.GetNodes().ToArray();| // assert| Assert.Collection(nodes,| n => Assert.Equal(name, n),| v => Assert.Equal(value, v));| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(123));| var b = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(123));| var c = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(567));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(123));| var b = new ArgumentNode(new Location(2, 2, 2, 2), new(\"aa\"), new IntValueNode(123));| var c = new ArgumentNode(new Location(3, 3, 3, 3), new(\"aa\"), new IntValueNode(567));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(123));| var b = new ArgumentNode(new Location(2, 2, 2, 2), new(\"aa\"), new IntValueNode(123));| var c = new ArgumentNode(new Location(1, 1, 1, 1), new(\"aa\"), new IntValueNode(567));| var d = new ArgumentNode(new Location(2, 2, 2, 2), new(\"aa\"), new IntValueNode(567));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "BooleanValueNodeTests.cs",
    "methods": [
      {
        "name": "EqualsBooleanValueNode_SameLocation",
        "body": "{| // arrange| var a = new BooleanValueNode(new Location(1, 1, 1, 1), false);| var b = new BooleanValueNode(new Location(1, 1, 1, 1), false);| var c = new BooleanValueNode(new Location(1, 1, 1, 1), true);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsBooleanValueNode_DifferentLocation",
        "body": "{| // arrange| var a = new BooleanValueNode(new Location(1, 1, 1, 1), false);| var b = new BooleanValueNode(new Location(2, 2, 2, 2), false);| var c = new BooleanValueNode(new Location(3, 3, 3, 3), true);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsBooleanValueNode",
        "body": "{| // arrange| var a = new BooleanValueNode(false);| var b = new BooleanValueNode(false);| var c = new BooleanValueNode(true);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "CompareGetHashCode",
        "body": "{| // arrange| var a = new BooleanValueNode(false);| var b = new BooleanValueNode(false);| var c = new BooleanValueNode(true);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| }"
      },
      {
        "name": "CompareGetHashCode_With_Location",
        "body": "{| // arrange| var a = new BooleanValueNode(new(1, 1, 1, 1), false);| var b = new BooleanValueNode(new(2, 2, 2, 2), false);| var c = new BooleanValueNode(new(1, 1, 1, 1), true);| var d = new BooleanValueNode(new(2, 2, 2, 2), true);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      },
      {
        "name": "StringRepresentation",
        "body": "{| // arrange| var a = new BooleanValueNode(false);| var b = new BooleanValueNode(true);| // act| var aString = a.ToString();| var bString = b.ToString();| // assert| Assert.Equal(\"false\", aString);| Assert.Equal(\"true\", bString);| }"
      },
      {
        "name": "ClassIsSealed",
        "body": "{| Assert.True(typeof(BooleanValueNode).IsSealed);| }"
      },
      {
        "name": "BooleanValue_WithNewValue_NewValueIsSet",
        "body": "{| // arrange| var booleanValueNode = new BooleanValueNode(false);| // act| booleanValueNode = booleanValueNode.WithValue(true);| // assert| Assert.True(booleanValueNode.Value);| }"
      }
    ]
  },
  {
    "file": "DirectiveDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "CreateDirectiveDefinition",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode>();| // act| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // assert| Assert.Equal(SyntaxKind.DirectiveDefinition,| directiveDefinition.Kind);| Assert.Null(directiveDefinition.Location);| Assert.Equal(name, directiveDefinition.Name);| Assert.Equal(description, directiveDefinition.Description);| Assert.Equal(arguments, directiveDefinition.Arguments);| Assert.Equal(locations, directiveDefinition.Locations);| Assert.True(directiveDefinition.IsRepeatable);| }"
      },
      {
        "name": "WithName",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition| .WithName(new NameNode(\"bar\"));| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithDescription",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition| .WithDescription(new StringValueNode(\"qux\"));| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithArguments",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition| .WithArguments(new List<InputValueDefinitionNode>| {| new InputValueDefinitionNode| (| null,| new NameNode(\"arg\"),| null,| new NamedTypeNode(new NameNode(\"type\")),| NullValueNode.Default,| Array.Empty<DirectiveNode>()| ),| });| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithLocations",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode>();| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition| .WithLocations(new List<NameNode> { new NameNode(\"BAR\"), });| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition| .WithLocation(AstTestHelper.CreateDummyLocation());| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "AsUnique",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // act| directiveDefinition = directiveDefinition.AsRepeatable(false);| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "AsRepeatable",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, false,| arguments, locations);| // act| directiveDefinition = directiveDefinition.AsRepeatable();| // assert| directiveDefinition.MatchSnapshot();| }"
      },
      {
        "name": "DirectiveDefinition_ToString",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>();| var locations = new List<NameNode> { new(DirectiveLocation.Field.ToString()), };| // act| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // assert| directiveDefinition.ToString().MatchSnapshot();| }"
      },
      {
        "name": "DirectiveDefinition_WithArgument_ToString",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var arguments = new List<InputValueDefinitionNode>| {| new(null,| new NameNode(\"abc\"),| new StringValueNode(\"def\"),| new NamedTypeNode(\"efg\"),| null,| Array.Empty<DirectiveNode>()),| };| var locations = new List<NameNode>| {| new(DirectiveLocation.Field.ToString()),| };| // act| var directiveDefinition = new DirectiveDefinitionNode(| null, name, description, true,| arguments, locations);| // assert| directiveDefinition.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var arguments = new List<InputValueDefinitionNode>| {| new(null,| new NameNode(\"abc\"),| new StringValueNode(\"def\"),| new NamedTypeNode(\"efg\"),| null,| Array.Empty<DirectiveNode>()),| };| var locations = new List<NameNode>| {| new(DirectiveLocation.Field.ToString()),| };| var a = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| true,| arguments,| locations);| var b = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| true,| arguments,| locations);| var c = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"bb\"),| null,| true,| arguments,| locations);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var arguments = new List<InputValueDefinitionNode>| {| new(null,| new NameNode(\"abc\"),| new StringValueNode(\"def\"),| new NamedTypeNode(\"efg\"),| null,| Array.Empty<DirectiveNode>()),| };| var locations = new List<NameNode>| {| new(DirectiveLocation.Field.ToString()),| };| var a = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| true,| arguments,| locations);| var b = new DirectiveDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| true,| arguments,| locations);| var c = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"bb\"),| null,| true,| arguments,| locations);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var arguments = new List<InputValueDefinitionNode>| {| new(null,| new NameNode(\"abc\"),| new StringValueNode(\"def\"),| new NamedTypeNode(\"efg\"),| null,| Array.Empty<DirectiveNode>()),| };| var locations = new List<NameNode>| {| new(DirectiveLocation.Field.ToString()),| };| var a = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| true,| arguments,| locations);| var b = new DirectiveDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| true,| arguments,| locations);| var c = new DirectiveDefinitionNode(| TestLocations.Location1,| new(\"bb\"),| null,| true,| arguments,| locations);| var d = new DirectiveDefinitionNode(| TestLocations.Location2,| new(\"bb\"),| null,| true,| arguments,| locations);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "DirectiveNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var arguments = new List<ArgumentNode> { new(\"abc\", \"def\"), };| var a = new DirectiveNode(| TestLocations.Location1,| new(\"aa\"),| arguments);| var b = new DirectiveNode(| TestLocations.Location1,| new(\"aa\"),| arguments);| var c = new DirectiveNode(| TestLocations.Location1,| new(\"ab\"),| arguments);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var arguments = new List<ArgumentNode> { new(\"abc\", \"def\"), };| var a = new DirectiveNode(| TestLocations.Location1,| new(\"aa\"),| arguments);| var b = new DirectiveNode(| TestLocations.Location2,| new(\"aa\"),| arguments);| var c = new DirectiveNode(| TestLocations.Location1,| new(\"ab\"),| arguments);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var arguments = new List<ArgumentNode> { new(\"abc\", \"def\"), };| var a = new DirectiveNode(| TestLocations.Location1,| new(\"aa\"),| arguments);| var b = new DirectiveNode(| TestLocations.Location2,| new(\"aa\"),| arguments);| var c = new DirectiveNode(| TestLocations.Location1,| new(\"ab\"),| arguments);| var d = new DirectiveNode(| TestLocations.Location2,| new(\"ab\"),| arguments);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "DocumentNodeTests.cs",
    "methods": [
      {
        "name": "CreateDocumentWithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| // act| var document = new DocumentNode(location, new IDefinitionNode[] { fragment, });| // assert| Assert.Equal(SyntaxKind.Document, document.Kind);| Assert.Equal(location, document.Location);| Assert.Collection(document.Definitions, d => Assert.Equal(fragment, d));| }"
      },
      {
        "name": "CreateDocument",
        "body": "{| // arrange| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| // act| var document = new DocumentNode(new IDefinitionNode[] { fragment, });| // assert| Assert.Equal(SyntaxKind.Document, document.Kind);| Assert.Null(document.Location);| Assert.Collection(document.Definitions, d => Assert.Equal(fragment, d));| }"
      },
      {
        "name": "Document_With_Location",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| var document = new DocumentNode(new IDefinitionNode[] { fragment, });| // act| document = document.WithLocation(location);| // assert| Assert.Equal(location, document.Location);| }"
      },
      {
        "name": "Document_With_Location_Null",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| var document = new DocumentNode(location, new IDefinitionNode[] { fragment, });| // act| document = document.WithLocation(null);| // assert| Assert.Null(document.Location);| }"
      },
      {
        "name": "Document_With_Definitions",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| var document = new DocumentNode(location, new IDefinitionNode[] { });| // act| document = document.WithDefinitions(new IDefinitionNode[] { fragment, });| // assert| Assert.Collection(document.Definitions, d => Assert.Equal(fragment, d));| }"
      },
      {
        "name": "Document_With_Definitions_Null",
        "body": "{| // arrange| var fragment = new FragmentDefinitionNode(| null, new NameNode(\"foo\"),| Array.Empty<VariableDefinitionNode>(),| new NamedTypeNode(\"foo\"),| Array.Empty<DirectiveNode>(),| new SelectionSetNode(Array.Empty<ISelectionNode>()));| var document = new DocumentNode(new IDefinitionNode[] { });| // act| void Action() => document.WithDefinitions(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var definitions1 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Abc\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var definitions2 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Def\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var a = new DocumentNode(| TestLocations.Location1,| definitions1);| var b = new DocumentNode(| TestLocations.Location1,| definitions1);| var c = new DocumentNode(| TestLocations.Location1,| definitions2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var definitions1 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Abc\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var definitions2 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Def\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var a = new DocumentNode(| TestLocations.Location1,| definitions1);| var b = new DocumentNode(| TestLocations.Location2,| definitions1);| var c = new DocumentNode(| TestLocations.Location1,| definitions2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| // arrange| var definitions1 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Abc\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var definitions2 = new List<IDefinitionNode>| {| new EnumTypeDefinitionNode(| null,| new(\"Def\"),| null,| Array.Empty<DirectiveNode>(),| new[]| {| new EnumValueDefinitionNode(| null,| new(\"DEF\"),| null,| Array.Empty<DirectiveNode>()),| }),| };| var a = new DocumentNode(| TestLocations.Location1,| definitions1);| var b = new DocumentNode(| TestLocations.Location2,| definitions1);| var c = new DocumentNode(| TestLocations.Location1,| definitions2);| var d = new DocumentNode(| TestLocations.Location2,| definitions2);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "EnumTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "EnumTypeDefinitionWithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| var type = new EnumTypeDefinitionNode(| location,| name,| description,| directives,| values);| // assert| Assert.Equal(SyntaxKind.EnumTypeDefinition, type.Kind);| Assert.Equal(location, type.Location);| Assert.Equal(name, type.Name);| Assert.Equal(description, type.Description);| Assert.Equal(directives, type.Directives);| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "EnumTypeDefinitionWithoutLocation",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| var type = new EnumTypeDefinitionNode(| null,| name,| description,| directives,| values);| // assert| Assert.Equal(SyntaxKind.EnumTypeDefinition, type.Kind);| Assert.Null(type.Location);| Assert.Equal(name, type.Name);| Assert.Equal(description, type.Description);| Assert.Equal(directives, type.Directives);| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "EnumTypeDefinitionWithoutName_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| EnumTypeDefinitionNode Action()| => new(location, null!, description, directives, values);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumTypeDefinitionWithoutDirectives_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var values = new List<EnumValueDefinitionNode>();| // act| EnumTypeDefinitionNode Action()| => new(location, name, description, null!, values);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumTypeDefinitionWithoutValues_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| // act| Action a = () => new EnumTypeDefinitionNode(| location,| name,| description,| directives,| null!);| // assert| Assert.Throws<ArgumentNullException>(a);| }"
      },
      {
        "name": "WithName",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeDefinitionNode(| location,| name,| description,| directives,| values);| // act| type = type.WithName(new NameNode(\"baz\"));| // assert| Assert.Equal(\"baz\", type.Name.Value);| }"
      },
      {
        "name": "WithDescription",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeDefinitionNode(| location,| name,| description,| directives,| values);| // act| type = type.WithDescription(new StringValueNode(\"baz\"));| // assert| Assert.Equal(\"baz\", type.Description!.Value);| }"
      },
      {
        "name": "WithDirectives",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeDefinitionNode(| location,| name,| description,| new List<DirectiveNode>(),| values);| // act| type = type.WithDirectives(directives);| // assert| Assert.Equal(directives, type.Directives);| }"
      },
      {
        "name": "WithValues",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeDefinitionNode(| location,| name,| description,| directives,| new List<EnumValueDefinitionNode>());| // act| type = type.WithValues(values);| // assert| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var description = new StringValueNode(\"bar\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeDefinitionNode(| null,| name,| description,| directives,| values);| // act| type = type.WithLocation(location);| // assert| Assert.Equal(location, type.Location);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>(),| values);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>(),| values);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>(),| values);| var d = new EnumTypeDefinitionNode(| TestLocations.Location2,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>(),| values);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "EnumTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "EnumTypeExtensionWithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| var type = new EnumTypeExtensionNode(| location,| name,| directives,| values);| // assert| Assert.Equal(SyntaxKind.EnumTypeExtension, type.Kind);| Assert.Equal(location, type.Location);| Assert.Equal(name, type.Name);| Assert.Equal(directives, type.Directives);| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "EnumTypeExtensionWithoutLocation",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| var type = new EnumTypeExtensionNode(| null,| name,| directives,| values);| // assert| Assert.Equal(SyntaxKind.EnumTypeExtension, type.Kind);| Assert.Null(type.Location);| Assert.Equal(name, type.Name);| Assert.Equal(directives, type.Directives);| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "EnumTypeExtensionWithoutName_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| // act| EnumTypeExtensionNode Action()| => new(location, null!, directives, values);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumTypeExtensionWithoutDirectives_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var values = new List<EnumValueDefinitionNode>();| // act| EnumTypeExtensionNode Action()| => new(location, name, null!, values);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "EnumTypeExtensionWithoutValues_ArgumentNullException",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| // act| Action a = () => new EnumTypeExtensionNode(| location,| name,| directives,| null!);| // assert| Assert.Throws<ArgumentNullException>(a);| }"
      },
      {
        "name": "WithName",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeExtensionNode(| location,| name,| directives,| values);| // act| type = type.WithName(new NameNode(\"baz\"));| // assert| Assert.Equal(\"baz\", type.Name.Value);| }"
      },
      {
        "name": "WithDirectives",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeExtensionNode(| location,| name,| new List<DirectiveNode>(),| values);| // act| type = type.WithDirectives(directives);| // assert| Assert.Equal(directives, type.Directives);| }"
      },
      {
        "name": "WithValues",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeExtensionNode(| location,| name,| directives,| new List<EnumValueDefinitionNode>());| // act| type = type.WithValues(values);| // assert| Assert.Equal(values, type.Values);| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var location = new Location(0, 0, 0, 0);| var name = new NameNode(\"foo\");| var directives = new List<DirectiveNode>();| var values = new List<EnumValueDefinitionNode>();| var type = new EnumTypeExtensionNode(| null,| name,| directives,| values);| // act| type = type.WithLocation(location);| // assert| Assert.Equal(location, type.Location);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"ab\"),| Array.Empty<DirectiveNode>(),| values);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeExtensionNode(| TestLocations.Location2,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"ab\"),| Array.Empty<DirectiveNode>(),| values);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var values = new List<EnumValueDefinitionNode>| {| new EnumValueDefinitionNode(null, new(\"DEF\"), null, Array.Empty<DirectiveNode>()),| };| var a = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var b = new EnumTypeExtensionNode(| TestLocations.Location2,| new(\"aa\"),| Array.Empty<DirectiveNode>(),| values);| var c = new EnumTypeExtensionNode(| TestLocations.Location1,| new(\"ab\"),| Array.Empty<DirectiveNode>(),| values);| var d = new EnumTypeExtensionNode(| TestLocations.Location2,| new(\"ab\"),| Array.Empty<DirectiveNode>(),| values);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "EnumValueDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var b = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var c = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>());| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var b = new EnumValueDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var c = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>());| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var b = new EnumValueDefinitionNode(| TestLocations.Location2,| new(\"aa\"),| null,| Array.Empty<DirectiveNode>());| var c = new EnumValueDefinitionNode(| TestLocations.Location1,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>());| var d = new EnumValueDefinitionNode(| TestLocations.Location2,| new(\"ab\"),| null,| Array.Empty<DirectiveNode>());| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "EnumValueNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new EnumValueNode(| TestLocations.Location1,| new(\"AA\"));| var b = new EnumValueNode(| TestLocations.Location1,| new(\"AA\"));| var c = new EnumValueNode(| TestLocations.Location1,| new(\"AB\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new EnumValueNode(| TestLocations.Location1,| new(\"AA\"));| var b = new EnumValueNode(| TestLocations.Location2,| new(\"AA\"));| var c = new EnumValueNode(| TestLocations.Location1,| new(\"AB\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new EnumValueNode(| TestLocations.Location1,| new(\"AA\"));| var b = new EnumValueNode(| TestLocations.Location2,| new(\"AA\"));| var c = new EnumValueNode(| TestLocations.Location1,| new(\"AB\"));| var d = new EnumValueNode(| TestLocations.Location2,| new(\"AB\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "FieldDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_FieldDefinitionNode_When_Both_Are_Equal",
        "body": "{| // arrange| var a = ParseFieldDefinition(\"foo(a: String): String @bar\");| var b = ParseFieldDefinition(\"foo(a: String): String @bar\");| // act| var success = SyntaxComparer.BySyntax.Equals(a, b);| // assert| Assert.True(success);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = ParseFieldDefinition(\"foo(a: String): String @bar\");| var b = ParseFieldDefinition(\"foo(a: String): String @bar\");| var c = ParseFieldDefinition(\"bar(a: String): String @bar\");| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = ParseFieldDefinition(\"foo(a: String): String @bar\");| var b = ParseFieldDefinition(\" foo (a : String): String @bar\");| var c = ParseFieldDefinition(\"bar(a: String): String @bar\");| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = ParseFieldDefinition(\"foo(a: String): String @bar\");| var b = ParseFieldDefinition(\" foo (a : String): String @bar\");| var c = ParseFieldDefinition(\"bar(a: String): String @bar\");| var d = ParseFieldDefinition(\" bar (a : String): String @bar\");| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "FieldNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var b = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var c = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"dd\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var b = new FieldNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var c = new FieldNode(| new Location(3, 3, 3, 3),| new(\"aa\"),| new(\"dd\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var b = new FieldNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new(\"cc\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var c = new FieldNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new(\"dd\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| var d = new FieldNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new(\"dd\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| default);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "FloatValueNodeTests.cs",
    "methods": [
      {
        "name": "EqualsFloatValueNode_Float",
        "body": "{| // arrange| var a = new FloatValueNode((float)1.0);| var b = new FloatValueNode((float)1.0);| var c = new FloatValueNode((float)3.0);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsFloatValueNode_Double",
        "body": "{| // arrange| var a = new FloatValueNode((double)1.0);| var b = new FloatValueNode((double)1.0);| var c = new FloatValueNode((double)3.0);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsFloatValueNode_Decimal",
        "body": "{| // arrange| var a = new FloatValueNode((decimal)1.0);| var b = new FloatValueNode((decimal)1.0);| var c = new FloatValueNode((decimal)3.0);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsIValueNode",
        "body": "{| // arrange| var a = new FloatValueNode(1.0);| var b = new FloatValueNode(1.0);| var c = new FloatValueNode(2.0);| var d = new StringValueNode(\"foo\");| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "CompareGetHashCode",
        "body": "{| // arrange| var a = new FloatValueNode(1.0);| var b = new FloatValueNode(1.0);| var c = new FloatValueNode(2.0);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| }"
      },
      {
        "name": "StringRepresentation",
        "body": "{| // arrange| var a = new FloatValueNode(1.0);| var b = new FloatValueNode(2.0);| // act| var aString = a.ToString();| var bString = b.ToString();| // assert| Assert.Equal(\"1\", aString);| Assert.Equal(\"2\", bString);| }"
      },
      {
        "name": "ClassIsSealed",
        "body": "{| Assert.True(typeof(FloatValueNode).IsSealed);| }"
      },
      {
        "name": "Convert_Value_Float_To_Span_To_String",
        "body": "{| // act| var a = new FloatValueNode(2.5);| var b = a.WithValue(a.AsSpan(), FloatFormat.FixedPoint);| var c = b.Value;| // assert| Assert.Equal(\"2.5\", c);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new FloatValueNode(| TestLocations.Location1,| 1.1);| var b = new FloatValueNode(| TestLocations.Location1,| 1.1);| var c = new FloatValueNode(| TestLocations.Location1,| 1.2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new FloatValueNode(| TestLocations.Location1,| 1.1);| var b = new FloatValueNode(| TestLocations.Location2,| 1.1);| var c = new FloatValueNode(| TestLocations.Location1,| 1.2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new FloatValueNode(| TestLocations.Location1,| 1.1);| var b = new FloatValueNode(| TestLocations.Location2,| 1.1);| var c = new FloatValueNode(| TestLocations.Location1,| 1.2);| var d = new FloatValueNode(| TestLocations.Location2,| 1.2);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "FragmentDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var b = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var c = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"dd\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var b = new FragmentDefinitionNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var c = new FragmentDefinitionNode(| new Location(3, 3, 3, 3),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"dd\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var b = new FragmentDefinitionNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"cc\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var c = new FragmentDefinitionNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"dd\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| var d = new FragmentDefinitionNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<VariableDefinitionNode>(),| new NamedTypeNode(\"dd\"),| new List<DirectiveNode>(),| new SelectionSetNode(new List<ISelectionNode>()));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "FragmentSpreadNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0));| var b = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0));| var c = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"bb\"),| new List<DirectiveNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0));| var b = new FragmentSpreadNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<DirectiveNode>(0));| var c = new FragmentSpreadNode(| new Location(3, 3, 3, 3),| new(\"aa\"),| new List<DirectiveNode>| {| new(\"bb\"),| });| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0));| var b = new FragmentSpreadNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<DirectiveNode>(0));| var c = new FragmentSpreadNode(| new Location(1, 1, 1, 1),| new(\"bb\"),| new List<DirectiveNode>(0));| var d = new FragmentSpreadNode(| new Location(2, 2, 2, 2),| new(\"bb\"),| new List<DirectiveNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InlineFragmentNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"bb\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new InlineFragmentNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new InlineFragmentNode(| new Location(3, 3, 3, 3),| new(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new InlineFragmentNode(| new Location(2, 2, 2, 2),| new(\"aa\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new InlineFragmentNode(| new Location(1, 1, 1, 1),| new(\"bb\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var d = new InlineFragmentNode(| new Location(2, 2, 2, 2),| new(\"bb\"),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeDefinitionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var d = new InputObjectTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InputObjectTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<InputValueDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeExtensionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<InputValueDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var b = new InputObjectTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<InputValueDefinitionNode>(0));| var c = new InputObjectTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<InputValueDefinitionNode>(0));| var d = new InputObjectTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<InputValueDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InputValueDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var b = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var c = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new NamedTypeNode(\"cc\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var b = new InputValueDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var c = new InputValueDefinitionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new NamedTypeNode(\"cc\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var b = new InputValueDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new NamedTypeNode(\"bb\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0));| var c = new InputValueDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new NamedTypeNode(\"cc\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0));| var d = new InputValueDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new NamedTypeNode(\"cc\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "IntValueNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new IntValueNode(| TestLocations.Location1,| 1);| var b = new IntValueNode(| TestLocations.Location1,| 1);| var c = new IntValueNode(| TestLocations.Location1,| 2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new IntValueNode(| TestLocations.Location1,| 1);| var b = new IntValueNode(| TestLocations.Location2,| 1);| var c = new IntValueNode(| TestLocations.Location1,| 2);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new IntValueNode(| TestLocations.Location1,| 1);| var b = new IntValueNode(| TestLocations.Location2,| 1);| var c = new IntValueNode(| TestLocations.Location1,| 2);| var d = new IntValueNode(| TestLocations.Location2,| 2);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeDefinitionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var d = new InterfaceTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeExtensionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new InterfaceTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new InterfaceTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var d = new InterfaceTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ListTypeNodeTests.cs",
    "methods": [
      {
        "name": "Create_With_Type",
        "body": "{| // arrange| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new ListTypeNode(namedType);| // assert| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Type_Where_Type_Is_Null",
        "body": "{| // arrange| // act| ListTypeNode Action() => new(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_With_Location_And_Type",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new ListTypeNode(location, namedType);| // assert| Assert.Equal(location, type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Location_And_Type_Where_Location_Is_Null",
        "body": "{| // arrange| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new ListTypeNode(null, namedType);| // assert| Assert.Null(type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Location_And_Type_Where_Type_Is_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| // act| ListTypeNode Action() => new(location, null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var initialLocation = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| var type = new ListTypeNode(initialLocation, namedType);| // act| var newLocation = new Location(2, 2, 2, 2);| type = type.WithLocation(newLocation);| // assert| Assert.Equal(newLocation, type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "WithLocation_Where_Location_Is_Null",
        "body": "{| // arrange| var initialLocation = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| var type = new ListTypeNode(initialLocation, namedType);| // act| type = type.WithLocation(null);| // assert| Assert.Null(type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "WithType",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var initialType = new NamedTypeNode(\"abc\");| var type = new ListTypeNode(location, initialType);| // act| var newType = new NamedTypeNode(\"def\");| type = type.WithType(newType);| // assert| Assert.Equal(location, type.Location);| Assert.Equal(newType, type.Type);| }"
      },
      {
        "name": "WithType_Where_Type_Is_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var initialType = new NamedTypeNode(\"abc\");| var type = new ListTypeNode(location, initialType);| // act| void Action() => type.WithType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Abc\"));| var b = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Abc\"));| var c = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Def\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Abc\"));| var b = new ListTypeNode(| TestLocations.Location2,| new NamedTypeNode(\"Abc\"));| var c = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Def\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Abc\"));| var b = new ListTypeNode(| TestLocations.Location2,| new NamedTypeNode(\"Abc\"));| var c = new ListTypeNode(| TestLocations.Location1,| new NamedTypeNode(\"Def\"));| var d = new ListTypeNode(| TestLocations.Location2,| new NamedTypeNode(\"Def\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ListValueNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Abc\"));| var b = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Abc\"));| var c = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Def\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Abc\"));| var b = new ListValueNode(| TestLocations.Location2,| new StringValueNode(\"Abc\"));| var c = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Def\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Abc\"));| var b = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Abc\"));| var c = new ListValueNode(| TestLocations.Location1,| new StringValueNode(\"Def\"));| var d = new ListValueNode(| TestLocations.Location2,| new StringValueNode(\"Def\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "NamedTypeNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new NamedTypeNode(| TestLocations.Location1,| new(\"aa\"));| var b = new NamedTypeNode(| TestLocations.Location1,| new(\"aa\"));| var c = new NamedTypeNode(| TestLocations.Location1,| new(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new NamedTypeNode(| TestLocations.Location1,| new(\"aa\"));| var b = new NamedTypeNode(| TestLocations.Location2,| new(\"aa\"));| var c = new NamedTypeNode(| TestLocations.Location1,| new(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new NamedTypeNode(| TestLocations.Location1,| new(\"aa\"));| var b = new NamedTypeNode(| TestLocations.Location2,| new(\"aa\"));| var c = new NamedTypeNode(| TestLocations.Location1,| new(\"bb\"));| var d = new NamedTypeNode(| TestLocations.Location2,| new(\"bb\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "NonNullTypeNodeTests.cs",
    "methods": [
      {
        "name": "Create_With_Type",
        "body": "{| // arrange| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new NonNullTypeNode(namedType);| // assert| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Type_Where_Type_Is_Null",
        "body": "{| // arrange| // act| Action action = () => new NonNullTypeNode(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "Create_With_Location_And_Type",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new NonNullTypeNode(location, namedType);| // assert| Assert.Equal(location, type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Location_And_Type_Where_Location_Is_Null",
        "body": "{| // arrange| var namedType = new NamedTypeNode(\"abc\");| // act| var type = new NonNullTypeNode(null, namedType);| // assert| Assert.Null(type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "Create_With_Location_And_Type_Where_Type_Is_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| // act| Action action = () => new NonNullTypeNode(location, null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var initialLocation = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| var type = new NonNullTypeNode(initialLocation, namedType);| // act| var newLocation = new Location(2, 2, 2, 2);| type = type.WithLocation(newLocation);| // assert| Assert.Equal(newLocation, type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "WithLocation_Where_Location_Is_Null",
        "body": "{| // arrange| var initialLocation = new Location(1, 1, 1, 1);| var namedType = new NamedTypeNode(\"abc\");| var type = new NonNullTypeNode(initialLocation, namedType);| // act| type = type.WithLocation(null);| // assert| Assert.Null(type.Location);| Assert.Equal(namedType, type.Type);| }"
      },
      {
        "name": "WithType",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var initialType = new NamedTypeNode(\"abc\");| var type = new NonNullTypeNode(location, initialType);| // act| var newType = new NamedTypeNode(\"def\");| type = type.WithType(newType);| // assert| Assert.Equal(location, type.Location);| Assert.Equal(newType, type.Type);| }"
      },
      {
        "name": "WithType_Where_Type_Is_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var initialType = new NamedTypeNode(\"abc\");| var type = new NonNullTypeNode(location, initialType);| // act| Action action = () => type.WithType(null!);| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "NullValueNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| var a = new NullValueNode(| TestLocations.Location1);| var b = new NullValueNode(| TestLocations.Location1);| // act| var abResult = a.Equals(b);| var aaResult = a.Equals(a);| var aNullResult = a.Equals(default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new NullValueNode(| TestLocations.Location1);| var b = new NullValueNode(| TestLocations.Location2);| // act| var abResult = a.Equals(b);| var aaResult = a.Equals(a);| var aNullResult = a.Equals(default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new NullValueNode(| TestLocations.Location1);| var b = new NullValueNode(| TestLocations.Location2);| // act| var aHash = a.GetHashCode();| var bHash = b.GetHashCode();| // assert| Assert.Equal(aHash, bHash);| }"
      }
    ]
  },
  {
    "file": "ObjectFieldNodeTests.cs",
    "methods": [
      {
        "name": "EqualsObjectFieldNode_SameLocation",
        "body": "{| // arrange| var a = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(1));| var b = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(1));| var c = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(2));| var d = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"d\"),| new IntValueNode(1));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsObjectFieldNode_DifferentLocations",
        "body": "{| // arrange| var a = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(1));| var b = new ObjectFieldNode(| TestLocations.Location2,| new NameNode(\"a\"),| new IntValueNode(1));| var c = new ObjectFieldNode(| TestLocations.Location3,| new NameNode(\"a\"),| new IntValueNode(2));| var d = new ObjectFieldNode(| TestLocations.Location3,| new NameNode(\"d\"),| new IntValueNode(1));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "CompareGetHashCode_WithLocation",
        "body": "{| // arrange| var a = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(1));| var b = new ObjectFieldNode(| TestLocations.Location2,| new NameNode(\"a\"),| new IntValueNode(1));| var c = new ObjectFieldNode(| TestLocations.Location1,| new NameNode(\"a\"),| new IntValueNode(2));| var d = new ObjectFieldNode(| TestLocations.Location2,| new NameNode(\"d\"),| new IntValueNode(1));| var e = new ObjectFieldNode(| TestLocations.Location3,| new NameNode(\"d\"),| new IntValueNode(1));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| var eHash = SyntaxComparer.BySyntax.GetHashCode(e);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.NotEqual(aHash, dHash);| Assert.NotEqual(cHash, dHash);| Assert.Equal(dHash, eHash);| }"
      },
      {
        "name": "Create_Float",
        "body": "{| // arrange| // act| var obj = new ObjectFieldNode(\"abc\", 1.2);| // assert| Assert.Equal(\"abc\", obj.Name.Value);| Assert.Equal(\"1.2\", Assert.IsType<FloatValueNode>(obj.Value).Value);| }"
      },
      {
        "name": "Create_Int",
        "body": "{| // arrange| // act| var obj = new ObjectFieldNode(\"abc\", 1);| // assert| Assert.Equal(\"abc\", obj.Name.Value);| Assert.Equal(\"1\", Assert.IsType<IntValueNode>(obj.Value).Value);| }"
      },
      {
        "name": "Create_String",
        "body": "{| // arrange| // act| var obj = new ObjectFieldNode(\"abc\", \"def\");| // assert| Assert.Equal(\"abc\", obj.Name.Value);| Assert.Equal(\"def\", Assert.IsType<StringValueNode>(obj.Value).Value);| }"
      }
    ]
  },
  {
    "file": "ObjectTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeDefinitionNode(| TestLocations.Location3,| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var d = new ObjectTypeDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ObjectTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeExtensionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeExtensionNode(| TestLocations.Location3,| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var b = new ObjectTypeExtensionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var c = new ObjectTypeExtensionNode(| TestLocations.Location1,| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| var d = new ObjectTypeExtensionNode(| TestLocations.Location2,| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0),| new List<FieldDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ObjectValueNodeTests.cs",
    "methods": [
      {
        "name": "GetHashCode_FieldOrder_DoesMatter",
        "body": "{| // arrange| var a = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var b = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var c = new ObjectValueNode(| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"c\", \"foo\"));| var d = new ObjectValueNode(| new ObjectFieldNode(\"c\", \"foo\"),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"a\", 123));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.NotEqual(aHash, dHash);| }"
      },
      {
        "name": "GetHashCode_Different_Objects",
        "body": "{| // arrange| var objectA = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var objectB = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"abc\"));| // act| var hashA = objectA.GetHashCode();| var hashB = objectB.GetHashCode();| // assert| Assert.NotEqual(hashA, hashB);| }"
      },
      {
        "name": "Equals_FieldOrder_DoesMatter",
        "body": "{| // arrange| var a = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var b = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var c = new ObjectValueNode(| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"c\", \"foo\"));| var d = new ObjectValueNode(| new ObjectFieldNode(\"c\", \"foo\"),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"a\", 123));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_Different_Objects",
        "body": "{| // arrange| var objectA = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"foo\"));| var objectB = new ObjectValueNode(| new ObjectFieldNode(\"a\", 123),| new ObjectFieldNode(\"b\", true),| new ObjectFieldNode(\"c\", \"abc\"));| // act| var result = objectA.Equals(objectB);| // assert| Assert.False(result);| }"
      },
      {
        "name": "EqualsObjectValueNode_SameLocation",
        "body": "{| // arrange| var a = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 1), });| var b = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 1), });| var c = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 2), });| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsObjectFieldNode_DifferentLocations",
        "body": "{| // arrange| var a = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 1), });| var b = new ObjectValueNode(| TestLocations.Location2,| new[] { new ObjectFieldNode(\"a\", 1), });| var c = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 2), });| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "CompareGetHashCode_WithLocations",
        "body": "{| // arrange| var a = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 1), });| var b = new ObjectValueNode(| TestLocations.Location2,| new[] { new ObjectFieldNode(\"a\", 1), });| var c = new ObjectValueNode(| TestLocations.Location1,| new[] { new ObjectFieldNode(\"a\", 2), });| var d = new ObjectValueNode(| TestLocations.Location2,| new[] { new ObjectFieldNode(\"a\", 2), });| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| }"
      }
    ]
  },
  {
    "file": "OperationDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new OperationDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var d = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new OperationDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var d = new OperationDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var adResult = SyntaxComparer.BySyntax.Equals(a, d);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(adResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var b = new OperationDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| OperationType.Query,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var c = new OperationDefinitionNode(| TestLocations.Location1,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| var d = new OperationDefinitionNode(| TestLocations.Location2,| new NameNode(\"aa\"),| OperationType.Mutation,| new List<VariableDefinitionNode>(0),| new List<DirectiveNode>(0),| new SelectionSetNode(new List<ISelectionNode>(0)));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "OperationTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "EqualsOperationTypeDefinitionNode_SameLocation",
        "body": "{| // arrange| var a = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Query,| new NamedTypeNode(\"a\"));| var b = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Query,| new NamedTypeNode(\"a\"));| var c = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Query,| new NamedTypeNode(\"b\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "EqualsOperationTypeDefinitionNode_DifferentLocations",
        "body": "{| // arrange| var a = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Query,| new NamedTypeNode(\"a\"));| var b = new OperationTypeDefinitionNode(| TestLocations.Location2,| OperationType.Query,| new NamedTypeNode(\"a\"));| var c = new OperationTypeDefinitionNode(| TestLocations.Location3,| OperationType.Query,| new NamedTypeNode(\"b\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(aaResult);| Assert.True(abResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "CompareGetHashCode_WithLocations",
        "body": "{| // arrange| var a = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Query,| new NamedTypeNode(\"a\"));| var b = new OperationTypeDefinitionNode(| TestLocations.Location2,| OperationType.Query,| new NamedTypeNode(\"a\"));| var c = new OperationTypeDefinitionNode(| TestLocations.Location1,| OperationType.Mutation,| new NamedTypeNode(\"b\"));| var d = new OperationTypeDefinitionNode(| TestLocations.Location3,| OperationType.Mutation,| new NamedTypeNode(\"b\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ScalarTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new ScalarTypeDefinitionNode(Location1, _name1, _description1, _directives);| var b = new ScalarTypeDefinitionNode(Location1, _name1, _description1, _directives);| var c = new ScalarTypeDefinitionNode(Location1, _name1, _description2, _directives);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ScalarTypeDefinitionNode(Location1, _name1, _description1, _directives);| var b = new ScalarTypeDefinitionNode(Location2, _name1, _description1, _directives);| var c = new ScalarTypeDefinitionNode(Location3, _name1, _description2, _directives);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ScalarTypeDefinitionNode(Location1, _name1, _description1, _directives);| var b = new ScalarTypeDefinitionNode(Location2, _name1, _description1, _directives);| var c = new ScalarTypeDefinitionNode(Location1, _name1, _description2, _directives);| var d = new ScalarTypeDefinitionNode(Location2, _name1, _description2, _directives);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "ScalarTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new ScalarTypeExtensionNode(TestLocations.Location1, _name1, _directives);| var b = new ScalarTypeExtensionNode(TestLocations.Location1, _name1, _directives);| var c = new ScalarTypeExtensionNode(TestLocations.Location1, _name2, _directives);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new ScalarTypeExtensionNode(TestLocations.Location1, _name1, _directives);| var b = new ScalarTypeExtensionNode(TestLocations.Location2, _name1, _directives);| var c = new ScalarTypeExtensionNode(TestLocations.Location3, _name2, _directives);| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new ScalarTypeExtensionNode(TestLocations.Location1, _name1, _directives);| var b = new ScalarTypeExtensionNode(TestLocations.Location2, _name1, _directives);| var c = new ScalarTypeExtensionNode(TestLocations.Location1, _name2, _directives);| var d = new ScalarTypeExtensionNode(TestLocations.Location2, _name2, _directives);| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "SchemaCoordinateNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var b = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var c = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new NameNode(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var b = new SchemaCoordinateNode(| new Location(2, 2, 2, 2),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var c = new SchemaCoordinateNode(| new Location(3, 3, 3, 3),| false,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new NameNode(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var b = new SchemaCoordinateNode(| new Location(2, 2, 2, 2),| false,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new NameNode(\"aa\"));| var c = new SchemaCoordinateNode(| new Location(1, 1, 1, 1),| false,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new NameNode(\"bb\"));| var d = new SchemaCoordinateNode(| new Location(2, 2, 2, 2),| false,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new NameNode(\"bb\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "SchemaCoordinateTests.cs",
    "methods": [
      {
        "name": "Create_Type_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"Abc\", \"def\", \"ghi\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Field_Argument_SchemaCoordinate_Without_MemberName",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", argumentName: \"def\");| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"argumentName\", ex.ParamName);| Assert.StartsWith(| \"A argument name without a member name is only allowed on directive coordinates\",| ex.Message);| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = new SchemaCoordinate(\"abc\", argumentName: \"def\", ofDirective: true);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      },
      {
        "name": "Create_Directive_SchemaCoordinate_With",
        "body": "{| // arrange & act| void Fail() => new SchemaCoordinate(\"abc\", memberName: \"def\", ofDirective: true);| // assert| var ex = Assert.Throws<ArgumentException>(Fail);| Assert.Equal(\"memberName\", ex.ParamName);| Assert.StartsWith(\"A directive cannot contain a member name.\", ex.Message);| }"
      },
      {
        "name": "Parse_SchemaCoordinate",
        "body": "{| // arrange & act| var coordinate = SchemaCoordinate.Parse(\"Abc.def\");| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "Parse_Invalid_SchemaCoordinate",
        "body": "{| // arrange & act| void Fail() => SchemaCoordinate.Parse(\"...\");| // assert| Assert.Throws<SyntaxException>(Fail);| }"
      },
      {
        "name": "TryParse_SchemaCoordinate",
        "body": "{| // arrange & act| var success = SchemaCoordinate.TryParse(\"Abc.def\", out var coordinate);| // assert| Assert.True(success);| Assert.Equal(\"Abc\", coordinate?.Name);| Assert.Equal(\"def\", coordinate?.MemberName);| Assert.Equal(\"Abc.def\", coordinate?.ToString());| }"
      },
      {
        "name": "FromSyntax_Type_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"Abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"Abc.def\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Field_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"Abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.MemberName);| Assert.Equal(\"ghi\", coordinate.ArgumentName);| Assert.Equal(\"Abc.def(ghi:)\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, null);| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"@abc\", coordinate.ToString());| }"
      },
      {
        "name": "FromSyntax_Directive_Argument_SchemaCoordinate",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, true, new(\"abc\"), null, new(\"def\"));| // act| var coordinate = SchemaCoordinate.FromSyntax(node);| // assert| Assert.Equal(\"abc\", coordinate.Name);| Assert.Equal(\"def\", coordinate.ArgumentName);| Assert.Equal(\"@abc(def:)\", coordinate.ToString());| }"
      }
    ]
  },
  {
    "file": "SchemaDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaDefinitionNode(| new Location(2, 2, 2, 2),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaDefinitionNode(| new Location(3, 3, 3, 3),| new StringValueNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaDefinitionNode(| new Location(2, 2, 2, 2),| new StringValueNode(\"aa\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaDefinitionNode(| new Location(1, 1, 1, 1),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var d = new SchemaDefinitionNode(| new Location(2, 2, 2, 2),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "SchemaExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaExtensionNode(| new Location(2, 2, 2, 2),| new List<DirectiveNode>(0),| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaExtensionNode(| new Location(3, 3, 3, 3),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode> { new(\"aa\"), },| new List<OperationTypeDefinitionNode>(0));| var b = new SchemaExtensionNode(| new Location(2, 2, 2, 2),| new List<DirectiveNode> { new(\"aa\"), },| new List<OperationTypeDefinitionNode>(0));| var c = new SchemaExtensionNode(| new Location(1, 1, 1, 1),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| var d = new SchemaExtensionNode(| new Location(2, 2, 2, 2),| new List<DirectiveNode> { new(\"bb\"), },| new List<OperationTypeDefinitionNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "SelectionSetNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>(0));| var b = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>(0));| var c = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>(0));| var b = new SelectionSetNode(| new Location(2, 2, 2, 2),| new List<ISelectionNode>(0));| var c = new SelectionSetNode(| new Location(3, 3, 3, 3),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| var b = new SelectionSetNode(| new Location(2, 2, 2, 2),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"aa\"),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| var c = new SelectionSetNode(| new Location(1, 1, 1, 1),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| var d = new SelectionSetNode(| new Location(2, 2, 2, 2),| new List<ISelectionNode>| {| new FieldNode(TestLocations.Location1,| new NameNode(\"bb\"),| new NameNode(\"bb\"),| new List<DirectiveNode>(0),| new List<ArgumentNode>(0),| new SelectionSetNode(| TestLocations.Location1,| new List<ISelectionNode>(0))),| });| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      },
      {
        "name": "CreateSelectionSet",
        "body": "{| // arrange| var location = AstTestHelper.CreateDummyLocation();| var selections = new List<ISelectionNode>| {| new FieldNode| (| null,| new NameNode(\"bar\"),| null,| Array.Empty<DirectiveNode>(),| Array.Empty<ArgumentNode>(),| null| ),| };| // act| var selectionSet = new SelectionSetNode| (| location,| selections| );| // assert| selectionSet.MatchSnapshot();| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var location = AstTestHelper.CreateDummyLocation();| var selections = new List<ISelectionNode>| {| new FieldNode| (| null,| new NameNode(\"bar\"),| null,| Array.Empty<DirectiveNode>(),| Array.Empty<ArgumentNode>(),| null| ),| };| var selectionSet = new SelectionSetNode| (| null,| selections| );| // act| selectionSet = selectionSet.WithLocation(location);| // assert| selectionSet.MatchSnapshot();| }"
      },
      {
        "name": "WithSelections",
        "body": "{| // arrange| var location = AstTestHelper.CreateDummyLocation();| var selections = new List<ISelectionNode>| {| new FieldNode| (| null,| new NameNode(\"bar\"),| null,| Array.Empty<DirectiveNode>(),| Array.Empty<ArgumentNode>(),| null| ),| };| var selectionSet = new SelectionSetNode| (| location,| selections| );| // act| selectionSet = selectionSet.WithSelections(| new List<ISelectionNode>| {| new FieldNode| (| null,| new NameNode(\"baz\"),| null,| Array.Empty<DirectiveNode>(),| Array.Empty<ArgumentNode>(),| null| ),| });| // assert| selectionSet.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "StringValueNodeTests.cs",
    "methods": [
      {
        "name": "Create_StringValueNode_1",
        "body": "{| // arrange| // act| var value = new StringValueNode(\"abc\");| // assert| Assert.Equal(\"abc\", value.Value);| Assert.False(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Null(value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "Create_StringValueNode_2_Location_Is_Null",
        "body": "{| // arrange| // act| var value = new StringValueNode(null, \"abc\", true);| // assert| Assert.Equal(\"abc\", value.Value);| Assert.True(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Null(value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "Create_StringValueNode_2_With_Location",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| // act| var value = new StringValueNode(location, \"abc\", true);| // assert| Assert.Equal(\"abc\", value.Value);| Assert.True(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Same(location, value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "Create_StringValueNode_3_Location_Is_Null",
        "body": "{| // arrange| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| // act| var value = new StringValueNode(null, stringValue, true);| // assert| Assert.Equal(\"abc\", value.Value);| Assert.True(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Null(value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "Create_StringValueNode_3_With_Location",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| // act| var value = new StringValueNode(location, stringValue, true);| // assert| Assert.Equal(\"abc\", value.Value);| Assert.True(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Same(location, value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "StringValueNode_Equals_To_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| var value = new StringValueNode(location, stringValue, true);| // act| var equals = value.Equals(null);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "StringValueNode_Equals_To_Same",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| var value = new StringValueNode(location, stringValue, true);| // act| var equals = value.Equals(value);| // assert| Assert.True(equals);| }"
      },
      {
        "name": "ValueNode_Equals_To_Null",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| var value = new StringValueNode(location, stringValue, true);| // act| var equals = value.Equals((IValueNode)null!, Syntax);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "ValueNode_Equals_To_Same",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| var value = new StringValueNode(location, stringValue, true);| // act| var equals = value.Equals((IValueNode)value);| // assert| Assert.True(equals);| }"
      },
      {
        "name": "ValueNode_Equals_To_Int",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var stringValue = Encoding.UTF8.GetBytes(\"abc\");| var value = new StringValueNode(location, stringValue, true);| // act| var equals = value.Equals(new IntValueNode(123), Syntax);| // assert| Assert.False(equals);| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var location = new Location(1, 1, 1, 1);| var value = new StringValueNode(\"abc\");| // act| value = value.WithLocation(location);| // assert| Assert.Equal(\"abc\", value.Value);| Assert.False(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Same(location, value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "WithValue_1",
        "body": "{| // arrange| var value = new StringValueNode(\"abc\");| // act| value = value.WithValue(\"def\");| // assert| Assert.Equal(\"def\", value.Value);| Assert.False(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Null(value.Location);| Assert.Empty(value.GetNodes());| }"
      },
      {
        "name": "WithValue_2",
        "body": "{| // arrange| var value = new StringValueNode(\"abc\");| Assert.False(value.Block);| // act| value = value.WithValue(\"def\", true);| // assert| Assert.Equal(\"def\", value.Value);| Assert.True(value.Block);| Assert.Equal(SyntaxKind.StringValue, value.Kind);| Assert.Null(value.Location);| Assert.Empty(value.GetNodes());| }"
      }
    ]
  },
  {
    "file": "UnionTypeDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var b = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var c = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var b = new UnionTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var c = new UnionTypeDefinitionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var b = new UnionTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"bb\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var c = new UnionTypeDefinitionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var d = new UnionTypeDefinitionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new StringValueNode(\"cc\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "UnionTypeExtensionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var b = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var c = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var b = new UnionTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode>(0),| new List<NamedTypeNode>(0));| var c = new UnionTypeExtensionNode(| new Location(3, 3, 3, 3),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0));| var b = new UnionTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"bb\"), },| new List<NamedTypeNode>(0));| var c = new UnionTypeExtensionNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"cc\"), },| new List<NamedTypeNode>(0));| var d = new UnionTypeExtensionNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"),| new List<DirectiveNode> { new(\"cc\"), },| new List<NamedTypeNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      }
    ]
  },
  {
    "file": "QuerySyntaxPrinterTests.cs",
    "methods": [
      {
        "name": "Serialize_ShortHandQueryNoIndentation_InOutShouldBeTheSame",
        "body": "{| // arrange| const string query =| \"\"\"| { foo(s: \"String\") { bar @foo { baz @foo @bar } } }| \"\"\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString(false);| // assert| Assert.Equal(query, result);| }"
      },
      {
        "name": "Serialize_ShortHandQueryWithIndentation_OutputIsFormatted",
        "body": "{| // arrange| const string query =| \"\"\"| { foo(s: \"String\") { bar @foo { baz @foo @bar } } }| \"\"\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString(false);| // assert| Assert.Equal(query, result);| }"
      },
      {
        "name": "Serialize_ShortHandQueryWithIndentation_LineBetweenFields",
        "body": "{| // arrange| const string query = \"{ foo { foo bar { foo @foo @bar bar @bar baz } } }\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithIndentation_OutputIsFormatted",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithoutIndentation_OutputIsOneLine",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithIndentation_CanBeParsed",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithoutIndentation_CanBeParsed",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var serializedQuery = queryDocument.ToString();| // assert| var parsedQuery = Utf8GraphQLParser.Parse(serializedQuery);| Assert.Equal(serializedQuery, parsedQuery.ToString());| }"
      },
      {
        "name": "Serialize_QueryWithVarDeclaration_InOutShouldBeTheSame",
        "body": "{| // arrange| const string query =| \"\"\"| query Foo($bar: [String!]!) { foo(s: \"String\") { bar @foo { baz @foo @bar } } }| \"\"\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var serializedQuery = queryDocument.ToString(false);| // assert| Assert.Equal(query, serializedQuery);| }"
      },
      {
        "name": "Serialize_FragmentWithVariableDefs_InOutShouldBeTheSame",
        "body": "{| // arrange| var query = \"fragment Foo ($bar: [String!]!) on Bar { baz }\";| var queryDocument = Utf8GraphQLParser.Parse(query,| new ParserOptions(allowFragmentVariables: true));| // act| var result = queryDocument.ToString(false);| // assert| Assert.Equal(query, result);| }"
      },
      {
        "name": "Serialize_QueryWithDirectivesOnVariables_InOutShouldBeTheSame",
        "body": "{| // arrange| const string query =| \"\"\"| query Foo($variable: String @foo) { foo(a: $variable) }| \"\"\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var result = queryDocument.ToString(false);| // assert| Assert.Equal(query, result);| }"
      }
    ]
  },
  {
    "file": "SchemaSyntaxPrinterTests.cs",
    "methods": [
      {
        "name": "Serialize_ObjectTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"type Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"type Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithArgsNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"type Foo { bar(a: Int = 1 b: Int): String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithArgsWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"type Foo { bar(a: Int = 1 b: Int): String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithDirectivesNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"type Foo @a(x: \\\"y\\\") { bar: String baz: [Int] } \" +| \"type Foo @a @b { bar: String @foo \" +| \"baz(a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithDirectivesWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"type Foo @a(x: \\\"y\\\") { bar: String baz: [Int] } \" +| \"type Foo @a @b { bar: String @foo \" +| \"baz(a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithDescriptionNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" type Foo @a { \\\"abc\\\" bar: String \" +| \"\\\"abc\\\" baz: [Int] } \" +| \"\\\"abc\\\" type Foo @a @b { \\\"abc\\\" bar: String @foo \" +| \"\\\"abc\\\" baz(\\\"abc\\\" a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ObjectTypeDefWithDescriptionWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" type Foo @a { \\\"abc\\\" bar: String \" +| \"\\\"abc\\\" baz: [Int] } \" +| \"\\\"abc\\\" type Foo @a @b { \\\"abc\\\" bar: String @foo \" +| \"\\\"abc\\\" baz(\\\"abc\\\" a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ObjectTypeImplementsXYZ_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"type Foo implements X & Y & Z \" +| \"{ bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ObjectTypeImplementsXYZWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"type Foo implements X & Y & Z \" +| \"{ bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ObjectTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend type Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"interface Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"interface Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithArgsNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"interface Foo { bar(a: Int = 1 b: Int): String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithArgsWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"interface Foo { bar(a: Int = 1 b: Int): String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithDirectivesNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"interface Foo @a(x: \\\"y\\\") { bar: String baz: [Int] } \" +| \"interface Foo @a @b { bar: String @foo \" +| \"baz(a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithDirectivesWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"interface Foo @a(x: \\\"y\\\") { bar: String baz: [Int] } \" +| \"interface Foo @a @b { bar: String @foo \" +| \"baz(a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithDescriptionNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" interface Foo @a { \\\"abc\\\" bar: String \" +| \"\\\"abc\\\" baz: [Int] } \" +| \"\\\"abc\\\" interface Foo @a @b { \\\"abc\\\" bar: String @foo \" +| \"\\\"abc\\\" baz(\\\"abc\\\" a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeDefWithDescriptionWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" interface Foo @a { \\\"abc\\\" bar: String \" +| \"\\\"abc\\\" baz: [Int] } \" +| \"\\\"abc\\\" interface Foo @a @b { \\\"abc\\\" bar: String @foo \" +| \"\\\"abc\\\" baz(\\\"abc\\\" a: String = \\\"abc\\\"): [Int] @foo @bar }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InterfaceTypeImplementsXYZ_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"interface Foo implements X & Y & Z \" +| \"{ bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InterfaceTypeImplementsXYZWithIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"interface Foo implements X & Y & Z \" +| \"{ bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InterfaceTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend interface Foo { bar: String baz: [Int] }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_UnionTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"union A = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_UnionTypeDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"union A = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_UnionTypeDefWithDirectiveNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"union A @a = B | C union A @a @b = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_UnionTypeWithDirectiveDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"union A @a = B | C union A @a @b = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_UnionTypeDefWithDescriptionNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" union A = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_UnionTypeDefWithDescriptionNoIndented_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\"union A = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_UnionTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend union A = B | C\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_EnumTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"enum A { B C }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_EnumTypeDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"enum A { B C }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_EnumTypeDefWithDirectiveNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"enum A @a @b(c: 1) { B @a @b(c: 1) C @a @b(c: 1) }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_EnumTypeWithDirectiveDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"enum A @a @b(c: 1) { B @a @b(c: 1) C @a @b(c: 1) }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_EnumTypeDefWithDescriptionNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" enum A { \\\"def\\\" B \\\"ghi\\\" C }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_EnumTypeDefWithDescriptionNoIndented_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" enum A { \\\"def\\\" B \\\"ghi\\\" C }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_EnumTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend enum A { B C }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InputObjectTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"input A { b: String c: [String!]! d: Int = 1 }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InputObjectTypeDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"input A { b: String c: [String!]! d: Int = 1 }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InputObjectTypeDefWithDirectiveNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"input A @a @b(c: 1) { b: String @a @b(c: 1) \" +| \"c: [String!]! @a @b(c: 1) d: Int = 1 @a @b(c: 1) }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InputObjectTypeWithDirectiveDefNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"input A @a @b(c: 1) { b: String @a @b(c: 1) \" +| \"c: [String!]! @a @b(c: 1) d: Int = 1 @a @b(c: 1) }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InputObjectTypeDefWithDescriptionNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" input A { \\\"abc\\\" b: String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_InputObjectTypeDefWithDescriptionNoIndentt_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" input A { \\\"abc\\\" b: String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_InputObjectTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend input A { b: String }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ScalarTypeDefNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"scalar A\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ScalarTypeDefWithDirectiveNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"scalar A @a @b(c: 1)\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ScalarTypeDefWithDescNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" scalar A @a @b(c: 1)\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_ScalarTypeDefWithDescIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"\\\"abc\\\" scalar A @a @b(c: 1)\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString();| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ScalarTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend scalar A @a @b(c: 1)\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_SchemaDefWithOpNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"schema { query: A }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_SchemaDefWithOpNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"schema { query: A }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_SchemaDefWithOpAndDirecNoIndent_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"schema @a @b(c: 1) { query: A }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      },
      {
        "name": "Serialize_SchemaDefWithOpAndDirecNoIndent_OutHasIndentation",
        "body": "{| // arrange| var schema = \"schema @a @b(c: 1) { query: A }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_SchemaTypeExtensionDef_InOutShouldBeTheSame",
        "body": "{| // arrange| var schema = \"extend schema { query: A }\";| var document = Utf8GraphQLParser.Parse(schema);| // act| var result = document.ToString(false);| // assert| Assert.Equal(schema, result);| }"
      }
    ]
  },
  {
    "file": "VariableDefinitionNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var b = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var c = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"bb\"),| default,| new List<DirectiveNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var b = new VariableDefinitionNode(| new Location(2, 2, 2, 2),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var c = new VariableDefinitionNode(| new Location(3, 3, 3, 3),| new VariableNode(\"aa\"),| new NamedTypeNode(\"bb\"),| default,| new List<DirectiveNode>(0));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var b = new VariableDefinitionNode(| new Location(2, 2, 2, 2),| new VariableNode(\"aa\"),| new NamedTypeNode(\"aa\"),| default,| new List<DirectiveNode>(0));| var c = new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(\"aa\"),| new NamedTypeNode(\"bb\"),| default,| new List<DirectiveNode>(0));| var d = new VariableDefinitionNode(| new Location(2, 2, 2, 2),| new VariableNode(\"aa\"),| new NamedTypeNode(\"bb\"),| default,| new List<DirectiveNode>(0));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      },
      {
        "name": "Create_VariableIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action()| => new VariableDefinitionNode(| new Location(1, 1, 1, 1),| null!,| new NamedTypeNode(new NameNode(\"foo\")),| new StringValueNode(\"Foo\"),| new List<DirectiveNode>());| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_TypeIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action()| => new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(new NameNode(\"foo\")),| null!,| new StringValueNode(\"Foo\"),| new List<DirectiveNode>());| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_DirectivesIsNull_ArgumentNullException",
        "body": "{| // arrange| // act| void Action()| => new VariableDefinitionNode(| new Location(1, 1, 1, 1),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"foo\")),| new StringValueNode(\"Foo\"),| null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_ArgumentsArePassedCorrectly",
        "body": "{| // arrange| // act| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithLocation",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // act| variableDefinition =| variableDefinition.WithLocation(| new Location(6, 7, 8, 9));| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithVariable",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode>| {| new DirectiveNode(\"qux\"),| });| // act| variableDefinition =| variableDefinition.WithVariable(| new VariableNode(new NameNode(\"quux\")));| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithVariable_VariableIsNull_ArgumentException",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode>| {| new DirectiveNode(\"qux\"),| });| // act| void Action() => variableDefinition.WithVariable(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "WithType",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // act| variableDefinition =| variableDefinition.WithType(| new NamedTypeNode(new NameNode(\"quux\")));| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithType_TypeIsNull_ArgumentException",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode>| {| new DirectiveNode(\"qux\"),| });| // act| void Action() => variableDefinition.WithType(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "WithDefaultValue",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // act| variableDefinition =| variableDefinition.WithDefaultValue(| new StringValueNode(\"quux\"));| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithDirectives",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // act| variableDefinition =| variableDefinition.WithDirectives(| new List<DirectiveNode> { new(\"quux\"), });| // assert| variableDefinition.MatchSnapshot();| }"
      },
      {
        "name": "WithDirectives_TypeIsNull_ArgumentException",
        "body": "{| // arrange| var variableDefinition = new VariableDefinitionNode(| new Location(1, 2, 3, 5),| new VariableNode(new NameNode(\"foo\")),| new NamedTypeNode(new NameNode(\"bar\")),| new StringValueNode(\"baz\"),| new List<DirectiveNode> { new(\"qux\"), });| // act| void Action() => variableDefinition.WithDirectives(null!);| // assert| Assert.Throws<ArgumentNullException>((Action) Action);| }"
      }
    ]
  },
  {
    "file": "VariableNodeTests.cs",
    "methods": [
      {
        "name": "Equals_With_Same_Location",
        "body": "{| // arrange| var a = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"));| var b = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"));| var c = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "Equals_With_Different_Location",
        "body": "{| // arrange| var a = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"));| var b = new VariableNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"));| var c = new VariableNode(| new Location(3, 3, 3, 3),| new NameNode(\"bb\"));| // act| var abResult = SyntaxComparer.BySyntax.Equals(a, b);| var aaResult = SyntaxComparer.BySyntax.Equals(a, a);| var acResult = SyntaxComparer.BySyntax.Equals(a, c);| var aNullResult = SyntaxComparer.BySyntax.Equals(a, default);| // assert| Assert.True(abResult);| Assert.True(aaResult);| Assert.False(acResult);| Assert.False(aNullResult);| }"
      },
      {
        "name": "GetHashCode_With_Location",
        "body": "{| // arrange| var a = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"aa\"));| var b = new VariableNode(| new Location(2, 2, 2, 2),| new NameNode(\"aa\"));| var c = new VariableNode(| new Location(1, 1, 1, 1),| new NameNode(\"bb\"));| var d = new VariableNode(| new Location(2, 2, 2, 2),| new NameNode(\"bb\"));| // act| var aHash = SyntaxComparer.BySyntax.GetHashCode(a);| var bHash = SyntaxComparer.BySyntax.GetHashCode(b);| var cHash = SyntaxComparer.BySyntax.GetHashCode(c);| var dHash = SyntaxComparer.BySyntax.GetHashCode(d);| // assert| Assert.Equal(aHash, bHash);| Assert.NotEqual(aHash, cHash);| Assert.Equal(cHash, dHash);| Assert.NotEqual(aHash, dHash);| }"
      },
      {
        "name": "Create_Name_Foo_NameIsPassed",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| // act| var node = new VariableNode(name);| // assert| Assert.Equal(name, node.Name);| }"
      },
      {
        "name": "Create_Name_NullFoo_NameIsPassed",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| // act| var node = new VariableNode(null, name);| // assert| Assert.Equal(name, node.Name);| }"
      },
      {
        "name": "Create_Name_LocationFoo_LocationAndNameIsPassed",
        "body": "{| // arrange| var name = new NameNode(\"foo\");| var location = AstTestHelper.CreateDummyLocation();| // act| var node = new VariableNode(location, name);| // assert| Assert.Equal(location, node.Location);| Assert.Equal(name, node.Name);| }"
      },
      {
        "name": "Create_Name_Null_ArgumentNullException",
        "body": "{| // arrange| // act| VariableNode Action() => new((NameNode)null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Create_Name_LocationNull_ArgumentNullException",
        "body": "{| // arrange| var location = AstTestHelper.CreateDummyLocation();| // act| VariableNode Action() => new(location, null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "WithName_Bar_NewObjectHasNewName",
        "body": "{| // arrange| var foo = new NameNode(\"foo\");| var bar = new NameNode(\"bar\");| var node = new VariableNode(foo);| // act| node = node.WithName(bar);| // assert| Assert.Equal(bar, node.Name);| }"
      },
      {
        "name": "WithLocation_Location_NewObjectHasNewLocation",
        "body": "{| // arrange| var foo = new NameNode(\"foo\");| var node = new VariableNode(foo);| var location = AstTestHelper.CreateDummyLocation();| // act| node = node.WithLocation(location);| // assert| Assert.Equal(location, node.Location);| }"
      }
    ]
  },
  {
    "file": "GraphQLConstantsTests.cs",
    "methods": [
      {
        "name": "IsLetterOrUnderscore",
        "body": "{| for (var c = 'a'; c <= 'z'; c++)| {| Assert.True(GraphQLConstants.IsLetterOrUnderscore((byte)c));| }| for (var c = 'A'; c <= 'Z'; c++)| {| Assert.True(GraphQLConstants.IsLetterOrUnderscore((byte)c));| }| Assert.True(GraphQLConstants.IsLetterOrUnderscore((byte)'_'));| }"
      },
      {
        "name": "IsLetterOrDigitOrUnderscore",
        "body": "{| for (var c = 'a'; c <= 'z'; c++)| {| Assert.True(GraphQLConstants.IsLetterOrDigitOrUnderscore((byte)c));| }| for (var c = 'A'; c <= 'Z'; c++)| {| Assert.True(GraphQLConstants.IsLetterOrDigitOrUnderscore((byte)c));| }| for (var c = '0'; c <= '9'; c++)| {| Assert.True(GraphQLConstants.IsLetterOrDigitOrUnderscore((byte)c));| }| Assert.True(GraphQLConstants.IsLetterOrDigitOrUnderscore((byte)'_'));| }"
      }
    ]
  },
  {
    "file": "BlockStringHelperTests.cs",
    "methods": [
      {
        "name": "TrimLeadingEmptyLines",
        "body": "{| // arrange| var blockString = \"\\n\\n\\n\\nblock string uses \";| var input = Encoding.UTF8.GetBytes(blockString);| var output = new Span<byte>(new byte[input.Length]);| // act| StringHelper.TrimBlockStringToken(input, ref output);| // assert| Assert.Equal(| \"block string uses \",| Encoding.UTF8.GetString(output.ToArray()));| }"
      },
      {
        "name": "NoTrimNeeded",
        "body": "{| // arrange| var blockString = \"foo\";| var input = Encoding.UTF8.GetBytes(blockString);| var output = new Span<byte>(new byte[input.Length]);| // act| StringHelper.TrimBlockStringToken(input, ref output);| // assert| Assert.Equal(| blockString,| Encoding.UTF8.GetString(output.ToArray()));| }"
      },
      {
        "name": "TrimTrailingEmptyLines",
        "body": "{| // arrange| var blockString = \"block string uses \\n\\n\\n\\n\";| var input = Encoding.UTF8.GetBytes(blockString);| var output = new Span<byte>(new byte[input.Length]);| // act| StringHelper.TrimBlockStringToken(input, ref output);| // assert| Assert.Equal(| \"block string uses \",| Encoding.UTF8.GetString(output.ToArray()));| }"
      },
      {
        "name": "SingleLineSingleChar_Does_Not_Loop",
        "body": "{| // arrange| var blockString = \".\";| var input = Encoding.UTF8.GetBytes(blockString);| var output = new Span<byte>(new byte[input.Length]);| // act| StringHelper.TrimBlockStringToken(input, ref output);| // assert| Assert.Equal(| \".\",| Encoding.UTF8.GetString(output.ToArray()));| }"
      }
    ]
  },
  {
    "file": "BlockStringTokenReaderTests.cs",
    "methods": [
      {
        "name": "ReadToken",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"helloWorld_123\\r\\n\\t\\tfoo\\r\\n\\tbar\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(| \"helloWorld_123\\r\\n\\t\\tfoo\\r\\n\\tbar\",| Utf8GraphQLReader.GetString(reader.Value));| Assert.Equal(| \"helloWorld_123\\n\\tfoo\\nbar\",| reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(32, reader.End);| }"
      },
      {
        "name": "ReadToken_WithEscapedTrippleQuote1_EscapeIsReplacedWithActualQuotes",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"\\\\\\\"\\\"\\\"helloWorld_123\\r\\n\\t\\tfoo\\r\\n\\tbar\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(| \"\\\"\\\"\\\"helloWorld_123\\n\\tfoo\\nbar\",| reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(36, reader.End);| }"
      },
      {
        "name": "ReadToken_WithEscapedTrippleQuote2_EscapeIsReplacedWithActualQuotes",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"hello\\\\\\\"\\\"\\\"World_123\\r\\n\\t\\tfoo\\r\\n\\tbar\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(| \"hello\\\"\\\"\\\"World_123\\n\\tfoo\\nbar\",| reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(36, reader.End);| }"
      },
      {
        "name": "ReadToken_WithLeadingBlanks_BlanksAreRemoved",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"\\r\\n\\t\\r\\n\\t\\r\\n\\thelloWorld_123\" +| \"\\r\\n\\t\\tfoo\\r\\n\\tbar\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(| \"helloWorld_123\\n\\tfoo\\nbar\",| reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(41, reader.End);| }"
      },
      {
        "name": "ReadToken_WithTrailingBlanks_BlanksAreRemoved",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"helloWorld_123\\r\\n\\t\\tfoo\\r\\n\\tbar\" +| \"\\r\\n\\t\\r\\n\\t\\r\\n\\t\\r\\n\\t\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(| \"helloWorld_123\\n\\tfoo\\nbar\",| reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(44, reader.End);| }"
      },
      {
        "name": "ReadToken_SingleLine_ParsesCorrectly",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\\\"\\\"\\\"helloWorld_123\\\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(\"helloWorld_123\", reader.GetString());| Assert.Equal(TokenKind.BlockString, reader.Kind);| Assert.Equal(1, reader.Line);| Assert.Equal(1, reader.Column);| Assert.Equal(0, reader.Start);| Assert.Equal(19, reader.End);| }"
      },
      {
        "name": "UnescapeEmpty",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"\\\"\\\"\");| var reader = new Utf8GraphQLReader(source);| reader.Read();| // act| var buffer = new byte[1];| var span = buffer.AsSpan();| reader.UnescapeValue(ref span);| // assert| Assert.Equal(0, span.Length);| }"
      },
      {
        "name": "UnescapeString",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"\\\"abc\\\"\");| var reader = new Utf8GraphQLReader(source);| reader.Read();| // act| var buffer = new byte[3 * 4];| var span = buffer.AsSpan();| reader.UnescapeValue(ref span);| // assert| Assert.Equal(3, span.Length);| Assert.Equal(\"abc\", Utf8GraphQLReader.GetString(span));| }"
      },
      {
        "name": "UnexpectedSyntaxException",
        "body": "{| // arrange| var source = new byte[] { 187, };| var reader = new Utf8GraphQLReader(source);| var raised = false;| // act| try| {| reader.Read();| }| catch (SyntaxException ex)| {| raised = true;| ex.Message.MatchSnapshot();| }| // assert| Assert.True(raised);| }"
      },
      {
        "name": "NoDigitAfterZeroException",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"01\");| var reader = new Utf8GraphQLReader(source);| var raised = false;| // act| try| {| reader.Read();| }| catch (SyntaxException ex)| {| raised = true;| ex.Message.MatchSnapshot();| }| // assert| Assert.True(raised);| }"
      },
      {
        "name": "InvalidDigit",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"123.F\");| var reader = new Utf8GraphQLReader(source);| var raised = false;| // act| try| {| reader.Read();| }| catch (SyntaxException ex)| {| raised = true;| ex.Message.MatchSnapshot();| }| // assert| Assert.True(raised);| }"
      },
      {
        "name": "Zero",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"0 \");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Equal(\"0\", reader.GetScalarValue());| Assert.Equal(TokenKind.Integer, reader.Kind);| }"
      }
    ]
  },
  {
    "file": "CommentTokenReaderTests.cs",
    "methods": [
      {
        "name": "EmptyComment",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\"#\\n\");| var reader = new Utf8GraphQLReader(source);| // act| reader.Read();| // assert| Assert.Empty(reader.GetComment());| Assert.Equal(TokenKind.Comment, reader.Kind);| }"
      }
    ]
  },
  {
    "file": "DirectiveParserTests.cs",
    "methods": [
      {
        "name": "ParseUniqueDirective",
        "body": "{| // arrange| var text = \"directive @skip(if: Boolean!) \" +| \"on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\";| var parser = new Utf8GraphQLParser(Encoding.UTF8.GetBytes(text));| // assert| var document = parser.Parse();| // assert| var directiveDefinition = document.Definitions| .OfType<DirectiveDefinitionNode>().FirstOrDefault();| Assert.NotNull(directiveDefinition);| Assert.False(directiveDefinition.IsRepeatable);| }"
      },
      {
        "name": "ParseRepeatableDirective",
        "body": "{| // arrange| var text = \"directive @skip(if: Boolean!) repeatable \" +| \"on FIELD | FRAGMENT_SPREAD | INLINE_FRAGMENT\";| var parser = new Utf8GraphQLParser(Encoding.UTF8.GetBytes(text));| // assert| var document = parser.Parse();| // assert| var directiveDefinition = document.Definitions| .OfType<DirectiveDefinitionNode>().FirstOrDefault();| Assert.NotNull(directiveDefinition);| Assert.True(directiveDefinition.IsRepeatable);| }"
      },
      {
        "name": "ParseDescription",
        "body": "{| // arrange| var text = @\"| \"\"\"\"\"\"| Description| \"\"\"\"\"\"| directive @foo(bar:String!) on FIELD_DEFINITION| \";| var parser = new Utf8GraphQLParser(Encoding.UTF8.GetBytes(text));| // assert| var document = parser.Parse();| // assert| var directiveDefinition = document.Definitions| .OfType<DirectiveDefinitionNode>().FirstOrDefault();| Assert.NotNull(directiveDefinition);| Assert.Equal(\"Description\", directiveDefinition.Description!.Value);| }"
      },
      {
        "name": "DirectiveOrderIsSignificant",
        "body": "{| // arrange| var text = \"type Query { field: String @a @b @c }\";| var parser = new Utf8GraphQLParser(Encoding.UTF8.GetBytes(text));| // assert| var document = parser.Parse();| // assert| var type = document.Definitions| .OfType<ObjectTypeDefinitionNode>().FirstOrDefault();| Assert.NotNull(type?.Fields.Single().Directives);| Assert.Collection(type.Fields.Single().Directives,| t => Assert.Equal(\"a\", t.Name.Value),| t => Assert.Equal(\"b\", t.Name.Value),| t => Assert.Equal(\"c\", t.Name.Value));| }"
      },
      {
        "name": "ParseQueryDirective",
        "body": "{| // arrange| var text = @\"| query ($var: Boolean) @onQuery {| field| }| \";| // act| var document = Utf8GraphQLParser.Parse(| Encoding.UTF8.GetBytes(text));| // assert| document.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ErrorTests.cs",
    "methods": [
      {
        "name": "WithCode",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithCode(\"foo\");| // assert| Assert.Equal(\"foo\", error.Code);| }"
      },
      {
        "name": "RemoveCode",
        "body": "{| // arrange| IError error = new Error(\"123\", code: \"foo\");| // act| error = error.RemoveCode();| // assert| Assert.Null(error.Code);| }"
      },
      {
        "name": "WithException",
        "body": "{| // arrange| IError error = new Error| (| \"123\"| );| var exception = new Exception();| // act| error = error.WithException(exception);| // assert| Assert.Equal(exception, error.Exception);| }"
      },
      {
        "name": "RemoveException",
        "body": "{| // arrange| IError error = new Error| (| \"123\",| exception: new Exception()| );| Assert.NotNull(error.Exception);| // act| error = error.RemoveException();| // assert| Assert.Null(error.Exception);| }"
      },
      {
        "name": "WithExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithExtensions(| new Dictionary<string, object?> { { \"a\", \"b\" }, });| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| });| }"
      },
      {
        "name": "AddExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.SetExtension(\"a\", \"b\").SetExtension(\"c\", \"d\");| // assert| Assert.Collection(| error.Extensions!.OrderBy(t => t.Key),| t =>| {| Assert.Equal(\"a\", t.Key);| Assert.Equal(\"b\", t.Value);| },| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "RemoveExtensions",
        "body": "{| // arrange| IError error = new Error(\"123\");| error = error.WithExtensions(| new Dictionary<string, object?>| {| { \"a\", \"b\" },| { \"c\", \"d\" },| });| // act| error = error.RemoveExtension(\"a\");| // assert| Assert.Collection(| error.Extensions!,| t =>| {| Assert.Equal(\"c\", t.Key);| Assert.Equal(\"d\", t.Value);| });| }"
      },
      {
        "name": "WithLocations",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithLocations(new List<Location> { new(1, 2), });| // assert| Assert.Collection(| error.Locations!,| t =>| {| Assert.Equal(1, t.Line);| Assert.Equal(2, t.Column);| });| }"
      },
      {
        "name": "WithMessage",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithMessage(\"456\");| // assert| Assert.Equal(\"456\", error.Message);| }"
      },
      {
        "name": "WithMessage_MessageNull_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(null!);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithMessage_MessageEmpty_ArgumentException",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| Action action = () => error.WithMessage(string.Empty);| // assert| Assert.Throws<ArgumentException>(action);| }"
      },
      {
        "name": "WithPath",
        "body": "{| // arrange| IError error = new Error(\"123\");| // act| error = error.WithPath(Path.FromList(\"foo\"));| // assert| Assert.Equal(\"/foo\", error.Path!.Print());| }"
      }
    ]
  },
  {
    "file": "GraphQLParserSyntaxTests.cs",
    "methods": [
      {
        "name": "Parse_FieldNode_From_String",
        "body": "No body available"
      },
      {
        "name": "Parse_FieldNode_From_ByteArray",
        "body": "No body available"
      },
      {
        "name": "Parse_FieldNode_From_Reader",
        "body": "{| var reader = new Utf8GraphQLReader(GetUtf8Bytes(@\"foo(a: \"\"baz\"\")\"));| reader.MoveNext();| Utf8GraphQLParser.Syntax.ParseField(reader).MatchSnapshot();| }"
      },
      {
        "name": "Parse_SelectionSetNode_From_String",
        "body": "No body available"
      },
      {
        "name": "Parse_SelectionSetNode_From_ByteArray",
        "body": "No body available"
      },
      {
        "name": "Parse_SelectionSetNode_From_Reader",
        "body": "{| var reader = new Utf8GraphQLReader(GraphQLParserSyntaxTests.GetUtf8Bytes(@\"{ foo(a: \"\"baz\"\") }\"));| reader.MoveNext();| Utf8GraphQLParser.Syntax.ParseSelectionSet(reader).MatchSnapshot();| }"
      },
      {
        "name": "Parse_ValueNode_From_String",
        "body": "No body available"
      },
      {
        "name": "Parse_ValueNode_From_ByteArray",
        "body": "No body available"
      },
      {
        "name": "Parse_ValueNode_From_Reader",
        "body": "{| var reader = new Utf8GraphQLReader(GraphQLParserSyntaxTests.GetUtf8Bytes(@\"\"\"baz\"\"\"));| reader.MoveNext();| Utf8GraphQLParser.Syntax.ParseValueLiteral(reader).MatchSnapshot();| }"
      },
      {
        "name": "Parse_ObjectValueNode_From_String",
        "body": "No body available"
      },
      {
        "name": "Parse_ObjectValueNode_From_ByteArray",
        "body": "No body available"
      },
      {
        "name": "Parse_ObjectValueNode_From_Reader",
        "body": "{| var reader = new Utf8GraphQLReader(GetUtf8Bytes(@\"{ a: 1 }\"));| reader.MoveNext();| Utf8GraphQLParser.Syntax.ParseObjectLiteral(reader).MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GraphQLRequestParserTests.cs",
    "methods": [
      {
        "name": "Utf8GraphQLRequestParser_Parse",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks());| // act| var batch = Utf8GraphQLRequestParser.Parse(source);| // assert| Assert.Collection(| batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.QueryId);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Utf8GraphQLRequestParser_ParseJson",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks());| // act| var obj = Utf8GraphQLRequestParser.ParseJson(source);| // assert| obj.MatchSnapshot();| }"
      },
      {
        "name": "Utf8GraphQLRequestParser_ParseJson_FromString",
        "body": "{| // arrange| var json = JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks();| // act| var obj = Utf8GraphQLRequestParser.ParseJson(json);| // assert| obj.MatchSnapshot();| }"
      },
      {
        "name": "Utf8GraphQLRequestParser_ParseJsonObject",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks());| // act| var obj =| Utf8GraphQLRequestParser.ParseJsonObject(source);| // assert| obj.MatchSnapshot();| }"
      },
      {
        "name": "Utf8GraphQLRequestParser_ParseJsonObject_FromString",
        "body": "{| // arrange| var json = JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks();| // act| var obj =| Utf8GraphQLRequestParser.ParseJsonObject(json);| // assert| obj.MatchSnapshot();| }"
      },
      {
        "name": "Parse_Kitchen_Sink_Query_No_Cache",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source, parserOptions);| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.QueryId);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Kitchen_Sink_Query_With_Russian_Characters",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"russian-literals.graphql\").NormalizeLineBreaks()))| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source, parserOptions);| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.QueryId);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Kitchen_Sink_Query_With_Russian_Escaped_Characters",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| FileResource.Open(\"russian_utf8_escape_characters.json\")| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source, parserOptions);| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.QueryId);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Kitchen_Sink_Query_With_Cache",
        "body": "{| // arrange| var request = new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks());| var buffer = Encoding.UTF8.GetBytes(request.Query);| var expectedHash = Convert.ToBase64String(| SHA1.Create().ComputeHash(buffer))| .Replace(\"/\", \"_\")| .Replace(\"+\", \"-\")| .TrimEnd('=');| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(request).NormalizeLineBreaks());| var cache = new DocumentCache();| var requestParser = new Utf8GraphQLRequestParser(| source,| new ParserOptions(),| cache,| new Sha1DocumentHashProvider());| var first = requestParser.Parse();| cache.TryAddDocument(first[0].QueryId!, new CachedDocument(first[0].Query!, false));| // act| requestParser = new Utf8GraphQLRequestParser(| source,| new ParserOptions(),| cache,| new Sha1DocumentHashProvider());| var second = requestParser.Parse();| // assert| Assert.Equal(first[0].Query, second[0].Query);| Assert.Collection(second,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| Assert.Equal(expectedHash, r.QueryId);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Skip_Custom_Property",
        "body": "{| // arrange| var request = new CustomGraphQLRequestDto(| customProperty: \"FooBar\",| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks());| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(request| ).NormalizeLineBreaks());| var buffer = Encoding.UTF8.GetBytes(request.Query);| var expectedHash = Convert.ToBase64String(| SHA1.Create().ComputeHash(buffer))| .Replace(\"/\", \"_\")| .Replace(\"+\", \"-\")| .TrimEnd('=');| var cache = new DocumentCache();| var requestParser = new Utf8GraphQLRequestParser(| source,| new ParserOptions(),| cache,| new Sha1DocumentHashProvider());| // act| var result = requestParser.Parse();| // assert| Assert.Collection(result,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| Assert.Equal(expectedHash, r.QueryId);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Id_As_Name",
        "body": "{| // arrange| var request = new RelayGraphQLRequestDto(| id: \"FooBar\",| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks());| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(request| ).NormalizeLineBreaks());| var buffer = Encoding.UTF8.GetBytes(request.Query);| var expectedHash = Convert.ToBase64String(| SHA1.Create().ComputeHash(buffer))| .Replace(\"/\", \"_\")| .Replace(\"+\", \"-\")| .TrimEnd('=');| var cache = new DocumentCache();| var requestParser = new Utf8GraphQLRequestParser(| source,| new ParserOptions(),| cache,| new Sha1DocumentHashProvider());| // act| var result = requestParser.Parse();| // assert| Assert.Collection(result,| r =>| {| Assert.Null(r.OperationName);| Assert.Null(r.Variables);| Assert.Null(r.Extensions);| Assert.Equal(\"FooBar\", r.QueryId);| Assert.Equal(expectedHash, r.QueryHash);| r.Query.MatchSnapshot();| });| }"
      },
      {
        "name": "Parse_Kitchen_Sink_Query_AllProps_No_Cache",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks(),| id: \"ABC\",| operationName: \"DEF\",| variables: new Dictionary<string, object>| {| { \"a\", \"b\" },| {| \"b\",| new Dictionary<string, object>| {| { \"a\", \"b\" },| { \"b\", true },| { \"c\", 1 },| { \"d\", 1.1 },| }| },| {| \"c\",| new List<object>| {| new Dictionary<string, object>| {| { \"a\", \"b\" },| },| }| },| },| extensions: new Dictionary<string, object>| {| { \"aa\", \"bb\" },| {| \"bb\",| new Dictionary<string, object>| {| { \"aa\", \"bb\" },| { \"bb\", true },| { \"cc\", 1 },| { \"df\", 1.1 },| }| },| {| \"cc\",| new List<object>| {| new Dictionary<string, object?>| {| { \"aa\", \"bb\" },| { \"ab\", null },| { \"ac\", false },| },| }| },| })).NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source, parserOptions);| var batch = requestParser.Parse();| // assert| var snapshot = new Snapshot();| Assert.Collection(batch,| r =>| {| Assert.Equal(\"ABC\", r.QueryId);| Assert.Equal(\"DEF\", r.OperationName);| snapshot.Add(r.Variables, \"Variables:\");| snapshot.Add(r.Extensions, \"Extensions:\");| snapshot.Add(r.Query, \"Query:\");| });| snapshot.Match();| }"
      },
      {
        "name": "Parse_Json",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new GraphQLRequestDto(| query: FileResource.Open(\"kitchen-sink.graphql\").NormalizeLineBreaks(),| id: \"ABC\",| operationName: \"DEF\",| variables: new Dictionary<string, object>| {| { \"a\", \"b\" },| {| \"b\",| new Dictionary<string, object>| {| { \"a\", \"b\" },| { \"b\", true },| { \"c\", 1 },| { \"d\", 1.1 },| }| },| {| \"c\",| new List<object>| {| new Dictionary<string, object>| {| { \"a\", \"b\" },| },| }| },| },| extensions: new Dictionary<string, object>| {| { \"aa\", \"bb\" },| {| \"bb\",| new Dictionary<string, object>| {| { \"aa\", \"bb\" },| { \"bb\", true },| { \"cc\", 1 },| { \"df\", 1.1 },| }| },| {| \"cc\",| new List<object>| {| new Dictionary<string, object>| {| { \"aa\", \"bb\" },| },| }| },| })).NormalizeLineBreaks());| // act| var parsed = Utf8GraphQLRequestParser.ParseJson(source);| // assert| parsed.MatchSnapshot();| }"
      },
      {
        "name": "Parse_Socket_Message",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| JsonConvert.SerializeObject(| new Dictionary<string, object>| {| {| \"payload\",| new Dictionary<string, object>| {| { \"a\" , \"b\"},| { \"b\" , new Dictionary<string, object?>| {| { \"a\" , \"b\"},| { \"b\" , true},| { \"c\" , 1},| { \"d\" , 1.1},| { \"e\" , false},| { \"f\" , null},| }},| { \"c\" , new List<object>| {| new Dictionary<string, object>| {| { \"a\" , \"b\"},| },| }},| }| },| {| \"type\",| \"foo\"| },| {| \"id\",| \"bar\"| },| }).NormalizeLineBreaks());| // act| var message =| Utf8GraphQLRequestParser.ParseMessage(source);| // assert| Assert.Equal(\"foo\", message.Type);| Assert.Equal(\"bar\", message.Id);| File.WriteAllBytes(\"Foo.json\", message.Payload.ToArray());| Utf8GraphQLRequestParser.ParseJson(message.Payload).MatchSnapshot();| }"
      },
      {
        "name": "Parse_Apollo_AQP_SignatureQuery",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| FileResource.Open(\"Apollo_AQP_QuerySignature_1.json\")| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Equal(\"MyQuery\", r.OperationName);| Assert.Equal(\"hashOfQuery\", r.QueryId);| Assert.Null(r.Variables);| Assert.True(r.Extensions!.ContainsKey(\"persistedQuery\"));| Assert.Null(r.Query);| Assert.Null(r.QueryHash);| });| }"
      },
      {
        "name": "Parse_Apollo_AQP_SignatureQuery_Variables_Without_Values",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| FileResource.Open(\"Apollo_AQP_QuerySignature_2.json\")| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Equal(\"hashOfQuery\", r.QueryId);| Assert.Collection(r.Variables!, Assert.Empty);| Assert.True(r.Extensions!.ContainsKey(\"persistedQuery\"));| Assert.Null(r.Query);| Assert.Null(r.QueryHash);| });| }"
      },
      {
        "name": "Parse_Apollo_AQP_FullRequest_And_Verify_Hash",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| FileResource.Open(\"Apollo_AQP_FullRequest.json\")| .NormalizeLineBreaks());| // act| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider(HashFormat.Hex));| var batch = requestParser.Parse();| // assert| Assert.Collection(batch,| r =>| {| Assert.Null(r.OperationName);| Assert.Collection(r.Variables!, Assert.Empty);| Assert.True(r.Extensions!.ContainsKey(\"persistedQuery\"));| Assert.NotNull(r.Query);| if (r.Extensions.TryGetValue(\"persistedQuery\", out var o)| && o is IReadOnlyDictionary<string, object> persistedQuery| && persistedQuery.TryGetValue(\"sha256Hash\", out o)| && o is string hash)| {| Assert.Equal(hash, r.QueryHash);| }| });| }"
      },
      {
        "name": "Parse_Float_Exponent_Format",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| FileResource.Open(\"Float.json\")| .NormalizeLineBreaks());| // act| var obj = Utf8GraphQLRequestParser.ParseJson(source);| // assert| obj.MatchSnapshot();| }"
      },
      {
        "name": "Parse_Invalid_Query",
        "body": "{| // assert| Assert.Throws<SyntaxException>(| () =>| {| // arrange| var source = Encoding.UTF8.GetBytes(\"{\\\"query\\\":\\\"\\\"}\"| .NormalizeLineBreaks());| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| // act| requestParser.Parse();| });| }"
      },
      {
        "name": "Parse_Empty_OperationName",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(| \"\"\"| {| \"operationName\": \"\",| \"query\": \"{}\"| }| \"\"\".NormalizeLineBreaks());| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| // act| var batch = requestParser.Parse();| // assert| var request = Assert.Single(batch);| Assert.Null(request.OperationName);| }"
      },
      {
        "name": "Parse_Empty_Json",
        "body": "{| // assert| Assert.Throws<SyntaxException>(| () =>| {| // arrange| var source = Encoding.UTF8.GetBytes(\"{ }\"| .NormalizeLineBreaks());| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| // act| requestParser.Parse();| });| }"
      },
      {
        "name": "Parse_Empty_String",
        "body": "{| // assert| Assert.Throws<ArgumentException>(| () =>| {| // arrange| var source = Encoding.UTF8.GetBytes(string.Empty);| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| // act| requestParser.Parse();| });| }"
      },
      {
        "name": "Parse_Space_String",
        "body": "{| // assert| Assert.Throws<SyntaxException>(| () =>| {| // arrange| var source = Encoding.UTF8.GetBytes(\" \");| var parserOptions = new ParserOptions();| var requestParser = new Utf8GraphQLRequestParser(| source,| parserOptions,| new DocumentCache(),| new Sha256DocumentHashProvider());| // act| requestParser.Parse();| });| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeParserTests.cs",
    "methods": [
      {
        "name": "Parser_Simple",
        "body": "{| // arrange| var sourceText = \"interface a { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Empty(def.Directives);| Assert.Empty(def.Interfaces);| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_Description",
        "body": "{| // arrange| var sourceText = \"\\\"\\\"\\\"test\\\"\\\"\\\"interface a { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Equal(\"test\", def.Description?.Value);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Empty(def.Directives);| Assert.Empty(def.Interfaces);| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_Directive",
        "body": "{| // arrange| var sourceText = \"interface a @foo(a: \\\"123\\\") { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Single(def.Directives);| Assert.Equal(\"foo\", def.Directives[0].Name.Value);| Assert.Equal(\"a\", def.Directives[0].Arguments[0].Name.Value);| Assert.Equal(\"123\", def.Directives[0].Arguments[0].Value.Value);| Assert.Empty(def.Interfaces);| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_Directive_Multiple",
        "body": "{| // arrange| var sourceText = \"interface a @foo(a: \\\"123\\\") @foo(b: \\\"321\\\") { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Collection(def.Directives,| d =>| {| Assert.Equal(\"foo\", d.Name.Value);| Assert.Equal(\"a\", d.Arguments[0].Name.Value);| Assert.Equal(\"123\", d.Arguments[0].Value.Value);| },| d =>| {| Assert.Equal(\"foo\", d.Name.Value);| Assert.Equal(\"b\", d.Arguments[0].Name.Value);| Assert.Equal(\"321\", d.Arguments[0].Value.Value);| });| Assert.Empty(def.Interfaces);| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_ImplementsInterfaces",
        "body": "{| // arrange| var sourceText = \"interface a implements e { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Empty(def.Directives);| Assert.Single(def.Interfaces);| Assert.Equal(\"e\", def.Interfaces[0].Name.Value);| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_ImplementsInterfaces_Multiple",
        "body": "{| // arrange| var sourceText = \"interface a implements e & f { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Empty(def.Directives);| Assert.Collection(def.Interfaces,| i =>| {| Assert.Equal(\"e\", i.Name.Value);| },| i =>| {| Assert.Equal(\"f\", i.Name.Value);| });| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser_ImplementsInterfacesAndDirectives",
        "body": "{| // arrange| var sourceText = \"interface a implements e & f\" +| \"@foo(a: \\\"123\\\") @foo(b: \\\"321\\\") { b: String } \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| var def = (document.Definitions[0] as InterfaceTypeDefinitionNode);| Assert.NotNull(def);| Assert.Equal(\"a\", def.Name.Value);| Assert.Null(def.Description);| Assert.Single(def.Fields);| Assert.Equal(\"b\", def.Fields[0].Name.Value);| Assert.Collection(def.Interfaces,| i =>| {| Assert.Equal(\"e\", i.Name.Value);| },| i =>| {| Assert.Equal(\"f\", i.Name.Value);| });| Assert.Collection(def.Directives,| d =>| {| Assert.Equal(\"foo\", d.Name.Value);| Assert.Equal(\"a\", d.Arguments[0].Name.Value);| Assert.Equal(\"123\", d.Arguments[0].Value.Value);| },| d =>| {| Assert.Equal(\"foo\", d.Name.Value);| Assert.Equal(\"b\", d.Arguments[0].Name.Value);| Assert.Equal(\"321\", d.Arguments[0].Value.Value);| });| Assert.Equal(SyntaxKind.InterfaceTypeDefinition, def.Kind);| }"
      },
      {
        "name": "Parser__Should_Fail_WhenDirectivesBeforeInterface",
        "body": "{| // arrange| var sourceText = \"interface a @foo(a: \\\"123\\\") implements e & f\" +| \" @foo(b: \\\"321\\\") { b: String } \";| // act & assert| Assert.Throws<SyntaxException>(() =>| {| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| parser.Parse();| });| }"
      }
    ]
  },
  {
    "file": "KitchenSinkParserTests.cs",
    "methods": [
      {
        "name": "ParseFacebookKitchenSinkSchema",
        "body": "{| // arrange| var schemaSource = FileResource.Open(| \"schema-kitchen-sink.graphql\")| .NormalizeLineBreaks();| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(schemaSource));| // act| var document = parser.Parse();| // assert| var snapshot = new Snapshot();| snapshot.Add(document, \"SDL:\");| snapshot.Add(document, \"AST:\", Json);| snapshot.Match();| }"
      },
      {
        "name": "ParseFacebookKitchenSinkQuery",
        "body": "{| // arrange| var querySource =| FileResource.Open(\"kitchen-sink.graphql\")| .NormalizeLineBreaks();| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(querySource));| // act| var document = parser.Parse();| // assert| var snapshot = new Snapshot();| snapshot.Add(document, \"SDL:\");| snapshot.Add(document, \"AST:\", Json);| snapshot.Match();| }"
      }
    ]
  },
  {
    "file": "NumberTokenReaderTests.cs",
    "methods": [
      {
        "name": "InvalidNumberToken",
        "body": "{| // arrange| var source = Encoding.UTF8.GetBytes(\".1\");| // act| void Fail() => new Utf8GraphQLReader(source).Read();| // assert| Assert.Throws<SyntaxException>(Fail).Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ParseUtf8SurrogatePairTests.cs",
    "methods": [
      {
        "name": "Handle_UTF8_Surrogate_Pairs_Correctly",
        "body": "{| var emojiBytes = System.Text.Json.JsonSerializer.SerializeToUtf8Bytes(\"😀\");| var reader = new Utf8GraphQLReader(emojiBytes);| Assert.Equal(\"😀\", System.Text.Json.JsonSerializer.Deserialize<string>(emojiBytes));| Assert.Equal(\"😀\", JsonConvert.DeserializeObject<string>(Encoding.UTF8.GetString(emojiBytes)));| Assert.True(reader.Read());| Assert.Equal(\"😀\", reader.GetString());| }"
      }
    ]
  },
  {
    "file": "PunctuatorTokenReaderTests.cs",
    "methods": [
      {
        "name": "ReadBangToken",
        "body": "{| ReadToken('!', TokenKind.Bang);| }"
      },
      {
        "name": "ReadDollarToken",
        "body": "{| ReadToken('$', TokenKind.Dollar);| }"
      },
      {
        "name": "ReadAmpersandToken",
        "body": "{| ReadToken('&', TokenKind.Ampersand);| }"
      },
      {
        "name": "ReadLeftParenthesisToken",
        "body": "{| ReadToken('(', TokenKind.LeftParenthesis);| }"
      },
      {
        "name": "ReadRightParenthesisToken",
        "body": "{| ReadToken(')', TokenKind.RightParenthesis);| }"
      },
      {
        "name": "ReadColonToken",
        "body": "{| ReadToken(':', TokenKind.Colon);| }"
      },
      {
        "name": "ReadEqualToken",
        "body": "{| ReadToken('=', TokenKind.Equal);| }"
      },
      {
        "name": "ReadAtToken",
        "body": "{| ReadToken('@', TokenKind.At);| }"
      },
      {
        "name": "ReadLeftBracketToken",
        "body": "{| ReadToken('[', TokenKind.LeftBracket);| }"
      },
      {
        "name": "ReadRightBracketToken",
        "body": "{| ReadToken(']', TokenKind.RightBracket);| }"
      },
      {
        "name": "ReadLeftBraceToken",
        "body": "{| ReadToken('{', TokenKind.LeftBrace);| }"
      },
      {
        "name": "ReadRightBraceToken",
        "body": "{| ReadToken('}', TokenKind.RightBrace);| }"
      },
      {
        "name": "ReadPipeToken",
        "body": "{| ReadToken('|', TokenKind.Pipe);| }"
      },
      {
        "name": "ReadSpreadToken",
        "body": "{| ReadToken(\"...\", TokenKind.Spread);| }"
      }
    ]
  },
  {
    "file": "QueryParserTests.cs",
    "methods": [
      {
        "name": "Reject_Queries_With_More_Than_2048_Fields",
        "body": "{;| Assert| .Throws<SyntaxException>(() => Utf8GraphQLParser.Parse(FileResource.Open(\"aliases.graphql\")))| .Message| .MatchInlineSnapshot(\"The GraphQL request document contains more than 2048 fields. Parsing aborted.\");| }"
      },
      {
        "name": "ParseSimpleShortHandFormQuery",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(\"{ x { y } }\");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| Assert.Equal(2, document.FieldsCount);| Assert.Collection(document.Definitions,| t =>| {| Assert.IsType<OperationDefinitionNode>(t);| var operationDefinition = (OperationDefinitionNode)t;| Assert.Equal(SyntaxKind.OperationDefinition, operationDefinition.Kind);| Assert.Null(operationDefinition.Name);| Assert.Equal(OperationType.Query, operationDefinition.Operation);| Assert.Empty(operationDefinition.VariableDefinitions);| Assert.Empty(operationDefinition.Directives);| Assert.Collection(operationDefinition.SelectionSet.Selections,| s1 =>| {| Assert.IsType<FieldNode>(s1);| var field1 = (FieldNode)s1;| Assert.Null(field1.Alias);| Assert.Equal(\"x\", field1.Name.Value);| Assert.Empty(field1.Arguments);| Assert.Empty(field1.Directives);| Assert.Collection(field1.SelectionSet!.Selections,| s2 =>| {| Assert.IsType<FieldNode>(s2);| var field2 = (FieldNode)s2;| Assert.Null(field2.Alias);| Assert.Equal(\"y\", field2.Name.Value);| Assert.Empty(field2.Arguments);| Assert.Empty(field2.Directives);| Assert.Null(field2.SelectionSet);| });| });| });| }"
      },
      {
        "name": "ParseQueryWithFragment",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"query a { x { ... y } } fragment y on Type { z } \");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| Assert.Collection(document.Definitions,| t =>| {| Assert.IsType<OperationDefinitionNode>(t);| var operationDefinition = (OperationDefinitionNode)t;| Assert.Equal(SyntaxKind.OperationDefinition, operationDefinition.Kind);| Assert.Equal(\"a\", operationDefinition.Name!.Value);| Assert.Equal(OperationType.Query, operationDefinition.Operation);| Assert.Empty(operationDefinition.VariableDefinitions);| Assert.Empty(operationDefinition.Directives);| Assert.Collection(operationDefinition.SelectionSet.Selections,| s1 =>| {| Assert.IsType<FieldNode>(s1);| var field1 = (FieldNode)s1;| Assert.Null(field1.Alias);| Assert.Equal(\"x\", field1.Name.Value);| Assert.Empty(field1.Arguments);| Assert.Empty(field1.Directives);| Assert.Collection(field1.SelectionSet!.Selections,| s2 =>| {| Assert.IsType<FragmentSpreadNode>(s2);| var spread = (FragmentSpreadNode)s2;| Assert.Equal(\"y\", spread.Name.Value);| Assert.Empty(spread.Directives);| });| });| },| t =>| {| Assert.IsType<FragmentDefinitionNode>(t);| var fragmentDefinition = (FragmentDefinitionNode)t;| Assert.Equal(\"y\", fragmentDefinition.Name.Value);| Assert.Equal(\"Type\", fragmentDefinition.TypeCondition.Name.Value);| Assert.Empty(fragmentDefinition.VariableDefinitions);| Assert.Empty(fragmentDefinition.Directives);| var selectionNode = fragmentDefinition| .SelectionSet.Selections.Single();| Assert.IsType<FieldNode>(selectionNode);| Assert.Equal(\"z\", ((FieldNode)selectionNode).Name.Value);| });| }"
      },
      {
        "name": "QueryWithComments",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| @\"{| hero {| name| # Queries can have comments!| friends(a:\"\"foo\"\" b: 123456 c:null d: true) {| name| }| }| }\".NormalizeLineBreaks());| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| var snapshot = new Snapshot();| snapshot.Add(document, \"Query\");| snapshot.Add(document, \"AST\", Json);| snapshot.Match();| }"
      },
      {
        "name": "IntrospectionQuery",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| FileResource.Open(\"IntrospectionQuery.graphql\")| .NormalizeLineBreaks());| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| document.MatchSnapshot();| }"
      },
      {
        "name": "KitchenSinkQueryQuery",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| FileResource.Open(\"kitchen-sink.graphql\")| .NormalizeLineBreaks());| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| document.MatchSnapshot();| }"
      },
      {
        "name": "QueryWithStringArg",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| FileResource.Open(\"QueryWithStringArg.graphql\")| .NormalizeLineBreaks());| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| document.MatchSnapshot();| }"
      },
      {
        "name": "StringArg",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ a(b:\\\"Q3VzdG9tZXIteDE=\\\") }\");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| var value = Assert.IsType<StringValueNode>(| document.Definitions.OfType<OperationDefinitionNode>().First()| .SelectionSet.Selections.OfType<FieldNode>().First()| .Arguments.First().Value);| Assert.Equal(\"Q3VzdG9tZXIteDE=\", value.Value);| }"
      },
      {
        "name": "NullArg",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ a(b:null) }\");| // acts| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| Assert.IsType<NullValueNode>(| document.Definitions.OfType<OperationDefinitionNode>().First()| .SelectionSet.Selections.OfType<FieldNode>().First()| .Arguments.First().Value);| }"
      },
      {
        "name": "ParseDirectiveOnVariableDefinition",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"query queryName($foo: ComplexType @foo) { bar }\");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| Assert.Collection(| document.Definitions.OfType<OperationDefinitionNode>().First()| .VariableDefinitions.First()| .Directives,| d => Assert.Equal(\"foo\", d.Name.Value));| }"
      },
      {
        "name": "StringArgumentIsEmpty",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ foo(bar: \\\"\\\") }\");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| var value =| document.Definitions.OfType<OperationDefinitionNode>().First()| .SelectionSet.Selections.OfType<FieldNode>().First()| .Arguments.First().Value;| Assert.Equal(string.Empty,| Assert.IsType<StringValueNode>(value).Value);| }"
      },
      {
        "name": "LargeString",
        "body": "{| // arrange| var s = new string('s', 2048);| var sourceText = Encoding.UTF8.GetBytes(| \"{ foo(bar: \\\"\" + s + \"\\\") }\");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| var value =| document.Definitions.OfType<OperationDefinitionNode>().First()| .SelectionSet.Selections.OfType<FieldNode>().First()| .Arguments.First().Value;| Assert.Equal(s,| Assert.IsType<StringValueNode>(value).Value);| }"
      },
      {
        "name": "RussianLiterals",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| FileResource.Open(\"russian-literals.graphql\")| .NormalizeLineBreaks());| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| document.MatchSnapshot();| }"
      },
      {
        "name": "ParseVariablesWithDirective",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| @\"query ($a: String! @foo)| a(a: $a)| \");| // act| var parser = new Utf8GraphQLParser(| sourceText, ParserOptions.Default);| var document = parser.Parse();| // assert| document.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ReaderTests.cs",
    "methods": [
      {
        "name": "Read_Two_NameTokens",
        "body": "{| var source = new ReadOnlySpan<byte>(| Encoding.UTF8.GetBytes(\"type foo\"));| var lexer = new Utf8GraphQLReader(source);| Assert.Equal(TokenKind.StartOfFile, lexer.Kind);| Assert.True(lexer.Read());| Assert.Equal(TokenKind.Name, lexer.Kind);| Assert.Equal(\"type\",| Encoding.UTF8.GetString(lexer.Value.ToArray()));| Assert.True(lexer.Read());| Assert.Equal(TokenKind.Name, lexer.Kind);| Assert.Equal(\"foo\",| Encoding.UTF8.GetString(lexer.Value.ToArray()));| Assert.False(lexer.Read());| Assert.Equal(TokenKind.EndOfFile, lexer.Kind);| }"
      },
      {
        "name": "Read_NameBraceTokens",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(\"{ x { y } }\");| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_Comment",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ #test me foo bar \\n me }\");| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_StringValue",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ me(a: \\\"Abc¢def\\\\n\\\") }\");| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_BlockStringValue",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"{ me(a: \\\"\\\"\\\"\\n Abcdef\\n\\\"\\\"\\\") }\");| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_KitchenSinkQuery",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| FileResource.Open(\"kitchen-sink.graphql\")| .NormalizeLineBreaks());| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_BlockString_SkipEscapes",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(| \"abc \\\"\\\"\\\"def\\\\\\\"\\\"\\\"\\\"\\\"\\\" ghi\");| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Read_String_SkipEscapes",
        "body": "{| // arrange| var sourceText = \"abc \\\"def\\\\\\\"\\\" ghi\"u8.ToArray();| // act| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| tokens.MatchSnapshot();| }"
      },
      {
        "name": "Skip_Boml",
        "body": "{| // arrange| var sourceText = new[]| {| (byte)239,| (byte)187,| (byte)191,| (byte)'a',| (byte)'b',| (byte)'c',| };| var tokens = new List<SyntaxTokenInfo>();| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| tokens.Add(SyntaxTokenInfo.FromReader(reader));| }| // assert| Assert.Collection(tokens,| t => Assert.Equal(TokenKind.Name, t.Kind));| }"
      },
      {
        "name": "OneGraph_Schema",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(FileResource.Open(\"onegraph.graphql\"));| // act| var reader = new Utf8GraphQLReader(sourceText);| while (reader.Read())| {| }| // assert| // the document was lexed without syntax exception| }"
      }
    ]
  },
  {
    "file": "SchemCoordinateParserTests.cs",
    "methods": [
      {
        "name": "ParseName",
        "body": "{| // arrange| var sourceText = \"MyType\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| var result = Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "ParseNameAndMemberName",
        "body": "{| // arrange| var sourceText = \"MyType.MemberName\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| var result = Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "ParseNameNameName",
        "body": "{| // arrange| var sourceText = \"Name.Name.Name\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| void Fail() => Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| Assert.Throws<SyntaxException>(Fail);| }"
      },
      {
        "name": "ParseNameAndMemberNameAndArg",
        "body": "{| // arrange| var sourceText = \"MyType.MemberName(arg:)\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| var result = Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "ParseDirectiveName",
        "body": "{| // arrange| var sourceText = \"@foo\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| var result = Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "ParseDirectiveNameAndArg",
        "body": "{| // arrange| var sourceText = \"@foo(arg:)\";| var source = Encoding.UTF8.GetBytes(sourceText);| // act| var result = Utf8GraphQLParser.Syntax.ParseSchemaCoordinate(source);| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaParserTests.cs",
    "methods": [
      {
        "name": "ParserSimpleObjectType",
        "body": "{| // arrange| var sourceText = \"type a @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") \" +| \"c(d: F = ENUMVALUE @foo(a: \\\"123\\\")): Int }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserInputObjectType",
        "body": "{| // arrange| var sourceText = \"input a @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") c: Int = 123 }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserScalarType",
        "body": "{| // arrange| var sourceText = \"scalar FOO @foo(a: \\\"123\\\")\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserSimpleInterfaceType",
        "body": "{| // arrange| var sourceText = \"interface a implements e @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") \" +| \"c(d: F = ENUMVALUE @foo(a: \\\"123\\\")): Int }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseEnum",
        "body": "{| // arrange| var sourceText = \"enum Foo @foo(a: \\\"123\\\") \"| + \"{ BAR @foo(a: 123) , BAZ }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseUnion",
        "body": "{| // arrange| var sourceText = \"union Foo @foo(a: \\\"123\\\") = \"| + \"BAR | BAZ \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseUnion_LeadingPipe",
        "body": "{| // arrange| var sourceText = \"union Foo @foo(a: \\\"123\\\") = \"| + \"| BAR | BAZ \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseSchemaDefinition",
        "body": "{| // arrange| var sourceText = \"\\\"\\\"\\\"\\nDescription\\n\\\"\\\"\\\"\" +| \"schema @foo(a: \\\"123\\\") \" +| \"{ query: Foo mutation: Bar subscription: Baz }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "OneGraph_Schema",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(FileResource.Open(\"onegraph.graphql\"));| // act| var document = Utf8GraphQLParser.Parse(sourceText);| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Parse_Directive_With_VariableDefinition",
        "body": "{| // arrange| const string sourceText = \"directive @foo(a: String) on VARIABLE_DEFINITION\";| // act| var document = Utf8GraphQLParser.Parse(sourceText);| // assert| document.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SyntaxParserHelperTests.cs",
    "methods": [
      {
        "name": "ParseField",
        "body": "{| var field = Utf8GraphQLParser.Syntax.ParseField(\"foo\");| Assert.Equal(\"foo\", field.Name.Value);| }"
      },
      {
        "name": "ParseCompositeField",
        "body": "{| var field = Utf8GraphQLParser.Syntax.ParseField(\"foo { bar }\");| Assert.Equal(\"foo\", field.Name.Value);| }"
      },
      {
        "name": "ParseSelectionSet",
        "body": "{| var selectionSet = Utf8GraphQLParser.Syntax.ParseSelectionSet(\"{ bar }\");| Assert.Collection(| selectionSet.Selections,| field => Assert.Equal(\"bar\",| Assert.IsType<FieldNode>(field).Name.Value));| }"
      },
      {
        "name": "ParseValueLiteral",
        "body": "{| var literal = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"BAZ\");| Assert.IsType<EnumValueNode>(literal);| }"
      },
      {
        "name": "ParseVariable",
        "body": "{| var literal = Utf8GraphQLParser.Syntax.ParseValueLiteral(\"$foo\", false);| Assert.IsType<VariableNode>(literal);| }"
      },
      {
        "name": "ParseTypeReference",
        "body": "{| // arrange| var sourceText = \"[[String!]]\";| // act| var type = Utf8GraphQLParser.Syntax.ParseTypeReference(sourceText);| // assert| Assert.Equal(| \"String\",| Assert.IsType<NamedTypeNode>(| Assert.IsType<NonNullTypeNode>(| Assert.IsType<ListTypeNode>(| Assert.IsType<ListTypeNode>(type).Type).Type).Type).Name.Value);| }"
      },
      {
        "name": "ParseTypeReference_Span",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(\"[[String!]]\");| // act| var type = Utf8GraphQLParser.Syntax.ParseTypeReference(sourceText);| // assert| Assert.Equal(| \"String\",| Assert.IsType<NamedTypeNode>(| Assert.IsType<NonNullTypeNode>(| Assert.IsType<ListTypeNode>(| Assert.IsType<ListTypeNode>(type).Type).Type).Type).Name.Value);| }"
      },
      {
        "name": "ParseTypeReference_Reader",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(\"[[String!]]\");| var reader = new Utf8GraphQLReader(sourceText);| reader.MoveNext();| // act| var type = Utf8GraphQLParser.Syntax.ParseTypeReference(reader);| // assert| Assert.Equal(| \"String\",| Assert.IsType<NamedTypeNode>(| Assert.IsType<NonNullTypeNode>(| Assert.IsType<ListTypeNode>(| Assert.IsType<ListTypeNode>(type).Type).Type).Type).Name.Value);| }"
      }
    ]
  },
  {
    "file": "Utf8HelperTests.cs",
    "methods": [
      {
        "name": "Unescape_NothingIsEscaped_InputIsOutput",
        "body": "{| // arrange| var inputData = Encoding.UTF8.GetBytes(\"hello_123\");| var outputBuffer = new byte[inputData.Length];| var input = new ReadOnlySpan<byte>(inputData);| var output = new Span<byte>(outputBuffer);| // act| Utf8Helper.Unescape(in input, ref output, false);| // assert| Assert.Equal(inputData, outputBuffer);| }"
      }
    ]
  },
  {
    "file": "ValueParserTests.cs",
    "methods": [
      {
        "name": "ZeroZeroIsNotAllowed",
        "body": "{| // arrange| // act| static void Action() => ParseValue(\"00\");| // assert| Assert.Throws<SyntaxException>(Action);| }"
      }
    ]
  },
  {
    "file": "TypeNodeExtensionsTests.cs",
    "methods": [
      {
        "name": "InnerTypeFromListType",
        "body": "{| // arrange| var namedType = new NamedTypeNode(null, new NameNode(\"Foo\"));| var listType = new ListTypeNode(null, namedType);| // act| var innerType = listType.InnerType();| // assert| Assert.Equal(namedType, innerType);| }"
      },
      {
        "name": "InnerTypeFromNonNullType",
        "body": "{| // arrange| var namedType = new NamedTypeNode(null, new NameNode(\"Foo\"));| var nonNullType = new NonNullTypeNode(null, namedType);| // act| var innerType = nonNullType.InnerType();| // assert| Assert.Equal(namedType, innerType);| }"
      },
      {
        "name": "NullableType",
        "body": "{| // arrange| var namedType = new NamedTypeNode(null, new NameNode(\"Foo\"));| var nonNullType = new NonNullTypeNode(null, namedType);| // act| var a = nonNullType.NullableType();| var b = namedType.NullableType();| // assert| Assert.Equal(namedType, a);| Assert.Equal(namedType, b);| }"
      },
      {
        "name": "IsListType",
        "body": "{| // arrange| var namedType = new NamedTypeNode(null, new NameNode(\"Foo\"));| var listType = new ListTypeNode(null, namedType);| // act| var shouldBeFalse = namedType.IsListType();| var shouldBeTrue = listType.IsListType();| // assert| Assert.False(shouldBeFalse);| Assert.True(shouldBeTrue);| }"
      },
      {
        "name": "IsNonNullType",
        "body": "{| // arrange| var namedType = new NamedTypeNode(null, new NameNode(\"Foo\"));| var nonNullType = new NonNullTypeNode(null, namedType);| // act| var shouldBeFalse = namedType.IsNonNullType();| var shouldBeTrue = nonNullType.IsNonNullType();| // assert| Assert.False(shouldBeFalse);| Assert.True(shouldBeTrue);| }"
      },
      {
        "name": "InvalidTypeStructure",
        "body": "{| // arrange| var type = GetType(\"[[[[[[Foo!]!]!]!]!]!]!\");| // act| Action a = () => type.NamedType();| // assert| Assert.Throws<NotSupportedException>(a);| }"
      }
    ]
  },
  {
    "file": "SyntaxPrinterTests.cs",
    "methods": [
      {
        "name": "Serialize_ShortHandQueryNoIndentation_InOutShouldBeTheSame",
        "body": "{| // arrange| var query = \"{ foo(s: \\\"String\\\") { bar @foo { baz @foo @bar } } }\";| // act| var printed = Utf8GraphQLParser.Parse(query).Print(false);| // assert| Assert.Equal(query, printed);| }"
      },
      {
        "name": "Serialize_ShortHandQueryWithIndentation_OutputIsFormatted",
        "body": "{| // arrange| var query = \"{ foo(s: \\\"String\\\") { bar @foo { baz @foo @bar } } }\";| // act| var printed = Utf8GraphQLParser.Parse(query).Print(true);| // assert| printed.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_ShortHandQueryWithIndentation_LineBetweenFields",
        "body": "{| // arrange| var query = \"{ foo { foo bar { foo @foo @bar bar @bar baz } } }\";| // act| var printed = Utf8GraphQLParser.Parse(query).Print(true);| // assert| printed.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithIndentation_OutputIsFormatted",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| // act| var printed = Utf8GraphQLParser.Parse(query).Print(true);| // assert| printed.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithoutIndentation_OutputIsOneLine",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| // act| var printed = Utf8GraphQLParser.Parse(query).Print(false);| // assert| printed.MatchSnapshot();| }"
      },
      {
        "name": "Serialize_KitchenSinkWithIndentation_CanBeParsed",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| // act| var printed = Utf8GraphQLParser.Parse(query).Print();| // assert| var document = Utf8GraphQLParser.Parse(printed);| Assert.Equal(printed, document.ToString());| }"
      },
      {
        "name": "Serialize_KitchenSinkWithoutIndentation_CanBeParsed",
        "body": "{| // arrange| var query = FileResource.Open(\"kitchen-sink.graphql\");| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var serializedQuery = queryDocument.Print();| // assert| var parsedQuery = Utf8GraphQLParser.Parse(serializedQuery);| Assert.Equal(serializedQuery, parsedQuery.Print());| }"
      },
      {
        "name": "Serialize_QueryWithVarDeclaration_InOutShouldBeTheSame",
        "body": "{| // arrange| var query =| \"query Foo($bar: [String!]!) { foo(s: \\\"String\\\") \" +| \"{ bar @foo { baz @foo @bar } } }\";| var queryDocument = Utf8GraphQLParser.Parse(query);| // act| var printed = queryDocument.Print(false);| // assert| Assert.Equal(query, printed);| }"
      },
      {
        "name": "Serialize_FragmentWithVariableDefs_InOutShouldBeTheSame",
        "body": "{| // arrange| var query = \"fragment Foo ($bar: [String!]!) on Bar { baz }\";| var queryDocument = Utf8GraphQLParser.Parse(query,| new ParserOptions(allowFragmentVariables: true));| // act| var printed = queryDocument.Print(false);| // assert| Assert.Equal(query, printed);| }"
      }
    ]
  },
  {
    "file": "ValueNodeExtensionsTests.cs",
    "methods": [
      {
        "name": "IsNull_Null_True",
        "body": "{| // arrange| var value = default(IValueNode);| // act| var result = value.IsNull();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsNull_NullValueNode_True",
        "body": "{| // arrange| IValueNode value = NullValueNode.Default;| // act| var result = value.IsNull();| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsNull_StringValueNode_False",
        "body": "{| // arrange| IValueNode value = new StringValueNode(\"foo\");| // act| var result = value.IsNull();| // assert| Assert.False(result);| }"
      }
    ]
  },
  {
    "file": "DefaultSyntaxNavigatorTests.cs",
    "methods": [
      {
        "name": "Push",
        "body": "{| // arrange| var node = new NameNode(\"abc\");| // act| var navigator = new DefaultSyntaxNavigator();| navigator.Push(node);| // assert| Assert.Equal(1, navigator.Count);| }"
      },
      {
        "name": "Push_Two",
        "body": "{| // arrange| var node = new NameNode(\"abc\");| // act| var navigator = new DefaultSyntaxNavigator();| navigator.Push(node);| navigator.Push(node);| // assert| Assert.Equal(2, navigator.Count);| }"
      },
      {
        "name": "Push_Null",
        "body": "{| // arrange| // act| var navigator = new DefaultSyntaxNavigator();| void Fail() => navigator.Push(null!);| // assert| Assert.Throws<ArgumentNullException>(Fail);| }"
      },
      {
        "name": "Pop",
        "body": "{| // arrange| var node = new NameNode(\"abc\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(node);| // act| var popped = navigator.Pop();| // assert| Assert.Same(node, popped);| }"
      },
      {
        "name": "Pop_Two",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var navigator = new DefaultSyntaxNavigator();| // act| navigator.Push(one);| navigator.Push(two);| // assert| var popped = navigator.Pop();| Assert.Same(two, popped);| popped = navigator.Pop();| Assert.Same(one, popped);| }"
      },
      {
        "name": "Pop_Empty",
        "body": "{| // arrange| // act| var navigator = new DefaultSyntaxNavigator();| void Fail() => navigator.Pop();| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      },
      {
        "name": "Peek",
        "body": "{| // arrange| var node = new NameNode(\"abc\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(node);| // act| var peeked = navigator.Peek();| // assert| Assert.Same(node, peeked);| }"
      },
      {
        "name": "Peek_Two",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| // act| var peeked = navigator.Peek();| // assert| Assert.Same(two, peeked);| }"
      },
      {
        "name": "Peek_Empty",
        "body": "{| // arrange| var navigator = new DefaultSyntaxNavigator();| // act| void Fail() => navigator.Peek();| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      },
      {
        "name": "Peek_Explicit_First",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var three = new NameNode(\"ghi\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| navigator.Push(three);| // act| var peeked = navigator.Peek(0);| // assert| Assert.Same(three, peeked);| }"
      },
      {
        "name": "Peek_Explicit_Two",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var three = new NameNode(\"ghi\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| navigator.Push(three);| // act| var peeked = navigator.Peek(1);| // assert| Assert.Same(two, peeked);| }"
      },
      {
        "name": "Peek_Explicit_Three",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var three = new NameNode(\"ghi\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| navigator.Push(three);| // act| var peeked = navigator.Peek(2);| // assert| Assert.Same(one, peeked);| }"
      },
      {
        "name": "Peek_Explicit_Four",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var two = new NameNode(\"def\");| var three = new NameNode(\"ghi\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| navigator.Push(three);| // act| void Fail() => navigator.Peek(3);| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      },
      {
        "name": "Peek_Explicit_Negative_Count",
        "body": "{| // arrange| var one = new NameNode(\"abc\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| // act| void Fail() => navigator.Peek(-1);| // assert| Assert.Throws<ArgumentOutOfRangeException>(Fail);| }"
      },
      {
        "name": "GetAncestor",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| // act| var ancestor = navigator.GetAncestor<NamedTypeNode>();| // assert| Assert.Equal(one, ancestor);| }"
      },
      {
        "name": "GetAncestor_NotFound",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| // act| var ancestor = navigator.GetAncestor<ObjectTypeDefinitionNode>();| // assert| Assert.Null(ancestor);| }"
      },
      {
        "name": "GetAncestors",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var three = new NamedTypeNode(new NameNode(\"ghi\"));| var four = new NameNode(\"jkl\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(two);| navigator.Push(three);| navigator.Push(four);| // act| var ancestors = navigator.GetAncestors<NamedTypeNode>();| // assert| Assert.Collection(| ancestors,| t => Assert.Same(three, t),| t => Assert.Same(one, t));| }"
      },
      {
        "name": "GetAncestors_Empty",
        "body": "{| // arrange| // act| var navigator = new DefaultSyntaxNavigator();| // assert| Assert.Empty(navigator.GetAncestors<ISyntaxNode>());| }"
      },
      {
        "name": "CreateCoordinate_Directive",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var three = new NamedTypeNode(new NameNode(\"ghi\"));| var four = new NameNode(\"jkl\");| var directive =| ParseDirectiveDefinition(\"directive @foo(arg: String!) on FIELD_DEFINITION\");| var argument = directive.Arguments.First();| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(directive);| navigator.Push(two);| navigator.Push(argument);| navigator.Push(three);| navigator.Push(four);| // act| var coordinate = navigator.CreateCoordinate();| // assert| Assert.Equal(\"@foo(arg:)\", coordinate.ToString());| }"
      },
      {
        "name": "CreateCoordinate_ObjectTypeDefinition_1",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var three = new NamedTypeNode(new NameNode(\"ghi\"));| var four = new NameNode(\"jkl\");| var type = ParseObjectTypeDefinition(| \"type Foo { bar(baz: String): Int }\");| var field = type.Fields[0];| var argument = field.Arguments[0];| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(type);| navigator.Push(two);| navigator.Push(field);| navigator.Push(three);| navigator.Push(argument);| navigator.Push(four);| // act| var coordinate = navigator.CreateCoordinate();| // assert| Assert.Equal(\"Foo.bar(baz:)\", coordinate.ToString());| }"
      },
      {
        "name": "CreateCoordinate_ObjectTypeDefinition_2",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var three = new NamedTypeNode(new NameNode(\"ghi\"));| var type = ParseObjectTypeDefinition(| \"type Foo { bar(baz: String): Int }\");| var field = type.Fields[0];| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(type);| navigator.Push(two);| navigator.Push(field);| navigator.Push(three);| // act| var coordinate = navigator.CreateCoordinate();| // assert| Assert.Equal(\"Foo.bar\", coordinate.ToString());| }"
      },
      {
        "name": "CreateCoordinate_ObjectTypeDefinition_3",
        "body": "{| // arrange| var one = new NamedTypeNode(new NameNode(\"abc\"));| var two = new NameNode(\"def\");| var type = ParseObjectTypeDefinition(| \"type Foo { bar(baz: String): Int }\");| var navigator = new DefaultSyntaxNavigator();| navigator.Push(one);| navigator.Push(type);| navigator.Push(two);| // act| var coordinate = navigator.CreateCoordinate();| // assert| Assert.Equal(\"Foo\", coordinate.ToString());| }"
      },
      {
        "name": "CreateCoordinate_Empty",
        "body": "{| // arrange| var navigator = new DefaultSyntaxNavigator();| // act| void Fail() => navigator.CreateCoordinate();| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      },
      {
        "name": "CreateCoordinate_Invalid_1",
        "body": "{| // arrange| var navigator = new DefaultSyntaxNavigator();| navigator.Push(new NameNode(\"abc\"));| // act| void Fail() => navigator.CreateCoordinate();| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      },
      {
        "name": "CreateCoordinate_Invalid_2",
        "body": "{| // arrange| var navigator = new DefaultSyntaxNavigator();| navigator.Push(new NameNode(\"abc\"));| navigator.Push(ParseFieldDefinition(\"a: String\"));| // act| void Fail() => navigator.CreateCoordinate();| // assert| Assert.Throws<InvalidOperationException>(Fail);| }"
      }
    ]
  },
  {
    "file": "SchemaCoordinateVisitorTests.cs",
    "methods": [
      {
        "name": "VisitAllNodes",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var list = new List<string>();| SyntaxVisitor| .Create(| current =>| {| if (current is NameNode n)| {| list.Add(n.Value);| }| return SyntaxVisitor.Continue;| },| options: new() { VisitNames = true, })| .Visit(node);| // assert| Assert.Collection(| list,| s => Assert.Equal(\"Abc\", s),| s => Assert.Equal(\"def\", s),| s => Assert.Equal(\"ghi\", s));| }"
      },
      {
        "name": "VisitAllNodes_With_Walker",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var list = new List<string>();| var walker = new CustomSyntaxWalker(list);| walker.Visit(node);| // assert| Assert.Collection(| list,| s => Assert.Equal(\"Abc\", s),| s => Assert.Equal(\"def\", s),| s => Assert.Equal(\"ghi\", s));| }"
      },
      {
        "name": "VisitAllNodes_With_Generic_Walker",
        "body": "{| // arrange| var node = new SchemaCoordinateNode(null, false, new(\"Abc\"), new(\"def\"), new(\"ghi\"));| // act| var list = new List<string>();| var context = new CustomContext(list);| var walker = new CustomGenericSyntaxWalker();| walker.Visit(node, context);| // assert| Assert.Collection(| list,| s => Assert.Equal(\"Abc\", s),| s => Assert.Equal(\"def\", s),| s => Assert.Equal(\"ghi\", s));| }"
      }
    ]
  },
  {
    "file": "SyntaxRewriterTests.cs",
    "methods": [
      {
        "name": "Rename_Field",
        "body": "{| // arrange| var schema = Parse(FileResource.Open(\"schema-kitchen-sink.graphql\"));| // act| var rewriter =| SyntaxRewriter.CreateWithNavigator(| (node, context) =>| {| if (node.Kind is SyntaxKind.FieldDefinition &&| \"Foo\".Equals(| context.Navigator.GetAncestor<ObjectTypeDefinitionNode>()?.Name.Value))| {| var field = (FieldDefinitionNode)node;| return field.WithName(field.Name.WithValue(field.Name.Value + \"_abc\"));| }| return node;| });| // assert| schema = (DocumentNode?)rewriter.Rewrite(schema, new NavigatorContext());| schema?.Print().MatchSnapshot();| }"
      },
      {
        "name": "Remove_Field",
        "body": "{| // arrange| var schema = Parse(@\"| schema {| query: QueryType| mutation: MutationType| }| type Foo {| one: String!| two: Int| three: String!| }| type Bar {| one: String!| two: Int| three: String!| }| \");| // act| var rewriter =| SyntaxRewriter.CreateWithNavigator(| (node, context) =>| {| if (node.Kind is SyntaxKind.FieldDefinition| && ((FieldDefinitionNode)node).Name.Value.Equals(\"two\", StringComparison.Ordinal)| && \"Foo\".Equals(context.Navigator.GetAncestor<ObjectTypeDefinitionNode>()?.Name.Value))| {| return default;| }| return node;| });| // assert| schema = (DocumentNode?)rewriter.Rewrite(schema, new NavigatorContext());| schema?.Print().MatchSnapshot();| }"
      },
      {
        "name": "Remove_StringValueField_ExceptionThrown",
        "body": "{| // arrange| var schema = Parse(@\"| type Foo {| abc : String| }| \");| // act| var rewriter =| SyntaxRewriter.CreateWithNavigator(| (node, context) =>| {| if (node.Kind is SyntaxKind.Name| && \"Foo\".Equals(context.Navigator.GetAncestor<ObjectTypeDefinitionNode>()?.Name.Value))| {| return default;| }| return node;| });| // assert| DocumentNode? Fail() => (DocumentNode?)rewriter.Rewrite(schema, new NavigatorContext());| Assert.Throws<SyntaxNodeCannotBeNullException>(Fail);| }"
      }
    ]
  },
  {
    "file": "SyntaxVisitorTests.cs",
    "methods": [
      {
        "name": "Visit_With_Navigator",
        "body": "{| // arrange| var list = new List<string>();| var schema = Parse(| @\"type Foo {| field(a: String!): String!| }\");| var visitor =| CreateWithNavigator<NavigatorContext>(| enter: (n, c) =>| {| if (n is FieldDefinitionNode or InputValueDefinitionNode)| {| list.Add(c.Navigator.CreateCoordinate().ToString());| }| return SyntaxVisitor.Continue;| },| options: new() { VisitArguments = true, });| // act| visitor.Visit(schema, new NavigatorContext());| // assert| Assert.Collection(| list,| t => Assert.Equal(\"Foo.field\", t),| t => Assert.Equal(\"Foo.field(a:)\", t));| }"
      }
    ]
  },
  {
    "file": "MD5DocumentHashProviderTests.cs",
    "methods": [
      {
        "name": "HashAsBase64",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Base64);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"kAFQmDzST7DWlj99KOF_cg\");| }"
      },
      {
        "name": "HashAsHex",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new MD5DocumentHashProvider(HashFormat.Hex);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"900150983cd24fb0d6963f7d28e17f72\");| }"
      }
    ]
  },
  {
    "file": "Sha1DocumentHashProviderTests.cs",
    "methods": [
      {
        "name": "HashAsBase64",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new Sha1DocumentHashProvider(HashFormat.Base64);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"qZk-NkcGgWq6PiVxeFDCbJzQ2J0\");| }"
      },
      {
        "name": "HashAsHex",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new Sha1DocumentHashProvider(HashFormat.Hex);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"a9993e364706816aba3e25717850c26c9cd0d89d\");| }"
      }
    ]
  },
  {
    "file": "Sha256DocumentHashProviderTests.cs",
    "methods": [
      {
        "name": "HashAsBase64",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new Sha256DocumentHashProvider(HashFormat.Base64);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"ungWv48Bz-pBQUDeXa4iI7ADYaOWF3qctBD_YfIAFa0\");| }"
      },
      {
        "name": "HashAsHex",
        "body": "{| var content = \"abc\"u8.ToArray();| var hashProvider = new Sha256DocumentHashProvider(HashFormat.Hex);| var hash = hashProvider.ComputeHash(content);| Snapshot| .Create()| .Add(hash)| .MatchInline(\"ba7816bf8f01cfea414140de5dae2223b00361a396177a9cb410ff61f20015ad\");| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorInterfacesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema<BarInterface, FilterInputType<BarInterface>>(| _barEntities,| configure: Configure);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"a\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"b\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: null}}}) \" +| \"{ test{ prop}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { neq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument( \"{ root { foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: DESC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: ASC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"DESC\")| .Add(res2, \"ASC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseSorting())| .AddType(new SortInputType<Foo>(x => x| .Field(x => x.LastName)| .Extend()| .OnBeforeCreate(x => x.Expression = (Foo x, string bar) => x.LastName == bar)))| .AddSorting();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: ASC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: DESC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC, barShort: ASC }}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root(order: [| { foo: { barBool: ASC } },| { foo: { barShort: ASC } }]) {| foo {| barBool| barShort| }| }| }| \")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC, barShort: DESC}}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(order: [| { foo: { barBool: DESC } },| { foo: { barShort: DESC } }]) {| foo {| barBool| barShort| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"ASC\")| .Add(res3, \"DESC\")| .Add(res4, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbAggregateFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.Aggregate().AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.Aggregate().AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\" } }){ baz } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\" } }){ baz } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbCollectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.AsExecutable();| });| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ baz}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ baz}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterCombinatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { }){ bar }}\")| .Build());| await Snapshot| .Create()| .Add(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorDateOnlyTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2022-01-16\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2022-01-15\\\" } }){ bar } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2022-01-16\")| .AddResult(res2, \"2022-01-15\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"2022-01-15\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"2022-01-16\\\" } }){ bar } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2022-01-16\")| .AddResult(res2, \"2022-01-15\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2022-01-16\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2022-01-15\\\" } }){ bar } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null } }){ bar } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2022-01-16\")| .AddResult(res2, \"2022-01-15\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(| _fooNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"2022-01-15\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"2022-01-16\\\" } }){ bar } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null } }){ bar } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2022-01-16\")| .AddResult(res2, \"2022-01-15\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null } }) { barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null } }){ barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ] } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ] } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ] } }) { barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null } }){ barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null } }) { barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ] } }) { barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ] } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ] } }) { barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ] } }){ barEnum } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ] } }) { barEnum } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ] } }) { barEnum } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| fooNested: {| some: {| bar: {| eq: \"\"a\"\"| }| }| }| }){| fooNested {| bar| }| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"false\")| .AddResult(res2, \"true\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooSimple, FooSimpleFilterType>(_fooSimple);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| some: {| eq: \"\"a\"\"| }| }| }){| bar| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { some: { eq: \\\"d\\\"}}}){ bar }}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { some: { eq: null}}}){ bar }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooSimple, FooSimpleFilterType>(_fooSimple);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { none: { eq: \\\"a\\\"}}}){ bar }}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { none: { eq: \\\"d\\\"}}}){ bar }}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { none: { eq: null}}}){ bar }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooSimple, FooSimpleFilterType>(_fooSimple);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { all: { eq: \\\"a\\\"}}}){ bar }}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { all: { eq: \\\"d\\\"}}}){ bar }}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { all: { eq: null}}}){ bar }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooSimple, FooSimpleFilterType>(_fooSimple);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { any: false}}){ bar }}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { any: true}}){ bar }}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { all: null}}){ bar }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"false\")| .AddResult(res2, \"true\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"12\")| .AddResult(res2, \"13\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"12and13\")| .AddResult(res2, \"13and14\")| .AddResult(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<BarNullable, BarNullableFilterType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"12\")| .AddResult(res2, \"13\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<BarNullable, BarNullableFilterType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"12and13\")| .AddResult(res2, \"13and14\")| .AddResult(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<BarNullable, BarNullableFilterType>(| _barNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = CreateSchema<BarNullable, BarNullableFilterType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"BAR\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<BarNullable, BarNullableFilterType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"BarAndFoo\")| .AddResult(res2, \"FOO\")| .AddResult(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatest\")| .AddResult(res2, \"testbtest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: \" +| \"[ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatestAndtestb\")| .AddResult(res2, \"testbtestAndNull\")| .AddResult(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"d\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarFilterType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"false\")| .AddResult(res2, \"true\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatest\")| .AddResult(res2, \"testbtest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatest\")| .AddResult(res2, \"testbtest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatestAndtestb\")| .AddResult(res2, \"testbtestAndNull\")| .AddResult(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatestAndtestb\")| .AddResult(res2, \"testbtestAndNull\")| .AddResult(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"b\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"b\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testa\")| .AddResult(res2, \"testb\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testa\")| .AddResult(res2, \"testb\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"atest\")| .AddResult(res2, \"btest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"atest\")| .AddResult(res2, \"btest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatest\")| .AddResult(res2, \"testbtest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatest\")| .AddResult(res2, \"testbtest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatestAndtestb\")| .AddResult(res2, \"testbtestAndNull\")| .AddResult(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testatestAndtestb\")| .AddResult(res2, \"testbtestAndNull\")| .AddResult(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"b\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"a\")| .AddResult(res2, \"b\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testa\")| .AddResult(res2, \"testb\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"testa\")| .AddResult(res2, \"testb\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"atest\")| .AddResult(res2, \"btest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"atest\")| .AddResult(res2, \"btest\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFilterVisitorTimeOnlyTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"06:30:00\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"16:00:00\\\" } }){ bar } }\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"0630\")| .AddResult(res2, \"1600\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"06:30:00\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"16:00:00\\\" } }){ bar } }\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"0630\")| .AddResult(res2, \"1600\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"06:30:00\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"16:00:00\\\" } }){ bar } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null } }){ bar } }\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"0630\")| .AddResult(res2, \"1600\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableFilterType>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"06:30:00\\\" } }){ bar } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"16:00:00\\\" } }){ bar } }\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null } }){ bar } }\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"0630\")| .AddResult(res2, \"1600\")| .AddResult(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFindFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.Find(FilterDefinition<Foo>.Empty).AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.Find(FilterDefinition<Bar>.Empty).AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ baz}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ baz}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Baz>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_bazEntities);| return col| .Find(x => x.Bar > new DateTimeOffset(2000, 1, 1, 0, 0, 0, TimeSpan.Zero))| .AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbCursorPagingAggregateFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2) {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2 after: \"\"MQ==\"\") {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first:1) {| nodes {| bar| }| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbCursorPagingFindFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync(requiresPagingBoundaries: false);| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2) {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2 after: \"\"MQ==\"\") {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(last: 1 before: \"\"NA==\"\") {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync(requiresPagingBoundaries: false);| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync(requiresPagingBoundaries: false);| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first:1) {| nodes {| bar| }| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbOffsetPagingAggregateTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(take: 2) {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(take: 2 skip: 2) {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbOffsetPagingFindFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"| foos {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(take: 2) {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(take: 2 skip: 2) {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbRelayTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<FooType>()| .AddObjectIdConverters()| .AddGlobalObjectIdentification()| .AddMongoDbPagingProviders()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| foo {| id| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<FooType>()| .AddObjectIdConverters(compressGlobalIds: false)| .AddGlobalObjectIdentification()| .AddMongoDbPagingProviders()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| foo {| id| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<FooType>()| .AddObjectIdConverters()| .AddGlobalObjectIdentification()| .AddMongoDbPagingProviders()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id:\"Rm9vOlB/GR6BDBlynehg6g==\") {| id| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .AddType<FooType>()| .AddObjectIdConverters(compressGlobalIds: false)| .AddGlobalObjectIdentification()| .AddMongoDbPagingProviders()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id:\"Rm9vOjUwN2YxOTFlODEwYzE5NzI5ZGU4NjBlYQ==\") {| id| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbProjectionObjectsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation);| // act| var res1 = await tester.ExecuteAsync(| \"\"\"| {| root {| number| foo {| barEnum| }| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| number| foo {| barEnum| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| number| foo {| barEnum| nestedObject {| foo {| barString| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbProjectionVisitorIsProjectedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse isProjectedTrue }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| \"\"\"| {| root {| isProjectedFalse| }| }| \"\"\");| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbProjectionVisitorPagingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooNullableEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(take:10, skip:1) { items { bar baz } } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities, useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar paging { nodes {barBaz }} } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbProjectionVisitorScalarTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| objectType: new ObjectType<Foo>(| x => x| .Field(\"foo\")| .Resolve(| new[]| {| \"foo\",| })| .Type<ListType<StringType>>()));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz foo }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbAggregateFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.Aggregate().AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.Aggregate().AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\" } }){ baz } }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\" } }){ baz } }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbCollectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.AsExecutable();| });| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ baz}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ baz}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbFindFluentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Foo>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_fooEntities);| return col.Find(FilterDefinition<Foo>.Empty).AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"true\")| .AddResult(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| BsonClassMap.RegisterClassMap<Bar>(| x => x.MapField(y => y.Baz)| .SetSerializer(new DateTimeOffsetSerializer(BsonType.String))| .SetElementName(\"testName\"));| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Bar>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_barEntities);| return col.Find(FilterDefinition<Bar>.Empty).AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ baz}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { baz: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ baz}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema(| () =>| {| var col = _resource.CreateCollection<Baz>(\"data_\" + Guid.NewGuid().ToString(\"N\"));| col.InsertMany(_bazEntities);| return col| .Find(x => x.Bar > new DateTimeOffset(2000, 1, 1, 0, 0, 0, TimeSpan.Zero))| .AsExecutable();| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2020-01-11T00:00:00Z\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"2020-01-12T00:00:00Z\\\"}}){ bar}}\")| .Build());| // arrange| await Snapshot| .Create()| .AddResult(res1, \"2020-01-11\")| .AddResult(res2, \"2020-01-12\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbSortVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbSortVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbSortVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbSortVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities!);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities!);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities!);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities!);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"13\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "MongoDbSortVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1, \"ASC\")| .AddResult(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "ObjectIdTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchema();| // act| var schema = executor.Schema.Print();| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchema();| const string query =| \"\"\"| {| foo {| id| }| }| \"\"\";| // act| var result = await executor.ExecuteAsync(query, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchema();| var query = @\"| {| loopback(objectId: \"\"6124e80f3f5fc839830c1f6b\"\")| }\";| // act| var result = await executor.ExecuteAsync(query, CancellationToken.None);| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "OpenApiMutableSchemaBuilderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/petstore-expanded.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder.New(| openApiDocument,| httpClientName: \"PetStoreExpanded\").Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/petstore-expanded.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder.New(| openApiDocument,| httpClientName: \"PetStoreExpanded\").AddMutationConventions().Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/synthetic-with-default-values.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder.New(| openApiDocument,| httpClientName: \"SyntheticWithDefaultValues\").Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/synthetic-with-deprecations.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder.New(| openApiDocument,| httpClientName: \"SyntheticWithDeprecations\").Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/synthetic-with-links.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder.New(| openApiDocument,| httpClientName: \"SyntheticWithLinks\").Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var input = await File.ReadAllTextAsync(\"__resources__/synthetic-with-tags.yaml\");| var openApiDocument = new OpenApiStringReader().Read(input, out _);| // Act| var mutableSchema = OpenApiMutableSchemaBuilder| .New(openApiDocument, httpClientName: \"SyntheticWithTags\")| .Build();| // Assert| var sdl = SchemaFormatter.FormatAsString(mutableSchema);| Snapshot.Match(sdl, extension: \".graphql\");| }"
      }
    ]
  },
  {
    "file": "CursorKeySerializerHelperTests.cs",
    "methods": [
      {
        "name": "Parse_Null_ReturnsNull",
        "body": "{| // arrange| var formattedKey = CursorKeySerializerHelper.Null;| // act| var result = CursorKeySerializerHelper.Parse(formattedKey, _serializer);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Parse_EscapedNull_ReturnsEscapedNull",
        "body": "{| // arrange| var formattedKey = CursorKeySerializerHelper.EscapedNull;| // act| var result = CursorKeySerializerHelper.Parse(formattedKey, _serializer);| // assert| Assert.Equal(\"\\\\null\", result);| }"
      },
      {
        "name": "Parse_NoColons_ReturnsParsedValue",
        "body": "{| // arrange| var formattedKey = \"testvalue\"u8.ToArray();| var expectedValue = \"testvalue\";| // act| var result = CursorKeySerializerHelper.Parse(formattedKey, _serializer);| // assert| Assert.Equal(expectedValue, result);| }"
      },
      {
        "name": "Parse_WithEscapedColons_ReturnsParsedValue",
        "body": "{| // arrange| var formattedKey = \"part1\\\\:part2\"u8.ToArray();| var expectedValue = \"part1:part2\";| // act| var result = CursorKeySerializerHelper.Parse(formattedKey, _serializer);| // assert| Assert.Equal(expectedValue, result);| }"
      },
      {
        "name": "TryFormat_NullKey_FormatsToNull",
        "body": "{| // arrange| object? key = null;| var buffer = new byte[CursorKeySerializerHelper.Null.Length];| // act| var success = CursorKeySerializerHelper.TryFormat(key, _serializer, buffer, out var written);| // assert| Assert.True(success);| Assert.Equal(CursorKeySerializerHelper.Null.Length, written);| Assert.True(CursorKeySerializerHelper.Null.SequenceEqual(buffer));| }"
      },
      {
        "name": "TryFormat_EscapedNull_FormatsToEscapedNull",
        "body": "{| // arrange| object key = \"\\\\null\";| var buffer = new byte[CursorKeySerializerHelper.EscapedNull.Length];| // act| var success = CursorKeySerializerHelper.TryFormat(key, _serializer, buffer, out var written);| // assert| Assert.True(success);| Assert.Equal(CursorKeySerializerHelper.EscapedNull.Length, written);| Assert.True(CursorKeySerializerHelper.EscapedNull.SequenceEqual(buffer));| }"
      },
      {
        "name": "TryFormat_StringWithoutColons_FormatsCorrectly",
        "body": "{| // arrange| object key = \"testvalue\";| Span<byte> buffer = new byte[10];| // act| var success = CursorKeySerializerHelper.TryFormat(key, _serializer, buffer, out var written);| // assert| Assert.True(success);| Assert.Equal(9, written); // \"testvalue\" is 9 bytes| Assert.Equal(\"testvalue\", Encoding.UTF8.GetString(buffer.Slice(0, written)));| }"
      },
      {
        "name": "TryFormat_StringWithColons_EscapesAndFormatsCorrectly",
        "body": "{| // arrange| object key = \"part1:part2\";| Span<byte> buffer = new byte[12]; // \"part1\\\\:part2\" is 12 bytes| // act| var success = CursorKeySerializerHelper.TryFormat(key, _serializer, buffer, out var written);| // assert| Assert.True(success);| Assert.Equal(12, written); // \"part1\\\\:part2\" is 12 bytes| Assert.Equal(\"part1\\\\:part2\", Encoding.UTF8.GetString(buffer.Slice(0, written)));| }"
      },
      {
        "name": "TryFormat_BufferTooSmall_ReturnsFalse",
        "body": "{| // arrange| object key = \"part1:part2\";| var buffer = new byte[10]; // Too small for \"part1\\\\:part2\"| // act| var success = CursorKeySerializerHelper.TryFormat(key, _serializer, buffer, out var written);| // assert| Assert.False(success);| Assert.Equal(0, written);| }"
      }
    ]
  },
  {
    "file": "InterfaceIntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| var queries = new List<QueryInfo>();| using var capture = new CapturePagingQueryInterceptor(queries);| var result = await new ServiceCollection()| .AddScoped(_ => new AnimalContext(connectionString))| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension(typeof(OwnerExtensions))| .AddDataLoader<AnimalsByOwnerDataLoader>()| .AddObjectType<Cat>()| .AddObjectType<Dog>()| .AddPagingArguments()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| owners(first: 10) {| nodes {| id| name| pets(first: 10) {| nodes {| __typename| id| name| }| }| }| }| }| \"\"\")| .Build());| var operationResult = result.ExpectOperationResult();|#if NET9_0_OR_GREATER| await Snapshot.Create(\"NET_9_0\")|#else| await Snapshot.Create()|#endif| .AddQueries(queries)| .Add(operationResult.WithExtensions(ImmutableDictionary<string, object?>.Empty))| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| var queries = new List<QueryInfo>();| using var capture = new CapturePagingQueryInterceptor(queries);| var result = await new ServiceCollection()| .AddScoped(_ => new AnimalContext(connectionString))| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension(typeof(OwnerExtensions))| .AddDataLoader<AnimalsByOwnerDataLoader>()| .AddObjectType<Cat>()| .AddObjectType<Dog>()| .AddPagingArguments()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| owners(first: 10) {| nodes {| id| name| pets(first: 10) {| nodes {| __typename| id| name| ... on Dog {| isBarking| }| ... on Cat {| isPurring| }| }| }| }| }| }| \"\"\")| .Build());| var operationResult = result.ExpectOperationResult();|#if NET9_0_OR_GREATER| await Snapshot.Create(\"NET_9_0\")|#else| await Snapshot.Create()|#endif| .AddQueries(queries)| .Add(operationResult.WithExtensions(ImmutableDictionary<string, object?>.Empty))| .MatchMarkdownAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| var queries = new List<QueryInfo>();| using var capture = new CapturePagingQueryInterceptor(queries);| var result = await new ServiceCollection()| .AddScoped(_ => new AnimalContext(connectionString))| .AddGraphQL()| .AddQueryType<Query>()| .AddTypeExtension(typeof(OwnerExtensions))| .AddDataLoader<AnimalsByOwnerDataLoader>()| .AddObjectType<Cat>()| .AddObjectType<Dog>()| .AddPagingArguments()| .ModifyRequestOptions(o => o.IncludeExceptionDetails = true)| .ExecuteRequestAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| pets(first: 10) {| nodes {| id| name| }| }| }| \"\"\")| .Build());| var operationResult = result.ExpectOperationResult();| await Snapshot.Create()| .AddQueries(queries)| .Add(operationResult.WithExtensions(ImmutableDictionary<string, object?>.Empty))| .MatchMarkdownAsync();| }"
      }
    ]
  },
  {
    "file": "PagingHelperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // Act| var arguments = new PagingArguments(2);| await using var context = new CatalogContext(connectionString);| var page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id)| .ToPageAsync(arguments);| // Assert| page.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // .. get first page| var arguments = new PagingArguments(2);| await using var context = new CatalogContext(connectionString);| var page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id)| .ToPageAsync(arguments);| // Act| arguments = new PagingArguments(2, after: page.CreateCursor(page.Last!));| page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id).ToPageAsync(arguments);| // Assert| page.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // .. get first page| var arguments = new PagingArguments(2);| await using var context = new CatalogContext(connectionString);| var page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id)| .ToPageAsync(arguments);| arguments = new PagingArguments(2, after: page.CreateCursor(page.Last!));| page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id).ToPageAsync(arguments);| // Act| arguments = new PagingArguments(2, after: page.CreateCursor(page.Last!));| page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id).ToPageAsync(arguments);| // Assert| page.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // Act| var arguments = new PagingArguments(last: 2);| await using var context = new CatalogContext(connectionString);| var page = await context.Products| .OrderBy(t => t.Name)| .ThenBy(t => t.Id)| .ToPageAsync(arguments);| // Assert| page.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // .. get last page| var arguments = new PagingArguments(last: 2);| await using var context = new CatalogContext(connectionString);| var page = await context.Products| .OrderBy(t => t.Name)| .ThenBy(t => t.Id)| .ToPageAsync(arguments);| // Act| arguments = arguments with { Before = page.CreateCursor(page.First!), };| page = await context.Products.OrderBy(t => t.Name).ThenBy(t => t.Id).ToPageAsync(arguments);| // Assert| page.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedAsync(connectionString);| // Act| int[] brandIds = [1, 2, 3];| var arguments = new PagingArguments(2);| await using var context = new CatalogContext(connectionString);| var pages = await context.Products| .Where(t => brandIds.Contains(t.BrandId))| .OrderBy(p => p.Name)| .ThenBy(p => p.Id)| .ToBatchPageAsync(t => t.BrandId, arguments);| // Assert| var snapshot = Snapshot.Create();| foreach (var page in pages)| {| snapshot.Add(| new| {| First = page.Value.CreateCursor(page.Value.First!),| Last = page.Value.CreateCursor(page.Value.Last!),| page.Value.Items| },| name: page.Key.ToString());| }| snapshot.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // Arrange| var connectionString = CreateConnectionString();| await SeedTestAsync(connectionString);| await using var context = new CatalogContext(connectionString);| Dictionary<string, IOrderedQueryable<Test>> queries = new()| {| { \"Bool\", context.Tests.OrderByDescending(t => t.Bool) },| { \"DateOnly\", context.Tests.OrderByDescending(t => t.DateOnly) },| { \"DateTime\", context.Tests.OrderByDescending(t => t.DateTime) },| { \"DateTimeOffset\", context.Tests.OrderByDescending(t => t.DateTimeOffset) },| { \"Decimal\", context.Tests.OrderByDescending(t => t.Decimal) },| { \"Double\", context.Tests.OrderByDescending(t => t.Double) },| { \"Float\", context.Tests.OrderByDescending(t => t.Float) },| { \"Guid\", context.Tests.OrderByDescending(t => t.Guid) },| { \"Int\", context.Tests.OrderByDescending(t => t.Int) },| { \"Long\", context.Tests.OrderByDescending(t => t.Long) },| { \"Short\", context.Tests.OrderByDescending(t => t.Short) },| { \"String\", context.Tests.OrderByDescending(t => t.String) },| { \"TimeOnly\", context.Tests.OrderByDescending(t => t.TimeOnly) },| { \"UInt\", context.Tests.OrderByDescending(t => t.UInt) },| { \"ULong\", context.Tests.OrderByDescending(t => t.ULong) },| { \"UShort\", context.Tests.OrderByDescending(t => t.UShort) }| };| // Act| Dictionary<string, Page<Test>> pages = [];| foreach (var (label, query) in queries)| {| // Get 1st page.| var arguments = new PagingArguments(2);| var page = await query.ThenByDescending(t => t.Id).ToPageAsync(arguments);| // Get 2nd page.| arguments = new PagingArguments(2, after: page.CreateCursor(page.Last!));| pages.Add(label, await query.ThenByDescending(t => t.Id).ToPageAsync(arguments));| }| // Assert| pages.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "DefaultOperationDocumentFileMapTests.cs",
    "methods": [
      {
        "name": "Root_Must_Not_Be_Null",
        "body": "{| // arrange| // act| var map = new DefaultOperationDocumentFileMap();| // assert| Assert.NotNull(map.Root);| }"
      },
      {
        "name": "MapToFilePath_Convert_Base64_To_UrlCompatibleBase64",
        "body": "{| // arrange| var map = new DefaultOperationDocumentFileMap();| // act| var path = map.MapToFilePath(\"/+=\");| // assert| Assert.Equal(IOPath.Combine(map.Root, \"-_.graphql\"), path);| }"
      },
      {
        "name": "MapToFilePath_Convert_Base64_To_UrlCompatibleBase64_2",
        "body": "{| // arrange| var map = new DefaultOperationDocumentFileMap();| // act| var path = map.MapToFilePath(\"/+=========\");| // assert| Assert.Equal(IOPath.Combine(map.Root, \"-_.graphql\"), path);| }"
      },
      {
        "name": "MapToFilePath",
        "body": "{| // arrange| var map = new DefaultOperationDocumentFileMap();| // act| var path = map.MapToFilePath(\"abc_def\");| // assert| Assert.Equal(IOPath.Combine(map.Root, \"abc_def.graphql\"), path);| }"
      }
    ]
  },
  {
    "file": "FileSystemOperationDocumentStorageTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| string? path = null;| try| {| // arrange| path = IOPath.Combine(IOPath.GetTempPath(), \"d_\" + Guid.NewGuid().ToString(\"N\"));| Directory.CreateDirectory(path);| var storage = new FileSystemOperationDocumentStorage(new DefaultOperationDocumentFileMap(path));| var document = new OperationDocumentSourceText(\"{ foo }\");| var documentId = new OperationDocumentId(\"1234\");| // act| await storage.SaveAsync(documentId, document);| // assert| Assert.True(File.Exists(IOPath.Combine(path, \"1234.graphql\")));| var content = await File.ReadAllBytesAsync(IOPath.Combine(path, \"1234.graphql\"));| Utf8GraphQLParser.Parse(content).Print().MatchSnapshot();| }| finally| {| if (path != null)| {| Directory.Delete(path, true);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| string? path = null;| try| {| // arrange| path = IOPath.Combine(IOPath.GetTempPath(), \"d_\" + Guid.NewGuid().ToString(\"N\"));| Directory.CreateDirectory(path);| var storage = new FileSystemOperationDocumentStorage(new DefaultOperationDocumentFileMap(path));| var document = new OperationDocumentSourceText(\"{ foo }\");| // act| async Task Action() => await storage.SaveAsync(new OperationDocumentId(), document);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }| finally| {| if (path != null)| {| Directory.Delete(path, true);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| string? path = null;| try| {| // arrange| path = IOPath.Combine(IOPath.GetTempPath(), \"d_\" + Guid.NewGuid().ToString(\"N\"));| Directory.CreateDirectory(path);| var storage = new FileSystemOperationDocumentStorage(new DefaultOperationDocumentFileMap(path));| // act| async Task Action() => await storage.SaveAsync(new OperationDocumentId(\"1234\"), null!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }| finally| {| if (path != null)| {| Directory.Delete(path, true);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| string? path = null;| try| {| // arrange| path = IOPath.Combine(IOPath.GetTempPath(), \"d_\" + Guid.NewGuid().ToString(\"N\"));| Directory.CreateDirectory(path);| var storage = new FileSystemOperationDocumentStorage(new DefaultOperationDocumentFileMap(path));| var documentId = \"1234\";| await File.WriteAllTextAsync(IOPath.Combine(path, documentId + \".graphql\"), \"{ foo }\");| // act| var document = await storage.TryReadAsync(new OperationDocumentId(documentId));| // assert| Assert.NotNull(document);| Assert.IsType<OperationDocument>(document).Document!.ToString().MatchSnapshot();| }| finally| {| if (path != null)| {| Directory.Delete(path, true);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| string? path = null;| try| {| // arrange| path = IOPath.Combine(IOPath.GetTempPath(), \"d_\" + Guid.NewGuid().ToString(\"N\"));| Directory.CreateDirectory(path);| var storage = new FileSystemOperationDocumentStorage(new DefaultOperationDocumentFileMap(path));| // act| async Task Action() => await storage.TryReadAsync(new OperationDocumentId());| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }| finally| {| if (path != null)| {| Directory.Delete(path, true);| }| }| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderTests.cs",
    "methods": [
      {
        "name": "AddFileSystemOperationDocumentStorage_2_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsRequestExecutorBuilderExtensions| .AddFileSystemOperationDocumentStorage(null!);| Assert.Throws<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "ServiceCollectionTests.cs",
    "methods": [
      {
        "name": "AddFileSystemOperationDocumentStorage_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsServiceCollectionExtensions| .AddFileSystemOperationDocumentStorage(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "AddFileSystemOperationDocumentStorage_1_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage(\"foo\");| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .MatchSnapshot();| }"
      },
      {
        "name": "AddFileSystemOperationDocumentStorage_2_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage();| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .MatchSnapshot();| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsServiceCollectionExtensions| .AddFileSystemOperationDocumentStorage(null!);| // assert| Assert.Throws<ArgumentNullException>((Action) Action);| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_1_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage(\"foo\");| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .OrderBy(t => t.Key)| .MatchSnapshot();| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_2_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage();| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .OrderBy(t => t.Key)| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "InMemoryOperationDocumentStorageTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var serviceCollection = new ServiceCollection();| serviceCollection.AddMemoryCache();| serviceCollection.AddInMemoryOperationDocumentStorage();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var memoryCache = services.GetRequiredService<IMemoryCache>();| var documentStorage = services.GetRequiredService<IOperationDocumentStorage>();| const string documentId = \"abc\";| var document = Utf8GraphQLParser.Parse(\"{ __typename }\");| // act| await documentStorage.SaveAsync(| new OperationDocumentId(documentId),| new OperationDocument(document),| CancellationToken.None);| // assert| Assert.True(memoryCache.TryGetValue(documentId, out var o));| Assert.IsType<OperationDocument>(o);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var serviceCollection = new ServiceCollection();| serviceCollection.AddMemoryCache();| serviceCollection.AddInMemoryOperationDocumentStorage();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var memoryCache = services.GetRequiredService<IMemoryCache>();| var documentStorage = services.GetRequiredService<IOperationDocumentStorage>();| const string documentId = \"abc\";| var document = Utf8GraphQLParser.Parse(\"{ __typename }\");| memoryCache.GetOrCreate(documentId, _ => new OperationDocument(document));| // act| var operationDocument = await documentStorage.TryReadAsync(| new OperationDocumentId(documentId),| CancellationToken.None);| // assert| Assert.NotNull(operationDocument);| Assert.Same(document, Assert.IsType<OperationDocument>(operationDocument).Document);| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderTests.cs",
    "methods": [
      {
        "name": "AddFileSystemOperationDocumentStorage_2_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsRequestExecutorBuilderExtensions| .AddFileSystemOperationDocumentStorage(null!);| Assert.Throws<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "ServiceCollectionTests.cs",
    "methods": [
      {
        "name": "AddFileSystemOperationDocumentStorage_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsServiceCollectionExtensions| .AddFileSystemOperationDocumentStorage(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "AddFileSystemOperationDocumentStorage_1_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage(\"foo\");| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .MatchSnapshot();| }"
      },
      {
        "name": "AddFileSystemOperationDocumentStorage_2_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage();| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .MatchSnapshot();| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsServiceCollectionExtensions| .AddFileSystemOperationDocumentStorage(null!);| // assert| Assert.Throws<ArgumentNullException>((Action) Action);| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_1_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage(\"foo\");| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .OrderBy(t => t.Key)| .MatchSnapshot();| }"
      },
      {
        "name": "AddReadOnlyFileSystemOperationDocumentStorage_2_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddFileSystemOperationDocumentStorage();| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .OrderBy(t => t.Key)| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "RedisOperationDocumentStorageTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var documentId = new OperationDocumentId(Guid.NewGuid().ToString(\"N\"));| var storage = new RedisOperationDocumentStorage(_database);| var document = new OperationDocumentSourceText(\"{ foo }\");| // act| await storage.SaveAsync(documentId, document);| // assert| var buffer = ((byte[])await _database.StringGetAsync(documentId.Value))!;| Utf8GraphQLParser.Parse(buffer).Print().MatchSnapshot();| await _database.KeyDeleteAsync(documentId.Value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var documentId = new OperationDocumentId();| var storage = new RedisOperationDocumentStorage(_database);| var document = new OperationDocumentSourceText(\"{ foo }\");| // act| async Task Action() => await storage.SaveAsync(documentId, document);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var storage = new RedisOperationDocumentStorage(_database);| var documentId = new OperationDocumentId(Guid.NewGuid().ToString(\"N\"));| // act| async Task Action() => await storage.SaveAsync(documentId, null!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var documentId = new OperationDocumentId(Guid.NewGuid().ToString(\"N\"));| var storage = new RedisOperationDocumentStorage(_database);| var buffer = \"{ foo }\"u8.ToArray();| await _database.StringSetAsync(documentId.Value, buffer);| // act| var document = await storage.TryReadAsync(documentId);| // assert| Assert.NotNull(document);| Assert.IsType<OperationDocument>(document).Document.Print().MatchSnapshot();| await _database.KeyDeleteAsync(documentId.Value);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var documentId = new OperationDocumentId();| var storage = new RedisOperationDocumentStorage(_database);| // act| async Task Action() => await storage.TryReadAsync(documentId);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "RequestExecutorBuilderTests.cs",
    "methods": [
      {
        "name": "AddFileSystemOperationDocumentStorage_2_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateFileSystemPersistedOperationsRequestExecutorBuilderExtensions| .AddFileSystemOperationDocumentStorage(null!);| Assert.Throws<ArgumentNullException>(Action);| }"
      }
    ]
  },
  {
    "file": "ServiceCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "AddRedisOperationDocumentStorage_Services_Is_Null",
        "body": "{| // arrange| // act| void Action()| => HotChocolateRedisPersistedOperationsServiceCollectionExtensions| .AddRedisOperationDocumentStorage(null!, _ => _database);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "AddRedisOperationDocumentStorage_Factory_Is_Null",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| void Action()| => services.AddRedisOperationDocumentStorage(null!);| // assert| Assert.Throws<ArgumentNullException>(Action);| }"
      },
      {
        "name": "AddRedisOperationDocumentStorage_Services",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddRedisOperationDocumentStorage(_ => _database);| // assert| services.ToDictionary(| k => k.ServiceType.GetTypeName(),| v => v.ImplementationType?.GetTypeName())| .OrderBy(t => t.Key)| .MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ConventionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var tester =| _cache.CreateSchema<TypeWithList, FilterInputType<TypeWithList>>(TypeWithList.Data);| await Snapshot| .Create()| .Add(tester.Schema.Print(), \"schema\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| var snapshot = new Snapshot();| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: true}}){ bar}}\")| .Build());| snapshot.Add(res1, \"true\");| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: false}}){ bar}}\")| .Build());| snapshot.Add(res2, \"false\");| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| snapshot.Add(res3, \"null\");| // assert| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ null, 14 ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"nullAnd14\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { eq: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { neq: null}}){ barShort}}\")| .Build());| // assert| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { gte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { ngte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlt: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { lte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 12}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 13}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: 14}}){ barShort}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nlte: null}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12\");| snapshot.Add(res2, \"13\");| snapshot.Add(res3, \"14\");| snapshot.Add(res4, \"null\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { in: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 12, 13 ]}}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, 14 ]}}){ barShort}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barShort: { nin: [ 13, null ]}}){ barShort}}\")| .Build());| // assert| var snapshot = new Snapshot();| snapshot.Add(res1, \"12and13\");| snapshot.Add(res2, \"13and14\");| snapshot.Add(res3, \"13andNull\");| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { eq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: BAR}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: FOO}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { neq: null}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // assert| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { in: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ BAR FOO ]}}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ FOO ]}}){ barEnum}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { barEnum: { nin: [ null FOO ]}}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: true}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: false}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorInterfacesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema<BarInterface, FilterInputType<BarInterface>>(| _barEntities,| configure: Configure);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"a\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: \\\"b\\\"}}}) \" +| \"{ test{ prop }}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { test: { prop: { eq: null}}}) \" +| \"{ test{ prop}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorListTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { some: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { fooNested: { none: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"a\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: \\\"d\\\"}}}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: {bar: { eq: null}}}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: false}}){ fooNested {bar}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { any: true}}){ fooNested {bar}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { fooNested: { all: null}}){ fooNested {bar}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ null, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"nullAnd14\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 12}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: 13}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { eq: null}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12\")| .Add(res2, \"13\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 12, 13 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, 14 ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barShort: { in: [ 13, null ]}}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"12and13\")| .Add(res2, \"13and14\")| .Add(res3, \"13andNull\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: true}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: false}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barBool: { eq: null}}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"true\")| .Add(res2, \"false\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: FOO}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { eq: null}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BAR\")| .Add(res2, \"FOO\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ BAR FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { in: [ null FOO ]}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"BarAndFoo\")| .Add(res2, \"FOO\")| .Add(res3, \"nullAndFoo\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testatest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: \\\"testbtest\\\"}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { eq: null}}}){ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [\\\"testbtest\\\" null]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barString: { in: [ \\\"testatest\\\" ]}}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"a\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: \\\"d\\\"}}}}}}) \" +| \"{ foo { objectArray { foo { barString}}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo:{ objectArray: { \" +| \"some: { foo: { barString: { eq: null}}}}}}) \" +| \"{ foo { objectArray { foo {barString}}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"d\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarFilterInput>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: false}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: true}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { objectArray: { any: null}}}) \" +| \"{ foo { objectArray { foo { barString }}}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"false\")| .Add(res2, \"true\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableFilterInput>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(where: { foo: { barEnum: { neq: BAR}}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { foo: null}) { foo{ barEnum}}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument( \"{ root { foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"selected\")| .Add(res2, \"null\")| .Add(res3, \"all\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooFilterInput>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { eq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testatest\\\"}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: \\\"testbtest\\\"}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { neq: null}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatest\")| .Add(res2, \"testbtest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { in: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" \\\"testbtest\\\" ]}}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [\\\"testbtest\\\" null]}}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nin: [ \\\"testatest\\\" ]}}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testatestAndtestb\")| .Add(res2, \"testbtestAndNull\")| .Add(res3, \"testatest\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { contains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"a\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: \\\"b\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { ncontains: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"a\")| .Add(res2, \"b\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { startsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(_fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testa\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: \\\"testb\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nstartsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"testa\")| .Add(res2, \"testb\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { endsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableFilterInput>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"atest\\\" }}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: \\\"btest\\\" }}){ bar}}\")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(where: { bar: { nendsWith: null }}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"atest\")| .Add(res2, \"btest\")| .Add(res3, \"null\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "RavenAsyncDocumentQueryTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2) {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2 after: \"\"MQ==\"\") {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first:1) {| nodes {| bar| }| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset(take: 2) {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| foosOffset(take: 2 skip: 2) {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset(take:1) {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      }
    ]
  },
  {
    "file": "RavenDocumentQueryTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2) {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first: 2 after: \"\"MQ==\"\") {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| edges {| node {| bar| }| cursor| }| nodes {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| startCursor| endCursor| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foos(first:1) {| nodes {| bar| }| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset(take: 2) {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset(take: 2 skip: 2) {| items {| bar| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| items {| bar| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateSchemaAsync();| // act| var result = await executor.ExecuteAsync(| @\"{| foosOffset(take:1) {| totalCount| }| }\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFirstOrDefaultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| rootExecutable {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionFilterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| barString| objectArray(| where: {| foo: {| barString: {| eq: \"\"a\"\"| }| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| foo {| id| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| id| foo {| id| barEnum| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barWithoutRelation, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root {| id| foo {| id| barEnum| nestedObject {| foo {| barString| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionHashSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionInterfaceTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities,| OnModelCreating,| configure: x =>| {| ConfigureSchema(x);| var typeExtension =| new ObjectTypeExtension<StubObject<AbstractType>>(| y =>| {| y.Name(\"Query\");| y.Field(z => z.Root).UsePaging<InterfaceType<AbstractType>>();| });| x.AddType(typeExtension);| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barNestedEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nested {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barListEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| list {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(| _barEntities,| OnModelCreating,| configure: ConfigureSchema,| schemaType: typeof(InterfaceType<AbstractType>),| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(| _barEntities,| OnModelCreating,| configure: ConfigureSchema,| schemaType: typeof(InterfaceType<AbstractType>),| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| items {| name| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionNestedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| notSettable {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| notSettableList {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| method {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| methodList {| barString| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSortedSetTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectSet {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionSortingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create(postFix: TestEnvironment.TargetFramework)| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _barNullableEntities,| OnModelCreatingNullable);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _barNullableEntities,| OnModelCreatingNullable);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray(| order: {| foo: {| barShort: ASC| }| }) {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionUnionTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities,| OnModelCreating,| configure: x =>| {| ConfigureSchema(x);| var typeExtension =| new ObjectTypeExtension<StubObject<AbstractType>>(| y =>| {| y.Name(\"Query\");| y.Field(z => z.Root).UsePaging<UnionType<AbstractType>>();| });| x.AddType(typeExtension);| });| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nodes {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barNestedEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| nested {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache| .CreateSchema(_barListEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| list {| ... on Foo {| fooProp| }| ... on Bar {| barProp| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema(_barEntities, OnModelCreating, configure: ConfigureSchema);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| ... on Foo {| fooProp| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| objectType: new ObjectType<Foo>(| x => x| .Field(\"foo\")| .Resolve(new[] { \"foo\", })| .Type<ListType<StringType>>()));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable{ baz foo }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorIsProjectedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse isProjectedTrue }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooMultipleEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root { isProjectedFalse }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorPagingTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { bar baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ baz } edges { node { baz }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ nodes{ bar paging { nodes {barBaz }} } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(take:10, skip:1){ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { bar baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items { baz } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar list { barBaz } } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| useOffsetPaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ items{ bar paging { nodes {barBaz }} } }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooNullableEntities,| usePaging: true);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ b: nodes{ baz } a: edges { node { bar }} }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableProjectionVisitorScalarTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ notSettable }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ computed }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ bar baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(| _fooEntities,| objectType: new ObjectType<Foo>(| x => x| .Field(\"foo\")| .Resolve(new[] { \"foo\", })| .Type<ListType<StringType>>()));| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root{ baz foo }}\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSingleOrDefaultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| rootExecutable {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema(_barNullableEntities, OnModelCreating);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root {| foo {| barString| objectArray {| foo {| barString| barShort| }| }| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(res1)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorBooleanTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorComparableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: ASC}){ barShort}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barShort: DESC}){ barShort}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorEnumTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: ASC}){ barEnum}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barEnum: DESC}){ barEnum}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExecutableTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: ASC}]){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: [{ bar: DESC}]){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ rootExecutable(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorExpressionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: DESC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { displayName: ASC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"DESC\")| .Add(res2, \"ASC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var builder = new ServiceCollection()| .AddGraphQL()| .AddQueryType(x => x| .Name(\"Query\")| .Field(\"Foo\")| .Resolve(Array.Empty<Foo>())| .UseSorting())| .AddType(new SortInputType<Foo>(x => x| .Field(x => x.LastName)| .Extend()| .OnBeforeCreate(x => x.Expression = (Foo x, string bar) => x.LastName == bar)))| .AddSorting();| // act| async Task<IRequestExecutor> Call() => await builder.BuildRequestExecutorAsync();| // assert| var ex = await Assert.ThrowsAsync<SchemaException>(Call);| ex.Errors.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortInputType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: ASC}){ name lastName}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { barLength: DESC}){ name lastName}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorObjectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester =| _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: ASC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barShort: DESC}}) \" +| \"{ foo{ barShort}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: ASC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barEnum: DESC}}) \" +| \"{ foo{ barEnum}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: ASC}}) \" +| \"{ foo{ barString}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barString: DESC}}) \" +| \"{ foo{ barString}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<BarNullable, BarNullableSortType>(_barNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC}}) \" +| \"{ foo{ barBool}}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"13\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Bar, BarSortType>(_barEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: ASC, barShort: ASC }}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"| {| root(order: [| { foo: { barBool: ASC } },| { foo: { barShort: ASC } }]) {| foo {| barBool| barShort| }| }| }| \")| .Build());| var res3 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"{ root(order: { foo: { barBool: DESC, barShort: DESC}}) \" +| \"{ foo{ barBool barShort}}}\")| .Build());| var res4 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(order: [| { foo: { barBool: DESC } },| { foo: { barShort: DESC } }]) {| foo {| barBool| barShort| }| }| }\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"ASC\")| .Add(res3, \"DESC\")| .Add(res4, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableSortVisitorStringTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<Foo, FooSortType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = _cache.CreateSchema<FooNullable, FooNullableSortType>(| _fooNullableEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: ASC}){ bar}}\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(\"{ root(order: { bar: DESC}){ bar}}\")| .Build());| // assert| await Snapshot| .Create()| .Add(res1, \"ASC\")| .Add(res2, \"DESC\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "AnnotationBasedTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| allCars {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| pagingName(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| pagingExecutable(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| pagingName(where: {engine: {cylinderCount: {gte: 4}}}) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| pagingRaven(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| offsetPaging(skip:1, take:1) {| items {| id| name| engine {| cylinderCount| }| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| firstOrDefault {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| executable {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      }
    ]
  },
  {
    "file": "DataExtensionsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| pagingName(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| filtering(where: {engine: {cylinderCount: {gte: 4}}}) {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| offset(skip: 2) {| items {| id| name| engine {| cylinderCount| }| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      }
    ]
  },
  {
    "file": "FluentApiTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| allCars {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| pagingName(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| pagingExecutable(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| pagingName(where: {engine: {cylinderCount: {gte: 4}}}) {| nodes {| id| name| engine {| cylinderCount| }| }| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| pagingRaven(first: 2) {| nodes {| id| name| engine {| cylinderCount| }| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| offsetPaging(skip:1, take:1) {| items {| id| name| engine {| cylinderCount| }| }| pageInfo {| hasNextPage| hasPreviousPage| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| firstOrDefault {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executor = await CreateExecutorAsync();| // act| var result = await executor.ExecuteAsync(\"\"\"| {| executable {| id| name| engine {| cylinderCount| }| }| }| \"\"\");| // assert| await Snapshot.Create().AddResult(result).MatchAsync();| }"
      }
    ]
  },
  {
    "file": "ArgumentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // https://github.com/ChilliCream/graphql-platform/issues/4281| // arrange| var executor = await new ServiceCollection()| .AddGraphQL()| .AddQueryType<Query>()| .UseField<Middleware>()| .BuildRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| OperationRequestBuilder| .New()| .SetDocument(@\"{| arrayOfScalarsA: arrayOfScalars(values: 1)| arrayOfScalarsB: arrayOfScalars(values: [1, 2])| arrayOfObjectsA: arrayOfObjects(values: { bar: 1 }) { bar }| arrayOfObjectsB: arrayOfObjects(values: [{ bar: 1 }, { bar: 2 }]) { bar }| listOfScalarsA: listOfScalars(values: 1)| listOfScalarsB: listOfScalars(values: [1, 2])| listOfObjectsA: listOfObjects(values: { bar: 1 }) { bar }| listOfObjectsB: listOfObjects(values: [{ bar: 1 }, { bar: 2 }]) { bar }| }\")| .Build());| // assert| result.ToJson().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "RefactoringTests.cs",
    "methods": [
      {
        "name": "Rename_ObjectType",
        "body": "{| // arrange| const string sdl =| \"\"\"| type Foo {| field: Bar| }| type Bar {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var success = schema.RenameMember(new SchemaCoordinate(\"Bar\"), \"Baz\");| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Baz {| field: String| }| type Foo {| field: Baz| }| \"\"\");| }"
      },
      {
        "name": "Rename_UnionType",
        "body": "{| // arrange| const string sdl =| \"\"\"| union FooOrBar = Foo | Bar| type Foo {| field: Bar| }| type Bar {| field: String| }| type Baz {| some: FooOrBar| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var success = schema.RenameMember(new SchemaCoordinate(\"FooOrBar\"), \"FooOrBar1\");| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Bar {| field: String| }| type Baz {| some: FooOrBar1| }| type Foo {| field: Bar| }| union FooOrBar1 = Foo | Bar| \"\"\");| }"
      },
      {
        "name": "Rename_Member",
        "body": "{| // arrange| const string sdl =| \"\"\"| type Foo {| field: Bar| }| type Bar {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var success = schema.RenameMember(new SchemaCoordinate(\"Bar\", \"field\"), \"__field\");| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Bar {| __field: String| }| type Foo {| field: Bar| }| \"\"\");| }"
      },
      {
        "name": "AddDirective_To_Type",
        "body": "{| // arrange| const string sdl =| \"\"\"| type Foo {| field: Bar| }| type Bar {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| var directiveType = new DirectiveDefinition(\"source\");| directiveType.Arguments.Add(new(\"name\", new NonNullTypeDefinition(schema.Types[\"String\"])));| directiveType.Locations = DirectiveLocation.TypeSystem;| schema.DirectiveDefinitions.Add(directiveType);| // act| var success = schema.AddDirective(| new SchemaCoordinate(\"Bar\"),| new Directive(| directiveType,| new ArgumentAssignment(\"name\", \"abc\")));| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Bar| @source(name: \"abc\") {| field: String| }| type Foo {| field: Bar| }| directive @source(name: String!) on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION| \"\"\");| }"
      },
      {
        "name": "AddDirective_To_Field",
        "body": "{| // arrange| const string sdl =| \"\"\"| type Foo {| field: Bar| }| type Bar {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| var directiveType = new DirectiveDefinition(\"source\");| directiveType.Arguments.Add(new(\"name\", new NonNullTypeDefinition(schema.Types[\"String\"])));| directiveType.Locations = DirectiveLocation.TypeSystem;| schema.DirectiveDefinitions.Add(directiveType);| // act| var success = schema.AddDirective(| new SchemaCoordinate(\"Bar\", \"field\"),| new Directive(| directiveType,| new ArgumentAssignment(\"name\", \"abc\")));| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Bar {| field: String| @source(name: \"abc\")| }| type Foo {| field: Bar| }| directive @source(name: String!) on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION| \"\"\");| }"
      },
      {
        "name": "Remove_ObjectType",
        "body": "{| // arrange| const string sdl =| \"\"\"| type Foo {| field: Bar| }| type Bar {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var success = schema.RemoveMember(new SchemaCoordinate(\"Bar\"));| // assert| Assert.True(success);| SchemaFormatter| .FormatAsString(schema)| .MatchInlineSnapshot(| \"\"\"| type Foo {| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "SchemaFormatterTests.cs",
    "methods": [
      {
        "name": "Format_Single_InputObject_Type",
        "body": "{| // arrange| var sdl =| \"\"\"| input Foo {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| input Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "Format_Single_InputObject_Type_Spec_Scalars_Do_Not_Need_To_Be_Declared",
        "body": "{| // arrange| var sdl =| \"\"\"| input Foo {| field: String| }| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| input Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "Format_Two_InputObject_Extensions_Into_One",
        "body": "{| // arrange| var sdl =| \"\"\"| extend input Foo {| field1: String| }| extend input Foo {| field2: [String]!| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| extend input Foo {| field1: String| field2: [String]!| }| \"\"\");| }"
      },
      {
        "name": "Format_Single_Object_Type",
        "body": "{| // arrange| var sdl =| \"\"\"| type Foo {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| type Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "Format_Two_Object_Extensions_Into_One",
        "body": "{| // arrange| var sdl =| \"\"\"| extend type Foo {| field1: String| }| extend type Foo {| field2: [String]!| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| extend type Foo {| field1: String| field2: [String]!| }| \"\"\");| }"
      },
      {
        "name": "Format_Single_Interface_Type",
        "body": "{| // arrange| var sdl =| \"\"\"| interface Foo {| field: String| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| interface Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "Format_Two_interface_Extensions_Into_One",
        "body": "{| // arrange| var sdl =| \"\"\"| extend interface Foo {| field1: String| }| extend interface Foo {| field2: [String]!| }| scalar String| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| extend interface Foo {| field1: String| field2: [String]!| }| \"\"\");| }"
      },
      {
        "name": "Format_Directive_Type",
        "body": "{| // arrange| var sdl =| \"\"\"| directive @foo on FIELD_DEFINITION| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| directive @foo on FIELD_DEFINITION| \"\"\");| }"
      },
      {
        "name": "Format_Directive_Type_With_Arguments",
        "body": "{| // arrange| var sdl =| \"\"\"| directive @foo(a: String! b: [Foo] c: [Int!]) on FIELD_DEFINITION| input Foo {| a: Boolean| }| \"\"\";| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // act| var formattedSdl = SchemaFormatter.FormatAsString(schema);| // assert| formattedSdl.MatchInlineSnapshot(| \"\"\"| input Foo {| a: Boolean| }| directive @foo(a: String! b: [Foo] c: [Int!]) on FIELD_DEFINITION| \"\"\");| }"
      }
    ]
  },
  {
    "file": "SchemaParserTests.cs",
    "methods": [
      {
        "name": "ParserSimpleObjectType",
        "body": "{| // arrange| var sourceText = \"type a @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") \" +| \"c(d: F = ENUMVALUE @foo(a: \\\"123\\\")): Int }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserInputObjectType",
        "body": "{| // arrange| var sourceText = \"input a @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") c: Int = 123 }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserScalarType",
        "body": "{| // arrange| var sourceText = \"scalar FOO @foo(a: \\\"123\\\")\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParserSimpleInterfaceType",
        "body": "{| // arrange| var sourceText = \"interface a implements e @foo(a: \\\"123\\\") \" +| \"{ b: String @foo(a: \\\"123\\\") \" +| \"c(d: F = ENUMVALUE @foo(a: \\\"123\\\")): Int }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseEnum",
        "body": "{| // arrange| var sourceText = \"enum Foo @foo(a: \\\"123\\\") \"| + \"{ BAR @foo(a: 123) , BAZ }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseUnion",
        "body": "{| // arrange| var sourceText = \"union Foo @foo(a: \\\"123\\\") = \"| + \"BAR | BAZ \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseUnion_LeadingPipe",
        "body": "{| // arrange| var sourceText = \"union Foo @foo(a: \\\"123\\\") = \"| + \"| BAR | BAZ \";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "ParseSchemaDefinition",
        "body": "{| // arrange| var sourceText = \"\\\"\\\"\\\"\\nDescription\\n\\\"\\\"\\\"\" +| \"schema @foo(a: \\\"123\\\") \" +| \"{ query: Foo mutation: Bar subscription: Baz }\";| var parser = new Utf8GraphQLParser(| Encoding.UTF8.GetBytes(sourceText));| // act| var document = parser.Parse();| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "OneGraph_Schema",
        "body": "{| // arrange| var sourceText = Encoding.UTF8.GetBytes(FileResource.Open(\"onegraph.graphql\"));| // act| var document = Utf8GraphQLParser.Parse(sourceText);| // assert| document.ToString().MatchSnapshot();| }"
      },
      {
        "name": "Parse_Directive_With_VariableDefinition",
        "body": "{| // arrange| const string sourceText = \"directive @foo(a: String) on VARIABLE_DEFINITION\";| // act| var document = Utf8GraphQLParser.Parse(sourceText);| // assert| document.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var schema =| await new ServiceCollection()| .AddGraphQLServer(disableDefaultSecurity: true)| .AddTypeExtension(typeof(Query))| .ConfigureSchema(| b => b.TryAddRootType(| () => new ObjectType(| d => d.Name(OperationTypeNames.Query)),| Language.OperationType.Query)| .ModifyOptions(o => o.RemoveUnusedTypeSystemDirectives = false))| .AddCacheControl()| .BuildSchemaAsync();| schema.MatchInlineSnapshot(| \"\"\"\"| schema {| query: Query| }| type Book {| title: String! @cacheControl(maxAge: 5000)| description: String!| }| type Query {| book: Book! @cacheControl(maxAge: 0)| }| \"The scope of a cache hint.\"| enum CacheControlScope {| \"The value to cache is not tied to a single user.\"| PUBLIC| \"The value to cache is specific to a single user.\"| PRIVATE| }| \"The `@cacheControl` directive may be provided for individual fields or entire object, interface or union types to provide caching hints to the executor.\"| directive @cacheControl(\"The maximum amount of time this field's cached value is valid, in seconds.\" maxAge: Int \"The maximum amount of time this field's cached value is valid in shared caches like CDNs, in seconds.\" sharedMaxAge: Int \"If `true`, the field inherits the `maxAge` of its parent field.\" inheritMaxAge: Boolean \"If `PRIVATE`, the field's value is specific to a single user. The default value is `PUBLIC`, which means the field's value is not tied to a single user.\" scope: CacheControlScope \"The Vary HTTP response header describes the parts of the request message aside from the method and URL that influenced the content of the response it occurs in. Most often, this is used to create a cache key when content negotiation is in use.\" vary: [String]) on OBJECT | FIELD_DEFINITION | INTERFACE | UNION| \"\"\"| The `@oneOf` directive is used within the type system definition language| to indicate:| - an Input Object is a Oneof Input Object, or| - an Object Type's Field is a Oneof Field.| \"\"\"| directive @oneOf on INPUT_OBJECT| \"\"\"| The @tag directive is used to apply arbitrary string| metadata to a schema location. Custom tooling can use| this metadata during any step of the schema delivery flow,| including composition, static analysis, and documentation.| interface Book {| id: ID! @tag(name: \"your-value\")| title: String!| author: String!| }| \"\"\"| directive @tag(\"The name of the tag.\" name: String!) repeatable on SCHEMA | SCALAR | OBJECT | FIELD_DEFINITION | ARGUMENT_DEFINITION | INTERFACE | UNION | ENUM | ENUM_VALUE | INPUT_OBJECT | INPUT_FIELD_DEFINITION| \"\"\"\");| }"
      }
    ]
  },
  {
    "file": "SpecScalarTests.cs",
    "methods": [
      {
        "name": "CreateStringTypeDefinition",
        "body": "{| var type = BuiltIns.String.Create();| Assert.Equal(BuiltIns.String.Name, type.Name);| Assert.True(type.IsSpecScalar);| Assert.False(type.IsReadOnly);| }"
      },
      {
        "name": "CreateBooleanTypeDefinition",
        "body": "{| var type = BuiltIns.Boolean.Create();| Assert.Equal(BuiltIns.Boolean.Name, type.Name);| Assert.True(type.IsSpecScalar);| Assert.False(type.IsReadOnly);| }"
      },
      {
        "name": "CreateFloatTypeDefinition",
        "body": "{| var type = BuiltIns.Float.Create();| Assert.Equal(BuiltIns.Float.Name, type.Name);| Assert.True(type.IsSpecScalar);| Assert.False(type.IsReadOnly);| }"
      },
      {
        "name": "CreateIDTypeDefinition",
        "body": "{| var type = BuiltIns.ID.Create();| Assert.Equal(BuiltIns.ID.Name, type.Name);| Assert.True(type.IsSpecScalar);| Assert.False(type.IsReadOnly);| }"
      },
      {
        "name": "CreateIntTypeDefinition",
        "body": "{| var type = BuiltIns.Int.Create();| Assert.Equal(BuiltIns.Int.Name, type.Name);| Assert.True(type.IsSpecScalar);| Assert.False(type.IsReadOnly);| }"
      }
    ]
  },
  {
    "file": "ToStringTests.cs",
    "methods": [
      {
        "name": "ObjectType_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| type Foo {| field: String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| schema.Types[\"Foo\"].ToString().MatchInlineSnapshot(| \"\"\"| type Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "InterfaceType_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| interface Foo {| field: String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| schema.Types[\"Foo\"].ToString().MatchInlineSnapshot(| \"\"\"| interface Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "InputObjectType_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| input Foo {| field: String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| schema.Types[\"Foo\"].ToString().MatchInlineSnapshot(| \"\"\"| input Foo {| field: String| }| \"\"\");| }"
      },
      {
        "name": "OutputField_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| type Foo {| field: String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| ((ObjectTypeDefinition)schema.Types[\"Foo\"]).Fields[\"field\"]| .ToString().MatchInlineSnapshot(| \"\"\"| field: String| \"\"\");| }"
      },
      {
        "name": "OutputField_WithArg_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| type Foo {| field(a: String): String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| ((ObjectTypeDefinition)schema.Types[\"Foo\"]).Fields[\"field\"]| .ToString().MatchInlineSnapshot(| \"\"\"| field(a: String): String| \"\"\");| }"
      },
      {
        "name": "InputField_ToString",
        "body": "{| // arrange| var sdl =| \"\"\"| input Foo {| field: String| }| scalar String| \"\"\";| // act| var schema = SchemaParser.Parse(Encoding.UTF8.GetBytes(sdl));| // assert| ((InputObjectTypeDefinition)schema.Types[\"Foo\"]).Fields[\"field\"]| .ToString().MatchInlineSnapshot(| \"\"\"| field: String| \"\"\");| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorContainsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| contains: {| geometry: {| type: Point,| coordinates: [1, 1]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| contains: {| geometry: {| type: Point,| coordinates: [-1, -1]| }| }| }}){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"1\"), res2, \"2\")| .MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| ncontains: {| geometry: {| type: Point,| coordinates: [1, 1]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| ncontains: {| geometry: {| type: Point,| coordinates: [-1, -1]| }| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"2\"), res2, \"1\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorDistanceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| distance: {| geometry: {| type: Point,| coordinates: [1, 1]| },| gt: 1| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| distance: {| geometry: {| type: Point,| coordinates: [-1, -1]| },| gt: 1| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"2\"), res2, \"1\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorIntersectTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| intersects: {| geometry: {| type: Polygon,| coordinates: [| [| [10 10],| [10 90],| [90 90],| [90 10],| [10 10]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| nintersects: {| geometry: {| type: Polygon,| coordinates: [| [| [10 10],| [10 90],| [90 90],| [90 10],| [10 10]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"true\"), res2, \"false\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorOverlapsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| overlaps: {| geometry: {| type: Polygon,| coordinates: [| [| [150 150],| [270 150],| [330 150],| [250 70],| [190 70],| [70 70],| [150 150]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| noverlaps: {| geometry: {| type: Polygon,| coordinates: [| [| [150 150],| [270 150],| [330 150],| [250 70],| [190 70],| [70 70],| [150 150]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"true\"), res2, \"false\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorTouchesTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| // assert| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| touches: {| geometry: {| type: Polygon,| coordinates: [| [| [240 80],| [140 120],| [180 240],| [280 200],| [240 80]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| ntouches: {| geometry: {| type: Polygon,| coordinates: [| [| [240 80],| [140 120],| [180 240],| [280 200],| [240 80]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"true\"), res2, \"false\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorWithinTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync<Foo, FooFilterType>(_fooEntities);| // act| var res1 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| within: {| geometry: {| type: Polygon,| coordinates: [| [| [20 20],| [140 20],| [120 100],| [20 100 ],| [20 20]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| var res2 = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| @\"{| root(where: {| bar: {| nwithin: {| geometry: {| type: Polygon,| coordinates: [| [| [20 20],| [140 20],| [120 100],| [20 100 ],| [20 20]| ]| ]| }| }| }| }){| id| }| }\")| .Build());| // assert| await SnapshotExtensions.AddResult(| SnapshotExtensions.AddResult(| Snapshot| .Create(), res1, \"true\"), res2, \"false\")| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var tester = await CreateSchemaAsync(_fooEntities);| // act| var result = await tester.ExecuteAsync(| OperationRequestBuilder.New()| .SetDocument(| \"\"\"| {| root {| id| bar { coordinates }| }| }| \"\"\")| .Build());| // assert| await Snapshot| .Create()| .AddResult(result)| .MatchAsync();| }"
      }
    ]
  },
  {
    "file": "QueryableFilterVisitorGeometryTests.cs",
    "methods": [
      {
        "name": "Line_Contains_Point",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| contains: {| geometry: {| type: Point| coordinates: [20, 20]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new LineString(| [| new Coordinate(10, 20),| new Coordinate(20, 20),| new Coordinate(30, 20),| ]),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new LineString(| [| new Coordinate(10, 10),| new Coordinate(20, 10),| new Coordinate(30, 10),| ]),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Polygon_Contains_Buffered_Point",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| contains: {| geometry: {| type: Point| coordinates: [3, 3]| }| buffer: 2| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(0, 6),| new Coordinate(6, 6),| new Coordinate(6, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a), \"polygon a does not contain the buffered point\");| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(0, 6),| new Coordinate(6, 6),| new Coordinate(4, 4),| new Coordinate(6, 0),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b), \"polygon c contains the buffered point\");| }"
      },
      {
        "name": "Point_to_Line",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| distance: {| geometry: {| type: Point| coordinates: [1, 1]| }| eq: 1| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new LineString(| [| new Coordinate(2, 0),| new Coordinate(0, 0),| new Coordinate(1, 0),| ]),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new LineString(| [| new Coordinate(0.5, 0.5),| new Coordinate(0, 0),| new Coordinate(1, 0),| ]),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Line_to_Line",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| distance: {| geometry: {| type: LineString| coordinates: [[0, 1], [1, 1], [2, 1]]| }| eq: 1| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new LineString(| [| new Coordinate(0, 0),| new Coordinate(1, 0),| ]),| };| Assert.True(func(a));| }"
      },
      {
        "name": "Point_in_Poly",
        "body": "{| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| intersects: {| geometry: {| type: Point| coordinates: [1, 1]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, 2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, -2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Line_in_Poly",
        "body": "{| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| intersects: {| geometry: {| type: LineString| coordinates: [[1, 1], [3, 1]]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, 2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, -2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Poly_in_Poly",
        "body": "{| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| intersects: {| geometry: {| type: Polygon| coordinates: [[[1, 1], [3, 1], [2, 0], [1, 1]]]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, 2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, -2),| new Coordinate(2, -1),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Line_and_Line",
        "body": "{| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| overlaps: {| geometry: {| type: LineString| coordinates: [[0, 0], [1, 2], [3, 1]]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new LineString(| [| new Coordinate(0, 0),| new Coordinate(1, 2),| new Coordinate(2, 0),| ]),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new LineString(| [| new Coordinate(0, 0),| new Coordinate(1, -2),| new Coordinate(2, 0),| ]),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Poly_and_Poly",
        "body": "{| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| overlaps: {| geometry: {| type: Polygon| coordinates: [[[1, 1], [3, 1], [2, 0], [1, 1]]]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, 2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(1, -2),| new Coordinate(2, -1),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Point_Within_Line",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| within: {| geometry: {| type: LineString| coordinates: [[10, 20], [20, 20], [30, 20]]| }| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Point(20, 20),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Point(20, 30),| };| Assert.False(func(b));| }"
      },
      {
        "name": "Polygon_Within_Buffered_Point",
        "body": "{| // arrange| var value = Utf8GraphQLParser.Syntax.ParseValueLiteral(| @\"{| bar: {| within: {| geometry: {| type: Point| coordinates: [3, 3]| }| buffer: 5| }| }| }\");| var tester = CreateProviderTester(new FilterInputType<Foo>());| // act| var func = tester.Build<Foo>(value);| // assert| var a = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(0, 2),| new Coordinate(2, 2),| new Coordinate(2, 0),| new Coordinate(0, 0),| ])),| };| Assert.True(func(a));| var b = new Foo| {| Bar = new Polygon(new LinearRing(| [| new Coordinate(0, 0),| new Coordinate(0, 9),| new Coordinate(9, 9),| new Coordinate(3, 3),| new Coordinate(9, 0),| new Coordinate(0, 0),| ])),| };| Assert.False(func(b));| }"
      }
    ]
  },
  {
    "file": "GeometryFilterTypeTests.cs",
    "methods": [
      {
        "name": "GeometryFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<GeometryFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "LineStringFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<LineStringFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "MultiLineStringFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<MultiLineStringFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "PointFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<PointFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "MultiPointFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<MultiPointFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "PolygonFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<PolygonFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      },
      {
        "name": "MultiPolygonFilterType_Native",
        "body": "{| // arrange| // act| var schema = CreateSchema(s => s.AddType<MultiPolygonFilterInputType>());| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonLineStringInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_LineString_With_Valid_Coordinates",
        "body": "{| // arrange| var type = CreateInputType();| var inputParser = new InputParser(new DefaultTypeConverter());| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"LineString\")),| new ObjectFieldNode(\"coordinates\", _linestring)),| type);| // assert| Assert.Equal(3, Assert.IsType<LineString>(result).NumPoints);| Assert.Equal(30, Assert.IsType<LineString>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<LineString>(result).Coordinates[0].Y);| Assert.Equal(10, Assert.IsType<LineString>(result).Coordinates[1].X);| Assert.Equal(30, Assert.IsType<LineString>(result).Coordinates[1].Y);| Assert.Equal(40, Assert.IsType<LineString>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<LineString>(result).Coordinates[2].Y);| }"
      },
      {
        "name": "ParseLiteral_LineString_With_Valid_Coordinates_And_CRS",
        "body": "{| // arrange| var type = CreateInputType();| var inputParser = new InputParser(new DefaultTypeConverter());| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"LineString\")),| new ObjectFieldNode(\"coordinates\", _linestring),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(3, Assert.IsType<LineString>(result).NumPoints);| Assert.Equal(30, Assert.IsType<LineString>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<LineString>(result).Coordinates[0].Y);| Assert.Equal(10, Assert.IsType<LineString>(result).Coordinates[1].X);| Assert.Equal(30, Assert.IsType<LineString>(result).Coordinates[1].Y);| Assert.Equal(40, Assert.IsType<LineString>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<LineString>(result).Coordinates[2].Y);| Assert.Equal(26912, Assert.IsType<LineString>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_LineString_Is_Null",
        "body": "{| // arrange| var type = CreateInputType();| var inputParser = new InputParser(new DefaultTypeConverter());| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_LineString_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_LineString_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"coordinates\", _linestring),| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\"))),| type));| }"
      },
      {
        "name": "ParseLiteral_LineString_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(\"LineString\")),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_LineString_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"POLYGON\")),| new ObjectFieldNode(\"coordinates\", _linestring)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonLineStringInputType>())| .Resolve(ctx => ctx.ArgumentValue<LineString>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test(arg: { type: LineString, coordinates: [[30, 10], [10, 30], [40, 40]]})}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "No body available"
      },
      {
        "name": "ParseLiteral_With_Input_Crs",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonLineStringInputType>())| .Resolve(\"ghi\"))| .Create();| var type = schema.GetType<InputObjectType>(\"GeoJSONLineStringInput\");| var node = new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"LineString\")),| new ObjectFieldNode(\"coordinates\", _linestring),| new ObjectFieldNode(\"crs\", 26912));| // act| var result = inputParser.ParseLiteral(node, type);| // assert| Assert.Equal(26912, Assert.IsType<LineString>(result).SRID);| }"
      }
    ]
  },
  {
    "file": "GeoJsonLineStringTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonLineStringType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonLineStringType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on LineString { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "LineString_Execution_Tests",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonLineStringType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| // act| var executor = schema.MakeExecutable();| var result = await executor.ExecuteAsync(\"{ test { crs }}\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonMultiLineStringInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_MultiLineString_With_Valid_Coordinates",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseResult(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(\"MultiLineString\")),| new ObjectFieldNode(\"coordinates\", _multiLinestring)),| type);| // assert| Assert.Equal(2, Assert.IsType<MultiLineString>(result).NumGeometries);| Assert.Equal(3, Assert.IsType<MultiLineString>(result).Geometries[0].NumPoints);| Assert.Equal(4, Assert.IsType<MultiLineString>(result).Geometries[1].NumPoints);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[0].Y);| Assert.Equal(20, Assert.IsType<MultiLineString>(result).Coordinates[1].X);| Assert.Equal(20, Assert.IsType<MultiLineString>(result).Coordinates[1].Y);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<MultiLineString>(result).Coordinates[2].Y);| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_With_Valid_Coordinates_And_CRS",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(\"MultiLineString\")),| new ObjectFieldNode(\"coordinates\", _multiLinestring),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(2, Assert.IsType<MultiLineString>(result).NumGeometries);| Assert.Equal(3, Assert.IsType<MultiLineString>(result).Geometries[0].NumPoints);| Assert.Equal(4, Assert.IsType<MultiLineString>(result).Geometries[1].NumPoints);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[0].Y);| Assert.Equal(20, Assert.IsType<MultiLineString>(result).Coordinates[1].X);| Assert.Equal(20, Assert.IsType<MultiLineString>(result).Coordinates[1].Y);| Assert.Equal(10, Assert.IsType<MultiLineString>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<MultiLineString>(result).Coordinates[2].Y);| Assert.Equal(26912, Assert.IsType<MultiLineString>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_Is_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"coordinates\", _multiLinestring),| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\"))),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(\"MultiLineString\")),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiLineString_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Polygon)),| new ObjectFieldNode(\"coordinates\", _multiLinestring)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonMultiLineStringInputType>())| .Resolve(ctx => ctx.ArgumentValue<MultiLineString>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test(arg: { type: MultiLineString, coordinates: [ [\" +| \"[10, 10], [20, 20], [10, 40]], [[40, 40], [30, 30], [40, 20], [30, 10]] ] })}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "GeoJsonMultiLineStringTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonMultiLineStringType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonMultiLineStringType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on MultiLineString { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "MultiLineString_Execution_Tests",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "GeoJsonMultiPointInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_MultiPoint_With_Valid_Coordinates",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPoint\")),| new ObjectFieldNode(\"coordinates\", _multipoint)),| type);| // assert| Assert.Equal(4, Assert.IsType<MultiPoint>(result).NumPoints);| Assert.Equal(10, Assert.IsType<MultiPoint>(result).Coordinates[0].X);| Assert.Equal(40, Assert.IsType<MultiPoint>(result).Coordinates[0].Y);| Assert.Equal(40, Assert.IsType<MultiPoint>(result).Coordinates[1].X);| Assert.Equal(30, Assert.IsType<MultiPoint>(result).Coordinates[1].Y);| Assert.Equal(20, Assert.IsType<MultiPoint>(result).Coordinates[2].X);| Assert.Equal(20, Assert.IsType<MultiPoint>(result).Coordinates[2].Y);| Assert.Equal(30, Assert.IsType<MultiPoint>(result).Coordinates[3].X);| Assert.Equal(10, Assert.IsType<MultiPoint>(result).Coordinates[3].Y);| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_With_Valid_Coordinates_And_CRS",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPoint\")),| new ObjectFieldNode(\"coordinates\", _multipoint),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(4, Assert.IsType<MultiPoint>(result).NumPoints);| Assert.Equal(10, Assert.IsType<MultiPoint>(result).Coordinates[0].X);| Assert.Equal(40, Assert.IsType<MultiPoint>(result).Coordinates[0].Y);| Assert.Equal(40, Assert.IsType<MultiPoint>(result).Coordinates[1].X);| Assert.Equal(30, Assert.IsType<MultiPoint>(result).Coordinates[1].Y);| Assert.Equal(20, Assert.IsType<MultiPoint>(result).Coordinates[2].X);| Assert.Equal(20, Assert.IsType<MultiPoint>(result).Coordinates[2].Y);| Assert.Equal(30, Assert.IsType<MultiPoint>(result).Coordinates[3].X);| Assert.Equal(10, Assert.IsType<MultiPoint>(result).Coordinates[3].Y);| Assert.Equal(26912, Assert.IsType<MultiPoint>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_Is_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\")),| new ObjectFieldNode(\"coordinates\", _multipoint)),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPoint\")),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiPoint_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Point)),| new ObjectFieldNode(\"coordinates\", _multipoint)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonMultiPointInputType>())| .Resolve(ctx => ctx.ArgumentValue<MultiPoint>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"{| test(arg: {| type: MultiPoint,| coordinates:[[10, 40], [40, 30], [20, 20], [30, 10]]| })| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "{| // arrange| var schema = CreateSchema();| // act| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonMultiPointTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonMultiPointType>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonMultiPointType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on MultiPoint { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "MultiPoint_Execution_Tests",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonMultiPointType>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| // act| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonMultiPolygonInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_MultiPolygon_With_Single_Ring",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPolygon\")),| new ObjectFieldNode(\"coordinates\", _multiPolygon)),| type);| // assert| Assert.Equal(2, Assert.IsType<MultiPolygon>(result).NumGeometries);| Assert.Equal(4, Assert.IsType<MultiPolygon>(result).Geometries[0].NumPoints);| Assert.Equal(5, Assert.IsType<MultiPolygon>(result).Geometries[1].NumPoints);| Assert.Equal(30, Assert.IsType<MultiPolygon>(result).Coordinates[0].X);| Assert.Equal(20, Assert.IsType<MultiPolygon>(result).Coordinates[0].Y);| Assert.Equal(45, Assert.IsType<MultiPolygon>(result).Coordinates[1].X);| Assert.Equal(40, Assert.IsType<MultiPolygon>(result).Coordinates[1].Y);| Assert.Equal(10, Assert.IsType<MultiPolygon>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<MultiPolygon>(result).Coordinates[2].Y);| Assert.Equal(30, Assert.IsType<MultiPolygon>(result).Coordinates[3].X);| Assert.Equal(20, Assert.IsType<MultiPolygon>(result).Coordinates[3].Y);| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_With_Single_Ring_And_CRS",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPolygon\")),| new ObjectFieldNode(\"coordinates\", _multiPolygon),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(2, Assert.IsType<MultiPolygon>(result).NumGeometries);| Assert.Equal(4, Assert.IsType<MultiPolygon>(result).Geometries[0].NumPoints);| Assert.Equal(5, Assert.IsType<MultiPolygon>(result).Geometries[1].NumPoints);| Assert.Equal(30, Assert.IsType<MultiPolygon>(result).Coordinates[0].X);| Assert.Equal(20, Assert.IsType<MultiPolygon>(result).Coordinates[0].Y);| Assert.Equal(45, Assert.IsType<MultiPolygon>(result).Coordinates[1].X);| Assert.Equal(40, Assert.IsType<MultiPolygon>(result).Coordinates[1].Y);| Assert.Equal(10, Assert.IsType<MultiPolygon>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<MultiPolygon>(result).Coordinates[2].Y);| Assert.Equal(30, Assert.IsType<MultiPolygon>(result).Coordinates[3].X);| Assert.Equal(20, Assert.IsType<MultiPolygon>(result).Coordinates[3].Y);| Assert.Equal(26912, Assert.IsType<MultiPolygon>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_Is_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"coordinates\", _multiPolygon),| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\"))),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(\"MultiPolygon\")),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_MultiPolygon_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Point)),| new ObjectFieldNode(\"coordinates\", _multiPolygon)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // act| var schema = SchemaBuilder.New()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonMultiPolygonInputType>())| .Resolve(ctx => ctx.ArgumentValue<MultiPolygon>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: MultiPolygon| coordinates: [| [[[30, 20], [45, 40], [10, 40], [30, 20]]]| [[[15, 5], [40, 10], [10, 20], [5, 10], [15, 5]]]| ]| }| )| }| \");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "{| // arrange| // act| var schema = CreateSchema();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonMultiPolygonTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonMultiPolygonType>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonMultiPolygonType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on MultiPolygon { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "MultiPolygon_Execution_Tests",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonMultiPolygonType>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| // act| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonPointInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_Point_With_Valid_Coordinates_Scalar",
        "body": "{| // arrange| var type = CreateScalarType();| // act| var result = type.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(nameof(GeoJsonGeometryType.Point))),| new ObjectFieldNode(\"coordinates\", _point)));| // assert| Assert.Equal(30, Assert.IsType<Point>(result).X);| Assert.Equal(10, Assert.IsType<Point>(result).Y);| }"
      },
      {
        "name": "ParseLiteral_Point_With_Valid_Coordinates",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(nameof(GeoJsonGeometryType.Point))),| new ObjectFieldNode(\"coordinates\", _point)),| type);| // assert| Assert.Equal(30, Assert.IsType<Point>(result).X);| Assert.Equal(10, Assert.IsType<Point>(result).Y);| }"
      },
      {
        "name": "ParseLiteral_Point_With_Valid_Coordinates_With_CRS",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(nameof(GeoJsonGeometryType.Point))),| new ObjectFieldNode(\"coordinates\", _point),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(30, Assert.IsType<Point>(result).X);| Assert.Equal(10, Assert.IsType<Point>(result).Y);| Assert.Equal(26912, Assert.IsType<Point>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_Point_Is_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_Point_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_Point_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\")),| new ObjectFieldNode(\"coordinates\", _point)),| type));| }"
      },
      {
        "name": "ParseLiteral_Point_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Point)),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_Point_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Polygon)),| new ObjectFieldNode(\"coordinates\", _point)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonPointInputType>())| .Resolve(ctx => ctx.ArgumentValue<Point>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test(arg: { type: Point, coordinates:[9,10] })}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "{| // arrange| // act| var schema = CreateSchema();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonPointTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeometryType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonPointType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonPointType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on Point { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Point_Execution_Tests",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonPointType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonPolygonInputTests.cs",
    "methods": [
      {
        "name": "ParseLiteral_Polygon_With_Single_Ring",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(nameof(GeoJsonGeometryType.Polygon))),| new ObjectFieldNode(\"coordinates\", _polygon)),| type);| // assert| Assert.Equal(5, Assert.IsType<Polygon>(result).NumPoints);| Assert.Equal(1, Assert.IsType<Polygon>(result).NumGeometries);| Assert.Equal(30, Assert.IsType<Polygon>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<Polygon>(result).Coordinates[0].Y);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[1].X);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[1].Y);| Assert.Equal(20, Assert.IsType<Polygon>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[2].Y);| Assert.Equal(10, Assert.IsType<Polygon>(result).Coordinates[3].X);| Assert.Equal(20, Assert.IsType<Polygon>(result).Coordinates[3].Y);| }"
      },
      {
        "name": "ParseLiteral_Polygon_With_CRS",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(| \"type\",| new EnumValueNode(nameof(GeoJsonGeometryType.Polygon))),| new ObjectFieldNode(\"coordinates\", _polygon),| new ObjectFieldNode(\"crs\", 26912)),| type);| // assert| Assert.Equal(5, Assert.IsType<Polygon>(result).NumPoints);| Assert.Equal(1, Assert.IsType<Polygon>(result).NumGeometries);| Assert.Equal(30, Assert.IsType<Polygon>(result).Coordinates[0].X);| Assert.Equal(10, Assert.IsType<Polygon>(result).Coordinates[0].Y);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[1].X);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[1].Y);| Assert.Equal(20, Assert.IsType<Polygon>(result).Coordinates[2].X);| Assert.Equal(40, Assert.IsType<Polygon>(result).Coordinates[2].Y);| Assert.Equal(10, Assert.IsType<Polygon>(result).Coordinates[3].X);| Assert.Equal(20, Assert.IsType<Polygon>(result).Coordinates[3].Y);| Assert.Equal(26912, Assert.IsType<Polygon>(result).SRID);| }"
      },
      {
        "name": "ParseLiteral_Polygon_Is_Null",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| var result = inputParser.ParseLiteral(NullValueNode.Default, type);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_Polygon_Is_Not_ObjectType_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(new ListValueNode(), type));| }"
      },
      {
        "name": "ParseLiteral_Polygon_With_Missing_Fields_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"coordinates\", _polygon),| new ObjectFieldNode(\"missingType\", new StringValueNode(\"ignored\"))),| type));| }"
      },
      {
        "name": "ParseLiteral_Polygon_With_Empty_Coordinates_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Polygon)),| new ObjectFieldNode(\"coordinates\", new ListValueNode())),| type));| }"
      },
      {
        "name": "ParseLiteral_Polygon_With_Wrong_Geometry_Type_Throws",
        "body": "{| // arrange| var inputParser = new InputParser(new DefaultTypeConverter());| var type = CreateInputType();| // act| // assert| Assert.Throws<SerializationException>(| () => inputParser.ParseLiteral(| new ObjectValueNode(| new ObjectFieldNode(\"type\", new EnumValueNode(GeoJsonGeometryType.Point)),| new ObjectFieldNode(\"coordinates\", _polygon)),| type));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Argument(\"arg\", a => a.Type<GeoJsonPolygonInputType>())| .Resolve(ctx => ctx.ArgumentValue<Polygon>(\"arg\").ToString()))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test(arg: { type: Polygon, coordinates:[ [30, 10], [40, 40], [20, 40], [10, 20], [30, 10] ] })}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Schema_Tests",
        "body": "{| // arrange| // act| var schema = CreateSchema();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonPolygonTypeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonPolygonType>()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { type coordinates bbox crs }}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .AddSpatialTypes()| .AddQueryType(| d => d| .Name(\"Query\")| .Field(\"test\")| .Type<GeoJsonPolygonType>()| .Resolve(_geom))| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| \"{ test { ... on Polygon { type coordinates bbox crs }}}\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Polygon_Execution_Tests",
        "body": "{| // arrange| // act| var schema = SchemaBuilder.New()| .AddConvention<INamingConventions, MockNamingConvention>()| .BindRuntimeType<Coordinate, GeoJsonPositionType>()| .AddType<GeoJsonPolygonType>()| .AddQueryType(d => d| .Name(\"Query\")| .Field(\"test\")| .Resolve(_geom))| .Create();| // assert| schema.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GeoJsonPositionScalarTest.cs",
    "methods": [
      {
        "name": "IsInstanceOfType_Valid2ElementCoordinate_True",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new IntValueNode(1),| new FloatValueNode(1.2));| // act| bool? result = type.IsInstanceOfType(coordinate);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_Valid3ElementCoordinate_True",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new IntValueNode(1),| new FloatValueNode(1.2),| new FloatValueNode(3.2));| // act| bool? result = type.IsInstanceOfType(coordinate);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_NullType_True",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = NullValueNode.Default;| // act| bool? result = type.IsInstanceOfType(coordinate);| // assert| Assert.True(result);| }"
      },
      {
        "name": "IsInstanceOfType_Invalid2ElementCoordinate_False",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new StringValueNode(\"1\"),| new FloatValueNode(1.2));| // act| bool? result = type.IsInstanceOfType(coordinate);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Invalid3ElementCoordinate_False",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new IntValueNode(1),| new FloatValueNode(1.2),| new StringValueNode(\"2\"));| // act| bool? result = type.IsInstanceOfType(coordinate);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_List2ElementCoordinate_False",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new ListValueNode(| new FloatValueNode(1.1),| new FloatValueNode(1.2)));| // act| var result = type.IsInstanceOfType(coordinate);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_2ListElementCoordinate_False",
        "body": "{| // arrange| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new ListValueNode(| new FloatValueNode(1.1),| new FloatValueNode(1.2)),| new ListValueNode(| new FloatValueNode(1.1),| new FloatValueNode(1.2)));| // act| var result = type.IsInstanceOfType(coordinate);| // assert| Assert.False(result);| }"
      },
      {
        "name": "IsInstanceOfType_Invalid4ElementCoordinate_False",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new IntValueNode(1),| new IntValueNode(2),| new IntValueNode(3),| new IntValueNode(4));| bool? result = type.IsInstanceOfType(coordinate);| Assert.False(result);| }"
      },
      {
        "name": "ParseLiteral_Null_Throws",
        "body": "{| var type = new GeoJsonPositionType();| IValueNode? coordinate = null;| Assert.Throws<SerializationException>(() => type.ParseLiteral(coordinate!));| }"
      },
      {
        "name": "ParseLiteral_NullType_Null",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = NullValueNode.Default;| var result = type.ParseLiteral(coordinate);| Assert.Null(result);| }"
      },
      {
        "name": "ParseLiteral_With_2Valid_Coordinates",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new FloatValueNode(1.0),| new IntValueNode(2)| );| var result = type.ParseLiteral(coordinate);| Assert.Equal(1.0, Assert.IsType<Coordinate>(result).X);| Assert.Equal(2, Assert.IsType<Coordinate>(result).Y);| }"
      },
      {
        "name": "ParseLiteral_With_3Valid_Coordinates",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new FloatValueNode(1.0),| new FloatValueNode(2.2),| new IntValueNode(100)| );| var result = type.ParseLiteral(coordinate);| Assert.Equal(1.0, Assert.IsType<CoordinateZ>(result).X);| Assert.Equal(2.2, Assert.IsType<CoordinateZ>(result).Y);| Assert.Equal(100, Assert.IsType<CoordinateZ>(result).Z);| }"
      },
      {
        "name": "ParseLiteral_With_2Invalid_Coordinates_Throws",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new FloatValueNode(1.0),| new StringValueNode(\"2.2\")| );| Assert.Throws<SerializationException>(() => type.ParseLiteral(coordinate));| }"
      },
      {
        "name": "ParseLiteral_With_3Invalid_Coordinates_Throws",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new ListValueNode(| new FloatValueNode(1.0),| new IntValueNode(10),| new StringValueNode(\"2.2\")| );| Assert.Throws<SerializationException>(() => type.ParseLiteral(coordinate));| }"
      },
      {
        "name": "ParseLiteral_With_Invalid_Coordinates_Throws",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new StringValueNode(\"2.2\");| Assert.Throws<SerializationException>(() => type.ParseLiteral(coordinate));| }"
      },
      {
        "name": "ParseValue_With_Noncoordinate_Throws",
        "body": "{| var type = new GeoJsonPositionType();| var item = \"this is not a coordinate\";| Assert.Throws<SerializationException>(() => type.ParseValue(item));| }"
      },
      {
        "name": "ParseValue_With_Null",
        "body": "{| var type = new GeoJsonPositionType();| var result = type.ParseValue(null);| Assert.Null(Assert.IsType<NullValueNode>(result).Value);| }"
      },
      {
        "name": "ParseValue_With_2Valid_Coordinates",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new Coordinate(1.1, 2.2);| var result = type.ParseValue(coordinate);| Assert.Equal(\"1.1\", Assert.IsType<ListValueNode>(result).Items[0].Value);| Assert.Equal(\"2.2\", Assert.IsType<ListValueNode>(result).Items[1].Value);| }"
      },
      {
        "name": "ParseValue_With_3Valid_Coordinates",
        "body": "{| var type = new GeoJsonPositionType();| var coordinate = new CoordinateZ(1.1, 2.2, 3.3);| var result = type.ParseValue(coordinate);| Assert.Equal(\"1.1\", Assert.IsType<ListValueNode>(result).Items[0].Value);| Assert.Equal(\"2.2\", Assert.IsType<ListValueNode>(result).Items[1].Value);| Assert.Equal(\"3.3\", Assert.IsType<ListValueNode>(result).Items[2].Value);| }"
      },
      {
        "name": "TryDeserialize_With_Null",
        "body": "{| var type = new GeoJsonPositionType();| object? input = null;| var result = type.TryDeserialize(input, out var value);| Assert.True(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Non_List",
        "body": "{| var type = new GeoJsonPositionType();| var input = \"not null and not a list\";| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Too_Many_Elements",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { \"1\", \"2\", \"3\", \"4\", };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Too_Few_Elements",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_Element_Type",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, \"a\", };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_Element_Type2",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, DateTime.Now, };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_Element_Type3",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, double.PositiveInfinity, };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_3rdElement_Type",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, 2, \"a\", };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_3rdElement_Type2",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, 2, 'a', };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Invalid_3rdElement_Type3",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, 2, double.NegativeInfinity, };| var result = type.TryDeserialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TryDeserialize_With_Valid_2Elements",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, 2, };| var result = type.TryDeserialize(input, out var value);| Assert.True(result);| Assert.Equal(1, Assert.IsType<Coordinate>(value).X);| Assert.Equal(2, Assert.IsType<Coordinate>(value).Y);| }"
      },
      {
        "name": "TryDeserialize_With_Valid_3Elements",
        "body": "{| var type = new GeoJsonPositionType();| var input = new List<object> { 1, 2, 0, };| var result = type.TryDeserialize(input, out var value);| Assert.True(result);| Assert.Equal(1, Assert.IsType<CoordinateZ>(value).X);| Assert.Equal(2, Assert.IsType<CoordinateZ>(value).Y);| Assert.Equal(0, Assert.IsType<CoordinateZ>(value).Z);| }"
      },
      {
        "name": "TrySerialize_With_Invalid_Object",
        "body": "{| var type = new GeoJsonPositionType();| var input = \"not a coordinate\";| var result = type.TrySerialize(input, out var value);| Assert.False(result);| Assert.Null(value);| }"
      },
      {
        "name": "TrySerialize_With_Valid_2dCoordinate",
        "body": "{| var type = new GeoJsonPositionType();| var input = new Coordinate(1, 2);| var result = type.TrySerialize(input, out var value);| Assert.True(result);| Assert.Equal(2, Assert.IsType<double[]>(value).Length);| Assert.Equal(new[] { 1D, 2D, }, Assert.IsType<double[]>(value));| }"
      },
      {
        "name": "TrySerialize_With_Valid_3dCoordinate",
        "body": "{| var type = new GeoJsonPositionType();| var input = new CoordinateZ(1, 2, 100);| var result = type.TrySerialize(input, out var value);| Assert.True(result);| Assert.Equal(3, Assert.IsType<double[]>(value).Length);| Assert.Equal(new[] { 1D, 2D, 100D, }, Assert.IsType<double[]>(value));| }"
      },
      {
        "name": "TrySerialize_With_Nan_3dCoordinate",
        "body": "{| var type = new GeoJsonPositionType();| var input = new CoordinateZ(1, 2, double.NaN);| var result = type.TrySerialize(input, out var value);| Assert.True(result);| Assert.Equal(2, Assert.IsType<double[]>(value).Length);| Assert.Equal(new[] { 1D, 2D, }, Assert.IsType<double[]>(value));| }"
      }
    ]
  },
  {
    "file": "GeoJsonTypeSerializerTests.cs",
    "methods": [
      {
        "name": "TrySerializer_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.True(serializer.TrySerialize(type.Object, null, out var resultValue));| Assert.Null(resultValue);| }"
      },
      {
        "name": "TrySerializer_DifferentObject",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.False(serializer.TrySerialize(type.Object, \"\", out var resultValue));| Assert.Null(resultValue);| }"
      },
      {
        "name": "IsInstanceOfType_Should_Throw_When_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.Throws<ArgumentNullException>(| () => serializer.IsInstanceOfType(type.Object, null!));| }"
      },
      {
        "name": "IsInstanceOfType_Should_Pass_When_NullValueNode",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.True(serializer.IsInstanceOfType(type.Object, NullValueNode.Default));| }"
      },
      {
        "name": "ParseLiteral_Should_Throw_When_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.Throws<ArgumentNullException>(() => serializer.ParseLiteral(type.Object, null!));| }"
      },
      {
        "name": "ParseLiteral_Should_Parse_NullValueNode",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| var resultValue = serializer.ParseLiteral(type.Object, NullValueNode.Default);| // assert| Assert.Null(resultValue);| }"
      },
      {
        "name": "ParseValue_Should_Parse_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| var resultValue = serializer.ParseValue(type.Object, null);| // assert| Assert.Equal(NullValueNode.Default, resultValue);| }"
      },
      {
        "name": "ParseValue_Should_Throw_OnInvalidValue",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.Throws<SerializationException>(| () => serializer.ParseValue(type.Object, \"\"));| }"
      },
      {
        "name": "ParseResult_Should_Parse_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| var resultValue = serializer.ParseResult(type.Object, null);| // assert| Assert.Equal(NullValueNode.Default, resultValue);| }"
      },
      {
        "name": "ParseResult_Should_Throw_OnInvalidValue",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.Throws<SerializationException>(| () => serializer.ParseResult(type.Object, \"\"));| }"
      },
      {
        "name": "IsInstanceOfType_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.True(serializer.IsInstanceOfType(type.Object, (object?)null));| }"
      },
      {
        "name": "IsInstanceOfType_Should_BeFalse_When_Other_Object",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.False(serializer.IsInstanceOfType(type.Object, \"\"));| }"
      },
      {
        "name": "TryDeserialize_Null",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.True(serializer.TryDeserialize(type.Object, null, out var resultValue));| Assert.Null(resultValue);| }"
      },
      {
        "name": "TryDeserialize_DifferentObject",
        "body": "{| // arrange| var type = new Mock<IType>();| var serializer = GeoJsonTypeSerializer.Default;| // act| // assert| Assert.False(serializer.TryDeserialize(type.Object, \"\", out var resultValue));| Assert.Null(resultValue);| }"
      }
    ]
  },
  {
    "file": "TransformationIntegrationTests.cs",
    "methods": [
      {
        "name": "Execute_UnknownDefaultCRS",
        "body": "{| // arrange| var builder = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>();| // act| var ex = Record.Exception(() => builder.Create());| // assert| Assert.IsType<SchemaException>(ex).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 26918,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new CoordinateZM(10, 30, 12, 15),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new CoordinateM(10, 30, 12),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new CoordinateZ(10, 30, 12),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes()| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 26918,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 4326,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 1234| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = new LineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new CoordinateZ(10, 30, 12),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"{| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 26918,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(4326, WKT4326)| .AddCoordinateSystemFromString(26918, WKT26918))| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 26918,| coordinates: [[30, 10], [10, 30], [40, 40]]| },| crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(26918, WKT26918)| .AddCoordinateSystemFromString(4326, WKT4326))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 26918) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var lineString = NtsGeometryServices.Instance| .CreateGeometryFactory(4326)| .CreateLineString(| [| new Coordinate(30, 10),| new Coordinate(10, 30),| new Coordinate(40, 40),| ]);| var schema = SchemaBuilder.New()| .AddDocumentFromString(| @\"| type Query {| test: GeoJSONLineStringType| }| \")| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddCoordinateSystemFromString(26918, WKT26918)| .AddCoordinateSystemFromString(4326, WKT4326))| .AddResolver(\"Query\", \"test\", _ => lineString)| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(crs: 4326) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema = SchemaBuilder.New()| .AddQueryType<Query>()| .AddSpatialTypes(x => x| .DefaultSrid(4326)| .AddWebMercator()| .AddWGS84())| .TryAddTypeInterceptor<RoundTypeIntercetor>()| .Create();| var executor = schema.MakeExecutable();| // act| var result = await executor.ExecuteAsync(| @\"| {| test(| arg: {| type: LineString,| crs: 3857,| coordinates: [[30, 10], [10, 30], [40, 40]]| }) {| type| crs| coordinates| }| }\");| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntrospectionClientTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000/graphql\");| // act| var features = await IntrospectionClient.InspectServerAsync(client);| // assert| Assert.True(features.HasArgumentDeprecation);| Assert.True(features.HasDirectiveLocations);| Assert.True(features.HasSubscriptionSupport);| Assert.True(features.HasSchemaDescription);| Assert.True(features.HasRepeatableDirectives);| Assert.True(features.HasDeferSupport);| Assert.True(features.HasStreamSupport);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Task Error() => IntrospectionClient.InspectServerAsync(((HttpClient?)null)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000/graphql\");| // act| var schema = await IntrospectionClient.IntrospectServerAsync(client);| // assert| schema.ToString(true).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| // act| Task Error() => IntrospectionClient.IntrospectServerAsync(((HttpClient?)null)!);| // assert| await Assert.ThrowsAsync<ArgumentNullException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new HttpClient(new CustomHttpClientHandler(HttpStatusCode.OK));| client.BaseAddress = new Uri(\"http://localhost:5000\");| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| Task Error() => IntrospectionClient.IntrospectServerAsync(client);| // assert| var exception = await Assert.ThrowsAsync<InvalidOperationException>(Error);| Assert.Equal(\"Received a successful response with an unexpected content type.\", exception.Message);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new HttpClient(new CustomHttpClientHandler(HttpStatusCode.NotFound));| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| Task Error() => IntrospectionClient.IntrospectServerAsync(client);| // assert| await Assert.ThrowsAsync<HttpRequestException>(Error);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new HttpClient(new CustomHttpClientHandler());| client.BaseAddress = new Uri(\"http://localhost:5000\");| // act| Task Error() => IntrospectionClient.IntrospectServerAsync(client);| // assert| var exception = await Assert.ThrowsAsync<Exception>(Error);| Assert.Equal(\"Something went wrong\", exception.Message);| }"
      }
    ]
  },
  {
    "file": "IntrospectionFormatterTests.cs",
    "methods": [
      {
        "name": "DeserializeStarWarsIntrospectionResult",
        "body": "{| // arrange| var json = FileResource.Open(\"StarWarsIntrospectionResult.json\");| var result = JsonSerializer.Deserialize<IntrospectionResult>(json, SerializerOptions);| // act| var schema = IntrospectionFormatter.Format(result!);| // assert| schema.ToString(true).MatchSnapshot();| }"
      },
      {
        "name": "DeserializeIntrospectionWithIntDefaultValues",
        "body": "{| // arrange| var json = FileResource.Open(\"IntrospectionWithDefaultValues.json\");| var result = JsonSerializer.Deserialize<IntrospectionResult>(json, SerializerOptions);| // act| var schema = IntrospectionFormatter.Format(result!);| // assert| schema.ToString(true).MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "IntrospectionQueryBuilderTests.cs",
    "methods": [
      {
        "name": "Create_Default_Query",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities();| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      },
      {
        "name": "Create_Query_With_ArgumentDeprecation",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities| {| HasArgumentDeprecation = true,| };| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      },
      {
        "name": "Create_Query_With_DirectiveLocations",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities| {| HasDirectiveLocations = true,| };| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      },
      {
        "name": "Create_Query_With_RepeatableDirectives",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities| {| HasRepeatableDirectives = true,| };| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      },
      {
        "name": "Create_Query_With_SchemaDescription",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities| {| HasSchemaDescription = true,| };| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      },
      {
        "name": "Create_Query_With_SubscriptionSupport",
        "body": "{| // arrange| var options = new IntrospectionOptions();| var features = new ServerCapabilities| {| HasSubscriptionSupport = true,| };| // act| var document = IntrospectionQueryBuilder.Build(features, options);| //assert| document.Print().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "ArrayWriterTests.cs",
    "methods": [
      {
        "name": "Constructor_ShouldInitializeProperly",
        "body": "{| // Arrange & Act| using var writer = new ArrayWriter();| // Assert| Assert.NotNull(writer.GetInternalBuffer());| Assert.Equal(0, writer.Length);| }"
      },
      {
        "name": "GetWrittenMemory_ShouldReturnReadOnlyMemory",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| var memory = writer.GetWrittenMemory();| // Assert| Assert.Equal(0, memory.Length);| }"
      },
      {
        "name": "GetWrittenSpan_ShouldReturnReadOnlySpan",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| var span = writer.GetWrittenSpan();| // Assert| Assert.Equal(0, span.Length);| }"
      },
      {
        "name": "Advance_ShouldAdvanceCorrectly",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| writer.GetSpan(10);| // Act| writer.Advance(5);| // Assert| Assert.Equal(5, writer.Length);| }"
      },
      {
        "name": "GetMemory_ShouldReturnMemoryWithCorrectSizeHint",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| var memory = writer.GetMemory(10);| // Assert| Assert.True(memory.Length >= 10);| }"
      },
      {
        "name": "GetSpan_ShouldReturnSpanWithCorrectSizeHint",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| var span = writer.GetSpan(10);| // Assert| Assert.True(span.Length >= 10);| }"
      },
      {
        "name": "Dispose_ShouldDisposeCorrectly",
        "body": "{| // Arrange| var writer = new ArrayWriter();| // Act| writer.Dispose();| // Assert| Assert.Throws<ObjectDisposedException>(() => writer.GetMemory());| Assert.Throws<ObjectDisposedException>(() => writer.GetSpan());| Assert.Throws<ObjectDisposedException>(() => writer.Advance(0));| }"
      },
      {
        "name": "Advance_ShouldThrowWhenDisposed",
        "body": "{| // Arrange| var writer = new ArrayWriter();| writer.Dispose();| // Act & Assert| Assert.Throws<ObjectDisposedException>(() => writer.Advance(0));| }"
      },
      {
        "name": "Advance_ShouldThrowWhenNegativeCount",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act & Assert| Assert.Throws<ArgumentOutOfRangeException>(() => writer.Advance(-1));| }"
      },
      {
        "name": "Advance_ShouldThrowWhenCountGreaterThanCapacity",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act & Assert| Assert.Throws<ArgumentOutOfRangeException>(| () => writer.Advance(writer.GetInternalBuffer().Length + 1));| }"
      },
      {
        "name": "GetMemory_ShouldThrowWhenDisposed",
        "body": "{| // Arrange| var writer = new ArrayWriter();| writer.Dispose();| // Act & Assert| Assert.Throws<ObjectDisposedException>(() => writer.GetMemory());| }"
      },
      {
        "name": "GetMemory_ShouldThrowWhenNegativeSizeHint",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act & Assert| Assert.Throws<ArgumentOutOfRangeException>(() => writer.GetMemory(-1));| }"
      },
      {
        "name": "GetSpan_ShouldThrowWhenDisposed",
        "body": "{| // Arrange| var writer = new ArrayWriter();| writer.Dispose();| // Act & Assert| Assert.Throws<ObjectDisposedException>(() => writer.GetSpan());| }"
      },
      {
        "name": "GetSpan_ShouldThrowWhenNegativeSizeHint",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act & Assert| Assert.Throws<ArgumentOutOfRangeException>(() => writer.GetSpan(-1));| }"
      },
      {
        "name": "WriteBytesToSpan_ShouldWriteCorrectly",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| var testData = new byte[] { 1, 2, 3, 4, };| // Act| var span = writer.GetSpan(4);| testData.CopyTo(span);| writer.Advance(4);| // Assert| Assert.Equal(4, writer.Length);| var writtenSpan = writer.GetWrittenSpan();| Assert.True(testData.SequenceEqual(writtenSpan.ToArray()));| }"
      },
      {
        "name": "WriteBytesToMemory_ShouldWriteCorrectly",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| var testData = new byte[] { 1, 2, 3, 4, };| // Act| var memory = writer.GetMemory(4);| testData.CopyTo(memory);| writer.Advance(4);| // Assert| Assert.Equal(4, writer.Length);| var writtenMemory = writer.GetWrittenMemory();| Assert.True(testData.SequenceEqual(writtenMemory.ToArray()));| }"
      },
      {
        "name": "WriteBytesExceedingInitialBufferSize_ShouldExpandAndWriteCorrectly",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| var testData = new byte[1024];| for (var i = 0; i < testData.Length; i++)| {| testData[i] = (byte)(i % 256);| }| // Act| for (var i = 0; i < testData.Length; i += 128)| {| var span = writer.GetSpan(128);| testData.AsSpan(i, 128).CopyTo(span);| writer.Advance(128);| }| // Assert| Assert.Equal(1024, writer.Length);| var writtenSpan = writer.GetWrittenSpan();| Assert.True(testData.SequenceEqual(writtenSpan.ToArray()));| }"
      },
      {
        "name": "ShouldAllocateSufficientMemory",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| // NB: ask for 0x3000 bytes because the initial 512 bytes buffer size is added| // to request when doubling is insufficient and ArrayPool<byte> sizes are powers of 2| writer.GetSpan (0x3000) ;| writer.Advance (0x2000) ;| writer.GetSpan (0x7000) ;| }"
      },
      {
        "name": "ShouldResetCapacity",
        "body": "{| // Arrange| using var writer = new ArrayWriter();| // Act| writer.GetSpan(1000);| writer.Advance(1000);| writer.Reset();| writer.GetSpan(2000);| writer.Advance(2000);| }"
      }
    ]
  },
  {
    "file": "CacheEntryEventArgsTests.cs",
    "methods": [
      {
        "name": "ValueIsNull",
        "body": "{| // act| var eventArgs = new CacheEntryEventArgs<string?>(\"key\", null);| // assert| Assert.Equal(\"key\", eventArgs.Key);| Assert.Null(eventArgs.Value);| }"
      },
      {
        "name": "ValueAndKeyAreSet",
        "body": "{| // act| var eventArgs = new CacheEntryEventArgs<string>(\"key\", \"value\");| // assert| Assert.Equal(\"key\", eventArgs.Key);| Assert.Equal(\"value\", eventArgs.Value);| }"
      },
      {
        "name": "KeyIsNull",
        "body": "{| // act| Action action = () => new CacheEntryEventArgs<string>(null!, \"value\");| // assert| Assert.Throws<ArgumentNullException>(action);| }"
      }
    ]
  },
  {
    "file": "CacheTests.cs",
    "methods": [
      {
        "name": "Fill_Cache_Up",
        "body": "{| // arrange| var cache = new Cache<string>(10);| for (var i = 0; i < 9; i++)| {| var item = i.ToString();| cache.GetOrCreate(item, () => item);| }| // assert| var value = cache.GetOrCreate(\"10\", () => \"10\");| // assert| Assert.Equal(\"10\", value);| Assert.Equal(10, cache.Capacity);| Assert.Equal(10, cache.Usage);| Assert.Collection(| cache.GetKeys(),| key => Assert.Equal(\"10\", key),| key => Assert.Equal(\"8\", key),| key => Assert.Equal(\"7\", key),| key => Assert.Equal(\"6\", key),| key => Assert.Equal(\"5\", key),| key => Assert.Equal(\"4\", key),| key => Assert.Equal(\"3\", key),| key => Assert.Equal(\"2\", key),| key => Assert.Equal(\"1\", key),| key => Assert.Equal(\"0\", key));| }"
      },
      {
        "name": "Add_More_Items_To_The_Cache_Than_We_Have_Space",
        "body": "{| // arrange| var cache = new Cache<string>(10);| for (var i = 0; i < 10; i++)| {| var item = i.ToString();| cache.GetOrCreate(item, () => item);| }| // assert| var value = cache.GetOrCreate(\"10\", () => \"10\");| // assert| Assert.Equal(\"10\", value);| Assert.Equal(10, cache.Capacity);| Assert.Equal(10, cache.Usage);| Assert.Collection(| cache.GetKeys(),| key => Assert.Equal(\"10\", key),| key => Assert.Equal(\"9\", key),| key => Assert.Equal(\"8\", key),| key => Assert.Equal(\"7\", key),| key => Assert.Equal(\"6\", key),| key => Assert.Equal(\"5\", key),| key => Assert.Equal(\"4\", key),| key => Assert.Equal(\"3\", key),| key => Assert.Equal(\"2\", key),| key => Assert.Equal(\"1\", key));| }"
      },
      {
        "name": "Avoid_Item_Reorder_If_Cache_Is_Not_Full",
        "body": "{| // arrange| var cache = new Cache<string>(10);| cache.GetOrCreate(\"a\", () => \"a\");| cache.GetOrCreate(\"b\", () => \"b\");| cache.GetOrCreate(\"c\", () => \"c\");| cache.GetOrCreate(\"d\", () => \"d\");| cache.GetOrCreate(\"e\", () => \"e\");| cache.GetOrCreate(\"f\", () => \"f\");| // act| Assert.True(cache.TryGet(\"c\", out _));| // assert| Assert.Collection(| cache.GetKeys(),| key => Assert.Equal(\"f\", key),| key => Assert.Equal(\"e\", key),| key => Assert.Equal(\"d\", key),| key => Assert.Equal(\"c\", key),| key => Assert.Equal(\"b\", key),| key => Assert.Equal(\"a\", key));| }"
      },
      {
        "name": "Reorder_Items_When_Cache_Is_Filling_Up_With_TryGet",
        "body": "{| // arrange| var cache = new Cache<string>(10);| cache.GetOrCreate(\"a\", () => \"a\");| cache.GetOrCreate(\"b\", () => \"b\");| cache.GetOrCreate(\"c\", () => \"c\");| cache.GetOrCreate(\"d\", () => \"d\");| cache.GetOrCreate(\"e\", () => \"e\");| cache.GetOrCreate(\"f\", () => \"f\");| cache.GetOrCreate(\"g\", () => \"g\");| // act| Assert.True(cache.TryGet(\"c\", out _));| // assert| Assert.Collection(| cache.GetKeys(),| key => Assert.Equal(\"c\", key),| key => Assert.Equal(\"g\", key),| key => Assert.Equal(\"f\", key),| key => Assert.Equal(\"e\", key),| key => Assert.Equal(\"d\", key),| key => Assert.Equal(\"b\", key),| key => Assert.Equal(\"a\", key));| }"
      },
      {
        "name": "Reorder_Items_When_Cache_Is_Filling_Up_With_GetOrCreate",
        "body": "{| // arrange| var cache = new Cache<string>(10);| cache.GetOrCreate(\"a\", () => \"a\");| cache.GetOrCreate(\"b\", () => \"b\");| cache.GetOrCreate(\"c\", () => \"c\");| cache.GetOrCreate(\"d\", () => \"d\");| cache.GetOrCreate(\"e\", () => \"e\");| cache.GetOrCreate(\"f\", () => \"f\");| cache.GetOrCreate(\"g\", () => \"g\");| // act| cache.GetOrCreate(\"c\", () => \"c\");| // assert| Assert.Collection(| cache.GetKeys(),| key => Assert.Equal(\"c\", key),| key => Assert.Equal(\"g\", key),| key => Assert.Equal(\"f\", key),| key => Assert.Equal(\"e\", key),| key => Assert.Equal(\"d\", key),| key => Assert.Equal(\"b\", key),| key => Assert.Equal(\"a\", key));| }"
      }
    ]
  },
  {
    "file": "CombinedServiceProviderTests.cs",
    "methods": [
      {
        "name": "CombineServiceCollections",
        "body": "{| var servicesA = new ServiceCollection()| .AddSingleton<IService, ServiceA>()| .BuildServiceProvider();| var servicesB = new ServiceCollection()| .AddSingleton<IService, ServiceB>()| .AddSingleton<IService, ServiceC>()| .BuildServiceProvider();| var combinedServices = new CombinedServiceProvider(servicesA, servicesB);| Assert.Collection(| combinedServices.GetServices<IService>(),| t => Assert.IsType<ServiceA>(t),| t => Assert.IsType<ServiceB>(t),| t => Assert.IsType<ServiceC>(t));| }"
      },
      {
        "name": "CombineServiceCollections_2",
        "body": "{| var servicesA = new ServiceCollection()| .AddSingleton<IService, ServiceA>()| .BuildServiceProvider();| var servicesB = new ServiceCollection()| .AddSingleton<IService, ServiceB>()| .AddSingleton<IService, ServiceC>()| .BuildServiceProvider();| var combinedServices = new CombinedServiceProvider(servicesB, servicesA);| Assert.Collection(| combinedServices.GetServices<IService>(),| t => Assert.IsType<ServiceB>(t),| t => Assert.IsType<ServiceC>(t),| t => Assert.IsType<ServiceA>(t));| }"
      },
      {
        "name": "GetServiceWithoutError",
        "body": "{| /***| Note| ==========| This code is adapted from `HotChocolate.SchemaBuilder.Setup.InitializeInterceptors<T>`,| which was the next relevant call down \"down the stack\" in the error traces which| motivate changes to the subject-under-test (i.e. CombinedServiceProvider).| ***/| IServiceProvider stringServices = new DictionaryServiceProvider(| (typeof(IEnumerable<string>), new List<string>(new[] { \"one\", \"two\", })));| IServiceProvider numberServices = new DictionaryServiceProvider(| (typeof(IEnumerable<int>), new List<int>(new[] { 1, 2, 3, 4, 5, })));| IServiceProvider services = new CombinedServiceProvider(stringServices, numberServices);| switch (services.GetService<IEnumerable<int>>())| {| case null:| throw new Exception(\"Could not locate service!\");| case var target:| Assert.Equal(15, target.Sum());| break;| }| }"
      }
    ]
  },
  {
    "file": "MiddlewareCompilerTests.cs",
    "methods": [
      {
        "name": "CompileFactory",
        "body": "{| // arrange| // act| var factory =| MiddlewareCompiler<CustomClassMiddleware>| .CompileFactory<IServiceProvider, CustomDelegate>(| (services, _) =>| new List<IParameterHandler>| {| new TypeParameterHandler(typeof(string), Expression.Constant(\"abc\")),| new ServiceParameterHandler(services),| });| // assert| var middleware = factory.Invoke(EmptyServiceProvider.Instance, _ => default);| Assert.Equal(\"abc\", middleware.Some);| }"
      },
      {
        "name": "CompileDelegate",
        "body": "{| // arrange| var factory =| MiddlewareCompiler<CustomClassMiddleware>| .CompileFactory<IServiceProvider, CustomDelegate>(| (services, _) =>| new List<IParameterHandler>| {| new TypeParameterHandler(typeof(string), Expression.Constant(\"abc\")),| new ServiceParameterHandler(services),| });| var middleware = factory.Invoke(EmptyServiceProvider.Instance, _ => default);| // act| var pipeline =| MiddlewareCompiler<CustomClassMiddleware>.CompileDelegate<CustomContext>(| (_, _) =>| new List<IParameterHandler>| {| new TypeParameterHandler(typeof(string), Expression.Constant(\"def\")),| });| // assert| var context = new CustomContext(EmptyServiceProvider.Instance);| pipeline.Invoke(context, middleware);| Assert.Equal(\"abcdef\", context.Result);| }"
      }
    ]
  },
  {
    "file": "AsyncEnumerableStreamAdapterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var asyncEnumerable = new TestEnumerable(_strings);| var adapter = new AsyncEnumerableStreamAdapter<string>(asyncEnumerable);| // act| await foreach (var item in adapter)| {| list.Add(item);| }| // assert| for (var i = 0; i < list.Count; i++)| {| Assert.Equal(_strings[i], list[i]);| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var asyncEnumerable = new TestEnumerable(_strings);| var adapter = new AsyncEnumerableStreamAdapter<string>(asyncEnumerable);| var cts = new CancellationTokenSource();| // act| await foreach (var item in adapter.WithCancellation(cts.Token))| {| list.Add(item);| cts.Cancel();| }| // assert| Assert.Collection(list, s => Assert.Equal(_strings[0], s));| }"
      },
      {
        "name": "ArrayToStream_QueryIsNull",
        "body": "{| // arrange| // act| void Verify() => new AsyncEnumerableStreamAdapter<string>(null!);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      }
    ]
  },
  {
    "file": "EnumerableStreamAdapterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var adapter = new EnumerableStreamAdapter<string>(_strings);| // act| await foreach (var item in adapter)| {| list.Add(item);| }| // assert| for (var i = 0; i < list.Count; i++)| {| Assert.Equal(_strings[i], list[i]);| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var adapter = new EnumerableStreamAdapter(_objects.AsQueryable());| // act| await foreach (var item in adapter)| {| list.Add(item);| }| // assert| for (var i = 0; i < list.Count; i++)| {| Assert.Equal(_objects[i], list[i]);| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var adapter = new EnumerableStreamAdapter<string>(_strings.AsQueryable());| var cts = new CancellationTokenSource();| // act| await foreach (var item in adapter.WithCancellation(cts.Token))| {| list.Add(item);| cts.Cancel();| }| // assert| Assert.Collection(list, s => Assert.Equal(_strings[0], s));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var list = new List<object?>();| var adapter = new EnumerableStreamAdapter(_objects.AsQueryable());| var cts = new CancellationTokenSource();| // act| await foreach (var item in adapter.WithCancellation(cts.Token))| {| list.Add(item);| cts.Cancel();| }| // assert| Assert.Collection(list, s => Assert.Equal(_strings[0], s));| }"
      },
      {
        "name": "ArrayToStream_QueryIsNull",
        "body": "{| // arrange| // act| void Verify() => new EnumerableStreamAdapter<string>(null!);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      },
      {
        "name": "Objects_ArrayToStream_QueryIsNull",
        "body": "{| // arrange| // act| void Verify() => new EnumerableStreamAdapter(null!);| // assert| Assert.Throws<ArgumentNullException>(Verify);| }"
      }
    ]
  },
  {
    "file": "EntityIdTests.cs",
    "methods": [
      {
        "name": "Equals_True",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"abc\", \"def\");| // act| var equals = a.Equals(b);| var equalsOp = a == b;| // assert| Assert.True(equals);| Assert.True(equalsOp);| }"
      },
      {
        "name": "Equals_False",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"def\", \"def\");| var c = new EntityId(\"abc\", \"xyz\");| // act| var equals1 = a.Equals(b);| var equals2 = a.Equals(c);| var equalsOp1 = a == b;| var equalsOp2 = a == c;| // assert| Assert.False(equals1);| Assert.False(equals2);| Assert.False(equalsOp1);| Assert.False(equalsOp2);| }"
      },
      {
        "name": "Not_Equals_True",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"def\", \"def\");| var c = new EntityId(\"abc\", \"xyz\");| // act| var equalsOp1 = a != b;| var equalsOp2 = a != c;| // assert| Assert.True(equalsOp1);| Assert.True(equalsOp2);| }"
      },
      {
        "name": "Not_Equals_False",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"abc\", \"def\");| // act| var equalsOp = a != b;| // assert| Assert.False(equalsOp);| }"
      },
      {
        "name": "GetHashCode_Equals",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"abc\", \"def\");| // act| var hashCodeA = a.GetHashCode();| var hashCodeB = b.GetHashCode();| // assert| Assert.Equal(hashCodeA, hashCodeB);| }"
      },
      {
        "name": "GetHashCode_Not_Equals",
        "body": "{| // arrange| var a = new EntityId(\"abc\", \"def\");| var b = new EntityId(\"abc1\", \"def\");| var c = new EntityId(\"abc\", \"def1\");| // act| var hashCodeA = a.GetHashCode();| var hashCodeB = b.GetHashCode();| var hashCodeC = c.GetHashCode();| // assert| Assert.NotEqual(hashCodeA, hashCodeB);| Assert.NotEqual(hashCodeA, hashCodeC);| Assert.NotEqual(hashCodeB, hashCodeC);| }"
      },
      {
        "name": "Deconstruct_Id",
        "body": "{| // arrange| var id = new EntityId(\"abc\", \"def\");| // act| var (typeName, value) = id;| // assert| Assert.Equal(\"abc\", typeName);| Assert.Equal(\"def\", value);| }"
      }
    ]
  },
  {
    "file": "EntityStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var entityStore = new EntityStore();| var entityId = new EntityId(nameof(MockEntity), 1);| IReadOnlyList<MockEntity> updated = Array.Empty<MockEntity>();| ulong version = 0;| using var subscription = entityStore.Watch().Subscribe(update =>| {| updated = update.Snapshot.GetEntities<MockEntity>(update.UpdatedEntityIds);| version = update.Version;| });| // act| entityStore.Update(session =>| {| session.SetEntity(entityId, new MockEntity(\"abc\", 1));| });| await Task.Delay(250);| // assert| Assert.Collection(| updated,| item =>| {| Assert.Equal(\"abc\", item.Foo);| Assert.Equal(1, item.Bar);| });| Assert.Equal(1ul, version);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var cts = new CancellationTokenSource(2000);| var entityStore = new EntityStore();| var entityId = new EntityId(nameof(MockEntity), 1);| entityStore.Update(session =>| {| session.SetEntity(entityId, new MockEntity(\"abc\", 1));| });| // act| entityStore.Update(session =>| {| session.RemoveEntity(entityId);| });| while (entityStore.CurrentSnapshot.GetEntityIds().Count > 0 &&| !cts.IsCancellationRequested)| {| await Task.Delay(50, cts.Token);| }| // assert| Assert.Empty(entityStore.CurrentSnapshot.GetEntityIds());| }"
      },
      {
        "name": "GetAllEntities",
        "body": "{| // arrange| var entityStore = new EntityStore();| var entityId1 = new EntityId(nameof(MockEntity), 1);| var entityId2 = new EntityId(nameof(MockEntity) + \"a\", 2);| entityStore.Update(session =>| {| session.SetEntity(entityId1, new MockEntity(\"abc\", 1));| session.SetEntity(entityId2, new MockEntity(\"abc\", 2));| });| // act| var allEntities = entityStore.CurrentSnapshot.GetEntities().ToList();| var mockEntities = entityStore.CurrentSnapshot.GetEntities(nameof(MockEntity));| // assert| Assert.Collection(| allEntities.OrderBy(t => t.Id.Value),| item =>| {| var entity = Assert.IsType<MockEntity>(item.Entity);| Assert.Equal(\"abc\", entity.Foo);| Assert.Equal(1, entity.Bar);| },| item =>| {| var entity = Assert.IsType<MockEntity>(item.Entity);| Assert.Equal(\"abc\", entity.Foo);| Assert.Equal(2, entity.Bar);| });| Assert.Collection(| mockEntities.OrderBy(t => t.Id.Value),| item =>| {| var entity = Assert.IsType<MockEntity>(item.Entity);| Assert.Equal(\"abc\", entity.Foo);| Assert.Equal(1, entity.Bar);| });| }"
      }
    ]
  },
  {
    "file": "OperationResultExtensionTests.cs",
    "methods": [
      {
        "name": "EnsureNoErrors_WithNoErrors",
        "body": "{| // arrange| var successResult = new ResultMock();| // act| successResult.EnsureNoErrors();| // assert| // did not throw!| }"
      },
      {
        "name": "EnsureNoErrors_WithErrors",
        "body": "{| // arrange| var clientError = new ClientError(\"test\");| var successResult = new ResultMock(clientError);| // act| void Throws() => successResult.EnsureNoErrors();| // assert| Assert.Collection(| Assert.Throws<GraphQLClientException>(Throws).Errors,| item => Assert.Same(clientError, item));| }"
      },
      {
        "name": "EnsureNoErrors_ResultNull",
        "body": "{| // arrange| // act| void Throws() => default(ResultMock)!.EnsureNoErrors();| // assert| Assert.Throws<ArgumentNullException>(Throws);| }"
      },
      {
        "name": "HasErrors_WithNoErrors",
        "body": "{| // arrange| var successResult = new ResultMock();| // act| var hasErrors = successResult.IsErrorResult();| // assert| Assert.False(hasErrors!);| }"
      },
      {
        "name": "HasErrors_WithErrors",
        "body": "{| // arrange| var clientError = new ClientError(\"test\");| var successResult = new ResultMock(clientError);| // act| var hasErrors = successResult.IsErrorResult();| // assert| Assert.True(hasErrors);| }"
      },
      {
        "name": "HasErrors_ResultNull",
        "body": "{| // arrange| // act| void Throws() => default(ResultMock)!.IsErrorResult();| // assert| Assert.Throws<ArgumentNullException>(Throws);| }"
      },
      {
        "name": "IsSuccessResult_WithNoErrors",
        "body": "{| // arrange| var successResult = new ResultMock();| // act| var hasErrors = successResult.IsSuccessResult();| // assert| Assert.True(hasErrors!);| }"
      },
      {
        "name": "IsSuccessResult_WithErrors",
        "body": "{| // arrange| var clientError = new ClientError(\"test\");| var successResult = new ResultMock(clientError);| // act| var hasErrors = successResult.IsSuccessResult();| // assert| Assert.False(hasErrors);| }"
      },
      {
        "name": "IsSuccessResult_ResultNull",
        "body": "{| // arrange| // act| void Throws() => default(ResultMock)!.IsSuccessResult();| // assert| Assert.Throws<ArgumentNullException>(Throws);| }"
      }
    ]
  },
  {
    "file": "GraphQLClientExceptionTests.cs",
    "methods": [
      {
        "name": "Constructor_ZeroErrors",
        "body": "{| //arrange| var errors = Array.Empty<IClientError>();| //act| var exception = new GraphQLClientException(errors);| //assert| Assert.Equal(\"Unknown error occurred\", exception.Message);| }"
      },
      {
        "name": "Constructor_OneError",
        "body": "{| //arrange| var errors = new IClientError[]| {| new ClientError(\"some message\"),| };| //act| var exception = new GraphQLClientException(errors);| //assert| Assert.Equal(\"some message\", exception.Message);| }"
      },
      {
        "name": "Constructor_TwoErrors",
        "body": "{| //arrange| var errors = new IClientError[]| {| new ClientError(\"first message\"),| new ClientError(\"second message\"),| };| //act| var exception = new GraphQLClientException(errors);| //assert| Assert.Equal(| \"Multiple errors occurred:\\n- first message\\n- second message\",| exception.Message.Replace(\"\\r\", \"\"));| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "JsonErrorParserTests.cs",
    "methods": [
      {
        "name": "Error_With_Message",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\" [ { \"\"message\"\": \"\"errors\"\" } ] \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(errors!, error => Assert.Equal(\"errors\", error.Message));| }"
      },
      {
        "name": "Error_Has_No_Message",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"[{ }]\");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error => Assert.Equal(| \"The error format is invalid and was missing the property `message`.\",| error.Message));| }"
      },
      {
        "name": "Error_With_Path",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"path\"\": [ 1, \"\"foo\"\", 2, \"\"bar\"\" ]| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Collection(| error.Path!,| element => Assert.Equal(1, Assert.IsType<int>(element)),| element => Assert.Equal(\"foo\", Assert.IsType<string>(element)),| element => Assert.Equal(2, Assert.IsType<int>(element)),| element => Assert.Equal(\"bar\", Assert.IsType<string>(element)));| });| }"
      },
      {
        "name": "Error_With_Path_With_Invalid_Path_Value",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"path\"\": [ true ]| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Collection(| error.Path!,| element => Assert.Equal(| \"NOT_SUPPORTED_VALUE\",| Assert.IsType<string>(element)));| });| }"
      },
      {
        "name": "Error_With_Locations",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"locations\"\": [ { \"\"line\"\": 1, \"\"column\"\": 5 } ]| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Collection(| error.Locations!,| location =>| {| Assert.Equal(1, location.Line);| Assert.Equal(5, location.Column);| });| });| }"
      },
      {
        "name": "Error_With_Extensions",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"extensions\"\":| {| \"\"s\"\": \"\"abc\"\",| \"\"i\"\": 5,| \"\"f\"\": 1.5,| \"\"true\"\": true,| \"\"false\"\": false,| \"\"null\"\": null,| \"\"il\"\": [ 1, 2, 3 ],| \"\"sl\"\": [ \"\"a\"\", \"\"b\"\" ],| \"\"ol\"\": [ { \"\"s\"\": \"\"abc\"\" } ]| }| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| error.Extensions.MatchSnapshot();| });| }"
      },
      {
        "name": "Error_With_Extensions_Code",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"extensions\"\":| {| \"\"code\"\": \"\"CS1234\"\"| }| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Equal(\"CS1234\", error.Code);| error.Extensions.MatchSnapshot();| });| }"
      },
      {
        "name": "Error_With_Code",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"code\"\": \"\"CS1234\"\"| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Equal(\"CS1234\", error.Code);| });| }"
      },
      {
        "name": "Error_With_Root_Code_Takes_Preference",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"code\"\": \"\"CSROOT\"\",| \"\"extensions\"\":| {| \"\"code\"\": \"\"CS1234\"\"| }| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"errors\", error.Message);| Assert.Equal(\"CSROOT\", error.Code);| error.Extensions.MatchSnapshot();| });| }"
      },
      {
        "name": "Parsing_Error",
        "body": "{| // arrange| var result = JsonDocument.Parse(@\"| [| {| \"\"message\"\": \"\"errors\"\",| \"\"locations\"\": [ { \"\"column\"\": 5 } ]| },| {| \"\"message\"\": \"\"errors\"\",| \"\"locations\"\": [ { \"\"column\"\": 5 } ]| }| ]| \");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Collection(| errors!,| error =>| {| Assert.Equal(\"Error parsing a server error.\", error.Message);| Assert.NotNull(error.Exception);| },| error =>| {| Assert.Equal(\"Error parsing a server error.\", error.Message);| Assert.NotNull(error.Exception);| });| }"
      },
      {
        "name": "Parsing_Errors_Is_Null",
        "body": "{| // arrange| var result = JsonDocument.Parse(\"null\");| // act| var errors = JsonErrorParser.ParseErrors(result.RootElement);| // assert| Assert.Null(errors);| }"
      }
    ]
  },
  {
    "file": "JsonOperationRequestSerializerTests.cs",
    "methods": [
      {
        "name": "Serialize_Request_With_InputObject",
        "body": "{| // arrange| var inputObject = new KeyValuePair<string, object?>[]| {| new(\"s\", \"def\"),| new(\"i\", 123),| new(\"d\", 123.123),| new(\"b\", true),| new(\"ol\", new List<object>| {| new KeyValuePair<string, object?>[]| {| new(\"s\", \"def\"),| },| }),| new(\"sl\", new List<string> { \"a\", \"b\", \"c\", }),| new(\"il\", new[] { 1, 2, 3, }),| };| // act| using var stream = new MemoryStream();| using var jsonWriter = new Utf8JsonWriter(stream, new() { Indented = true, });| var serializer = new JsonOperationRequestSerializer();| serializer.Serialize(| new OperationRequest(| \"abc\",| new Document(),| new Dictionary<string, object?> { { \"abc\", inputObject }, }),| jsonWriter);| jsonWriter.Flush();| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      },
      {
        "name": "Serialize_Request_With_Json",
        "body": "{| // arrange| var json = JsonDocument.Parse(@\"{ \"\"abc\"\": { \"\"def\"\": \"\"def\"\" } }\");| // act| using var stream = new MemoryStream();| using var jsonWriter = new Utf8JsonWriter(stream, new() { Indented = true, });| var serializer = new JsonOperationRequestSerializer();| serializer.Serialize(| new OperationRequest(| \"abc\",| new Document(),| new Dictionary<string, object?> { { \"abc\", json.RootElement }, }),| jsonWriter);| jsonWriter.Flush();| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      },
      {
        "name": "Serialize_Request_With_Id_And_Empty_Query",
        "body": "{| // arrange| var json = JsonDocument.Parse(@\"{ \"\"abc\"\": { \"\"def\"\": \"\"def\"\" } }\");| // act| using var stream = new MemoryStream();| using var jsonWriter = new Utf8JsonWriter(stream, new() { Indented = true, });| var serializer = new JsonOperationRequestSerializer();| serializer.Serialize(| new OperationRequest(| \"123\",| \"abc\",| new EmptyDocument(),| new Dictionary<string, object?> { { \"abc\", json.RootElement }, },| strategy: RequestStrategy.PersistedOperation),| jsonWriter);| jsonWriter.Flush();| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      },
      {
        "name": "Serialize_Request_With_Extensions",
        "body": "{| // arrange| var operationRequest = new OperationRequest(| \"abc\",| new Document());| operationRequest.Extensions.Add(nameof(String), \"def\");| operationRequest.Extensions.Add(\"null\", null);| operationRequest.Extensions.Add(nameof(Byte), (byte)123);| operationRequest.Extensions.Add(nameof(Int16), (short)123);| operationRequest.Extensions.Add(nameof(UInt16), (ushort)123);| operationRequest.Extensions.Add(nameof(Int32), 123);| operationRequest.Extensions.Add(nameof(UInt32), (uint)123);| operationRequest.Extensions.Add(nameof(Int64), (long)123);| operationRequest.Extensions.Add(nameof(UInt64), (ulong)123);| operationRequest.Extensions.Add(nameof(Single), (float)123.123);| operationRequest.Extensions.Add(nameof(Double), 123.123);| operationRequest.Extensions.Add(nameof(Decimal), (decimal)123.123);| operationRequest.Extensions.Add(nameof(Uri), new Uri(\"http://local\"));| operationRequest.Extensions.Add(\"ol\",| new List<object>| {| new KeyValuePair<string, object?>[]| {| new(\"s\", \"def\"),| },| });| operationRequest.Extensions.Add(\"sl\", new List<string> { \"a\", \"b\", \"c\", });| operationRequest.Extensions.Add(\"il\", new[] { 1, 2, 3, });| operationRequest.Extensions.Add(\"tuple\", (\"a\", \"b\"));| // act| using var stream = new MemoryStream();| using var jsonWriter = new Utf8JsonWriter(stream, new() { Indented = true, });| var serializer = new JsonOperationRequestSerializer();| serializer.Serialize(operationRequest, jsonWriter);| jsonWriter.Flush();| // assert| Encoding.UTF8.GetString(stream.ToArray()).MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "JsonSerializationHelperTests.cs",
    "methods": [
      {
        "name": "ReadScalarList",
        "body": "{| var list = JsonSerializationHelper.ReadList(\"[1, 2, 3, 4]\");| Assert.Collection(| list,| item => Assert.Equal(1, Assert.IsType<long>(item)),| item => Assert.Equal(2, Assert.IsType<long>(item)),| item => Assert.Equal(3, Assert.IsType<long>(item)),| item => Assert.Equal(4, Assert.IsType<long>(item)));| }"
      },
      {
        "name": "ReadNestedScalarList",
        "body": "{| var list = JsonSerializationHelper.ReadList(\"[[1, 2, 3, 4]]\");| Assert.Collection(| list,| nested => Assert.Collection(| Assert.IsType<List<object>>(nested),| item => Assert.Equal(1, Assert.IsType<long>(item)),| item => Assert.Equal(2, Assert.IsType<long>(item)),| item => Assert.Equal(3, Assert.IsType<long>(item)),| item => Assert.Equal(4, Assert.IsType<long>(item))));| }"
      }
    ]
  },
  {
    "file": "OperationExecutorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var cacheResult = \"cache result\";| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = Mock.Of<IOperationResult<string>>(f => f.Data == cacheResult);| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(true);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.NetworkOnly)| .Subscribe(observer);| // assert| var actualNetworkResult = await observer.WaitForResult();| Assert.Equal(networkResult, actualNetworkResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = null as IOperationResult<string>;| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(false);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.NetworkOnly)| .Subscribe(observer);| // assert| var actualNetworkResult = await observer.WaitForResult();| Assert.Equal(networkResult, actualNetworkResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var cacheResult = \"cache result\";| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = Mock.Of<IOperationResult<string>>(f => f.Data == cacheResult);| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(true);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.CacheAndNetwork)| .Subscribe(observer);| // assert| var actualCacheResult = await observer.WaitForResult();| Assert.Equal(cacheResult, actualCacheResult.Data);| var actualNetworkResult = await observer.WaitForResult();| Assert.Equal(networkResult, actualNetworkResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = null as IOperationResult<string>;| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(false);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.CacheAndNetwork)| .Subscribe(observer);| // assert| var actualNetworkResult = await observer.WaitForResult();| Assert.Equal(networkResult, actualNetworkResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var cacheResult = \"cache result\";| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = Mock.Of<IOperationResult<string>>(f => f.Data == cacheResult);| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(true);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.CacheFirst)| .Subscribe(observer);| // assert| var actualCacheResult = await observer.WaitForResult();| Assert.Equal(cacheResult, actualCacheResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connection = new Mock<IConnection<string>>();| var operationStore = new Mock<IOperationStore>();| var resultBuilder = new MockResultBuilder();| var resultPatcher = new Mock<IResultPatcher<string>>();| var document = new Mock<IDocument>();| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var networkResult = \"network result\";| var storeUpdateResult = \"store result\";| var executor = new OperationExecutor<string, string>(| connection.Object,| () => resultBuilder,| () => resultPatcher.Object,| operationStore.Object);| var cacheOperationResult = null as IOperationResult<string>;| operationStore.Setup(e => e.TryGet(request, out cacheOperationResult))| .Returns(false);| connection.Setup(e => e.ExecuteAsync(request))| .Returns(ToAsyncEnumerable(new Response<string>(networkResult, null)));| operationStore.Setup(e => e.Watch<string>(request))| .Returns(Observable.Return(Mock.Of<IOperationResult<string>>(e => e.Data == storeUpdateResult)));| // act| executor.Watch(request, ExecutionStrategy.CacheFirst)| .Subscribe(observer);| // assert| var actualNetworkResult = await observer.WaitForResult();| Assert.Equal(networkResult, actualNetworkResult.Data);| var actualStoreUpdateResult = await observer.WaitForResult();| Assert.Equal(storeUpdateResult, actualStoreUpdateResult.Data);| }"
      }
    ]
  },
  {
    "file": "OperationRequestTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var request = new OperationRequest(| null,| \"abc\",| \"myOperation\",| variables: new Dictionary<string, object?>()| {| [\"abc\"] = \"def\",| [\"hij\"] = null,| });| using var memory = new MemoryStream();| await using var writer = new Utf8JsonWriter(memory);| // act| request.WriteTo(writer);| await writer.FlushAsync();| // assert| var result = Encoding.UTF8.GetString(memory.ToArray());| Assert.Equal(| \"\"\"{\"id\":\"abc\",\"operationName\":\"myOperation\",\"variables\":{\"abc\":\"def\",\"hij\":null}}\"\"\",| result);| }"
      }
    ]
  },
  {
    "file": "OperationResultBuilderTests.cs",
    "methods": [
      {
        "name": "Create_Result_Without_Data_And_Errors",
        "body": "{| // arrange| // act| Action result = () => OperationResultBuilder.New().Build();| // assert| Assert.Throws<ArgumentException>(result);| }"
      },
      {
        "name": "Create_Result_Set_Data",
        "body": "{| // arrange| var builder = new OperationResultBuilder();| // act| builder.SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, });| // assert| builder.Build().MatchSnapshot();| }"
      },
      {
        "name": "Create_Result_Set_Items",
        "body": "{| // arrange| var builder = new OperationResultBuilder();| // act| builder.SetItems(new List<object> { 1, });| // assert| builder.Build().MatchSnapshot();| }"
      },
      {
        "name": "ExpectOperationResult",
        "body": "{| // arrange| IExecutionResult result = OperationResultBuilder.New()| .SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, })| .Build();| // act| var queryResult = result.ExpectOperationResult();| // assert| Assert.NotNull(queryResult);| }"
      },
      {
        "name": "ExpectResponseStream",
        "body": "{| // arrange| IExecutionResult result = OperationResultBuilder.New()| .SetData(new Dictionary<string, object?> { { \"a\", \"b\" }, })| .Build();| // act| void Fail() => result.ExpectResponseStream();| // assert| Assert.Throws<ArgumentException>(Fail);| }"
      }
    ]
  },
  {
    "file": "OperationStoreTests.cs",
    "methods": [
      {
        "name": "Store_And_Retrieve_Result",
        "body": "{| // arrange| var entityStore = new EntityStore();| var document = new Mock<IDocument>();| var result = new Mock<IOperationResult<string>>();| var store = new OperationStore(entityStore);| var request = new OperationRequest(\"abc\", document.Object);| // act| store.Set(request, result.Object);| var success = store.TryGet(request, out IOperationResult<string>? retrieved);| // assert| Assert.True(success);| Assert.Same(result.Object, retrieved);| }"
      },
      {
        "name": "TryGet_Not_Found",
        "body": "{| // arrange| var entityStore = new EntityStore();| var document = new Mock<IDocument>();| var store = new OperationStore(entityStore);| var request = new OperationRequest(\"abc\", document.Object);| // act| var success = store.TryGet(request, out IOperationResult<string>? retrieved);| // assert| Assert.False(success);| Assert.Null(retrieved);| }"
      },
      {
        "name": "Watch_For_Updates",
        "body": "{| // arrange| var entityStore = new EntityStore();| var document = new Mock<IDocument>();| var result = new Mock<IOperationResult<string>>();| var store = new OperationStore(entityStore);| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| // act| using var session = store| .Watch<string>(request)| .Subscribe(observer);| // assert| store.Set(request, result.Object);| Assert.Same(result.Object, observer.LastResult);| }"
      },
      {
        "name": "Watch_For_Updates_With_SystemReactive",
        "body": "{| // arrange| var entityStore = new EntityStore();| var document = new Mock<IDocument>();| var result = new Mock<IOperationResult<string>>();| var store = new OperationStore(entityStore);| var request = new OperationRequest(\"abc\", document.Object);| IOperationResult<string>? lastResult = null;| // act| using var session =| ObservableExtensions.Subscribe(| store.Watch<string>(request),| r =>| {| lastResult = r;| });| // assert| store.Set(request, result.Object);| Assert.Same(result.Object, lastResult);| }"
      },
      {
        "name": "Watch_Unsubscribe",
        "body": "{| // arrange| var entityStore = new EntityStore();| var document = new Mock<IDocument>();| var result = new Mock<IOperationResult<string>>();| var store = new OperationStore(entityStore);| var request = new OperationRequest(\"abc\", document.Object);| var observer = new ResultObserver();| var session = store| .Watch<string>(request)| .Subscribe(observer);| // act| session.Dispose();| // assert| store.Set(request, result.Object);| Assert.Null(observer.LastResult);| }"
      }
    ]
  },
  {
    "file": "BooleanSerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| var serializer = new BooleanSerializer();| // act| bool? result = serializer.Parse(true);| // assert| Assert.True(Assert.IsType<bool>(result));| }"
      },
      {
        "name": "Format_Null",
        "body": "{| // arrange| var serializer = new BooleanSerializer();| // act| var result = serializer.Format(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Format_True",
        "body": "{| // arrange| var serializer = new BooleanSerializer();| // act| var result = serializer.Format(true);| // assert| Assert.True(Assert.IsType<bool>(result));| }"
      },
      {
        "name": "Format_False",
        "body": "{| // arrange| var serializer = new BooleanSerializer();| // act| var result = serializer.Format(false);| // assert| Assert.False(Assert.IsType<bool>(result));| }"
      },
      {
        "name": "TypeName_Default",
        "body": "{| // arrange| var serializer = new BooleanSerializer();| // act| var typeName = serializer.TypeName;| // assert| Assert.Equal(\"Boolean\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange| var serializer = new BooleanSerializer(\"Abc\");| // act| var typeName = serializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "ByteArraySerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| byte[] buffer = [1,];| // act| var result = Serializer.Parse(buffer);| // assert| Assert.Same(buffer, result);| }"
      },
      {
        "name": "Format_Null",
        "body": "{| // arrange| // act| var result = Serializer.Format(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Format_Value",
        "body": "{| // arrange| byte[] buffer = [1,];| // act| var result = Serializer.Format(buffer);| // assert| Assert.Same(buffer, result);| }"
      },
      {
        "name": "TypeName_Default",
        "body": "{| // arrange| // act| var typeName = Serializer.TypeName;| // assert| Assert.Equal(\"ByteArray\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange| // act| var typeName = CustomSerializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "ByteSerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| byte value = 1;| // act| var result = Serializer.Parse(value);| // assert| Assert.Equal(value, result);| }"
      },
      {
        "name": "Format_Null",
        "body": "{| // arrange| // act| var result = Serializer.Format(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Format_Value",
        "body": "{| // arrange| byte value = 1;| // act| var result = Serializer.Format(value);| // assert| Assert.Equal(value, result);| }"
      },
      {
        "name": "Format_Exception",
        "body": "{| // arrange| var value = \"1\";| // act| void Action() => Serializer.Format(value);| // assert| Assert.Equal(| \"SS0007\",| Assert.Throws<GraphQLClientException>(Action).Errors.Single().Code);| }"
      },
      {
        "name": "TypeName_Default",
        "body": "{| // arrange| // act| var typeName = Serializer.TypeName;| // assert| Assert.Equal(\"Byte\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange| // act| var typeName = CustomSerializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "DateSerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| var value = \"2012-11-29\";| // act| var result = Serializer.Parse(value);| // assert| Assert.Equal(2012, result.Date.Year);| Assert.Equal(11, result.Date.Month);| Assert.Equal(29, result.Date.Day);| }"
      },
      {
        "name": "Format_Null",
        "body": "{| // arrange| // act| var result = Serializer.Format(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Format_Value",
        "body": "{| // arrange| var value = new DateTime(2012, 11, 29);| // act| var result = Serializer.Format(value);| // assert| Assert.Equal(\"2012-11-29\", result);| }"
      },
      {
        "name": "Format_Exception",
        "body": "{| // arrange| var value = \"1\";| // act| void Action() => Serializer.Format(value);| // assert| Assert.Equal(| \"SS0007\",| Assert.Throws<GraphQLClientException>(Action).Errors.Single().Code);| }"
      },
      {
        "name": "TypeName_Default",
        "body": "{| // arrange| // act| var typeName = Serializer.TypeName;| // assert| Assert.Equal(\"Date\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange| // act| var typeName = CustomSerializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "DateTimeSerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| var value = \"2011-08-30T13:22:53.108Z\";| // act| var result = Serializer.Parse(value);| // assert| Assert.Equal(2011, result.Year);| Assert.Equal(8, result.Month);| Assert.Equal(30, result.Day);| Assert.Equal(13, result.Hour);| Assert.Equal(22, result.Minute);| Assert.Equal(53, result.Second);| Assert.Equal(0, result.Offset.Hours);| }"
      },
      {
        "name": "Format_Null",
        "body": "{| // arrange| // act| var result = Serializer.Format(null);| // assert| Assert.Null(result);| }"
      },
      {
        "name": "Format_Value",
        "body": "{| // arrange| var value = new DateTimeOffset(2011, 8, 30, 13, 22, 53, 108, TimeSpan.Zero);| // act| var result = Serializer.Format(value);| // assert| Assert.Equal(\"2011-08-30T13:22:53.108Z\", result);| }"
      },
      {
        "name": "Format_Exception",
        "body": "{| // arrange| var value = 1;| // act| void Action() => Serializer.Format(value);| // assert| Assert.Equal(| \"SS0007\",| Assert.Throws<GraphQLClientException>(Action).Errors.Single().Code);| }"
      },
      {
        "name": "TypeName_Default",
        "body": "{| // arrange| // act| var typeName = Serializer.TypeName;| // assert| Assert.Equal(\"DateTime\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange| // act| var typeName = CustomSerializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "JsonSerializerTests.cs",
    "methods": [
      {
        "name": "Parse",
        "body": "{| // arrange| var json = JsonDocument.Parse(@\"{ \"\"abc\"\": {\"\"def\"\":\"\"def\"\"} }\");| var element = json.RootElement.EnumerateObject().First().Value;| // act| var serialized = _serializer.Parse(element);| // assert| Assert.Equal(element.ToString(), serialized.ToString());| }"
      }
    ]
  },
  {
    "file": "SerializerResolverTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_NotThrow",
        "body": "{| // arrange| var serializers = Enumerable.Empty<ISerializer>();| // act| var exception = Record.Exception(() => new SerializerResolver(serializers));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_NoSerializer_ThrowException",
        "body": "{| // arrange| IEnumerable<ISerializer> serializers = default!;| // act| var exception = Record.Exception(() => new SerializerResolver(serializers));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "ServiceProvider_SerializerRegistered_NotThrow",
        "body": "{| // arrange| var serviceProvider = new ServiceCollection()| .AddSingleton<ISerializerResolver, SerializerResolver>()| .AddSingleton<ISerializer, StringSerializer>()| .BuildServiceProvider();| // act| var exception =| Record.Exception(() => serviceProvider.GetService<ISerializerResolver>());| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_SerializerRegistered_RegisterSerializers",
        "body": "{| // arrange| var serializerMock = new Mock<ISerializer>(MockBehavior.Strict);| var serializers =| Enumerable.Empty<ISerializer>()| .Append(serializerMock.Object);| serializerMock.Setup(x => x.TypeName).Returns(\"Foo\");| // act| new SerializerResolver(serializers);| // assert| serializerMock.VerifyAll();| }"
      },
      {
        "name": "Constructor_InputObjectFormatterRegistered_Initialize",
        "body": "{| // arrange| var serializerMock = new Mock<IInputObjectFormatter>(MockBehavior.Strict);| ISerializerResolver? callback = null;| var serializers =| Enumerable.Empty<ISerializer>()| .Append(serializerMock.Object);| serializerMock.Setup(x => x.TypeName).Returns(\"Foo\");| serializerMock| .Setup(x => x.Initialize(It.IsAny<ISerializerResolver>()))| .Callback((ISerializerResolver resolver) => callback = resolver);| // act| var resolver = new SerializerResolver(serializers);| // assert| serializerMock.VerifyAll();| Assert.Equal(resolver, callback);| }"
      },
      {
        "name": "Constructor_CustomIntSerializerRegistered_PreferOverBuiltInt",
        "body": "{| // arrange| ISerializer[] serializers =| [| new CustomIntSerializer(),| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var resolvedFormatter = resolver.GetInputValueFormatter(\"Int\");| // assert| Assert.IsType<CustomIntSerializer>(resolvedFormatter);| }"
      },
      {
        "name": "GetLeaveValueParser_SerializerRegistered_ReturnSerializer",
        "body": "{| // arrange| ISerializer[] serializers =| [| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var resolvedParser =| resolver.GetLeafValueParser<int, int>(\"Int\");| // assert| Assert.IsType<IntSerializer>(resolvedParser);| }"
      },
      {
        "name": "GetLeaveValueParser_SerializerRegisteredDifferentName_ThrowException",
        "body": "{| // arrange| ISerializer[] serializers =| [| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetLeafValueParser<int, int>(\"Foo\"));| // assert| Assert.IsType<ArgumentException>(ex);| }"
      },
      {
        "name": "GetLeaveValueParser_SerializerRegisteredDifferentType_ThrowException",
        "body": "{| // arrange| ISerializer[] serializers =| [| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetLeafValueParser<int, double>(\"Int\"));| // assert| Assert.IsType<ArgumentException>(ex);| }"
      },
      {
        "name": "GetLeaveValueParser_TypeNull_ThrowException",
        "body": "{| // arrange| ISerializer[] serializers =| [| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetLeafValueParser<int, double>(null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "GetInputValueFormatter_FormatterRegistered_ReturnFormatter",
        "body": "{| // arrange| ISerializer[] serializers =| [| new CustomInputValueFormatter(),| ];| var resolver = new SerializerResolver(serializers);| // act| var resolvedFormatter = resolver.GetInputValueFormatter(\"Foo\");| // assert| Assert.IsType<CustomInputValueFormatter>(resolvedFormatter);| }"
      },
      {
        "name": "GetInputValueFormatter_FormatterRegisteredDifferentName_ThrowException",
        "body": "{| // arrange| ISerializer[] serializers =| [| new CustomInputValueFormatter(),| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetInputValueFormatter(\"Bar\"));| // assert| Assert.IsType<ArgumentException>(ex);| }"
      },
      {
        "name": "GetInputValueFormatter_FormatterRegisteredDifferentType_ThrowException",
        "body": "{| // arrange| var serializerMock = new Mock<ISerializer>();| serializerMock.Setup(x => x.TypeName).Returns(\"Int\");| ISerializer[] serializers =| [| serializerMock.Object,| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetInputValueFormatter(\"Int\"));| // assert| Assert.IsType<ArgumentException>(ex);| }"
      },
      {
        "name": "GetInputValueFormatter_TypeNull_ThrowException",
        "body": "{| // arrange| ISerializer[] serializers =| [| new IntSerializer(),| ];| var resolver = new SerializerResolver(serializers);| // act| var ex = Record.Exception(() => resolver.GetInputValueFormatter(null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "DependencyInjection_CustomIntSerializerRegistered_ReturnSerializer",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| serviceCollection.AddSingleton<SerializerResolver>();| serviceCollection.AddSerializer<CustomIntSerializer>();| var resolver =| serviceCollection.BuildServiceProvider().GetRequiredService<SerializerResolver>();| // act| var resolvedFormatter = resolver.GetInputValueFormatter(\"Int\");| // assert| Assert.IsType<CustomIntSerializer>(resolvedFormatter);| }"
      },
      {
        "name": "DependencyInjection_CustomIntSerializerRegistered_ReturnInstanceOfSerializer",
        "body": "{| // arrange| CustomIntSerializer serializer = new();| IServiceCollection serviceCollection = new ServiceCollection();| serviceCollection.AddSingleton<SerializerResolver>();| serviceCollection.AddSerializer(serializer);| var resolver =| serviceCollection.BuildServiceProvider().GetRequiredService<SerializerResolver>();| // act| var resolvedFormatter = resolver.GetInputValueFormatter(\"Int\");| // assert| Assert.Same(serializer, resolvedFormatter);| }"
      }
    ]
  },
  {
    "file": "UrlSerializerTests.cs",
    "methods": [
      {
        "name": "TypeName_Default",
        "body": "{| // arrange & act| var typeName = Serializer.TypeName;| // assert| Assert.Equal(\"Url\", typeName);| }"
      },
      {
        "name": "TypeName_Custom",
        "body": "{| // arrange & act| var typeName = CustomSerializer.TypeName;| // assert| Assert.Equal(\"Abc\", typeName);| }"
      }
    ]
  },
  {
    "file": "UuidSerializerTests.cs",
    "methods": [
      {
        "name": "Parse_Exception",
        "body": "{| // arrange| var serializer = new UUIDSerializer();| // assert| Assert.Throws<GraphQLClientException>(() => serializer.Parse(string.Empty));| }"
      }
    ]
  },
  {
    "file": "DatabaseHelperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| // act| await helper.CreateIfNotExistsAsync(connection);| // assert| Assert.True(await helper.SaveEntityAsync(| connection,| new EntityDto| {| Id = \"abc\",| Type = \"def\",| Value = \"ghi\",| }));| Assert.True(await helper.SaveOperationAsync(| connection,| new OperationDto| {| Id = \"abc\",| Variables = \"def\",| ResultType = \"ghi\",| DataInfo = \"jkl\",| }));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| // act| Assert.True(await helper.SaveEntityAsync(| connection,| new EntityDto| {| Id = \"abc\",| Type = \"def\",| Value = \"ghi\",| }));| // assert| var entities = new List<EntityDto>();| await foreach (var entityDto in helper.GetAllEntitiesAsync(connection))| {| entities.Add(entityDto);| }| Assert.Collection(| entities,| entity =>| {| Assert.Equal(\"abc\", entity.Id);| Assert.Equal(\"def\", entity.Type);| Assert.Equal(\"ghi\", entity.Value);| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| Assert.True(await helper.SaveEntityAsync(| connection,| new EntityDto| {| Id = \"abc\",| Type = \"def\",| Value = \"ghi\",| }));| // act| Assert.True(await helper.SaveEntityAsync(| connection,| new EntityDto| {| Id = \"abc\",| Type = \"def1\",| Value = \"ghi1\",| }));| // assert| var entities = new List<EntityDto>();| await foreach (var entityDto in helper.GetAllEntitiesAsync(connection))| {| entities.Add(entityDto);| }| Assert.Collection(| entities,| entity =>| {| Assert.Equal(\"abc\", entity.Id);| Assert.Equal(\"def1\", entity.Type);| Assert.Equal(\"ghi1\", entity.Value);| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| Assert.True(await helper.SaveEntityAsync(| connection,| new EntityDto| {| Id = \"abc\",| Type = \"def\",| Value = \"ghi\",| }));| // act| Assert.True(await helper.DeleteEntityAsync(connection, \"abc\"));| // assert| var entities = new List<EntityDto>();| await foreach (var entityDto in helper.GetAllEntitiesAsync(connection))| {| entities.Add(entityDto);| }| Assert.Empty(entities);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| // act| Assert.True(await helper.SaveOperationAsync(| connection,| new OperationDto| {| Id = \"abc\",| Variables = \"def\",| ResultType = \"ghi\",| DataInfo = \"jkl\",| }));| // assert| var collections = new List<OperationDto>();| await foreach (var operationDto in helper.GetAllOperationsAsync(connection))| {| collections.Add(operationDto);| }| Assert.Collection(| collections,| operation =>| {| Assert.Equal(\"abc\", operation.Id);| Assert.Equal(\"def\", operation.Variables);| Assert.Equal(\"ghi\", operation.ResultType);| Assert.Equal(\"jkl\", operation.DataInfo);| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| Assert.True(await helper.SaveOperationAsync(| connection,| new OperationDto| {| Id = \"abc\",| Variables = \"def\",| ResultType = \"ghi\",| DataInfo = \"jkl\",| }));| // act| Assert.True(await helper.SaveOperationAsync(| connection,| new OperationDto| {| Id = \"abc\",| Variables = \"def1\",| ResultType = \"ghi1\",| DataInfo = \"jkl1\",| }));| // assert| var collections = new List<OperationDto>();| await foreach (var operationDto in helper.GetAllOperationsAsync(connection))| {| collections.Add(operationDto);| }| Assert.Collection(| collections,| operation =>| {| Assert.Equal(\"abc\", operation.Id);| Assert.Equal(\"def1\", operation.Variables);| Assert.Equal(\"ghi1\", operation.ResultType);| Assert.Equal(\"jkl1\", operation.DataInfo);| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var connection = new SqliteConnection(\"Data Source=:memory:\");| await connection.OpenAsync();| var helper = new DatabaseHelper();| await helper.CreateIfNotExistsAsync(connection);| Assert.True(await helper.SaveOperationAsync(| connection,| new OperationDto| {| Id = \"abc\",| Variables = \"def\",| ResultType = \"ghi\",| DataInfo = \"jkl\",| }));| // act| Assert.True(await helper.DeleteOperationAsync(connection, \"abc\"));| // assert| var collections = new List<OperationDto>();| await foreach (var operationDto in helper.GetAllOperationsAsync(connection))| {| collections.Add(operationDto);| }| Assert.Empty(collections);| }"
      }
    ]
  },
  {
    "file": "HttpConnectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000/graphql\");| var document = new MockDocument(\"query Test { __typename }\");| var request = new OperationRequest(\"Test\", document);| // act| var results = new List<JsonDocument>();| var connection = new HttpConnection(() => client);| await foreach (var response in connection.ExecuteAsync(request))| {| if (response.Body is not null)| {| results.Add(response.Body);| }| }| // assert| Assert.Collection(| results,| t => t.RootElement.ToString().MatchSnapshot());| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000/graphql\");| var document = new MockDocument(| @\"query GetHero {| hero(episode: NEW_HOPE) {| ... HeroName| }| }| fragment HeroName on Character {| name| friends {| nodes {| name| ... HeroAppearsIn2 @defer(label: \"\"HeroAppearsIn2\"\")| }| }| }| fragment HeroAppearsIn2 on Character {| appearsIn| }\");| var request = new OperationRequest(\"GetHero\", document);| // act| var results = new List<JsonDocument>();| var connection = new HttpConnection(() => client);| await foreach (var response in connection.ExecuteAsync(request))| {| if (response.Body is not null)| {| results.Add(response.Body);| }| }| // assert| var snapshot = Snapshot.Create();| var i = 0;| foreach (var result in results.OrderBy(| r => r.RootElement.GetPropertyOrNull(\"path\")?.ToString()))| {| // The order of the patches is not guaranteed, that is why we normalize the order and| // normalize the hasNext... overall the guarantee of patchability lies with the server.| snapshot.Add(| result.RootElement| .ToString()| .Replace(\"\\\"hasNext\\\":false\", \"\\\"hasNext\\\":true\"),| $\"Result {++i}\");| }| await snapshot.MatchAsync();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var server = CreateStarWarsServer();| var client = server.CreateClient();| client.BaseAddress = new Uri(\"http://localhost:5000/graphql\");| var document = new MockDocument(| @\"query GetHero {| hero(episode: NEW_HOPE) {| ... HeroName| ... HeroAppearsIn @defer(label: \"\"HeroAppearsIn\"\")| }| }| fragment HeroName on Character {| name| friends {| nodes {| name| }| }| }| fragment HeroAppearsIn on Character {| appearsIn| }\");| var request = new OperationRequest(\"GetHero\", document);| // act| var results = new List<JsonDocument>();| var connection = new HttpConnection(() => client);| await foreach (var response in connection.ExecuteAsync(request))| {| if (response.Body is not null)| {| results.Add(response.Body);| }| }| // assert| var snapshot = Snapshot.Create();| var i = 0;| foreach (var result in results)| {| snapshot.Add(result.RootElement.ToString(), $\"Result {++i}\");| }| await snapshot.MatchAsync();| }"
      }
    ]
  },
  {
    "file": "DefaultInMemoryClientBuilderTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_NoException",
        "body": "{| // arrange| var executorResolver = new Mock<IRequestExecutorResolver>().Object;| var optionsMonitor = new ServiceCollection()| .Configure<InMemoryClientFactoryOptions>(_ => { })| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| // act| var ex = Record.Exception(() =>| new DefaultInMemoryClientFactory(executorResolver, optionsMonitor));| // assert| Assert.Null(ex);| }"
      },
      {
        "name": "Constructor_NoExecutor_ThrowException",
        "body": "{| // arrange| IRequestExecutorResolver executorResolver = default!;| var optionsMonitor = new ServiceCollection()| .Configure<InMemoryClientFactoryOptions>(_ => { })| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| // act| var ex = Record.Exception(() =>| new DefaultInMemoryClientFactory(executorResolver, optionsMonitor));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Constructor_NoOptions_ThrowException",
        "body": "{| // arrange| var executorResolver =| new Mock<IRequestExecutorResolver>().Object;| IOptionsMonitor<InMemoryClientFactoryOptions> optionsMonitor = default!;| // act| var ex = Record.Exception(() =>| new DefaultInMemoryClientFactory(executorResolver, optionsMonitor));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var wasCalled = false;| var executorResolver =| new Mock<IRequestExecutorResolver>().Object;| var optionsMonitor = new ServiceCollection()| .Configure<InMemoryClientFactoryOptions>(\"Foo\", _ => { wasCalled = true; })| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var factory = new DefaultInMemoryClientFactory(executorResolver, optionsMonitor);| // act| await factory.CreateAsync(\"Foo\");| // assert| Assert.True(wasCalled);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var executorResolver =| new Mock<IRequestExecutorResolver>().Object;| var optionsMonitor =| new ServiceCollection()| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var factory = new DefaultInMemoryClientFactory(executorResolver, optionsMonitor);| // act| var client = await factory.CreateAsync(\"Foo\");| // assert| Assert.NotNull(client);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var nameString = \"FooBar\";| var executor = new Mock<IRequestExecutor>().Object;| Mock<IRequestExecutorResolver> executorResolverMock = new();| var executorResolver = executorResolverMock.Object;| var optionsMonitor =| new ServiceCollection()| .Configure<InMemoryClientFactoryOptions>(\"Foo\",| x => x.InMemoryClientActions.Add((memoryClient, token) =>| {| memoryClient.SchemaName = nameString;| return default;| }))| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var factory = new DefaultInMemoryClientFactory(executorResolver, optionsMonitor);| executorResolverMock| .Setup(| x => x.GetRequestExecutorAsync(nameString, It.IsAny<CancellationToken>()))| .ReturnsAsync(executor);| // act| var client = await factory.CreateAsync(\"Foo\");| // assert| Assert.Equal(client.Executor, executor);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var nameString = \"FooBar\";| Mock<IRequestExecutor> executorMock = new();| Mock<ISchema> schemaMock = new();| Mock<IRequestExecutorResolver> executorResolverMock = new();| var executorResolver = executorResolverMock.Object;| var optionsMonitor =| new ServiceCollection()| .Configure<InMemoryClientFactoryOptions>(\"Foo\",| x => x.InMemoryClientActions.Add((memoryClient, token) =>| {| memoryClient.Executor = executorMock.Object;| return default;| }))| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var factory = new DefaultInMemoryClientFactory(executorResolver, optionsMonitor);| schemaMock.Setup(x => x.Name).Returns(nameString);| executorMock.Setup(x => x.Schema).Returns(schemaMock.Object);| // act| var client = await factory.CreateAsync(\"Foo\");| // assert| Assert.Equal(client.SchemaName, nameString);| }"
      }
    ]
  },
  {
    "file": "InMemoryClientBuilderExtensionsTests.cs",
    "methods": [
      {
        "name": "ConfigureInMemoryClient_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| Action<IInMemoryClient> action = x => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClient(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureInMemoryClient_NoName_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Action<IInMemoryClient> action = null!;| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClient(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Action<IInMemoryClient> action = x => x.SchemaName = \"Bar\";| // act| builder.ConfigureInMemoryClient(action);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection.BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "ConfigureInMemoryClientAsync_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| Func<IInMemoryClient, CancellationToken, ValueTask> action = (x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClientAsync(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureInMemoryClientAsync_NoName_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Func<IInMemoryClient, CancellationToken, ValueTask> action = null!;| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClientAsync(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Func<IInMemoryClient, CancellationToken, ValueTask> action = (x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| builder.ConfigureInMemoryClientAsync(action);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection.BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "ConfigureInMemoryClientService_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| Action<IServiceProvider, IInMemoryClient> action = (_, x) => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClient(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureInMemoryClientService_NoName_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Action<IServiceProvider, IInMemoryClient> action = null!;| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClient(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Action<IServiceProvider, IInMemoryClient> action = (_, x) => x.SchemaName = \"Bar\";| // act| builder.ConfigureInMemoryClient(action);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "ConfigureInMemoryClientAsyncServiceProvider_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action =| (_, x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClientAsync(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureInMemoryClientAsyncServiceProvider_NoName_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action =| null!;| // act| var ex = Record.Exception(() => builder.ConfigureInMemoryClientAsync(action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action =| (_, x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| builder.ConfigureInMemoryClientAsync(action);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "ConfigureRequestInterceptorInstance_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| IInMemoryRequestInterceptor interceptor = new StubInterceptor();| // act| var ex =| Record.Exception(() => builder.ConfigureRequestInterceptor(interceptor));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureRequestInterceptorInstance_NoName_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| IInMemoryRequestInterceptor interceptor = null!;| // act| var ex =| Record.Exception(() => builder.ConfigureRequestInterceptor(interceptor));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| IInMemoryRequestInterceptor interceptor = new StubInterceptor();| // act| builder.ConfigureRequestInterceptor(interceptor);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(interceptor, stubClient.RequestInterceptors.FirstOrDefault());| }"
      },
      {
        "name": "ConfigureRequestInterceptorGeneric_NoServices_ThrowException",
        "body": "{| // arrange| IInMemoryClientBuilder builder = default!;| // act| var ex =| Record.Exception(() => builder.ConfigureRequestInterceptor<StubInterceptor>());| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| var interceptor = new StubInterceptor();| collection.AddSingleton(interceptor);| // act| builder.ConfigureRequestInterceptor<StubInterceptor>();| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(interceptor, stubClient.RequestInterceptors.FirstOrDefault());| }"
      },
      {
        "name": "ConfigureRequestInterceptorFactory_NoBuilder_ThrowException",
        "body": "{| // arrange| IInMemoryRequestInterceptor interceptor = new StubInterceptor();| IInMemoryClientBuilder builder = default!;| Func<IServiceProvider, IInMemoryRequestInterceptor> factory = provider => interceptor;| // act| var ex =| Record.Exception(() => builder.ConfigureRequestInterceptor(factory));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureRequestInterceptorFactory_NoFactory_ThrowException",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| Func<IServiceProvider, IInMemoryRequestInterceptor> factory = null!;| // act| var ex =| Record.Exception(() => builder.ConfigureRequestInterceptor(factory));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| IInMemoryClientBuilder builder =| new DefaultInMemoryClientBuilder(collection, \"foo\");| IInMemoryRequestInterceptor interceptor = new StubInterceptor();| // act| builder.ConfigureRequestInterceptor(_ => interceptor);| var stubClient = new InMemoryClient(\"bar\");| // assert| await collection| .AddOptions()| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>()| .Get(\"foo\")| .InMemoryClientActions| .Single()(stubClient, default);| Assert.Equal(interceptor, stubClient.RequestInterceptors.FirstOrDefault());| }"
      }
    ]
  },
  {
    "file": "InMemoryClientFactoryServiceCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "AddInMemoryClient_NoServices_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = default!;| var name = \"Foo\";| // act| // act| var ex = Record.Exception(() => serviceCollection.AddInMemoryClient(name));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClient_NoName_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| string name = null!;| // act| // act| var ex = Record.Exception(() => serviceCollection.AddInMemoryClient(name));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| collection| .AddInMemoryClient(\"Foo\")| .ConfigureInMemoryClient(x => x.SchemaName = \"Bar\");| var monitor = collection| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var stubClient = new InMemoryClient(\"bar\");| // act| await monitor.Get(\"Foo\").InMemoryClientActions.Single()(stubClient, default);| // assert| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "AddInMemoryClientAction_NoServices_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = default!;| var name = \"Foo\";| Action<IInMemoryClient> action = x => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAction_NoName_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| string name = null!;| Action<IInMemoryClient> action = x => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAction_NoAction_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| var name = \"Foo\";| Action<IInMemoryClient> action = null!;| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| collection| .AddInMemoryClient(\"Foo\", x => x.SchemaName = \"Bar\");| var monitor = collection| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var stubClient = new InMemoryClient(\"bar\");| // act| await monitor.Get(\"Foo\").InMemoryClientActions.Single()(stubClient, default);| // assert| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "AddInMemoryClientActionServiceProvider_NoServices_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = default!;| var name = \"Foo\";| Action<IServiceProvider, IInMemoryClient> action = (_, x) => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientActionServiceProvider_NoName_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| string name = null!;| Action<IServiceProvider, IInMemoryClient> action = (_, x) => x.SchemaName = \"Bar\";| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientActionServiceProvider_NoAction_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| var name = \"Foo\";| Action<IServiceProvider, IInMemoryClient> action = null!;| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClient(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| collection| .AddInMemoryClient(\"Foo\", (_, x) => x.SchemaName = \"Bar\");| var monitor = collection| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var stubClient = new InMemoryClient(\"bar\");| // act| await monitor.Get(\"Foo\").InMemoryClientActions.Single()(stubClient, default);| // assert| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "AddInMemoryClientAsyncAction_NoServices_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = default!;| var name = \"Foo\";| Func<IInMemoryClient, CancellationToken, ValueTask> action = (x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAsyncAction_NoName_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| string name = null!;| Func<IInMemoryClient, CancellationToken, ValueTask> action = (x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAsyncAction_NoAction_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| var name = \"Foo\";| Func<IInMemoryClient, CancellationToken, ValueTask> action = null!;| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| collection| .AddInMemoryClientAsync(\"Foo\",| (x, _) =>| {| x.SchemaName = \"Bar\";| return default;| });| var monitor = collection| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var stubClient = new InMemoryClient(\"bar\");| // act| await monitor.Get(\"Foo\").InMemoryClientActions.Single()(stubClient, default);| // assert| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      },
      {
        "name": "AddInMemoryClientAsyncActionServiceProvider_NoServices_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = default!;| var name = \"Foo\";| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action =| (_, x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAsyncActionServiceProvider_NoName_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| string name = null!;| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action =| (_, x, _) =>| {| x.SchemaName = \"Bar\";| return default;| };| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddInMemoryClientAsyncActionServiceProvider_NoAction_ThrowException",
        "body": "{| // arrange| IServiceCollection serviceCollection = new ServiceCollection();| var name = \"Foo\";| Func<IServiceProvider, IInMemoryClient, CancellationToken, ValueTask> action = null!;| // act| var ex = Record.Exception(() =>| serviceCollection.AddInMemoryClientAsync(name, action));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var collection = new ServiceCollection();| collection| .AddInMemoryClientAsync(\"Foo\",| (_, x, _) =>| {| x.SchemaName = \"Bar\";| return default;| });| var monitor = collection| .BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<InMemoryClientFactoryOptions>>();| var stubClient = new InMemoryClient(\"bar\");| // act| await monitor.Get(\"Foo\").InMemoryClientActions.Single()(stubClient, default);| // assert| Assert.Equal(\"Bar\", stubClient.SchemaName);| }"
      }
    ]
  },
  {
    "file": "InMemoryClientTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_NoException",
        "body": "{| // arrange| var name = \"Foo\";| // act| var ex = Record.Exception(() => new InMemoryClient(name));| // assert| Assert.Null(ex);| }"
      },
      {
        "name": "Constructor_NoName_ThrowException",
        "body": "{| // arrange| string name = null!;| // act| var ex = Record.Exception(() => new InMemoryClient(name));| // assert| Assert.IsType<ArgumentException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new InMemoryClient(\"Foo\");| // act| var ex =| await Record.ExceptionAsync(async () => await client.ExecuteAsync(null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new InMemoryClient(\"Foo\");| var operationRequest =| new OperationRequest(\"foo\", new StubDocument());| // act| var ex =| await Record.ExceptionAsync(async () =>| await client.ExecuteAsync(operationRequest));| // assert| Assert.IsType<GraphQLClientException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = new InMemoryClient(\"Foo\");| var variables = new Dictionary<string, object?>();| var operationRequest = new OperationRequest(\"foo\", new StubDocument(), variables);| var executor = new StubExecutor();| client.Executor = executor;| // act| await client.ExecuteAsync(operationRequest);| // assert| var request = Assert.IsType<HotChocolate.Execution.OperationRequest>(executor.Request);| Assert.Equal(operationRequest.Name, request.OperationName);| Assert.Equal(variables, request.VariableValues);| Assert.Equal(\"{ foo }\", Encoding.UTF8.GetString(request.Document!.AsSpan()));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var interceptorMock = new Mock<IInMemoryRequestInterceptor>();| var client = new InMemoryClient(\"Foo\");| var variables = new Dictionary<string, object?>();| var operationRequest = new OperationRequest(\"foo\", new StubDocument(), variables);| var executor = new StubExecutor();| client.Executor = executor;| client.RequestInterceptors.Add(interceptorMock.Object);| client.RequestInterceptors.Add(interceptorMock.Object);| interceptorMock| .Setup(x => x| .OnCreateAsync(| StubExecutor.ApplicationServiceProvider,| operationRequest,| It.IsAny<OperationRequestBuilder>(),| It.IsAny<CancellationToken>()));| // act| await client.ExecuteAsync(operationRequest);| // assert| interceptorMock| .Verify(x => x| .OnCreateAsync(| StubExecutor.ApplicationServiceProvider,| operationRequest,| It.IsAny<OperationRequestBuilder>(),| It.IsAny<CancellationToken>()),| Times.Exactly(2));| }"
      }
    ]
  },
  {
    "file": "InMemoryConnectionTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_NoException",
        "body": "{| // arrange| Func<CancellationToken, ValueTask<IInMemoryClient>> create = _ => default!;| // act| var ex = Record.Exception(() => new InMemoryConnection(create));| // assert| Assert.Null(ex);| }"
      },
      {
        "name": "Constructor_NoName_ThrowException",
        "body": "{| // arrange| Func<CancellationToken, ValueTask<IInMemoryClient>> create = null!;| // act| var ex = Record.Exception(() => new InMemoryConnection(create));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "DefaultSocketClientFactoryTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| var optionsMonitor = new Mock<IOptionsMonitor<SocketClientFactoryOptions>>().Object;| var protocolFactories = Enumerable.Empty<ISocketProtocolFactory>();| // act| var exception = Record.Exception(() =>| new DefaultSocketClientFactory(optionsMonitor, protocolFactories));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_MonitorNull_CreateObject",
        "body": "{| // arrange| IOptionsMonitor<SocketClientFactoryOptions> optionsMonitor = null!;| var protocolFactories =| Enumerable.Empty<ISocketProtocolFactory>();| // act| var exception = Record.Exception(() =>| new DefaultSocketClientFactory(optionsMonitor, protocolFactories));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Constructor_FactoriesNull_CreateObject",
        "body": "{| // arrange| var optionsMonitor =| new Mock<IOptionsMonitor<SocketClientFactoryOptions>>().Object;| IEnumerable<ISocketProtocolFactory> protocolFactories = null!;| // act| var exception = Record.Exception(() =>| new DefaultSocketClientFactory(optionsMonitor, protocolFactories));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "CreateClient_OptionsRegistered_CreateClient",
        "body": "{| // arrange| var sp = new ServiceCollection()| .Configure<SocketClientFactoryOptions>(| \"Foo\",| x => { })| .BuildServiceProvider();| var optionsMonitor =| sp.GetRequiredService<IOptionsMonitor<SocketClientFactoryOptions>>();| var protocolFactories =| Enumerable.Empty<ISocketProtocolFactory>();| var factory = new DefaultSocketClientFactory(optionsMonitor, protocolFactories);| // act| var client = factory.CreateClient(\"Foo\");| // assert| Assert.IsType<WebSocketClient>(client);| }"
      },
      {
        "name": "CreateClient_OptionsRegistered_ApplyConfig",
        "body": "{| // arrange| var uri = new Uri(\"wss://localhost:123\");| var sp = new ServiceCollection()| .Configure<SocketClientFactoryOptions>(| \"Foo\",| x => x.SocketClientActions.Add(x => x.Uri = uri))| .BuildServiceProvider();| var optionsMonitor =| sp.GetRequiredService<IOptionsMonitor<SocketClientFactoryOptions>>();| var protocolFactories =| Enumerable.Empty<ISocketProtocolFactory>();| var factory = new DefaultSocketClientFactory(optionsMonitor, protocolFactories);| // act| var client = factory.CreateClient(\"Foo\");| // assert| Assert.Equal(uri, client.Uri);| }"
      },
      {
        "name": "CreateClient_NoOptionsRegistered_CreateClient",
        "body": "{| // arrange| var sp = new ServiceCollection()| .Configure<SocketClientFactoryOptions>(| \"Foo\",| x => { })| .BuildServiceProvider();| var optionsMonitor =| sp.GetRequiredService<IOptionsMonitor<SocketClientFactoryOptions>>();| var protocolFactories =| Enumerable.Empty<ISocketProtocolFactory>();| var factory = new DefaultSocketClientFactory(optionsMonitor, protocolFactories);| // act| var client = factory.CreateClient(\"Baz\");| // assert| Assert.IsType<WebSocketClient>(client);| }"
      }
    ]
  },
  {
    "file": "DefaultWebSocketClientBuilderTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgsProvided_NotThrow",
        "body": "{| // arrange| var services = new ServiceCollection();| var name = \"Foo\";| // act| var builder = new DefaultWebSocketClientBuilder(services, name);| // assert| Assert.IsType<DefaultWebSocketClientBuilder>(builder);| }"
      },
      {
        "name": "Constructor_ServicesNull_ThrowError",
        "body": "{| // arrange| var name = \"Foo\";| // act| var ex = Record.Exception(() => new DefaultWebSocketClientBuilder(null!, name));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Constructor_NameNull_ThrowError",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| var ex =| Record.Exception(() => new DefaultWebSocketClientBuilder(services, null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      }
    ]
  },
  {
    "file": "WebSocketClientFactoryServiceCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "AddProtocol_NonNullArgs_RegisterProtocol",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddProtocol<GraphQLWebSocketProtocolFactory>();| // assert| Assert.Single(| services.BuildServiceProvider()| .GetRequiredService<IEnumerable<ISocketProtocolFactory>>());| }"
      },
      {
        "name": "AddProtocol_ServicesNull_ThrowException",
        "body": "{| // arrange| ServiceCollection services = null!;| // act| var ex =| Record.Exception(() => services.AddProtocol<GraphQLWebSocketProtocolFactory>());| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClient_NonNullArgs_RegisterProtocol",
        "body": "{| // arrange| const string clientName = \"Foo\";| var services = new ServiceCollection();| // act| var builder = services.AddWebSocketClient(clientName);| // assert| var client = services.BuildServiceProvider()| .GetRequiredService<ISocketClientFactory>()| .CreateClient(clientName);| Assert.Equal(clientName, builder.Name);| Assert.Equal(clientName, client.Name);| }"
      },
      {
        "name": "AddWebSocketClient_ServicesNull_ThrowException",
        "body": "{| // arrange| ServiceCollection services = null!;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(\"Foo\"));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClient_NameNull_ThrowException",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigure_NonNullArgs_RegisterProtocol",
        "body": "{| // arrange| const string clientName = \"Foo\";| var services = new ServiceCollection();| var uri = new Uri(\"wss://localhost:1234\");| Action<ISocketClient> configure = x => x.Uri = uri;| // act| var builder =| services.AddWebSocketClient(clientName, configure);| // assert| var client = services.BuildServiceProvider()| .GetRequiredService<ISocketClientFactory>()| .CreateClient(clientName);| Assert.Equal(clientName, builder.Name);| Assert.Equal(clientName, client.Name);| Assert.Equal(uri, client.Uri);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigure_ServicesNull_ThrowException",
        "body": "{| // arrange| ServiceCollection services = null!;| var uri = new Uri(\"wss://localhost:1234\");| void configure(ISocketClient x) => x.Uri = uri;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(\"Foo\", configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigure_NameNull_ThrowException",
        "body": "{| // arrange| var services = new ServiceCollection();| var uri = new Uri(\"wss://localhost:1234\");| void configure(ISocketClient x) => x.Uri = uri;| // act| var ex = Record.Exception(() => services.AddWebSocketClient(null!, configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigure_ConfigureNull_ThrowException",
        "body": "{| // arrange| var services = new ServiceCollection();| Action<ISocketClient> configure = null!;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(\"Foo\", configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigureAndSp_NonNullArgs_RegisterProtocol",
        "body": "{| // arrange| const string clientName = \"Foo\";| var services = new ServiceCollection();| var uri = new Uri(\"wss://localhost:1234\");| void configure(IServiceProvider _, ISocketClient x) => x.Uri = uri;| // act| var builder =| services.AddWebSocketClient(clientName, configure);| // assert| var client = services.BuildServiceProvider()| .GetRequiredService<ISocketClientFactory>()| .CreateClient(clientName);| Assert.Equal(clientName, builder.Name);| Assert.Equal(clientName, client.Name);| Assert.Equal(uri, client.Uri);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigureAndSp_ServicesNull_ThrowException",
        "body": "{| // arrange| ServiceCollection services = null!;| var uri = new Uri(\"wss://localhost:1234\");| Action<IServiceProvider, ISocketClient> configure = (_, x) => x.Uri = uri;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(\"Foo\", configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigureAndSp_NameNull_ThrowException",
        "body": "{| // arrange| var services = new ServiceCollection();| var uri = new Uri(\"wss://localhost:1234\");| Action<IServiceProvider, ISocketClient> configure = (_, x) => x.Uri = uri;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(null!, configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "AddWebSocketClientWithConfigureAndSp_ConfigureNull_ThrowException",
        "body": "{| // arrange| var services = new ServiceCollection();| Action<IServiceProvider, ISocketClient> configure = null!;| // act| var ex =| Record.Exception(() => services.AddWebSocketClient(\"Foo\", configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      }
    ]
  },
  {
    "file": "WebSocketClientPoolServiceCollectionExtensionsTests.cs",
    "methods": [
      {
        "name": "AddWebSocketClientPool_NonNullArgs_RegisterProtocol",
        "body": "{| // arrange| var services = new ServiceCollection();| // act| services.AddSingleton(new Mock<ISocketClientFactory>().Object);| services.AddWebSocketClientPool();| services.AddWebSocketClientPool();| services.AddWebSocketClientPool();| // assert| Assert.Single(| services.BuildServiceProvider()| .GetRequiredService<IEnumerable<ISessionPool>>());| }"
      },
      {
        "name": "AddWebSocketClientPool_ServicesNull_ThrowException",
        "body": "{| // arrange| ServiceCollection services = null!;| // act| var ex =| Record.Exception(() => services.AddWebSocketClientPool());| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      }
    ]
  },
  {
    "file": "IntegrationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| // act| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // assert| executor.Schema.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices(| services =>| {| services| .AddSingleton<Service1>()| .AddSingleton<Service2>()| .AddScoped<Service3>();| services| .AddGraphQLServer()| .UseRequest<SomeRequestMiddleware>()| .UseDefaultPipeline();| });| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| id| title| genre| author {| id| name| }| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| node(id: \"QXV0aG9yOjE=\") {| __typename| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var services = CreateApplicationServices();| var executor = await services.GetRequiredService<IRequestExecutorResolver>().GetRequestExecutorAsync();| // act| var result = await executor.ExecuteAsync(| \"\"\"| {| books {| nodes {| idString| }| }| }| \"\"\");| // assert| result.MatchMarkdownSnapshot();| }"
      }
    ]
  },
  {
    "file": "MessagePipelineTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| ISocketClient socketClient = new SocketClientStub() { IsClosed = false, };| // act| await using var messagePipeline = new MessagePipeline(socketClient, a);| // assert| Assert.IsType<MessagePipeline>(messagePipeline);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| Mock<ISocketClient> socketClientMock = new(MockBehavior.Strict);| var socketClient = socketClientMock.Object;| // act| await using var messagePipeline = new MessagePipeline(socketClient, a);| // assert| socketClientMock.VerifyAll();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| SocketClientStub socketClient = new() { IsClosed = false, };| await using var messagePipeline = new MessagePipeline(socketClient, a);| // act| messagePipeline.Start();| await socketClient.WaitTillFinished();| // assert| Assert.Equal(1, socketClient.GetCallCount(x => x.ReceiveAsync(default!, default!)));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| SocketClientStub socketClient = new() { IsClosed = false, };| ProcessAsync a = (_, _) => default;| await using var messagePipeline = new MessagePipeline(socketClient, a);| // act| messagePipeline.Start();| messagePipeline.Start();| messagePipeline.Start();| messagePipeline.Start();| messagePipeline.Start();| await socketClient.WaitTillFinished();| // assert| Assert.Equal(1, socketClient.GetCallCount(x => x.ReceiveAsync(default!, default!)));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var processed = new SemaphoreSlim(0);| string? result = null;| ProcessAsync a = (a, _) =>| {| result = Encoding.UTF8.GetString(a.FirstSpan);| processed.Release();| return default;| };| SocketClientStub socketClient = new() { IsClosed = false, };| socketClient.MessagesReceive.Enqueue(\"ab\");| await using var messagePipeline = new MessagePipeline(socketClient, a);| // act| messagePipeline.Start();| await socketClient.WaitTillFinished();| await processed.WaitAsync();| // assert| Assert.Equal(\"ab\", result);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| SocketClientStub socketClient = new() { IsClosed = false, };| socketClient.MessagesReceive.Enqueue(\"ab\");| await using var messagePipeline = new MessagePipeline(socketClient, a);| // act| messagePipeline.Start();| await messagePipeline.Stop();| // assert| Assert.True(socketClient.LatestCancellationToken.IsCancellationRequested);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| SocketClientStub socketClient = new() { IsClosed = false, };| socketClient.MessagesReceive.Enqueue(\"ab\");| await using var messagePipeline = new MessagePipeline(socketClient, a);| // act| messagePipeline.Start();| await messagePipeline.Stop();| await messagePipeline.Stop();| await messagePipeline.Stop();| await messagePipeline.Stop();| // assert| Assert.True(socketClient.LatestCancellationToken.IsCancellationRequested);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| ProcessAsync a = (_, _) => default;| SocketClientStub socketClient = new() { IsClosed = false, };| socketClient.MessagesReceive.Enqueue(\"ab\");| // act| await using (var messagePipeline = new MessagePipeline(socketClient, a))| {| messagePipeline.Start();| await socketClient.WaitTillFinished();| }| // assert| Assert.Equal(2, socketClient.GetCallCount(x => x.ReceiveAsync(default!, default!)));| Assert.True(socketClient.LatestCancellationToken.IsCancellationRequested);| }"
      }
    ]
  },
  {
    "file": "OperationMessagesTest.cs",
    "methods": [
      {
        "name": "CancelledOperationMessage_Default_IsMatch",
        "body": "{| // arrange| // act| // assert| CancelledOperationMessage.Default.MatchSnapshot();| }"
      },
      {
        "name": "CompleteOperationMessage_Default_IsMatch",
        "body": "{| // arrange| // act| // assert| CompleteOperationMessage.Default.MatchSnapshot();| }"
      },
      {
        "name": "ErrorOperationMessage_WithMessage_IsMatch",
        "body": "{| // arrange| var message = \"Foo\";| // act| var operationMessage = new ErrorOperationMessage(message);| // assert| operationMessage.MatchSnapshot();| }"
      },
      {
        "name": "ErrorOperationMessage_MessageIsNull_Throw",
        "body": "{| // arrange| string message = null!;| // act| var ex = Record.Exception(() => new ErrorOperationMessage(message));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ErrorOperationMessage_ConnectionError_IsMatch",
        "body": "{| // arrange| // act| // assert| ErrorOperationMessage.ConnectionInitializationError.MatchSnapshot();| }"
      },
      {
        "name": "JsonDocumentOperationMessage_FromBytes_IsMatch",
        "body": "{| // arrange| var message = JsonDocument.Parse(@\"{ \"\"Foo\"\": \"\"Bar\"\"}\");| // act| OperationMessage operationMessage =| new DataDocumentOperationMessage<JsonDocument>(message);| // assert| operationMessage.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SynchronizedMessageWriterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub() { IsClosed = false, };| await using var writer = new SynchronizedMessageWriter(socketClient);| // act| await writer.CommitAsync(x =>| {| x.WriteStartObject();| x.WriteEndObject();| },| CancellationToken.None);| // assert| var elm = Assert.Single(socketClient.SentMessages);| Assert.Equal(\"{}\", elm);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub() { IsClosed = false, };| await using var writer = new SynchronizedMessageWriter(socketClient);| // act| List<Task> tasks = [];| for (var i = 0; i < 10; i++)| {| tasks.Add(Task.Run(async () =>| {| for (var m = 0; m < 100; m++)| {| await writer.CommitAsync(x =>| {| x.WriteStartObject();| x.WriteEndObject();| },| CancellationToken.None);| }| }));| }| await Task.WhenAll(tasks);| // assert| Assert.Equal(1000, socketClient.SentMessages.Count);| foreach (var message in socketClient.SentMessages)| {| Assert.Equal(\"{}\", message);| }| }"
      }
    ]
  },
  {
    "file": "GraphQLWebSocketMessageParserTests.cs",
    "methods": [
      {
        "name": "ParseMessage_EmptyObject_ThrowException",
        "body": "{| // arrange| var message = GetBytes(\"{}\");| // act| var ex = Record.Exception(() => GraphQLWebSocketMessageParser.Parse(message));| // assert| Assert.IsType<SerializationException>(ex).Message.MatchSnapshot();| }"
      },
      {
        "name": "ParseMessage_OnlyId_ThrowException",
        "body": "{| // arrange| var message = GetBytes(@\"{\"\"id\"\": \"\"123\"\"}\");| // act| var ex = Record.Exception(() => GraphQLWebSocketMessageParser.Parse(message));| // assert| Assert.IsType<SerializationException>(ex).Message.MatchSnapshot();| }"
      },
      {
        "name": "ParseMessage_IncompleteDocument_ThrowException",
        "body": "{| // arrange| var message = GetBytes(@\"{\"\"id\"\": \"\"123\"\"\");| // act| var ex = Record.Exception(() => GraphQLWebSocketMessageParser.Parse(message));| // assert| Assert.NotNull(ex);| ex.Message.MatchSnapshot();| }"
      },
      {
        "name": "ParseMessage_AdditionalField_ThrowException",
        "body": "{| // arrange| var message = GetBytes(@\"{\"\"type\"\": \"\"ka\"\", \"\"Foo\"\":1}\");| // act| var ex = Record.Exception(() => GraphQLWebSocketMessageParser.Parse(message));| // assert| Assert.IsType<SerializationException>(ex).Message.MatchSnapshot();| }"
      },
      {
        "name": "ParseMessage_TypeIsNull_ThrowException",
        "body": "{| // arrange| var message = GetBytes($@\"{{\"\"type\"\": null, \"\"Foo\"\":1}}\");| // act| var ex = Record.Exception(() => GraphQLWebSocketMessageParser.Parse(message));| // assert| Assert.IsType<SerializationException>(ex).Message.MatchSnapshot();| }"
      },
      {
        "name": "ParseMessage_KeepAlive_ParseMessage",
        "body": "{| // arrange| var message = GetBytes(@\"{\"\"type\"\": \"\"ka\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.KeepAlive, parsed.Type);| }"
      },
      {
        "name": "ParseMessage_Data_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"data\"\", \"\"id\"\":\"\"123\"\", \"\"payload\"\": \"\"payload\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.Data, parsed.Type);| Assert.Equal(\"123\", parsed.Id);| Assert.Equal(\"payload\", parsed.Payload.RootElement.ToString());| }"
      },
      {
        "name": "ParseMessage_Error_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"error\"\", \"\"id\"\":\"\"123\"\", \"\"payload\"\": \"\"payload\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.Error, parsed.Type);| Assert.Equal(\"123\", parsed.Id);| Assert.Equal(\"payload\", parsed.Payload.RootElement.ToString());| }"
      },
      {
        "name": "ParseMessage_Start_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"start\"\", \"\"id\"\":\"\"123\"\", \"\"payload\"\": \"\"payload\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.Start, parsed.Type);| Assert.Equal(\"123\", parsed.Id);| Assert.Equal(\"payload\", parsed.Payload.RootElement.ToString());| }"
      },
      {
        "name": "ParseMessage_Stop_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"stop\"\", \"\"id\"\":\"\"123\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.Stop, parsed.Type);| Assert.Equal(\"123\", parsed.Id);| }"
      },
      {
        "name": "ParseMessage_Complete_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"complete\"\", \"\"id\"\":\"\"123\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.Complete, parsed.Type);| Assert.Equal(\"123\", parsed.Id);| }"
      },
      {
        "name": "ParseMessage_ConnectionInit_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"connection_init\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.ConnectionInit, parsed.Type);| }"
      },
      {
        "name": "ParseMessage_ConnectionAccept_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"connection_ack\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.ConnectionAccept, parsed.Type);| }"
      },
      {
        "name": "ParseMessage_ConnectionError_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"connection_error\"\", \"\"payload\"\": \"\"payload\"\"}\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.ConnectionError, parsed.Type);| Assert.Equal(\"payload\", parsed.Payload.RootElement.ToString());| }"
      },
      {
        "name": "ParseMessage_ConnectionTerminate_ParseMessage",
        "body": "{| // arrange| var message =| GetBytes(@\"{\"\"type\"\": \"\"connection_terminate\"\" }\");| // act| var parsed = GraphQLWebSocketMessageParser.Parse(message);| // assert| Assert.Equal(GraphQLWebSocketMessageType.ConnectionTerminate, parsed.Type);| }"
      }
    ]
  },
  {
    "file": "GraphQLWebSocketProtocolTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| // act| var protocol = new GraphQLWebSocketProtocol(socketClient);| await protocol.InitializeAsync(CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Equal(1, socketClient.GetCallCount(x => x.ReceiveAsync(default!, default!)));| }"
      },
      {
        "name": "Constructor_SocketClientNull_ThrowException",
        "body": "{| // arrange| ISocketClient socketClient = null!;| // act| var exception =| Record.Exception((Action)(() => new GraphQLWebSocketProtocol(socketClient)));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = true, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| var exception = await Record.ExceptionAsync(| () => protocol.InitializeAsync(CancellationToken.None));| // assert| Assert.IsType<SocketOperationException>(exception).Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| await protocol.InitializeAsync(CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var connectionInterceptorMock = new Mock<ISocketConnectionInterceptor>();| connectionInterceptorMock| .Setup(x => x| .CreateConnectionInitPayload(| It.IsAny<ISocketProtocol>(),| It.IsAny<CancellationToken>()))| .ReturnsAsync(\"Payload\");| var socketClient = new SocketClientStub| {| IsClosed = false,| ConnectionInterceptor = connectionInterceptorMock.Object,| };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| await protocol.InitializeAsync(CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| await protocol.TerminateAsync(CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| await protocol.TerminateAsync(CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = true, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| // act| var exception = await Record.ExceptionAsync(| () => protocol.InitializeAsync(CancellationToken.None));| // assert| Assert.IsType<SocketOperationException>(exception).Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| var operationId = \"b1b416a5-8d1b-4855-b186-6de39809caea\";| // act| await protocol.StartOperationAsync(| operationId,| new OperationRequest(| \"GetHero\",| GetHeroQueryDocument.Instance| ),| CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| var operationId = \"b1b416a5-8d1b-4855-b186-6de39809caea\";| // act| await protocol.StopOperationAsync(operationId, CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Single(socketClient.SentMessages).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| var operationId = \"b1b416a5-8d1b-4855-b186-6de39809caea\";| // act| socketClient.IsClosed = true;| await protocol.StopOperationAsync(operationId, CancellationToken.None);| await protocol.DisposeAsync();| // assert| Assert.Empty(socketClient.SentMessages);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var message = @\"{\"\"type:\"\"}\";| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| SpinWait.SpinUntil(() => socketClient.IsClosed, 1000);| // assert| Assert.True(socketClient.IsClosed);| Assert.Equal(SocketCloseStatus.ProtocolError, socketClient.CloseStatus);| socketClient.CloseMessage.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var message = @\"{\"\"type\"\":\"\"Start\"\"}\";| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| SpinWait.SpinUntil(() => socketClient.IsClosed, 1000);| // assert| Assert.True(socketClient.IsClosed);| Assert.Equal(SocketCloseStatus.ProtocolError, socketClient.CloseStatus);| socketClient.CloseMessage.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var message = @\"{\"\"type\"\":\"\"Start\"\"}\";| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| socketClient.MessagesReceive.Enqueue(message);| protocol.Subscribe((_, _, _) => throw new InvalidOperationException());| // act| await protocol.InitializeAsync(CancellationToken.None);| SpinWait.SpinUntil(() => socketClient.IsClosed, 1000);| // assert| Assert.True(socketClient.IsClosed);| Assert.Equal(SocketCloseStatus.ProtocolError, socketClient.CloseStatus);| socketClient.CloseMessage.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| SemaphoreSlim semaphoreSlim = new(0);| string? id = null;| string? payload = null;| var message = @\"{\"\"type\"\":\"\"data\"\", \"\"payload\"\":\"\"Foo\"\", \"\"id\"\":\"\"123\"\"}\";| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| protocol.Subscribe((operationId, operationMessage, _) =>| {| if (operationMessage is DataDocumentOperationMessage<JsonDocument> msg)| {| id = operationId;| payload = msg.Payload.RootElement.ToString();| }| semaphoreSlim.Release();| return default;| });| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| await semaphoreSlim.WaitAsync();| // assert| Assert.Equal(\"123\", id);| Assert.Equal(\"Foo\", payload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| SemaphoreSlim semaphoreSlim = new(0);| var received = false;| var message = @\"{\"\"type\"\":\"\"complete\"\", \"\"id\"\":\"\"123\"\"}\";| var socketClient = new SocketClientStub { IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| protocol.Subscribe((_, operationMessage, _) =>| {| if (operationMessage is CompleteOperationMessage)| {| received = true;| }| semaphoreSlim.Release();| return default;| });| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| await semaphoreSlim.WaitAsync();| // assert| Assert.True(received);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| SemaphoreSlim semaphoreSlim = new(0);| string? error = null;| var message = @\"{| \"\"type\"\": \"\"error\"\",| \"\"id\"\": \"\"123\"\",| \"\"payload\"\": {| \"\"message\"\": \"\"test message\"\"| }| }\";| var socketClient = new SocketClientStub { KeepOpen = true, IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| protocol.Subscribe((_, operationMessage, _) =>| {| if (operationMessage is ErrorOperationMessage msg)| {| error = msg.Payload.Message;| }| semaphoreSlim.Release();| return default;| });| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| await semaphoreSlim.WaitAsync();| // assert| error.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| SemaphoreSlim semaphoreSlim = new(0);| string? error = null;| var message = @\"{\"\"type\"\":\"\"connection_error\"\", \"\"id\"\":\"\"123\"\"}\";| var socketClient = new SocketClientStub { KeepOpen = true, IsClosed = false, };| var protocol = new GraphQLWebSocketProtocol(socketClient);| protocol.Subscribe((_, operationMessage, _) =>| {| if (operationMessage is ErrorOperationMessage msg)| {| error = msg.Payload.Message;| }| semaphoreSlim.Release();| return default;| });| socketClient.MessagesReceive.Enqueue(message);| // act| await protocol.InitializeAsync(CancellationToken.None);| await semaphoreSlim.WaitAsync();| // assert| error.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GraphQLWebSocketWriterExtensionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| var operationId = \"12f90cc5-2905-4d10-b33a-cb6d8f98a810\";| var request = new OperationRequest(\"Foo\",| GetHeroQueryDocument.Instance,| new Dictionary<string, object?>() { { \"Var1\", \"Value1\" }, });| // act| writer.WriteStartOperationMessage(operationId, request);| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| var request = new OperationRequest(\"Foo\",| GetHeroQueryDocument.Instance,| new Dictionary<string, object?>() { { \"Var1\", \"Value1\" }, });| // act| var ex =| Record.Exception(() => writer.WriteStartOperationMessage(null!, request));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| var operationId = \"12f90cc5-2905-4d10-b33a-cb6d8f98a810\";| // act| var ex =| Record.Exception(() => writer.WriteStartOperationMessage(operationId, null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| var operationId = \"12f90cc5-2905-4d10-b33a-cb6d8f98a810\";| // act| writer.WriteStopOperationMessage(operationId);| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| var ex =| Record.Exception(() => writer.WriteStopOperationMessage(null!));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| writer.WriteInitializeMessage(null);| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| writer.WriteInitializeMessage(\"Payload\");| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| writer.WriteInitializeMessage(new Dictionary<string, object> { [\"Key\"] = \"Value\", });| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| writer.WriteInitializeMessage(new CustomPayload());| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| await using var writer = new SocketMessageWriter();| // act| writer.WriteTerminateMessage();| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SessionPoolTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = new Mock<ISocketClientFactory>().Object;| // act| var exception = Record.Exception(() =>| new SessionPool(optionsMonitor));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_MonitorNull_CreateObject",
        "body": "{| // arrange| Mock<ISocketProtocol> protocol = new();| ISocketClientFactory optionsMonitor = null!;| // act| var exception = Record.Exception(() =>| new SessionPool(optionsMonitor));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", });| var pool = new SessionPool(optionsMonitor);| // act| var rented = await pool.CreateAsync(\"Foo\");| // assert| optionsMonitorMock.VerifyAll();| Assert.NotNull(rented);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", });| var pool = new SessionPool(optionsMonitor);| var first = await pool.CreateAsync(\"Foo\");| // act| var second = await pool.CreateAsync(\"Foo\");| // assert| Assert.Equal(first, second);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| // act| await pool.CreateAsync(\"Foo\");| // assert| Assert.Equal(1, socket.GetCallCount(x => x.OpenAsync(default!)));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| var first = await pool.CreateAsync(\"Foo\");| var second = await pool.CreateAsync(\"Foo\");| // act| await first.DisposeAsync();| // assert| Assert.False(socket.IsDisposed);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| var first = await pool.CreateAsync(\"Foo\");| var second = await pool.CreateAsync(\"Foo\");| // act| await first.DisposeAsync();| await second.DisposeAsync();| // assert| Assert.True(socket.IsDisposed);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| var rented = await pool.CreateAsync(\"Foo\");| // act| await rented.DisposeAsync();| // assert| Assert.Equal(1, socket.GetCallCount(x => x.CloseAsync(default!, default!, default!)));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| var rented = await pool.CreateAsync(\"Foo\");| // act| await rented.DisposeAsync();| // assert| Assert.True(socket.IsDisposed);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| Mock<ISocketClientFactory> optionsMonitorMock = new(MockBehavior.Strict);| Mock<ISocketProtocol> protocol = new();| var optionsMonitor = optionsMonitorMock.Object;| var socket = new SocketClientStub() { Protocol = protocol.Object, Name = \"Foo\", };| optionsMonitorMock| .Setup(x => x.CreateClient(\"Foo\"))| .Returns(() => socket);| var pool = new SessionPool(optionsMonitor);| // act| await pool.CreateAsync(\"Foo\");| await pool.DisposeAsync();| // assert| Assert.True(socket.IsDisposed);| }"
      }
    ]
  },
  {
    "file": "SessionTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| var client = new SocketClientStub { Protocol = new Mock<ISocketProtocol>().Object, };| // act| var exception = Record.Exception(() => new Session(client));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_ClientNull_ThrowException",
        "body": "{| // arrange| ISocketClient client = null!;| // act| var exception = Record.Exception(() => new Session(client));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      },
      {
        "name": "Task",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "SocketMessageWriterTest.cs",
    "methods": [
      {
        "name": "WriteStartObject_EmptyBuffer_StartObject",
        "body": "{| // arrange| using var writer = new SocketMessageWriter();| // act| writer.WriteStartObject();| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "WriteEndObject_EmptyBuffer_EndObject",
        "body": "{| // arrange| using var writer = new SocketMessageWriter();| // act| writer.WriteEndObject();| // assert| Encoding.UTF8.GetString(writer.Body.Span).MatchSnapshot();| }"
      },
      {
        "name": "Reset_ObjectInBuffer_EmptyBuffer",
        "body": "{| // arrange| using var writer = new SocketMessageWriter();| writer.WriteStartObject();| writer.WriteEndObject();| // act| writer.Reset();| // assert| Assert.True(writer.Body.IsEmpty);| }"
      }
    ]
  },
  {
    "file": "SocketOperationTests.cs",
    "methods": [
      {
        "name": "Constructor_SingleArgs_CreateObject",
        "body": "{| // arrange| var manager =| new Mock<ISession>().Object;| // act| var exception = Record.Exception(() =>| new SocketOperation(manager));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_SingleArgs_CreateUniqueId",
        "body": "{| // arrange| var manager =| new Mock<ISession>().Object;| // act| var first = new SocketOperation(manager);| var second = new SocketOperation(manager);| // assert| Assert.NotNull(first.Id);| Assert.NotNull(second.Id);| Assert.NotEqual(first.Id, second.Id);| }"
      },
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| var manager =| new Mock<ISession>().Object;| var id = \"123\";| // act| var exception = Record.Exception(() =>| new SocketOperation(manager, id));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_MonitorNull_CreateObject",
        "body": "{| // arrange| ISession manager = null!;| var id = \"123\";| // act| var exception = Record.Exception(() =>| new SocketOperation(manager, id));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Constructor_FactoriesNull_CreateObject",
        "body": "{| // arrange| var manager =| new Mock<ISession>().Object;| string id = null!;| // act| var exception = Record.Exception(() =>| new SocketOperation(manager, id));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var manager = new Mock<ISession>().Object;| const string id = \"123\";| var operation = new SocketOperation(manager, id);| await operation.DisposeAsync();| List<OperationMessage> messages = [];| // act| await foreach (var elm in operation.ReadAsync())| {| messages.Push(elm);| }| // assert| Assert.Empty(messages);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var manager = new Mock<ISession>().Object;| const string id = \"123\";| var operation = new SocketOperation(manager, id);| List<OperationMessage> messages = [];| // act| await operation.ReceiveMessageAsync(| ErrorOperationMessage.ConnectionInitializationError,| CancellationToken.None);| await foreach (var elm in operation.ReadAsync())| {| messages.Push(elm);| await operation.DisposeAsync();| }| // assert| Assert.Single(messages);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var managerMock = new Mock<ISession>(MockBehavior.Strict);| var id = \"123\";| managerMock| .Setup(x => x.StopOperationAsync(id, It.IsAny<CancellationToken>()))| .Returns(Task.CompletedTask);| var manager = managerMock.Object;| var operation = new SocketOperation(manager, id);| // act| await operation.DisposeAsync();| // assert| managerMock.VerifyAll();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var managerMock = new Mock<ISession>(MockBehavior.Strict);| var id = \"123\";| managerMock| .Setup(x => x.StopOperationAsync(id, It.IsAny<CancellationToken>()))| .Returns(Task.CompletedTask);| var manager = managerMock.Object;| var operation = new SocketOperation(manager, id);| // act| await operation.DisposeAsync();| await operation.DisposeAsync();| await operation.DisposeAsync();| // assert| managerMock| .Verify(x => x.StopOperationAsync(id, It.IsAny<CancellationToken>()),| Times.Once);| }"
      }
    ]
  },
  {
    "file": "WebSocketClientBuilderExtensionsTests.cs",
    "methods": [
      {
        "name": "ConfigureWebSocketClient_NonNullArgs_ConfigureClient",
        "body": "{| // arrange| var name = \"Foo\";| Action<ISocketClient> configure = x => throw new InvalidOperationException();| var services = new ServiceCollection();| var builder = new DefaultWebSocketClientBuilder(services, \"Foo\");| // act| builder.ConfigureWebSocketClient(configure);| // assert| var monitor = services.BuildServiceProvider()| .GetRequiredService<IOptionsMonitor<SocketClientFactoryOptions>>();| Assert.Single(monitor.Get(name).SocketClientActions);| }"
      },
      {
        "name": "ConfigureWebSocketClient_BuilderNull_ThrowException",
        "body": "{| Action<ISocketClient> configure = _ => throw new InvalidOperationException();| DefaultWebSocketClientBuilder builder = null!;| // act| var ex = Record.Exception(() => builder.ConfigureWebSocketClient(configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureWebSocketClient_ConfigureNull_ThrowException",
        "body": "{| Action<ISocketClient> configure = null!;| var services = new ServiceCollection();| var builder = new DefaultWebSocketClientBuilder(services, \"Foo\");| // act| var ex = Record.Exception(() => builder.ConfigureWebSocketClient(configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureWebSocketClientWithSp_NonNullArgs_ConfigureClient",
        "body": "{| Action<IServiceProvider, ISocketClient> configure = (sp, c) =>| throw new InvalidOperationException();| var services = new ServiceCollection();| var builder = new DefaultWebSocketClientBuilder(services, \"Foo\");| // act| builder.ConfigureWebSocketClient(configure);| // assert| var monitors = services| .BuildServiceProvider()| .GetRequiredService<IEnumerable<IConfigureOptions<SocketClientFactoryOptions>>>();| Assert.Single(monitors);| }"
      },
      {
        "name": "ConfigureWebSocketClientWithSp_BuilderNull_ThrowException",
        "body": "{| Action<IServiceProvider, ISocketClient> configure = (sp, c) =>| throw new InvalidOperationException();| DefaultWebSocketClientBuilder builder = null!;| // act| var ex = Record.Exception(() => builder.ConfigureWebSocketClient(configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      },
      {
        "name": "ConfigureWebSocketClientWithSp_ConfigureNull_ThrowException",
        "body": "{| Action<IServiceProvider, ISocketClient> configure = null!;| var services = new ServiceCollection();| var builder = new DefaultWebSocketClientBuilder(services, \"Foo\");| // act| var ex = Record.Exception(() => builder.ConfigureWebSocketClient(configure));| // assert| Assert.IsType<ArgumentNullException>(ex);| }"
      }
    ]
  },
  {
    "file": "WebSocketClientTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| var name = \"Foo\";| IReadOnlyList<ISocketProtocolFactory> protocolFactories =| Array.Empty<ISocketProtocolFactory>();| // act| var exception = Record.Exception(() =>| new WebSocketClient(name, protocolFactories));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_MonitorNull_CreateObject",
        "body": "{| // arrange| string name = null!;| IReadOnlyList<ISocketProtocolFactory> protocolFactories =| Array.Empty<ISocketProtocolFactory>();| // act| var exception = Record.Exception(() =>| new WebSocketClient(name, protocolFactories));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Constructor_FactoriesNull_CreateObject",
        "body": "{| // arrange| var name = \"Foo\";| IReadOnlyList<ISocketProtocolFactory> protocolFactories = null!;| // act| var exception = Record.Exception(() =>| new WebSocketClient(name, protocolFactories));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var name = \"Foo\";| IReadOnlyList<ISocketProtocolFactory> protocolFactories =| Array.Empty<ISocketProtocolFactory>();| var socket = new WebSocketClient(name, protocolFactories);| await socket.DisposeAsync();| // act| var exception =| await Record.ExceptionAsync(() => socket.OpenAsync(CancellationToken.None));| // assert| Assert.IsType<ObjectDisposedException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var name = \"Foo\";| IReadOnlyList<ISocketProtocolFactory> protocolFactories =| Array.Empty<ISocketProtocolFactory>();| var socket = new WebSocketClient(name, protocolFactories);| // act| var exception =| await Record.ExceptionAsync(() => socket.OpenAsync(CancellationToken.None));| // assert| Assert.IsType<SocketOperationException>(exception).Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "WebSocketConnectionTests.cs",
    "methods": [
      {
        "name": "Constructor_AllArgs_CreateObject",
        "body": "{| // arrange| ValueTask<ISession> SessionFactory(CancellationToken cancellationToken)| => new(new Mock<ISession>().Object);| // act| var exception = Record.Exception(() => new WebSocketConnection(SessionFactory));| // assert| Assert.Null(exception);| }"
      },
      {
        "name": "Constructor_ManagerNull_CreateObject",
        "body": "{| // arrange| Func<CancellationToken, ValueTask<ISession>> sessionFactory = null!;| // act| var exception = Record.Exception(() => new WebSocketConnection(sessionFactory));| // assert| Assert.IsType<ArgumentNullException>(exception);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange|#pragma warning disable CS1998| async IAsyncEnumerable<OperationMessage> Producer()| {| yield break;| }|#pragma warning restore CS1998| var operationRequest = new OperationRequest(\"foo\", GetHeroQueryDocument.Instance);| var managerMock = new Mock<ISession>();| var operationMock = new Mock<ISocketOperation>();| managerMock| .Setup(x => x.StartOperationAsync(operationRequest, CancellationToken.None))| .ReturnsAsync(operationMock.Object);| operationMock.Setup(x => x.ReadAsync()).Returns(Producer());| ValueTask<ISession> SessionFactory(CancellationToken ct) => new(managerMock.Object);| var connection = new WebSocketConnection(SessionFactory);| var results = new List<Response<JsonDocument>>();| // act| await foreach (var response in connection.ExecuteAsync(operationRequest))| {| results.Add(response);| }| // assert| Assert.Empty(results);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange|#pragma warning disable CS1998| async IAsyncEnumerable<OperationMessage> Producer()| {| var messageData = JsonDocument.Parse(@\"{\"\"Foo\"\": \"\"Bar\"\"}\");| var msg =| new DataDocumentOperationMessage<JsonDocument>(messageData);| yield return msg;| }|#pragma warning restore CS1998| var operationRequest = new OperationRequest(\"foo\", GetHeroQueryDocument.Instance);| var managerMock = new Mock<ISession>();| var operationMock = new Mock<ISocketOperation>();| managerMock| .Setup(x => x.StartOperationAsync(operationRequest, CancellationToken.None))| .ReturnsAsync(operationMock.Object);| operationMock.Setup(x => x.ReadAsync()).Returns(Producer());| ValueTask<ISession> SessionFactory(CancellationToken cancellationToken)| => new(managerMock.Object);| var connection = new WebSocketConnection(SessionFactory);| var results = new List<Response<JsonDocument>>();| // act| await foreach (var response in connection.ExecuteAsync(operationRequest))| {| results.Add(response);| }| // assert| Assert.Single(results)!.Body!.RootElement.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange|#pragma warning disable CS1998| async IAsyncEnumerable<OperationMessage> Producer()| {| yield return ErrorOperationMessage.ConnectionInitializationError;| }|#pragma warning restore CS1998| var operationRequest = new OperationRequest(\"foo\", GetHeroQueryDocument.Instance);| var managerMock = new Mock<ISession>();| var operationMock = new Mock<ISocketOperation>();| managerMock| .Setup(x => x.StartOperationAsync(operationRequest, CancellationToken.None))| .ReturnsAsync(operationMock.Object);| operationMock.Setup(x => x.ReadAsync()).Returns(Producer());| ValueTask<ISession> SessionFactory(CancellationToken cancellationToken)| => new(managerMock.Object);| var connection = new WebSocketConnection(SessionFactory);| var results = new List<Response<JsonDocument>>();| // act| await foreach (var response in connection.ExecuteAsync(operationRequest))| {| results.Add(response);| }| // assert| var res = Assert.Single(results);| res?.Exception?.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange|#pragma warning disable CS1998| async IAsyncEnumerable<OperationMessage> Producer()| {| yield return CancelledOperationMessage.Default;| }|#pragma warning restore CS1998| var operationRequest = new OperationRequest(\"foo\", GetHeroQueryDocument.Instance);| var managerMock = new Mock<ISession>();| var operationMock = new Mock<ISocketOperation>();| managerMock| .Setup(x => x.StartOperationAsync(operationRequest, CancellationToken.None))| .ReturnsAsync(operationMock.Object);| operationMock.Setup(x => x.ReadAsync()).Returns(Producer());| ValueTask<ISession> SessionFactory(CancellationToken cancellationToken)| => new(managerMock.Object);| var connection = new WebSocketConnection(SessionFactory);| var results = new List<Response<JsonDocument>>();| // act| await foreach (var response in connection.ExecuteAsync(operationRequest))| {| results.Add(response);| }| // assert| var res = Assert.Single(results);| res?.Exception?.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange|#pragma warning disable CS1998| async IAsyncEnumerable<OperationMessage> Producer()| {| yield return CompleteOperationMessage.Default;| }|#pragma warning restore CS1998| var operationRequest = new OperationRequest(\"foo\", GetHeroQueryDocument.Instance);| var managerMock = new Mock<ISession>();| var operationMock = new Mock<ISocketOperation>();| managerMock| .Setup(x => x.StartOperationAsync(operationRequest, CancellationToken.None))| .ReturnsAsync(operationMock.Object);| operationMock.Setup(x => x.ReadAsync()).Returns(Producer());| ValueTask<ISession> SessionFactory(CancellationToken cancellationToken)| => new(managerMock.Object);| var connection = new WebSocketConnection(SessionFactory);| var results = new List<Response<JsonDocument>>();| // act| await foreach (var response in connection.ExecuteAsync(operationRequest))| {| results.Add(response);| }| // assert| Assert.Empty(results);| }"
      }
    ]
  },
  {
    "file": "DependencyInjectionGeneratorTests.cs",
    "methods": [
      {
        "name": "Default_Query",
        "body": "No body available"
      },
      {
        "name": "Default_Mutation",
        "body": "No body available"
      },
      {
        "name": "Default_Subscription",
        "body": "No body available"
      },
      {
        "name": "Default_Combined",
        "body": "No body available"
      },
      {
        "name": "Default_InMemory",
        "body": "No body available"
      },
      {
        "name": "Default_MultiProfile",
        "body": "No body available"
      },
      {
        "name": "Default_DifferentTransportMethods",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "EntityGeneratorTests.cs",
    "methods": [
      {
        "name": "Generate_ChatClient_ConnectionNotAnEntity",
        "body": "{| AssertResult(| FileResource.Open(\"ChatPeopleNodes.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      },
      {
        "name": "Generate_ChatClient_ConnectionNotAnEntity_With_Records",
        "body": "{| AssertResult(| settings: new AssertSettings { EntityRecords = true, },| FileResource.Open(\"ChatPeopleNodes.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      },
      {
        "name": "Generate_ChatClient_MapperMapsEntityOnRootCorrectly",
        "body": "{| AssertResult(| FileResource.Open(\"ChatSendMessage.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      },
      {
        "name": "Generate_ChatClient_MapperMapsEntityOnRootCorrectly_With_Records",
        "body": "{| AssertResult(| settings: new AssertSettings { EntityRecords = true, },| FileResource.Open(\"ChatSendMessage.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataOnly_UnionDataTypes",
        "body": "{| AssertResult(| FileResource.Open(\"BookUnionQuery.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataOnly_UnionDataTypes_With_Records",
        "body": "{| AssertResult(| settings: new AssertSettings { EntityRecords = true, },| FileResource.Open(\"BookUnionQuery.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataOnly_InterfaceDataTypes",
        "body": "{| AssertResult(| FileResource.Open(\"BookInterfaceQuery.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataOnly_InterfaceDataTypes_With_Records",
        "body": "{| AssertResult(| settings: new AssertSettings { EntityRecords = true, },| FileResource.Open(\"BookInterfaceQuery.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataInEntity_UnionDataTypes",
        "body": "{| AssertResult(| FileResource.Open(\"BookUnionQueryWithEntity.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_BookClient_DataInEntity_UnionDataTypes_With_Records",
        "body": "{| AssertResult(| settings: new AssertSettings { EntityRecords = true, },| FileResource.Open(\"BookUnionQueryWithEntity.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"BookSchema.graphql\"));| }"
      },
      {
        "name": "Generate_StarWars_Client_With_Defer",
        "body": "{| AssertStarWarsResult(| @\"query GetHero {| hero(episode: NEW_HOPE) {| ... HeroName| ... HeroAppearsIn @defer(label: \"\"HeroAppearsInAbc\"\")| }| }| fragment HeroName on Character {| name| friends {| nodes {| name| ... HeroAppearsIn2 @defer(label: \"\"HeroAppearsIn2\"\")| }| }| }| fragment HeroAppearsIn on Character {| appearsIn| }| fragment HeroAppearsIn2 on Character {| appearsIn| }\");| }"
      }
    ]
  },
  {
    "file": "EntityIdFactoryGeneratorTests.cs",
    "methods": [
      {
        "name": "Simple_NoEntity",
        "body": "No body available"
      },
      {
        "name": "Simple_IdEntity",
        "body": "No body available"
      },
      {
        "name": "Simple_ComplexEntity",
        "body": "No body available"
      },
      {
        "name": "Simple_UUID_Entity",
        "body": "No body available"
      },
      {
        "name": "Simple_DateTimeOffset_Entity",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "EntityOrIdGeneratorTests.cs",
    "methods": [
      {
        "name": "UnionList",
        "body": "{| AssertResult(| @\"| query GetFoo {| foo {| ... on Baz {| id| }| ... on Quox {| foo| }| ... on Baz2 {| id| }| ... on Quox2 {| foo| }| }| }| \",| @\"| type Query {| foo: [Bar]| }| type Baz {| id: String| }| type Baz2 {| id: String| }| type Quox {| foo: String| }| type Quox2 {| foo: String| }| union Bar = Baz | Quox | Baz2 | Quox2| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "UnionField",
        "body": "{| AssertResult(| @\"| query GetFoo {| foo {| ... on Baz {| id| }| ... on Quox {| foo| }| ... on Baz2 {| id| }| ... on Quox2 {| foo| }| }| }| \",| @\"| type Query {| foo: Bar| }| type Baz {| id: String| }| type Baz2 {| id: String| }| type Quox {| foo: String| }| type Quox2 {| foo: String| }| union Bar = Baz | Quox | Baz2 | Quox2| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "UnionWithNestedObject",
        "body": "{| AssertResult(| @\"| mutation StoreUserSettingFor(| $userId: Int!,| $customerId: Int!,| $input: StoreUserSettingForInput!) {| storeUserSettingFor(userId: $userId, customerId: $customerId, input: $input) {| ... on UserSettingSuccess {id}| ... on UserSettingError {errors {code message}}| }| }| \",| @\"| type Query {| foo: String| }| type Mutation {| storeUserSettingFor(| userId: Int!| customerId: Int!| input: StoreUserSettingForInput!): UserSettingResult!| }| union UserSettingResult = UserSettingSuccess | UserSettingError| input StoreUserSettingForInput {| portal: String| mobile: String| }| type UserSettingSuccess {| id: Int!| }| type UserSettingError {| errors: [ErrorNode!]!| }| type ErrorNode {| code: ErrorCode| message: String| }| enum ErrorCode {| UNKNOWN| MISSING_ARGUMENT| INVALID_ARGUMENT| FAILED| }| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "UnionListInEntity",
        "body": "{| AssertResult(| @\"| query GetFoo {| test {| foo {| ... on Baz {| id| }| ... on Quox {| foo| }| ... on Baz2 {| id| }| ... on Quox2 {| foo| }| }| }| }| \",| @\"| type Query {| test: Test| }| type Test {| id: String| foo: [Bar]| }| type Baz {| id: String| }| type Baz2 {| id: String| }| type Quox {| foo: String| }| type Quox2 {| foo: String| }| union Bar = Baz | Quox | Baz2 | Quox2| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "InterfaceList",
        "body": "{| AssertResult(| @\"| query GetFoo {| foo {| foo| ... on Baz {| id| }| ... on Quox {| baz| }| ... on Baz2 {| id| }| ... on Quox2 {| bar| }| }| }| \",| @\"| type Query {| foo: [Bar]| }| type Baz implements Bar {| id: String| foo: String| }| type Baz2 implements Bar {| id: String| foo: String| }| type Quox implements Bar {| foo: String| baz: String| }| type Quox2 implements Bar {| foo: String| bar: String| }| interface Bar {| foo: String| }| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "InterfaceField",
        "body": "{| AssertResult(| @\"| query GetFoo {| foo {| foo| ... on Baz {| id| }| ... on Quox {| baz| }| ... on Baz2 {| id| }| ... on Quox2 {| bar| }| }| }| \",| @\"| type Query {| foo: Bar| }| type Baz implements Bar {| id: String| foo: String| }| type Baz2 implements Bar {| id: String| foo: String| }| type Quox implements Bar {| foo: String| baz: String| }| type Quox2 implements Bar {| foo: String| bar: String| }| interface Bar {| foo: String| }| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "NonNullableValueTypeId",
        "body": "{| AssertResult(| @\"| query GetFoo {| foo {| ... on Baz {| id| }| ... on Quox {| foo| }| ... on Baz2 {| id| }| ... on Quox2 {| foo| }| }| }| \",| @\"| type Query {| foo: [Bar]| }| type Baz {| id: Int!| }| type Baz2 {| id: Int!| }| type Quox {| foo: Int!| }| type Quox2 {| foo: Int!| }| union Bar = Baz | Quox | Baz2 | Quox2| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      }
    ]
  },
  {
    "file": "ErrorGeneratorTests.cs",
    "methods": [
      {
        "name": "Generate_NoErrors",
        "body": "{| AssertResult(| FileResource.Open(\"Query.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"Schema.graphql\"));| }"
      },
      {
        "name": "Generate_SyntaxError",
        "body": "{| Assert.Collection(| AssertError(| Path.Combine(\"__resources__\", \"Query_SyntaxError.graphql\"),| Path.Combine(\"__resources__\", \"Schema.extensions.graphql\"),| Path.Combine(\"__resources__\", \"Schema.graphql\")),| error =>| {| Assert.Equal(\"SS0001\", error.Code);| Assert.Equal(| \"Expected a `RightBrace`-token, but found a `EndOfFile`-token.\",| error.Message);| });| }"
      },
      {
        "name": "Generate_SchemaValidationError",
        "body": "{| Assert.Collection(| AssertError(| Path.Combine(\"__resources__\", \"Query_SchemaValidationError.graphql\"),| Path.Combine(\"__resources__\", \"Schema.extensions.graphql\"),| Path.Combine(\"__resources__\", \"Schema.graphql\")),| error =>| {| Assert.Equal(\"SS0002\", error.Code);| Assert.Equal(| \"The field `someNotExistingField` does not exist on the type `Character`.\",| error.Message);| });| }"
      },
      {
        "name": "Generate_ChatClient_InvalidNullCheck",
        "body": "{| AssertResult(| FileResource.Open(\"ChatMeFiendsNodes.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      }
    ]
  },
  {
    "file": "InputGeneratorTests.cs",
    "methods": [
      {
        "name": "Operation_With_Complex_Arguments",
        "body": "{| AssertResult(| @\"query test($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"type Query {| foo(single: Bar!, list: [Bar!]!, nestedList: [[Bar]]): String| }| input Bar {| str: String| strNonNullable: String!| nested: Bar| nestedList: [Bar!]!| nestedMatrix: [[Bar]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_Comments",
        "body": "{| AssertResult(| @\"query test($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"type Query {| foo(single: Bar!, list: [Bar!]!, nestedList: [[Bar]]): String| }| \"\"Bar InputType\"\"| input Bar {| \"\"Field str\"\"| str: String| \"\"Field strNonNullable\"\"| strNonNullable: String!| \"\"Field nested\"\"| nested: Bar| \"\"Field nestedList\"\"| nestedList: [Bar!]!| \"\"Field nestedMatrix\"\"| nestedMatrix: [[Bar]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_Comments_With_Input_Records",
        "body": "{| AssertResult(| new AssertSettings { InputRecords = true, },| @\"query test($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"type Query {| foo(single: Bar!, list: [Bar!]!, nestedList: [[Bar]]): String| }| \"\"Bar InputType\"\"| input Bar {| \"\"Field str\"\"| str: String| \"\"Field strNonNullable\"\"| strNonNullable: String!| \"\"Field nested\"\"| nested: Bar| \"\"Field nestedList\"\"| nestedList: [Bar!]!| \"\"Field nestedMatrix\"\"| nestedMatrix: [[Bar]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Input_Type_Fields_Are_Inspected_For_LeafTypes",
        "body": "{| AssertResult(| @\"mutation ChangeHomePlanet($input: ChangeHomePlanetInput!) {| changeHomePlanet(input: $input) {| human {| homePlanet| }| }| }\",| FileResource.Open(\"StarWarsSchema_ChangeHomePlanet.graphql\"),| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "KeywordCollisions",
        "body": "{| AssertResult(| @\"query readonly($input: abstract!) {| readonly(readonly: $input) {| abstract| }| readonlyEntity {| id| abstract| }| }\",| @\"| type Query {| readonly(readonly: abstract): readonly| readonlyEntity: readonlyEntity| }| input abstract {| class: String| }| type readonly {| abstract: String| }| type readonlyEntity {| id: ID| abstract: String| }| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_UploadAsArg",
        "body": "{| AssertResult(| @\"query test(| $upload: Upload!| $uploadNullable: Upload| $list: [Upload!]!| $listNullable: [Upload!]| $nestedList: [[Upload!]!]!| $nestedListNullable: [[Upload!]]| ) {| foo(upload: $upload| uploadNullable: $uploadNullable| list: $list| listNullable: $listNullable| nestedList: $nestedList| nestedListNullable: $nestedListNullable| )| }\",| @\"type Query {| foo(| upload: Upload!,| uploadNullable: Upload,| list: [Upload!]!,| listNullable: [Upload]| nestedList: [[Upload!]!]!,| nestedListNullable: [[Upload]]| ): String| }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_UploadInInputObject",
        "body": "{| AssertResult(| @\"query test($input: Test!) {| foo(input: $input)| }\",| @\"type Query {| foo(input: Test): String| }| input Test { foo: Upload! }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_UploadInDeepInputObject",
        "body": "{| AssertResult(| @\"query test($input: Test!) {| foo(input: $input)| }\",| @\"type Query {| foo(input: Test): String| }| input Test { foo: Bar! }| input Bar { foo: Baz! }| input Baz { foo: Qux! }| input Qux { foo: Upload! }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_ComplexInputTypes",
        "body": "{| AssertResult(| @\"query test($input: User!) {| foo(input: $input)| }\",| @\"type Query {| foo(input: User): String| }| input User {| username: String!| address: Address!| profilePicture: Upload!| photos:[Photo]| }| input Photo { data: Upload! metadata: PhotoMetadata }| input PhotoMetadata { thumbnail: Upload! }| input Address { street: String! }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_FirstNonUpload",
        "body": "{| AssertResult(| @\"query test(| $string: String!| $upload: Upload!) {| foo(string: $string upload: $upload)| }\",| @\"type Query {| foo(string: String! upload: Upload!): String| }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_LastNonUpload",
        "body": "{| AssertResult(| @\"query test(| $upload: Upload!| $string: String!) {| foo(string: $string upload: $upload)| }\",| @\"type Query {| foo(string: String! upload: Upload!): String| }| scalar Upload| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      }
    ]
  },
  {
    "file": "AnyScalarDefaultSerializationTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(20_000);| using var host = TestServerHelper.CreateServer(| builder =>| {| builder.AddTypeExtension<QueryResolvers>();| },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| AnyScalarDefaultSerializationClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| AnyScalarDefaultSerializationClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddAnyScalarDefaultSerializationClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<AnyScalarDefaultSerializationClient>();| // act| IOperationResult<IGetJsonResult> result = await client.GetJson.ExecuteAsync(cts.Token);| // assert| Assert.Empty(result.Errors);| result.Data?.Json.ToString().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "EntityIdOrDataTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| var serviceCollection = new ServiceCollection();| serviceCollection| .AddGraphQLServer()| .AddQueryType<Query>()| .AddType<IBar>()| .AddType<Baz>()| .AddType<Baz2>()| .AddType<Quox>()| .AddType<Quox2>();| serviceCollection.AddEntityIdOrDataClient().ConfigureInMemoryClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<EntityIdOrDataClient>();| // act| IOperationResult<IGetFooResult> result = await client.GetFoo.ExecuteAsync(ct);| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "MultiProfileTest.cs",
    "methods": [
      {
        "name": "Execute_MultiProfile_Test",
        "body": "{| // arrange| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| MultiProfileClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| MultiProfileClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| // act| serviceCollection.AddMultiProfileClient(| profile: MultiProfileClientProfileKind.Default);| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<MultiProfileClient>();| // assert| Assert.NotNull(client);| }"
      }
    ]
  },
  {
    "file": "StarWarsGetFriendsNoStoreTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetFriendsNoStoreClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<IStarWarsGetFriendsNoStoreClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"R2-D2\", result.Data?.Hero?.Name);| Assert.Collection(| result.Data!.Hero!.Friends!.Nodes!,| item => Assert.Equal(\"Luke Skywalker\", item?.Name),| item => Assert.Equal(\"Han Solo\", item?.Name),| item => Assert.Equal(\"Leia Organa\", item?.Name));| }"
      }
    ]
  },
  {
    "file": "StarWarsGetFriendsTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetFriendsClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<IStarWarsGetFriendsClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"R2-D2\", result.Data?.Hero?.Name);| Assert.Collection(| result.Data!.Hero!.Friends!.Nodes!,| item => Assert.Equal(\"Luke Skywalker\", item?.Name),| item => Assert.Equal(\"Han Solo\", item?.Name),| item => Assert.Equal(\"Leia Organa\", item?.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetFriendsClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql1\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<IStarWarsGetFriendsClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.NotNull(result.Errors);| Assert.Collection(result.Errors,| error => Assert.Equal(| \"Response status code does not indicate success: 404 (Not Found).\",| error.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetFriendsClient()| .ConfigureHttpClient(| c =>| {| c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\");| c.DefaultRequestHeaders.Add(\"sendErrorStatusCode\", \"1\");| c.DefaultRequestHeaders.Add(\"sendError\", \"1\");| })| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<IStarWarsGetFriendsClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"R2-D2\", result.Data?.Hero?.Name);| Assert.Collection(| result.Data!.Hero!.Friends!.Nodes!,| item => Assert.Equal(\"Luke Skywalker\", item?.Name),| item => Assert.Equal(\"Han Solo\", item?.Name),| item => Assert.Equal(\"Leia Organa\", item?.Name));| Assert.NotNull(result.Errors);| Assert.Collection(result.Errors,| error => Assert.Equal(| \"Some error!\",| error.Message));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetFriendsClient()| .ConfigureHttpClient(| c =>| {| c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\");| c.DefaultRequestHeaders.Add(\"sendErrorStatusCode\", \"1\");| })| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<IStarWarsGetFriendsClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"R2-D2\", result.Data?.Hero?.Name);| Assert.Collection(| result.Data!.Hero!.Friends!.Nodes!,| item => Assert.Equal(\"Luke Skywalker\", item?.Name),| item => Assert.Equal(\"Han Solo\", item?.Name),| item => Assert.Equal(\"Leia Organa\", item?.Name));| Assert.NotNull(result.Errors);| Assert.Collection(result.Errors,| error =>| {| Assert.Equal(| \"Response status code does not indicate success: 403 (Forbidden).\",| error.Message);| Assert.IsType<HttpRequestException>(error.Exception);| });| }"
      }
    ]
  },
  {
    "file": "StarWarsGetHeroTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"R2-D2\", result.Data!.Hero!.Name);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| // act| string? name = null;| var session =| client.GetHero| .Watch()| .Subscribe(result => name = result.Data?.Hero?.Name);| while (name is null && !ct.IsCancellationRequested)| {| await Task.Delay(10, ct);| }| session.Dispose();| // assert| Assert.Equal(\"R2-D2\", name);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| // act| await client.GetHero.ExecuteAsync(ct);| string? name = null;| var session =| client.GetHero| .Watch(ExecutionStrategy.CacheFirst)| .Subscribe(result =>| {| name = result.Data?.Hero?.Name;| });| while (name is null && !ct.IsCancellationRequested)| {| await Task.Delay(10, ct);| }| session.Dispose();| // assert| Assert.Equal(\"R2-D2\", name);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| var services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| var storeAccessor = services.GetRequiredService<StarWarsGetHeroClientStoreAccessor>();| var entityId = new EntityId(\"Droid\", \"2001\");| // act| await client.GetHero.ExecuteAsync(cts.Token);| string? name = null;| var session =| client.GetHero| .Watch(ExecutionStrategy.CacheFirst)| .Subscribe(result => name = result.Data?.Hero?.Name);| while (name is null && !cts.Token.IsCancellationRequested)| {| await Task.Delay(10, cts.Token);| }| var name1 = name;| name = null;| storeAccessor.EntityStore.Update(s =>| {| if (s.CurrentSnapshot.TryGetEntity(entityId, out DroidEntity? entity))| {| entity = new DroidEntity(\"NewName\");| s.SetEntity(entityId, entity);| }| });| while (name is null && !cts.Token.IsCancellationRequested)| {| await Task.Delay(10, cts.Token);| }| var name2 = name;| name = null;| session.Dispose();| // assert| Assert.Equal(\"R2-D2\", name1);| Assert.Equal(\"NewName\", name2);| }"
      },
      {
        "name": "Task",
        "body": "{| var fileName = Path.GetTempFileName();| var connectionString = \"Data Source=\" + fileName;| File.Delete(fileName);| try| {| {| // arrange| using var cts = new CancellationTokenSource(100_20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"))| .AddSQLitePersistence(connectionString);| await using var services = serviceCollection.BuildServiceProvider();| await services.GetRequiredService<SQLitePersistence>().InitializeAsync();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| var storeAccessor =| services.GetRequiredService<StarWarsGetHeroClientStoreAccessor>();| var entityId = new EntityId(\"Droid\", \"2001\");| await Task.Delay(250, cts.Token);| // act| await client.GetHero.ExecuteAsync(cts.Token);| string? name = null;| var session =| client.GetHero| .Watch(ExecutionStrategy.CacheFirst)| .Subscribe(result => name = result.Data?.Hero?.Name);| while (name is null && !cts.Token.IsCancellationRequested)| {| await Task.Delay(10, cts.Token);| }| var name1 = name;| name = null;| storeAccessor.EntityStore.Update(s =>| {| if (s.CurrentSnapshot.TryGetEntity(entityId, out DroidEntity? entity))| {| entity = new DroidEntity(\"NewName\");| s.SetEntity(entityId, entity);| }| });| while (name is null && !cts.Token.IsCancellationRequested)| {| await Task.Delay(10, cts.Token);| }| var name2 = name;| name = null;| session.Dispose();| // assert| Assert.Equal(\"R2-D2\", name1);| Assert.Equal(\"NewName\", name2);| await Task.Delay(500, cts.Token);| }| {| // arrange| using var cts = new CancellationTokenSource(100_20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"))| .AddSQLitePersistence(connectionString);| await using var services = serviceCollection.BuildServiceProvider();| await services.GetRequiredService<SQLitePersistence>().InitializeAsync();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| // act| string? name = null;| client.GetHero| .Watch(ExecutionStrategy.CacheFirst)| .Subscribe(result =>| {| name = result.Data!.Hero!.Name;| });| while (name is null && !cts.Token.IsCancellationRequested)| {| await Task.Delay(10, cts.Token);| }| // assert| Assert.Equal(\"NewName\", name);| }| }| finally| {| if (File.Exists(fileName))| {| SqliteConnection.ClearAllPools();| File.Delete(fileName);| }| }| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| await client.GetHero.ExecuteAsync(ct);| // act| var count = 0;| using var session =| client.GetHero| .Watch(ExecutionStrategy.CacheAndNetwork)| .Subscribe(_ =>| {| count++;| });| await Task.Delay(1000, ct);| // assert| Assert.Equal(1, count);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection| .AddStarWarsGetHeroClient()| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroClient>();| // act| var count = 0;| using var session =| client.GetHero| .Watch(ExecutionStrategy.CacheAndNetwork)| .Subscribe(_ =>| {| count++;| });| await Task.Delay(1000, ct);| // assert| Assert.Equal(1, count);| }"
      }
    ]
  },
  {
    "file": "StarWarsGetHeroTraitsTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsGetHeroTraitsClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsGetHeroTraitsClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsGetHeroTraitsClient();| var services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsGetHeroTraitsClient>();| // act| var result = await client.GetHero.ExecuteAsync(ct);| // assert| Assert.Equal(\"{\\\"rockets\\\":true}\", result.Data?.Hero?.Traits?.GetRawText());| }"
      }
    ]
  },
  {
    "file": "StarWarsIntrospectionTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsIntrospectionClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsIntrospectionClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsIntrospectionClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsIntrospectionClient>();| // act| var result = await client.IntrospectionQuery.ExecuteAsync(ct);| // assert| result.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "StarWarsOnReviewSubCompletionTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var host = TestServerHelper.CreateServer(_ => { }, out var port);| var topicEventSender = host.Services.GetRequiredService<ITopicEventSender>();| var serviceCollection = new ServiceCollection();| serviceCollection.AddStarWarsOnReviewSubCompletionClient(| profile: StarWarsOnReviewSubCompletionClientProfileKind.Default)| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| // act| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<IStarWarsOnReviewSubCompletionClient>();| string? commentary = null;| var completionTriggered = false;| var sub = client.OnReviewSub.Watch();| var session = sub.Subscribe(| result => commentary = result.Data?.OnReview.Commentary,| () => completionTriggered = true);| var topic = Episode.NewHope;| // try to send message 10 times| // make sure the subscription connection is successful| for(var times = 0; commentary is null && times < 10; times++)| {| await topicEventSender.SendAsync(| $\"{OnReview}_{topic}\",| new Review(stars: 1, commentary: \"Commentary\"));| await Task.Delay(1_000);| }| // complete the topic of subscription from server| await topicEventSender.CompleteAsync($\"{OnReview}_{topic}\");| // waiting for completion message sent| for (var times = 0; !completionTriggered && times < 10; times++)| {| await Task.Delay(1_000);| }| // assert| Assert.True(completionTriggered);| Assert.NotNull(commentary);| session.Dispose();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var topicEventSender = host.Services.GetRequiredService<ITopicEventSender>();| var serviceCollection = new ServiceCollection();| serviceCollection.AddStarWarsOnReviewSubCompletionClient(| profile: StarWarsOnReviewSubCompletionClientProfileKind.Default)| .ConfigureHttpClient(| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"))| .ConfigureWebSocketClient(| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddSingleton<SubscriptionSocketStateMonitor>();| // act| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<IStarWarsOnReviewSubCompletionClient>();| string? commentary = null;| var completionTriggered = false;| var sub = client.OnReviewSub.Watch();| var session = sub.Subscribe(| result => commentary = result.Data?.OnReview?.Commentary,| () => completionTriggered = true);| var topic = Episode.NewHope;| // try to send message 10 times| // make sure the subscription connection is successful| for (var times = 0; commentary is null && times < 10; times++)| {| await topicEventSender.SendAsync(| $\"{OnReview}_{topic}\",| new Review(stars: 1, commentary: \"Commentary\"));| await Task.Delay(1_000);| }| // simulate network error| var monitor = services.GetRequiredService<SubscriptionSocketStateMonitor>();| monitor.AbortSocket();| //await host.StopAsync();| // waiting for completion message sent| for (var times = 0; !completionTriggered && times < 10; times++)| {| await Task.Delay(1_000);| }| // assert| Assert.True(commentary is not null && completionTriggered);| session.Dispose();| }"
      }
    ]
  },
  {
    "file": "StarWarsOnReviewSubGraphQLSSETest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(20_000);| var ct = cts.Token;| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsOnReviewSubGraphQLSSEClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsOnReviewSubGraphQLSSEClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsOnReviewSubGraphQLSSEClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsOnReviewSubGraphQLSSEClient>();| // act| var topicEventSender = host.Services.GetRequiredService<ITopicEventSender>();| var topic = Episode.NewHope;| var connectCompletionSource = new TaskCompletionSource();| var subscribeCompletionSource = new TaskCompletionSource();| var session = client.OnReviewSub.Watch()| .Subscribe(| _ => connectCompletionSource.TrySetResult(),| () => subscribeCompletionSource.TrySetResult());| // make sure the subscription connection is successful| while (!connectCompletionSource.Task.IsCompleted)| {| await topicEventSender.SendAsync(| $\"{OnReview}_{topic}\",| new Review(stars: 1, commentary: \"Commentary\"),| ct);| await Task.Delay(1_000, ct);| }| // complete the topic of subscription from server| await topicEventSender.CompleteAsync($\"{OnReview}_{topic}\");| var completedTask = await Task.WhenAny(| subscribeCompletionSource.Task,| Task.Delay(Timeout.Infinite, ct));| // assert| Assert.True(subscribeCompletionSource.Task == completedTask);| }"
      }
    ]
  },
  {
    "file": "StarWarsTypeNameOnInterfacesTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsTypeNameOnInterfacesClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsTypeNameOnInterfacesClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsTypeNameOnInterfacesClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<StarWarsTypeNameOnInterfacesClient>();| // act| var result = await client.GetHero.ExecuteAsync(cts.Token);| // assert| result.EnsureNoErrors();| result.Data.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "StarWarsTypeNameOnUnionsTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var cts = new CancellationTokenSource(20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsTypeNameOnUnionsClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsTypeNameOnUnionsClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsTypeNameOnUnionsClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client =| services.GetRequiredService<StarWarsTypeNameOnUnionsClient>();| // act| var result = await client.SearchHero.ExecuteAsync(cts.Token);| // assert| result.EnsureNoErrors();| result.Data.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "StarWarsUnionListTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| using var cts = new CancellationTokenSource(20_000);| using var host = TestServerHelper.CreateServer(| _ => { },| out var port);| var serviceCollection = new ServiceCollection();| serviceCollection.AddHttpClient(| StarWarsUnionListClient.ClientName,| c => c.BaseAddress = new Uri(\"http://localhost:\" + port + \"/graphql\"));| serviceCollection.AddWebSocketClient(| StarWarsUnionListClient.ClientName,| c => c.Uri = new Uri(\"ws://localhost:\" + port + \"/graphql\"));| serviceCollection.AddStarWarsUnionListClient();| IServiceProvider services = serviceCollection.BuildServiceProvider();| var client = services.GetRequiredService<StarWarsUnionListClient>();| // act| var result = await client.SearchHero.ExecuteAsync(cts.Token);| // assert| result.EnsureNoErrors();| result.Data.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "TestGeneration.cs",
    "methods": [
      {
        "name": "StarWarsGetHero",
        "body": "No body available"
      },
      {
        "name": "StarWarsGetFriendsNoStore",
        "body": "No body available"
      },
      {
        "name": "StarWarsGetFriends",
        "body": "No body available"
      },
      {
        "name": "MultiProfile",
        "body": "No body available"
      },
      {
        "name": "AnyScalarDefaultSerialization",
        "body": "No body available"
      },
      {
        "name": "StarWarsTypeNameOnInterfaces",
        "body": "No body available"
      },
      {
        "name": "StarWarsTypeNameOnUnions",
        "body": "No body available"
      },
      {
        "name": "StarWarsUnionList",
        "body": "No body available"
      },
      {
        "name": "StarWarsGetHeroTraits",
        "body": "No body available"
      },
      {
        "name": "EntityIdOrData",
        "body": "No body available"
      },
      {
        "name": "StarWarsIntrospection",
        "body": "No body available"
      },
      {
        "name": "StarWarsGetFriendsDeferred",
        "body": "No body available"
      },
      {
        "name": "StarWarsGetFriendsDeferInList",
        "body": "No body available"
      },
      {
        "name": "StarWarsOnReviewSubCompletion",
        "body": "No body available"
      },
      {
        "name": "StarWarsOnReviewSubNoStore",
        "body": "No body available"
      },
      {
        "name": "StarWarsOnReviewSubGraphQLSSE",
        "body": "No body available"
      },
      {
        "name": "UploadScalar",
        "body": "No body available"
      },
      {
        "name": "UploadScalar_InMemory",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "UploadScalarTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var data = CreateStream(\"a\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| new Upload(data, \"test-file\"),| null,| null,| null,| null,| null,| cancellationToken: ct);| // assert| Assert.Equal(\"test-file:a\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| new Upload?[] { new Upload(dataA, \"A\"), new Upload(dataB, \"B\"), },| null,| null,| null,| null,| cancellationToken: ct);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| new[] { new Upload?[] { new Upload(dataA, \"A\"), new Upload(dataB, \"B\"), }, },| null,| null,| null,| cancellationToken: ct);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var data = CreateStream(\"a\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(data, \"test-file\"), },| },| },| null,| null,| cancellationToken: ct);| // assert| Assert.Equal(\"test-file:a\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| null,| new[]| {| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataA, \"A\"), },| },| },| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataB, \"B\"), },| },| },| },| null,| cancellationToken: ct);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| null,| null,| new[]| {| new[]| {| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataA, \"A\"), },| },| },| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataB, \"B\"), },| },| },| },| },| cancellationToken: ct);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var ct = new CancellationTokenSource(20_000).Token;| using var host = TestServerHelper.CreateServer(Configure, out var port);| var client = CreateClient(host, port);| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| new Upload?[] { new Upload(dataA, \"A\"), null, new Upload(dataB, \"B\"), },| null,| null,| null,| null,| cancellationToken: ct);| // assert| Assert.Equal(\"A:a,null,B:b\", result.Data!.Upload);| }"
      }
    ]
  },
  {
    "file": "UploadScalar_InMemoryTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var data = CreateStream(\"a\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| new Upload(data, \"test-file\"),| null,| null,| null,| null,| null);| // assert| Assert.Equal(\"test-file:a\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| new Upload?[] { new Upload(dataA, \"A\"), new Upload(dataB, \"B\"), },| null,| null,| null,| null);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| new[] { new Upload?[] { new Upload(dataA, \"A\"), new Upload(dataB, \"B\"), }, },| null,| null,| null);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var data = CreateStream(\"a\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(data, \"test-file\"), },| },| },| null,| null);| // assert| Assert.Equal(\"test-file:a\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| null,| new[]| {| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataA, \"A\"), },| },| },| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataB, \"B\"), },| },| },| },| null);| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var client = CreateClient();| using var dataA = CreateStream(\"a\");| using var dataB = CreateStream(\"b\");| // act| var result = await client.TestUpload.ExecuteAsync(| \"foo\",| null,| null,| null,| null,| null,| new[]| {| new[]| {| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataA, \"A\"), },| },| },| new TestInput()| {| Bar = new BarInput()| {| Baz = new BazInput() { File = new Upload(dataB, \"B\"), },| },| },| },| });| // assert| Assert.Equal(\"A:a,B:b\", result.Data!.Upload);| }"
      }
    ]
  },
  {
    "file": "NoStoreStarWarsGeneratorTests.cs",
    "methods": [
      {
        "name": "Interface_With_Default_Names",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }\");| }"
      },
      {
        "name": "Operation_With_Leaf_Argument",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| @\"query GetHero($episode: Episode) {| hero(episode: $episode) {| name| appearsIn| }| }\");| }"
      },
      {
        "name": "Operation_With_Type_Argument",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| @\"mutation createReviewMut($episode: Episode!, $review: ReviewInput!) {| createReview(episode: $episode, review: $review) {| stars| commentary| }| }\");| }"
      },
      {
        "name": "Interface_With_Fragment_Definition_Two_Models",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| @\"query GetHero {| hero(episode: NEW_HOPE) {| ... Hero| }| }| fragment Hero on Character {| name| ... Human| ... Droid| friends {| nodes {| name| }| }| }| fragment Human on Human {| homePlanet| }| fragment Droid on Droid {| primaryFunction| }\");| }"
      },
      {
        "name": "Subscription_With_Default_Names",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| @\"subscription OnReviewSub {| onReview(episode: NEW_HOPE) {| stars| commentary| }| }\");| }"
      },
      {
        "name": "Generate_StarWarsIntegrationTest",
        "body": "{| AssertStarWarsResult(| new AssertSettings { NoStore = true, },| FileResource.Open(\"QueryWithSubscription.graphql\"));| }"
      },
      {
        "name": "StarWarsTypeNameOnUnions",
        "body": "No body available"
      },
      {
        "name": "StarWarsUnionList",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "OperationGeneratorTests.cs",
    "methods": [
      {
        "name": "Response_Name_Is_Correctly_Cased",
        "body": "{| AssertResult(| \"query GetSomething{ bar_baz_foo : foo_bar_baz }\",| @\"type Query {| foo_bar_baz: String| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_MultipleOperations",
        "body": "{| AssertResult(| @\"query TestOperation($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"query TestOperation2($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"query TestOperation3($single: Bar!, $list: [Bar!]!, $nestedList: [[Bar!]]) {| foo(single: $single, list: $list, nestedList:$nestedList)| }\",| @\"type Query {| foo(single: Bar!, list: [Bar!]!, nestedList: [[Bar]]): String| }| input Bar {| str: String| strNonNullable: String!| nested: Bar| nestedList: [Bar!]!| nestedMatrix: [[Bar]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Generate_ChatClient_AllOperations",
        "body": "{| // arrange| AssertResult(| FileResource.Open(\"ChatOperations.graphql\"),| FileResource.Open(\"Schema.extensions.graphql\"),| FileResource.Open(\"ChatSchema.graphql\"));| }"
      },
      {
        "name": "Nullable_List_Input",
        "body": "{| AssertResult(| @\"query GetSomething($bar: Bar){ foo(bar: $bar)}\",| \"type Query { foo(bar: Bar ): String }\",| \"input Bar { baz: [Baz] }\",| \"input Baz { qux: String }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Nullable_ValueType_Input",
        "body": "{| AssertResult(| @\"query GetSomething($bar: Bar){ foo(bar: $bar)}\",| \"type Query { foo(bar: Bar ): String }\",| \"scalar IntPtr\",| \"input Bar { nullablePtr: IntPtr }\",| @\"extend scalar IntPtr| @serializationType(name: \"\"global::System.String\"\")| @runtimeType(name: \"\"global::System.IntPtr\"\", valueType: true)\");| }"
      },
      {
        "name": "NonNullable_ValueType_Input",
        "body": "{| AssertResult(| @\"query GetSomething($bar: Bar){ foo(bar: $bar)}\",| \"type Query { foo(bar: Bar ): String }\",| \"scalar IntPtr\",| \"input Bar { nonNullablePtr: IntPtr! }\",| @\"extend scalar IntPtr| @serializationType(name: \"\"global::System.String\"\")| @runtimeType(name: \"\"global::System.IntPtr\"\", valueType: true)\");| }"
      },
      {
        "name": "NonNullableValueType_WithoutGlobal_Input",
        "body": "{| AssertResult(| @\"query GetSomething($bar: Bar){ foo(bar: $bar)}\",| \"type Query { foo(bar: Bar ): String }\",| \"scalar IntPtr\",| \"input Bar { nonNullablePtr: IntPtr! }\",| @\"extend scalar IntPtr| @serializationType(name: \"\"global::System.String\"\")| @runtimeType(name: \"\"System.IntPtr\"\", valueType: true)\");| }"
      }
    ]
  },
  {
    "file": "PersistedOperationGeneratorTests.cs",
    "methods": [
      {
        "name": "Simple_Custom_Scalar",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "ResultTypeGeneratorTest.cs",
    "methods": [
      {
        "name": "Operation_With_Complex_Types",
        "body": "{| AssertResult(| @\"query GetFoo {| foo {| str| strNonNullable| nested { str }| nestedList { str }| nestedMatrix { str }| }| }\",| @\"type Query {| foo: Baz| }| type Baz {| str: String| strNonNullable: String!| nested: Baz| nestedList: [Baz!]!| nestedMatrix: [[Baz]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_Comments",
        "body": "{| AssertResult(| @\"query GetFoo {| foo {| str| strNonNullable| nested { str }| nestedList { str }| nestedMatrix { str }| }| }\",| @\"type Query {| foo: Baz| }| \"\"Baz Type\"\"| type Baz {| \"\"Field str\"\"| str: String| \"\"Field strNonNullable\"\"| strNonNullable: String!| \"\"Field nested\"\"| nested: Baz| \"\"Field nestedList\"\"| nestedList: [Baz!]!| \"\"Field nestedMatrix\"\"| nestedMatrix: [[Baz]]| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Operation_With_NullableData",
        "body": "{| AssertResult(| @\"| schema {| query: Query| subscription: Subscription| }| type Query { foo: String }| type Subscription {| onFooUpdated: FooNotification!| }| type FooNotification {| action: String!| data: FooNotificationData!| }| type FooNotificationData {| barGUID: String!| documentID: String| documentNAME: String| thingGUID: String!| thingDATE: String!| thingDATA: String| thingSTATUS: String| fooGUID: String!| fooAUTHOR: String| fooDATE: String!| fooTEXT: String| }\",| @\"| subscription OnFooUpdated {| onFooUpdated {| action| data {| barGUID| thingGUID| thingDATE| thingSTATUS| fooGUID| fooAUTHOR| fooDATE| fooTEXT| }| }| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Nested_Entity",
        "body": "{| AssertResult(| @\"| schema {| query: Query| }| type Query {| decodeVIN: DecodeVIN!| }| scalar UUID| type DecodeVIN {| vehicleMake: VehicleMake| vehicleModel: VehicleModel| vehicleMakeId: UUID| vehicleModelId: UUID| isValid: Boolean!| }| type VehicleMake {| id: UUID!| make: String| makeCode: String| isDisabled: Boolean!| vehicleModels: [VehicleModel]| }| type VehicleModel {| id: UUID!| vehicleMakeId: UUID!| model: String| modelCode: String| modelType: String| isDisabled: Boolean!| vehicleMake: VehicleMake| }\",| @\"| query decodeVIN{| decodeVIN{| ...DecodeVINModel| }| }| fragment DecodeVINModel on DecodeVIN| {| isValid| vehicleMake{| ...VehicleMakeModel| }| vehicleModel{| ...VehicleModelModel| }| }| fragment VehicleModelModel on VehicleModel {| id| model| modelCode| vehicleMakeId| isDisabled| modelType| }| fragment VehicleMakeModel on VehicleMake {| id| make| makeCode| isDisabled| }| \",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      }
    ]
  },
  {
    "file": "ScalarGeneratorTests.cs",
    "methods": [
      {
        "name": "Simple_Custom_Scalar",
        "body": "No body available"
      },
      {
        "name": "ByteArray_ScalarType",
        "body": "No body available"
      },
      {
        "name": "Only_Custom_Scalars",
        "body": "No body available"
      },
      {
        "name": "Any_Type",
        "body": "No body available"
      },
      {
        "name": "Custom_Scalar_With_RuntimeType",
        "body": "No body available"
      },
      {
        "name": "Custom_Scalar_With_RuntimeType_ValueType_AsInput",
        "body": "No body available"
      },
      {
        "name": "Custom_Scalar_With_Unknown_RuntimeType",
        "body": "No body available"
      },
      {
        "name": "Custom_Scalar_With_SerializationType",
        "body": "No body available"
      },
      {
        "name": "Custom_Scalar_With_SerializationType_And_RuntimeType",
        "body": "No body available"
      },
      {
        "name": "Any_Scalar",
        "body": "No body available"
      },
      {
        "name": "Complete_Schema_With_UUID_And_DateTime",
        "body": "{| AssertResult(| FileResource.Open(\"AllExpenses.graphql\"),| FileResource.Open(\"Expenses.extensions.graphql\"),| FileResource.Open(\"Expenses.graphql\"));| }"
      },
      {
        "name": "TimeSpan_Not_Detected",
        "body": "{| AssertResult(| strictValidation: false,| @\"| query GetSessions {| sessions(order: { title: ASC }) {| nodes {| title| }| }| }| \",| FileResource.Open(\"Workshop.Schema.graphql\"),| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Scalars_Are_Correctly_Inferred",
        "body": "{| AssertResult(| @\"| query getAll {| listings {| ...Offer| }| }| fragment Offer on Offer {| numberFloat| numberInt| }\",| @\"| schema {| query: Query| mutation: null| subscription: null| }| type Query {| listings: [Offer!]!| }| type Offer{| listingId: ID!| numberInt: Int| numberFloat: Float| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Uuid_Type",
        "body": "No body available"
      },
      {
        "name": "Uri_Type",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "SchemaGeneratorTests.cs",
    "methods": [
      {
        "name": "Schema_With_Spec_Errors",
        "body": "{| AssertResult(| strictValidation: false,| @\"| query getListingsCount {| listings {| ... ListingsPayload| }| }| fragment ListingsPayload on ListingsPayload{| count| }| \",| FileResource.Open(\"BridgeClientDemo.graphql\"),| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Query_With_Nested_Fragments",
        "body": "{| AssertResult(| strictValidation: true,| @\"| query getAll(){| listings{| ... ListingsPayload| }| }| fragment ListingsPayload on ListingsPayload{| items{| ... HasListingId| ... Offer| ... Auction| }| }| fragment HasListingId on Listing{| listingId| }| fragment Offer on Offer{| price| }| fragment Auction on Auction{| startingPrice| }| \",| FileResource.Open(\"MultipleInterfaceSchema.graphql\"),| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Create_Query_With_Skip_Take",
        "body": "{| AssertResult(| @\"query SearchNewsItems($query: String! $skip: Int $take: Int) {| newsItems(skip: $skip take: $take query: $query) {| items {| id| title| summary| }| }| }\",| @\"schema {| query: Query| }| type Query {| newsItems(skip: Int take: Int query: String!): NewsItemCollectionSegment| }| interface Node {| id: ID!| }| type NewsItem implements Node {| id: ID!| feedId: UUID!| feedUrl: String!| html: String!| image: String!| keywords: [String!]!| language: String!| summary: String!| text: String!| title: String!| updated: DateTime| url: String!| }| type NewsItemCollectionSegment {| items: [NewsItem]| \"\"Information to aid in pagination.\"\"| pageInfo: CollectionSegmentInfo!| }| \"\"Information about the offset pagination.\"\"| type CollectionSegmentInfo {| \"\"Indicates whether more items exist following the set defined by the clients arguments.\"\"| hasNextPage: Boolean!| \"\"Indicates whether more items exist prior the set defined by the clients arguments.\"\"| hasPreviousPage: Boolean!| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Create_PeopleSearch_From_ActiveDirectory_Schema",
        "body": "{| AssertResult(| @\"query PeopleSearch($term:String! $skip:Int $take:Int $inactive:Boolean) {| people: peopleSearch(| term: $term| includeInactive: $inactive| skip: $skip| take: $take| )| {| totalCount| pageInfo {| hasNextPage| hasPreviousPage| }| items {| ...PeopleSearchResult| }| }| }| fragment PeopleSearchResult on Person {| id| key| displayName| isActive| department {| id| name| }| image| title| manager {| id| key| displayName| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"ActiveDirectory.Schema.graphql\"));| }"
      },
      {
        "name": "Create_GetFeatsPage",
        "body": "{| AssertResult(| @\"query GetFeatsPage($skip: Int, $take: Int) {| feats(skip: $skip, take: $take) {| items {| name,| level,| canBeLearnedMoreThanOnce,| actionType {| name| }| }| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"Schema_Bug_1.graphql\"));| }"
      },
      {
        "name": "Create_GetFeatById",
        "body": "{| AssertResult(| @\"query GetFeatById($id: UUID!) {| feats(where: {id: {eq: $id}}) {| items {| id,| name,| level,| details {| text| }| }| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"Schema_Bug_1.graphql\"));| }"
      },
      {
        "name": "Create_DataType_Query",
        "body": "{| AssertResult(| @\"query GetAllFoos {| test {| profile {| name| }| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| @\"schema {| query: Query| }| type Query {| test: [Foo!]!| }| type Foo {| profile: Profile!| }| type Profile {| # id: ID! # Can no longer generate if no id is present| name: String| }\");| }"
      },
      {
        "name": "Create_UpdateMembers_Mutation",
        "body": "{| AssertResult(| @\"mutation UpdateMembers($input: UpdateProjectMembersInput!) {| project {| updateMembers(input: $input) {| correlationId| }| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"Schema_Bug_2.graphql\"));| }"
      },
      {
        "name": "QueryInterference",
        "body": "{| AssertResult(| @\"query GetFeatsPage(| $skip: Int!| $take: Int!| $searchTerm: String! = \"\"\"\"| $order: [FeatSortInput!] = [{ name: ASC }]| ) {| feats(| skip: $skip| take: $take| order: $order| where: {| or: [| { name: { contains: $searchTerm } }| { traits: { some: { name: { contains: $searchTerm } } } }| ]| }| ) {| totalCount| items {| ...FeatsPage| }| }| }| fragment FeatsPage on Feat {| id| name| level| canBeLearnedMoreThanOnce| details {| text| }| }\",| @\"query GetFeatById($id: UUID!) {| feats(where: { id: { eq: $id } }) {| items {| ...FeatById| }| }| }| fragment FeatById on Feat {| id| name| level| special| trigger| details {| text| }| actionType {| name| }| }\",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"Schema_Bug_1.graphql\"));| }"
      },
      {
        "name": "NodeTypenameCollision",
        "body": "{| AssertResult(| @\"| type Query {| node(id: ID!): Node| workspaces: [Workspace!]!| }| interface Node {| id: ID!| }| type Workspace implements Node {| id: ID!| name: String!| url: String!| workspaceId: String!| description: String| }| \",| @\"| query Nodes($id: ID!) {| node(id: $id) {| __typename| id| }| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "Full_Extension_File",
        "body": "{| AssertResult(| strictValidation: false,| @\"| query getListingsCount {| listings {| ... ListingsPayload| }| }| fragment ListingsPayload on ListingsPayload{| count| }| \",| FileResource.Open(\"BridgeClientDemo.graphql\"),| @\"scalar _KeyFieldSet| directive @key(fields: _KeyFieldSet!) on SCHEMA | OBJECT| directive @serializationType(name: String!) on SCALAR| directive @runtimeType(name: String!) on SCALAR| directive @enumValue(value: String!) on ENUM_VALUE| directive @rename(name: String!) on INPUT_FIELD_DEFINITION | INPUT_OBJECT | ENUM | ENUM_VALUE| extend schema @key(fields: \"\"id\"\")\");| }"
      },
      {
        "name": "NonNullLists",
        "body": "{| AssertResult(| @\"| query getAll {| listings {| ...Offer| }| }| fragment Offer on Offer {| amenities1| amenities2| amenities3| amenities4| amenities5| amenities6| amenities7| }| \",| @\"| schema {| query: Query| mutation: null| subscription: null| }| type Query {| listings: [Listing!]!| }| interface Listing{| listingId: ID!| }| type Offer implements Listing{| listingId: ID!| amenities1: [Amenity!]!| amenities2: [Amenity!]| amenities3: [Amenity]!| amenities4: [Amenity]| amenities5: [[Amenity!]!]!| amenities6: [[Amenity!]!]| amenities7: [[Amenity!]]!| }| enum Amenity {| ITEM1| ITEM2| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      },
      {
        "name": "MultiLineDocumentation",
        "body": "{| AssertResult(| @\"query Foo {| abc| }\",| @\"type Query {| \"\"\"\"\"\"| ABC| DEF| \"\"\"\"\"\"| abc: String| }\");| }"
      },
      {
        "name": "IntrospectionQuery",
        "body": "{| AssertResult(| FileResource.Open(\"IntrospectionQuery.graphql\"),| @\"type Query {| abc: String| }\");| }"
      },
      {
        "name": "FieldsWithUnderlineInName",
        "body": "{| AssertResult(| @\"| query GetBwr_TimeSeries(| $where: bwr_TimeSeriesFilterInput| $readDataInput: ReadDataInput!| ) {| bwr_TimeSeries(where: $where) {| nodes {| ...Bwr_TimeSeries| }| }| }| fragment Bwr_TimeSeries on bwr_TimeSeries {| inventoryId: _inventoryItemId| area| source| type| name| category| specification| commodity| resolution {| timeUnit| factor| }| unit| validationCriteria {| ...Bwr_ValidationCriteria| }| importSpecification {| fromPeriod| toPeriod| }| _dataPoints(input: $readDataInput) {| timestamp| value| flag| }| }| fragment Bwr_ValidationCriteria on bwr_ValidationCriteria {| _inventoryItemId| name| completeness| lowerBound| upperBound| }| \",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"FieldsWithUnderlinePrefix.graphql\"));| }"
      },
      {
        "name": "HasuraMutation",
        "body": "{| AssertResult(| @\"| mutation insertPeople($people: [people_insert_input!]!) {| insert_people(objects: $people)| {| affected_rows| }| }| \",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"HasuraSchema.graphql\"));| }"
      },
      {
        "name": "LowerCaseScalarArgument",
        "body": "{| AssertResult(| @\"| query GetPeopleByPk($id: uuid!) {| people_by_pk(id: $id) {| id| firstName| lastName| }| }| \",| \"extend schema @key(fields: \\\"id\\\")\",| FileResource.Open(\"HasuraSchema.graphql\"));| }"
      },
      {
        "name": "EnumWithUnderscorePrefixedValues",
        "body": "{| AssertResult(| \"\"\"| schema {| query: Query| }| type Query {| field1: Enum1| }| enum Enum1 {| _a # -> \"_A\"| _a_b # -> \"_AB\"| _1 # -> \"_1\"| _1_2 # -> \"_12\"| __2 # -> \"_2\"| }| \"\"\",| \"\"\"| query GetField1 {| field1| }| \"\"\");| }"
      }
    ]
  },
  {
    "file": "StarWarsGeneratorTests.cs",
    "methods": [
      {
        "name": "Interface_With_Default_Names",
        "body": "{| AssertStarWarsResult(| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }\");| }"
      },
      {
        "name": "Operation_With_Leaf_Argument",
        "body": "{| AssertStarWarsResult(| @\"query GetHero($episode: Episode) {| hero(episode: $episode) {| name| appearsIn| }| }\");| }"
      },
      {
        "name": "Operation_With_Type_Argument",
        "body": "{| AssertStarWarsResult(| @\"mutation createReviewMut($episode: Episode!, $review: ReviewInput!) {| createReview(episode: $episode, review: $review) {| stars| commentary| }| }\");| }"
      },
      {
        "name": "Interface_With_Fragment_Definition_Two_Models",
        "body": "{| AssertStarWarsResult(| @\"query GetHero {| hero(episode: NEW_HOPE) {| ... Hero| }| }| fragment Hero on Character {| name| ... Human| ... Droid| friends {| nodes {| name| }| }| }| fragment Human on Human {| homePlanet| }| fragment Droid on Droid {| primaryFunction| }\");| }"
      },
      {
        "name": "Subscription_With_Default_Names",
        "body": "{| AssertStarWarsResult(| @\"subscription OnReviewSub {| onReview(episode: NEW_HOPE) {| stars| commentary| }| }\");| }"
      },
      {
        "name": "Generate_StarWarsIntegrationTest",
        "body": "{| AssertStarWarsResult(| FileResource.Open(\"QueryWithSubscription.graphql\"));| }"
      },
      {
        "name": "Generate_Client_With_Internal_Access_Modifier",
        "body": "{| AssertStarWarsResult(| new AssertSettings {| StrictValidation = true,| AccessModifier = AccessModifier.Internal,| },| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }\");| }"
      },
      {
        "name": "StarWarsTypeNameOnUnions",
        "body": "No body available"
      },
      {
        "name": "StarWarsUnionList",
        "body": "No body available"
      }
    ]
  },
  {
    "file": "RazorGeneratorTests.cs",
    "methods": [
      {
        "name": "Query_And_Mutation",
        "body": "{| // force assembly to load!| Assert.NotNull(typeof(UseQuery<>));| AssertResult(| settings: new() { RazorComponents = true, },| @\"query GetBars($a: String! $b: String) {| bars(a: $a b: $b) {| id| name| }| }| mutation SaveBars($a: String! $b: String) {| saveBar(a: $a b: $b) {| id| name| }| }\",| @\"type Query {| bars(a: String!, b: String): [Bar]| }| type Mutation {| saveBar(a: String!, b: String): Bar| }| type Bar {| id: String!| name: String| }\",| \"extend schema @key(fields: \\\"id\\\")\");| }"
      }
    ]
  },
  {
    "file": "DocumentAnalyzerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| schema =| SchemaHelper.Load(| new GraphQLFile[]| {| new(schema.ToDocument()),| new(Utf8GraphQLParser.Parse(| @\"extend scalar String @runtimeType(name: \"\"Abc\"\")\")),| });| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| name| }| }\");| // act| var clientModel =| await DocumentAnalyzer| .New()| .SetSchema(schema)| .AddDocument(document)| .AnalyzeAsync();| // assert| Assert.Empty(clientModel.InputObjectTypes);| Assert.Collection(| clientModel.LeafTypes,| type =>| {| Assert.Equal(\"String\", type.Name);| Assert.Equal(\"Abc\", type.RuntimeType);| });| Assert.Collection(| clientModel.Operations,| op =>| {| Assert.Equal(\"IGetHero\", op.ResultType.Name);| Assert.Collection(| op.GetImplementations(op.ResultType),| model => Assert.Equal(\"GetHero\", model.Name));| var fieldResultType = op.GetFieldResultType(| op.ResultType.Fields.Single().SyntaxNode);| Assert.Equal(\"IGetHero_Hero\", fieldResultType.Name);| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| schema =| SchemaHelper.Load(| new GraphQLFile[]| {| new(schema.ToDocument()),| new(Utf8GraphQLParser.Parse(| @\"extend scalar String @runtimeType(name: \"\"Abc\"\")\")),| new(Utf8GraphQLParser.Parse(| \"extend schema @key(fields: \\\"id\\\")\")),| });| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| ... HeroName| ... HeroAppearsIn @defer(label: \"\"HeroAppearsIn\"\")| }| }| fragment HeroName on Character {| name| }| fragment HeroAppearsIn on Character {| appearsIn| }\");| // act| var clientModel =| await DocumentAnalyzer| .New()| .SetSchema(schema)| .AddDocument(document)| .AnalyzeAsync();| // assert| var human = clientModel.OutputTypes.First(t => t.Name.EqualsOrdinal(\"GetHero_Hero_Human\"));| Assert.Single(human.Fields);| Assert.True(| human.Deferred.ContainsKey(\"HeroAppearsIn\"),| \"Human does not contain deferred model `HeroAppearsIn`.\");| Assert.Collection(| human.Deferred[\"HeroAppearsIn\"].Class.Fields,| field => Assert.Equal(\"AppearsIn\", field.Name));| }"
      }
    ]
  },
  {
    "file": "FieldCollectorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| {| hero(episode: NEW_HOPE) {| name| ... on Droid {| primaryFunction| }| }| }\");| var operation = document| .Definitions| .OfType<OperationDefinitionNode>()| .First();| // act| var selectionSetVariants =| new FieldCollector(schema, document)| .CollectFields(operation.SelectionSet, schema.QueryType, Path.Root);| // assert| Assert.Collection(| selectionSetVariants.ReturnType.Fields,| field => Assert.Equal(\"hero\", field.ResponseName));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var character = schema.GetType<InterfaceType>(\"Character\");| var document =| Utf8GraphQLParser.Parse(@\"| {| hero(episode: NEW_HOPE) {| name| ... on Droid {| primaryFunction| }| }| }\");| var operation = document| .Definitions| .OfType<OperationDefinitionNode>()| .First();| var secondLevel = operation| .SelectionSet| .Selections| .OfType<FieldNode>()| .First();| // act| var selectionSetVariants =| new FieldCollector(schema, document)| .CollectFields(| secondLevel.SelectionSet!,| character,| Path.Root.Append(\"hero\"));| // assert| Assert.Collection(| selectionSetVariants.ReturnType.Fields,| field => Assert.Equal(\"name\", field.ResponseName));| Assert.Equal(\"Character\", selectionSetVariants.ReturnType.Type.Name);| Assert.Equal(\"Human\", selectionSetVariants.Variants[0].Type.Name);| Assert.Equal(\"Droid\", selectionSetVariants.Variants[1].Type.Name);| Assert.Collection(| selectionSetVariants.Variants[1].FragmentNodes,| fragmentNode => Assert.Equal(FragmentKind.Inline, fragmentNode.Fragment.Kind));| }"
      }
    ]
  },
  {
    "file": "FragmentHelperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) @returns(fragment: \"\"Hero\"\") {| ... Characters| }| }| fragment Characters on Character {| ... Human| ... Droid| }| fragment Hero on Character {| name| }| fragment Human on Human {| ... Hero| homePlanet| }| fragment Droid on Droid {| ... Hero| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| // act| var returnTypeFragmentName = FragmentHelper.GetReturnTypeName(fieldSelection);| // assert| Assert.Equal(\"Hero\", returnTypeFragmentName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| ... Characters| }| }| fragment Characters on Character {| ... Human| ... Droid| }| fragment Hero on Character {| name| }| fragment Human on Human {| ... Hero| homePlanet| }| fragment Droid on Droid {| ... Hero| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| // act| var returnTypeFragmentName = FragmentHelper.GetReturnTypeName(fieldSelection);| // assert| Assert.Null(returnTypeFragmentName);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) @returns(fragment: \"\"Hero\"\") {| ... Characters| }| }| fragment Characters on Character @remove {| ... Human| ... Droid| }| fragment Hero on Character {| name| }| fragment Human on Human {| ... Hero| homePlanet| }| fragment Droid on Droid {| ... Hero| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var returnTypeFragmentName = FragmentHelper.GetReturnTypeName(fieldSelection);| var returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSetVariants.Variants[0],| fieldSelection.Path,| appendTypeName: true);| returnTypeFragment = FragmentHelper.GetFragment(| returnTypeFragment,| returnTypeFragmentName!);| // assert| Assert.NotNull(returnTypeFragment);| Assert.Equal(\"Hero\", returnTypeFragment?.Fragment.Name);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| name| }| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var list = new List<OutputTypeModel>();| var returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSetVariants.ReturnType,| fieldSelection.Path);| list.Add(FragmentHelper.CreateInterface(| context,| returnTypeFragment,| fieldSelection.Path));| foreach (var selectionSet in| selectionSetVariants.Variants.OrderBy(t => t.Type.Name))| {| returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSet,| fieldSelection.Path,| appendTypeName: true);| var @interface = FragmentHelper.CreateInterface(| context,| returnTypeFragment,| fieldSelection.Path,| new []{ list[0], });| var @class = FragmentHelper.CreateClass(| context,| returnTypeFragment,| selectionSet,| @interface);| list.Add(@interface);| list.Add(@class);| }| // assert| Assert.Collection(| list,| type =>| {| Assert.Equal(\"IGetHero_Hero\", type.Name);| Assert.Empty(type.Implements);| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name));| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Droid\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name));| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Human\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name));| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| ... Hero| }| }| fragment Hero on Character {| name| ... Human| ... Droid| }| fragment Human on Human {| homePlanet| }| fragment Droid on Droid {| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var list = new List<OutputTypeModel>();| var returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSetVariants.ReturnType,| fieldSelection.Path);| list.Add(FragmentHelper.CreateInterface(| context,| returnTypeFragment,| fieldSelection.Path));| foreach (var selectionSet in| selectionSetVariants.Variants.OrderBy(t => t.Type.Name))| {| returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSet,| fieldSelection.Path,| appendTypeName: true);| var @interface = FragmentHelper.CreateInterface(| context,| returnTypeFragment,| fieldSelection.Path,| new []{ list[0], });| var @class = FragmentHelper.CreateClass(| context,| returnTypeFragment,| selectionSet,| @interface);| list.Add(@interface);| list.Add(@class);| }| // assert| Assert.Collection(| list,| type =>| {| Assert.Equal(\"IGetHero_Hero\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IHero\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero\", impl.Name),| impl => Assert.Equal(\"IDroid\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Droid\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name),| field => Assert.Equal(\"PrimaryFunction\", field.Name));| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero\", impl.Name),| impl => Assert.Equal(\"IHuman\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Human\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name),| field => Assert.Equal(\"HomePlanet\", field.Name));| });| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) @returns(fragment: \"\"Hero\"\") {| ... Characters| }| }| fragment Characters on Character {| ... Human| ... Droid| }| fragment Hero on Character {| name| }| fragment Human on Human {| ... Hero| homePlanet| }| fragment Droid on Droid {| ... Hero| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var list = new List<OutputTypeModel>();| var returnTypeFragmentName = FragmentHelper.GetReturnTypeName(fieldSelection);| var returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSetVariants.Variants[0],| fieldSelection.Path,| appendTypeName: true);| returnTypeFragment = FragmentHelper.GetFragment(| returnTypeFragment,| returnTypeFragmentName!);| list.Add(FragmentHelper.CreateInterface(| context,| returnTypeFragment!,| fieldSelection.Path));| foreach (var selectionSet in| selectionSetVariants.Variants.OrderBy(t => t.Type.Name))| {| returnTypeFragment = FragmentHelper.CreateFragmentNode(| selectionSet,| fieldSelection.Path,| appendTypeName: true);| returnTypeFragment = FragmentHelper.RewriteForConcreteType(returnTypeFragment);| var @interface = FragmentHelper.CreateInterface(| context,| returnTypeFragment,| fieldSelection.Path,| new []{ list[0], });| var @class = FragmentHelper.CreateClass(| context,| returnTypeFragment,| selectionSet,| @interface);| list.Add(@interface);| list.Add(@class);| }| // assert| Assert.Collection(| list,| type =>| {| Assert.Equal(\"IHero\", type.Name);| Assert.Empty(type.Implements);| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name));| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"ICharacters_Droid\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Droid\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Droid\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name),| field => Assert.Equal(\"PrimaryFunction\", field.Name));| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"ICharacters_Human\", impl.Name));| Assert.Empty(type.Fields);| },| type =>| {| Assert.Equal(\"GetHero_Hero_Human\", type.Name);| Assert.Collection(| type.Implements,| impl => Assert.Equal(\"IGetHero_Hero_Human\", impl.Name));| Assert.Collection(| type.Fields,| field => Assert.Equal(\"Name\", field.Name),| field => Assert.Equal(\"HomePlanet\", field.Name));| });| }"
      }
    ]
  },
  {
    "file": "InterfaceTypeSelectionSetAnalyzerTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| name| }| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var analyzer = new InterfaceTypeSelectionSetAnalyzer();| var result = analyzer.Analyze(context, fieldSelection, selectionSetVariants);| // assert| Assert.Equal(\"IGetHero_Hero\", result.Name);| Assert.Collection(| context.GetImplementations(result).OrderBy(m => m.Name),| model => Assert.Equal(\"IGetHero_Hero_Droid\", model.Name),| model => Assert.Equal(\"IGetHero_Hero_Human\", model.Name));| Assert.Collection(| result.Fields,| field => Assert.Equal(\"Name\", field.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| name| ... on Droid {| primaryFunction| }| }| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var analyzer = new InterfaceTypeSelectionSetAnalyzer();| var result = analyzer.Analyze(context, fieldSelection, selectionSetVariants);| // assert| Assert.Equal(\"IGetHero_Hero\", result.Name);| Assert.Collection(| context.GetImplementations(result),| model => Assert.Equal(\"IGetHero_Hero_Human\", model.Name),| model => Assert.Equal(\"IGetHero_Hero_Droid\", model.Name));| Assert.Collection(| result.Fields,| field => Assert.Equal(\"Name\", field.Name));| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| ... Hero| }| }| fragment Hero on Character {| name| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var analyzer = new InterfaceTypeSelectionSetAnalyzer();| var result = analyzer.Analyze(context, fieldSelection, selectionSetVariants);| // assert| Assert.Equal(\"IGetHero_Hero\", result.Name);| Assert.Collection(| context.GetImplementations(result).OrderBy(t => t.Name),| model => Assert.Equal(\"IGetHero_Hero_Droid\", model.Name),| model => Assert.Equal(\"IGetHero_Hero_Human\", model.Name));| Assert.Empty(result.Fields);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) {| ... Hero| }| }| fragment Hero on Character {| name| ... Human| ... Droid| }| fragment Human on Human {| homePlanet| }| fragment Droid on Droid {| primaryFunction| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var analyzer = new InterfaceTypeSelectionSetAnalyzer();| var result = analyzer.Analyze(context, fieldSelection, selectionSetVariants);| // assert| Assert.Equal(\"IGetHero_Hero\", result.Name);| Assert.Collection(| context.GetImplementations(result),| model => Assert.Equal(\"IGetHero_Hero_Human\", model.Name),| model => Assert.Equal(\"IGetHero_Hero_Droid\", model.Name));| Assert.Empty(result.Fields);| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| search(text: \"\"hello\"\") {| ... Hero| ... Starship| }| }| fragment Hero on Character {| name| ... Human| ... Droid| }| fragment Human on Human {| homePlanet| }| fragment Droid on Droid {| primaryFunction| }| fragment Starship on Starship {| length| }\");| var context = new DocumentAnalyzerContext(schema, document);| var selectionSetVariants = context.CollectFields();| var fieldSelection = selectionSetVariants.ReturnType.Fields.First();| selectionSetVariants = context.CollectFields(fieldSelection);| // act| var analyzer = new InterfaceTypeSelectionSetAnalyzer();| var result = analyzer.Analyze(context, fieldSelection, selectionSetVariants);| // assert| Assert.Equal(\"IGetHero_Search\", result.Name);| Assert.Collection(| context.GetImplementations(result),| model => Assert.Equal(\"IGetHero_Search_Starship\", model.Name),| model => Assert.Equal(\"IGetHero_Search_Human\", model.Name),| model => Assert.Equal(\"IGetHero_Search_Droid\", model.Name));| Assert.Empty(result.Fields);| }"
      }
    ]
  },
  {
    "file": "ClientDescriptorMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }| mutation CreateReview {| createReview(episode: NEW_HOPE, review: {stars: 5, commentary: \"\"splendid\"\"}) {| stars| commentary| }| }| subscription OnReview {| onReview(episode: NEW_HOPE) {| stars| commentary| }| }\");| // act| var clientName = \"FooClient\";| var context = new MapperContext(| \"Foo.Bar\",| clientName,| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(clientModel, context);| OperationDescriptorMapper.Map(clientModel, context);| ClientDescriptorMapper.Map(context);| // assert| Assert.Equal(clientName, context.Client.Name);| Assert.Equal(3, context.Client.Operations.Count);| }"
      }
    ]
  },
  {
    "file": "DataTypeMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"query GetHeroNodes {| hero(episode: NEW_HOPE) {| friends {| nodes {| name| }| }| }| }| query GetHeroEdges {| hero(episode: NEW_HOPE) {| friends {| edges {| cursor| }| }| }| }\");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(| clientModel,| context);| DataTypeDescriptorMapper.Map(| clientModel,| context);| // assert| Assert.Collection(| context.DataTypes.OrderBy(t => t.RuntimeType.ToString()),| type =>| {| Assert.Equal(| \"FriendsConnectionData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(| \"Nodes\",| property.Name);| Assert.Equal(| \"IGetHeroNodes_Hero_Friends_Nodes\",| property.Type.GetRuntimeType().Name);| },| property =>| {| Assert.Equal(| \"Edges\",| property.Name);| Assert.Equal(| \"IGetHeroEdges_Hero_Friends_Edges\",| property.Type.GetRuntimeType().Name);| });| },| type =>| {| Assert.Equal(| \"FriendsEdgeData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(| \"Cursor\",| property.Name);| Assert.Equal(| \"String\",| property.Type.GetRuntimeType().Name);| });| });| }"
      },
      {
        "name": "MapDataTypeDescriptors_DataUnionType",
        "body": "{| // arrange| var clientModel =| CreateClientModelAsync(\"union.query3.graphql\", \"union.schema.graphql\");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(| clientModel,| context);| EntityTypeDescriptorMapper.Map(| clientModel,| context);| DataTypeDescriptorMapper.Map(| clientModel,| context);| // assert| Assert.Collection(| context.DataTypes.OrderBy(t => t.RuntimeType.ToString()),| type =>| {| Assert.Equal(| \"AuthorData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties.OrderBy(p => p.Name),| property =>| {| Assert.Equal(| \"Genres\",| property.Name);| },| property =>| {| Assert.Equal(| \"Name\",| property.Name);| });| },| type =>| {| Assert.Equal(| \"BookData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties.OrderBy(p => p.Name),| property =>| {| Assert.Equal(| \"Isbn\",| property.Name);| },| property =>| {| Assert.Equal(| \"Title\",| property.Name);| });| },| type =>| {| Assert.Equal(| \"ISearchResultData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Empty(type.Properties);| });| }"
      },
      {
        "name": "MapDataTypeDescriptors_DataInterfaceType",
        "body": "{| // arrange| var clientModel = CreateClientModelAsync(| \"interface.query.graphql\",| \"interface.schema.graphql\");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(| clientModel,| context);| EntityTypeDescriptorMapper.Map(| clientModel,| context);| DataTypeDescriptorMapper.Map(| clientModel,| context);| // assert| Assert.Collection(| context.DataTypes.OrderBy(t => t.RuntimeType.ToString()),| type =>| {| Assert.Equal(| \"BookData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties.OrderBy(p => p.Name),| property =>| {| Assert.Equal(| \"Isbn\",| property.Name);| },| property =>| {| Assert.Equal(| \"Title\",| property.Name);| });| },| type =>| {| Assert.Equal(| \"IPrintData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Empty(type.Properties);| },| type =>| {| Assert.Equal(| \"ISearchResultData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Empty(type.Properties);| },| type =>| {| Assert.Equal(| \"MagazineData\",| type.RuntimeType.Name);| Assert.Equal(| \"Foo.Bar.State\",| type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties.OrderBy(p => p.Name),| property =>| {| Assert.Equal(| \"CoverImageUrl\",| property.Name);| },| property =>| {| Assert.Equal(| \"Isbn\",| property.Name);| });| });| }"
      }
    ]
  },
  {
    "file": "EnumDescriptorMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }\");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(clientModel, context);| // assert| Assert.Collection(| context.Types.OfType<EnumTypeDescriptor>().OrderBy(t => t.Name),| enumType =>| {| Assert.Equal(\"Episode\", enumType.Name);| Assert.Collection(| enumType.Values.OrderBy(t => t.RuntimeValue),| value =>| {| Assert.Equal(\"Empire\", value.RuntimeValue);| Assert.Null(value.Value);| },| value =>| {| Assert.Equal(\"Jedi\", value.RuntimeValue);| Assert.Null(value.Value);| },| value =>| {| Assert.Equal(\"NewHope\", value.RuntimeValue);| Assert.Null(value.Value);| });| });| }"
      }
    ]
  },
  {
    "file": "OperationDescriptorMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"| query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }| mutation CreateReview {| createReview(episode: NEW_HOPE, review: {stars: 5, commentary: \"\"splendid\"\"}) {| stars| commentary| }| }| subscription OnReview {| onReview(episode: NEW_HOPE) {| stars| commentary| }| }| \");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(clientModel, context);| OperationDescriptorMapper.Map(clientModel, context);| // assert| Assert.Collection(| context.Operations.OrderBy(t => t.Name),| operation =>| {| Assert.Equal(\"CreateReview\", operation.Name);| },| operation =>| {| Assert.Equal(\"GetHero\", operation.Name);| },| operation =>| {| Assert.Equal(\"OnReview\", operation.Name);| });| }"
      }
    ]
  },
  {
    "file": "ResultBuilderDescriptorMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"| query GetHero {| hero(episode: NEW_HOPE) {| name| appearsIn| }| }| mutation CreateReview {| createReview(episode: NEW_HOPE, review: {stars: 5, commentary: \"\"splendid\"\"}) {| stars| commentary| }| }| subscription OnReview {| onReview(episode: NEW_HOPE) {| stars| commentary| }| }| \");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(clientModel, context);| ResultBuilderDescriptorMapper.Map(clientModel, context);| // assert| Assert.Collection(| context.ResultBuilders.OrderBy(t => t.RuntimeType.ToString()),| resultBuilder =>| {| Assert.Equal(\"CreateReviewBuilder\", resultBuilder.RuntimeType.Name);| },| resultBuilder =>| {| Assert.Equal(\"GetHeroBuilder\", resultBuilder.RuntimeType.Name);| },| resultBuilder =>| {| Assert.Equal(\"OnReviewBuilder\", resultBuilder.RuntimeType.Name);| });| }"
      }
    ]
  },
  {
    "file": "TypeDescriptorMapperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var clientModel = await CreateClientModelAsync(| @\"query GetHero {| hero(episode: NEW_HOPE) {| name| }| }\");| // act| var context = new MapperContext(| \"Foo.Bar\",| \"FooClient\",| new Sha1DocumentHashProvider(),| RequestStrategyGen.Default,| new[]| {| TransportProfile.Default,| });| TypeDescriptorMapper.Map(clientModel, context);| // assert| Assert.Collection(| context.Types.OfType<ComplexTypeDescriptor>().OrderBy(t => t.Name),| type =>| {| Assert.Equal(\"IGetHero_Hero\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.True(type.IsEntity());| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(\"Name\", property.Name);| Assert.Equal(\"String\", property.Type.Name);| Assert.False(property.Type.IsNullable());| });| },| type =>| {| Assert.Equal(\"GetHero_Hero_Droid\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(\"Name\", property.Name);| Assert.Equal(\"String\", property.Type.Name);| Assert.False(property.Type.IsNullable());| });| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Droid\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.True(type.IsEntity());| },| type =>| {| Assert.Equal(\"GetHero_Hero_Human\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(\"Name\", property.Name);| Assert.Equal(\"String\", property.Type.Name);| Assert.False(property.Type.IsNullable());| });| },| type =>| {| Assert.Equal(\"IGetHero_Hero_Human\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.True(type.IsEntity());| },| type =>| {| Assert.Equal(\"GetHeroResult\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(\"Hero\", property.Name);| Assert.Equal(\"IGetHero_Hero\",| Assert.IsType<InterfaceTypeDescriptor>(property.Type)| .RuntimeType.Name);| Assert.True(property.Type.IsNullable());| });| },| type =>| {| Assert.Equal(\"IGetHeroResult\", type.RuntimeType.Name);| Assert.Equal(\"Foo.Bar\", type.RuntimeType.NamespaceWithoutGlobal);| Assert.Collection(| type.Properties,| property =>| {| Assert.Equal(\"Hero\", property.Name);| Assert.Equal(\"IGetHero_Hero\",| Assert.IsType<InterfaceTypeDescriptor>(property.Type)| .RuntimeType.Name);| Assert.True(property.Type.IsNullable());| });| });| }"
      }
    ]
  },
  {
    "file": "OperationDocumentHelperTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var query = Parse(Open(\"simple.query1.graphql\"));| List<DocumentNode> queries = [query,];| // act| var operations = await CreateOperationDocumentsAsync(queries);| // assert| Assert.Collection(| operations.Operations,| t => Assert.Equal(\"GetBookTitles\", t.Key),| t => Assert.Equal(\"GetBooksAndAuthor\", t.Key));| operations.Operations.Select(t => t.Value.ToString()).ToArray().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query1 = Parse(Open(\"simple.query1.graphql\"));| var query2 = Parse(Open(\"simple.query2.graphql\"));| List<DocumentNode> queries = [query1, query2,];| // act| var operations = await CreateOperationDocumentsAsync(queries);| // assert| Assert.Collection(| operations.Operations,| t => Assert.Equal(\"GetBookTitles\", t.Key),| t => Assert.Equal(\"GetBooksAndAuthor\", t.Key),| t => Assert.Equal(\"GetAuthorsAndBooks\", t.Key));| operations.Operations.Select(t => t.Value.ToString()).ToArray().MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| DocumentNode query = new(new List<IDefinitionNode>());| List<DocumentNode> queries = [query,];| // act| async Task Error() => await CreateOperationDocumentsAsync(queries);| // assert| var error = await Assert.ThrowsAsync<ArgumentException>(Error);| error.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query1 = Parse(Open(\"simple.query2.graphql\"));| var query2 = Parse(Open(\"simple.query2.graphql\"));| List<DocumentNode> queries = [query1, query2,];| // act| async Task Error() => await CreateOperationDocumentsAsync(queries);| // assert| var error = await Assert.ThrowsAsync<CodeGeneratorException>(Error);| error.Message.MatchSnapshot();| }"
      },
      {
        "name": "Task",
        "body": "{| // arrange| var query1 = Parse(Open(\"simple.query1.graphql\"));| var query2 = query1.WithDefinitions(query1.Definitions.Skip(2).ToArray());| List<DocumentNode> queries = [query1, query2,];| // act| async Task Error() => await CreateOperationDocumentsAsync(queries);| // assert| var error = await Assert.ThrowsAsync<CodeGeneratorException>(Error);| error.Message.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "QueryDocumentRewriterTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // arrange| var schema =| await new ServiceCollection()| .AddStarWarsRepositories()| .AddGraphQL()| .AddStarWars()| .BuildSchemaAsync();| schema =| SchemaHelper.Load(| new GraphQLFile[]| {| new(schema.ToDocument()),| new(Utf8GraphQLParser.Parse(\"extend schema @key(fields: \\\"id\\\")\")),| });| var document =| Utf8GraphQLParser.Parse(@\"| query GetHero {| hero(episode: NEW_HOPE) @returns(fragment: \"\"Hero\"\") {| ... Characters| }| }| fragment Characters on Character {| ... Human| ... Droid| }| fragment Hero on Character {| name| }| fragment Human on Human {| ... Hero| homePlanet| }| fragment Droid on Droid {| ... Hero| primaryFunction| }\");| // act| document = QueryDocumentRewriter.Rewrite(document, schema);| // assert| document.Print().MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "SchemaHelperTests.cs",
    "methods": [
      {
        "name": "LoadGitHubSchema",
        "body": "{| // arrange| var schemaSdl = FileResource.Open(\"GitHub.graphql\");| var extensionsSdl = @\"extend schema @key(fields: \"\"id\"\")\";| // act| var schema =| SchemaHelper.Load(| new GraphQLFile[]| {| new(\"GitHub.graphql\", Utf8GraphQLParser.Parse(schemaSdl)),| new(\"GitHub.extensions.graphql\", Utf8GraphQLParser.Parse(extensionsSdl)),| });| // assert| var scalarType = schema.GetType<ScalarType>(\"X509Certificate\");| Assert.Equal(| \"global::System.String\",| scalarType.ContextData[\"StrawberryShake.SerializationType\"]);| Assert.Equal(| \"global::System.String\",| scalarType.ContextData[\"StrawberryShake.RuntimeType\"]);| }"
      }
    ]
  },
  {
    "file": "FileContentsTests.cs",
    "methods": [
      {
        "name": "Ensure_Extensions_Are_Correct",
        "body": "{| FileContents.SchemaExtensionFileContent.MatchSnapshot();| }"
      }
    ]
  },
  {
    "file": "GraphQLConfigTests.cs",
    "methods": [
      {
        "name": "Save_Default_Config",
        "body": "{| new GraphQLConfig()| .ToString()| .MatchSnapshot();| }"
      },
      {
        "name": "Load_Json_Is_Null",
        "body": "No body available"
      },
      {
        "name": "Load_Json",
        "body": "{| GraphQLConfig.FromJson(@\"{| \"\"schema\"\": \"\"schema.graphql\"\",| \"\"documents\"\": \"\"**/*.graphql\"\",| \"\"extensions\"\": {| \"\"strawberryShake\"\": {| \"\"name\"\": \"\"Client\"\",| \"\"accessModifier\"\": \"\"public\"\",| \"\"dependencyInjection\"\": true,| \"\"strictSchemaValidation\"\": true,| \"\"hashAlgorithm\"\": \"\"md5\"\",| \"\"useSingleFile\"\": true,| \"\"requestStrategy\"\": \"\"Default\"\",| \"\"outputDirectoryName\"\": \"\"Generated\"\",| \"\"noStore\"\": false,| \"\"emitGeneratedCode\"\": true,| \"\"records\"\": {| \"\"inputs\"\": false,| \"\"entities\"\": false| },| \"\"transportProfiles\"\": [| {| \"\"default\"\": \"\"Http\"\",| \"\"subscription\"\": \"\"WebSocket\"\"| }]| }| }| }| \").MatchSnapshot();| }"
      },
      {
        "name": "Load_Json_With_Transport_Profiles",
        "body": "{| GraphQLConfig.FromJson(@\"{| \"\"schema\"\": \"\"schema.graphql\"\",| \"\"documents\"\": \"\"**/*.graphql\"\",| \"\"extensions\"\": {| \"\"strawberryShake\"\": {| \"\"name\"\": \"\"Client\"\",| \"\"accessModifier\"\": \"\"public\"\",| \"\"dependencyInjection\"\": true,| \"\"strictSchemaValidation\"\": true,| \"\"hashAlgorithm\"\": \"\"md5\"\",| \"\"useSingleFile\"\": true,| \"\"requestStrategy\"\": \"\"Default\"\",| \"\"outputDirectoryName\"\": \"\"Generated\"\",| \"\"noStore\"\": false,| \"\"emitGeneratedCode\"\": true,| \"\"records\"\": {| \"\"inputs\"\": false,| \"\"entities\"\": false| },| \"\"transportProfiles\"\": [| {| \"\"default\"\": \"\"Http\"\",| },| {| \"\"default\"\": \"\"WebSocket\"\"| }]| }| }| }| \").MatchSnapshot();| }"
      },
      {
        "name": "Load_Json_With_Records",
        "body": "{| GraphQLConfig.FromJson(@\"{| \"\"schema\"\": \"\"schema.graphql\"\",| \"\"documents\"\": \"\"**/*.graphql\"\",| \"\"extensions\"\": {| \"\"strawberryShake\"\": {| \"\"name\"\": \"\"Client\"\",| \"\"accessModifier\"\": \"\"public\"\",| \"\"dependencyInjection\"\": true,| \"\"strictSchemaValidation\"\": true,| \"\"hashAlgorithm\"\": \"\"md5\"\",| \"\"useSingleFile\"\": true,| \"\"requestStrategy\"\": \"\"Default\"\",| \"\"outputDirectoryName\"\": \"\"Generated\"\",| \"\"noStore\"\": false,| \"\"emitGeneratedCode\"\": true,| \"\"records\"\": {| \"\"inputs\"\": true,| \"\"entities\"\": true| },| \"\"transportProfiles\"\": [| {| \"\"default\"\": \"\"Http\"\",| \"\"subscription\"\": \"\"WebSocket\"\"| }]| }| }| }| \").MatchSnapshot();| }"
      },
      {
        "name": "Load_Json_With_Documents_Array",
        "body": "{| GraphQLConfig.FromJson(@\"{| \"\"schema\"\": \"\"schema.graphql\"\",| \"\"documents\"\": [\"\"**/*.graphql\"\", \"\"**/*.graphqls\"\"],| \"\"extensions\"\": {| \"\"strawberryShake\"\": {| \"\"name\"\": \"\"Client\"\",| \"\"accessModifier\"\": \"\"public\"\",| \"\"dependencyInjection\"\": true,| \"\"strictSchemaValidation\"\": true,| \"\"hashAlgorithm\"\": \"\"md5\"\",| \"\"useSingleFile\"\": true,| \"\"requestStrategy\"\": \"\"Default\"\",| \"\"outputDirectoryName\"\": \"\"Generated\"\",| \"\"noStore\"\": false,| \"\"emitGeneratedCode\"\": true,| \"\"records\"\": {| \"\"inputs\"\": true,| \"\"entities\"\": true| },| \"\"transportProfiles\"\": [| {| \"\"default\"\": \"\"Http\"\",| \"\"subscription\"\": \"\"WebSocket\"\"| }]| }| }| }| \").MatchSnapshot();| }"
      }
    ]
  }
]