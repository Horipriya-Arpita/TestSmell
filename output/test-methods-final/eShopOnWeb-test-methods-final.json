[
  {
    "file": "CheckoutTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| // Add Item to Cart| var keyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"id\", \"2\"),| new KeyValuePair<string, string>(\"name\", \"shirt\"),| new KeyValuePair<string, string>(\"price\", \"19.49\"),| new KeyValuePair<string, string>(WebPageHelpers.TokenTag, WebPageHelpers.GetRequestVerificationToken(stringResponse))| };| var formContent = new FormUrlEncodedContent(keyValues);| var postResponse = await Client.PostAsync(\"/basket/index\", formContent);| postResponse.EnsureSuccessStatusCode();| var stringPostResponse = await postResponse.Content.ReadAsStringAsync();| Assert.Contains(\".NET Black &amp; White Mug\", stringPostResponse);| //Load login page| var loginResponse = await Client.GetAsync(\"/Identity/Account/Login\");| var longinKeyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"email\", \"demouser@microsoft.com\"),| new KeyValuePair<string, string>(\"password\", \"Pass@word1\"),| new KeyValuePair<string, string>(WebPageHelpers.TokenTag, WebPageHelpers.GetRequestVerificationToken(await loginResponse.Content.ReadAsStringAsync()))| };| var loginFormContent = new FormUrlEncodedContent(longinKeyValues);| var loginPostResponse = await Client.PostAsync(\"/Identity/Account/Login?ReturnUrl=%2FBasket%2FCheckout\", loginFormContent);| var loginStringResponse = await loginPostResponse.Content.ReadAsStringAsync();| //Basket checkout (Pay now)| var checkOutKeyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"Items[0].Id\", \"2\"),| new KeyValuePair<string, string>(\"Items[0].Quantity\", \"1\"),| new KeyValuePair<string, string>(WebPageHelpers.TokenTag, WebPageHelpers.GetRequestVerificationToken(loginStringResponse))| };| var checkOutContent = new FormUrlEncodedContent(checkOutKeyValues); | var checkOutResponse = await Client.PostAsync(\"/basket/checkout\", checkOutContent);| var stringCheckOutResponse = await checkOutResponse.Content.ReadAsStringAsync();| Assert.Contains(\"/Basket/Success\", checkOutResponse.RequestMessage!.RequestUri!.ToString());| Assert.Contains(\"Thanks for your Order!\", stringCheckOutResponse);| }"
      }
    ]
  },
  {
    "file": "IndexTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse1 = await response.Content.ReadAsStringAsync();| string token = WebPageHelpers.GetRequestVerificationToken(stringResponse1);| // Add Item to Cart| var keyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"id\", \"2\"),| new KeyValuePair<string, string>(\"name\", \"shirt\"),| new KeyValuePair<string, string>(\"__RequestVerificationToken\", token)| };| var formContent = new FormUrlEncodedContent(keyValues);| var postResponse = await Client.PostAsync(\"/basket/index\", formContent);| postResponse.EnsureSuccessStatusCode();| var stringResponse = await postResponse.Content.ReadAsStringAsync();| Assert.Contains(\".NET Black &amp; White Mug\", stringResponse);| //Update| var updateKeyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"Items[0].Id\", WebPageHelpers.GetId(stringResponse)),| new KeyValuePair<string, string>(\"Items[0].Quantity\", \"49\"),| new KeyValuePair<string, string>(WebPageHelpers.TokenTag, WebPageHelpers.GetRequestVerificationToken(stringResponse))| };| var updateContent = new FormUrlEncodedContent(updateKeyValues);| var updateResponse = await Client.PostAsync(\"/basket/update\", updateContent);| var stringUpdateResponse = await updateResponse.Content.ReadAsStringAsync();| Assert.Contains(\"/basket/update\", updateResponse!.RequestMessage!.RequestUri!.ToString()!);| decimal expectedTotalAmount = 416.50M;| Assert.Contains(expectedTotalAmount.ToString(\"N2\"), stringUpdateResponse);| }"
      },
      {
        "name": "Task",
        "body": "{| // Load Home Page| var response = await Client.GetAsync(\"/\");| response.EnsureSuccessStatusCode();| var stringResponse1 = await response.Content.ReadAsStringAsync();| string token = WebPageHelpers.GetRequestVerificationToken(stringResponse1);| // Add Item to Cart| var keyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"id\", \"2\"),| new KeyValuePair<string, string>(\"name\", \"shirt\"),| new KeyValuePair<string, string>(\"__RequestVerificationToken\", token)| };| var formContent = new FormUrlEncodedContent(keyValues);| var postResponse = await Client.PostAsync(\"/basket/index\", formContent);| postResponse.EnsureSuccessStatusCode();| var stringResponse = await postResponse.Content.ReadAsStringAsync();| Assert.Contains(\".NET Black &amp; White Mug\", stringResponse);| //Update| var updateKeyValues = new List<KeyValuePair<string, string>>| {| new KeyValuePair<string, string>(\"Items[0].Id\", WebPageHelpers.GetId(stringResponse)),| new KeyValuePair<string, string>(\"Items[0].Quantity\", \"0\"),| new KeyValuePair<string, string>(WebPageHelpers.TokenTag, WebPageHelpers.GetRequestVerificationToken(stringResponse))| };| var updateContent = new FormUrlEncodedContent(updateKeyValues);| var updateResponse = await Client.PostAsync(\"/basket/update\", updateContent);| var stringUpdateResponse = await updateResponse.Content.ReadAsStringAsync();| Assert.Contains(\"/basket/update\", updateResponse!.RequestMessage!.RequestUri!.ToString()!);| Assert.Contains(\"Basket is empty\", stringUpdateResponse);| }"
      }
    ]
  },
  {
    "file": "AuthenticateEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new AuthenticateRequest()| {| Username = testUsername,| Password = testPassword| };| var jsonContent = new StringContent(JsonSerializer.Serialize(request), Encoding.UTF8, \"application/json\");| var response = await ProgramTest.NewClient.PostAsync(\"api/authenticate\", jsonContent);| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<AuthenticateResponse>();| Assert.AreEqual(expectedResult, model!.Result);| }"
      }
    ]
  },
  {
    "file": "CatalogItemGetByIdEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await ProgramTest.NewClient.GetAsync(\"api/catalog-items/5\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<GetByIdCatalogItemResponse>();| Assert.AreEqual(5, model!.CatalogItem.Id);| Assert.AreEqual(\"Roslyn Red Sheet\", model.CatalogItem.Name);| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await ProgramTest.NewClient.GetAsync(\"api/catalog-items/0\");| Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);| }"
      }
    ]
  },
  {
    "file": "CreateCatalogItemEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var jsonContent = GetValidNewItemJson();| var token = ApiTokenHelper.GetNormalUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", token);| var response = await client.PostAsync(\"api/catalog-items\", jsonContent);| Assert.AreEqual(HttpStatusCode.Forbidden, response.StatusCode);| }"
      },
      {
        "name": "Task",
        "body": "{| var jsonContent = GetValidNewItemJson();| var adminToken = ApiTokenHelper.GetAdminUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);| var response = await client.PostAsync(\"api/catalog-items\", jsonContent);| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<CreateCatalogItemResponse>();| Assert.AreEqual(_testBrandId, model!.CatalogItem.CatalogBrandId);| Assert.AreEqual(_testTypeId, model.CatalogItem.CatalogTypeId);| Assert.AreEqual(_testDescription, model.CatalogItem.Description);| Assert.AreEqual(_testName, model.CatalogItem.Name);| Assert.AreEqual(_testPrice, model.CatalogItem.Price);| }"
      }
    ]
  },
  {
    "file": "DeleteCatalogItemEndpointTest.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var adminToken = ApiTokenHelper.GetAdminUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);| var response = await client.DeleteAsync(\"api/catalog-items/12\");| response.EnsureSuccessStatusCode();| var stringResponse = await response.Content.ReadAsStringAsync();| var model = stringResponse.FromJson<DeleteCatalogItemResponse>();| Assert.AreEqual(\"Deleted\", model!.Status);| }"
      },
      {
        "name": "Task",
        "body": "{| var adminToken = ApiTokenHelper.GetAdminUserToken();| var client = ProgramTest.NewClient;| client.DefaultRequestHeaders.Authorization = new AuthenticationHeaderValue(\"Bearer\", adminToken);| var response = await client.DeleteAsync(\"api/catalog-items/0\");| Assert.AreEqual(HttpStatusCode.NotFound, response.StatusCode);| }"
      }
    ]
  }
]