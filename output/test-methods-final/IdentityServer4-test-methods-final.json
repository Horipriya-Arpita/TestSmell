[
  {
    "file": "ApiResourceMappersTests.cs",
    "methods": [
      {
        "name": "AutomapperConfigurationIsValid",
        "body": "{| ApiResourceMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ApiResourceMapperProfile>();| }"
      },
      {
        "name": "Can_Map",
        "body": "{| var model = new ApiResource();| var mappedEntity = model.ToEntity();| var mappedModel = mappedEntity.ToModel();| Assert.NotNull(mappedModel);| Assert.NotNull(mappedEntity);| }"
      },
      {
        "name": "Properties_Map",
        "body": "{| var model = new ApiResource()| {| Description = \"description\",| DisplayName = \"displayname\",| Name = \"foo\",| Scopes = { \"foo1\", \"foo2\" },| Enabled = false| };| var mappedEntity = model.ToEntity();| mappedEntity.Scopes.Count.Should().Be(2);| var foo1 = mappedEntity.Scopes.FirstOrDefault(x => x.Scope == \"foo1\");| foo1.Should().NotBeNull();| var foo2 = mappedEntity.Scopes.FirstOrDefault(x => x.Scope == \"foo2\");| foo2.Should().NotBeNull();| | var mappedModel = mappedEntity.ToModel();| | mappedModel.Description.Should().Be(\"description\");| mappedModel.DisplayName.Should().Be(\"displayname\");| mappedModel.Enabled.Should().BeFalse();| mappedModel.Name.Should().Be(\"foo\");| }"
      },
      {
        "name": "missing_values_should_use_defaults",
        "body": "{| var entity = new IdentityServer4.EntityFramework.Entities.ApiResource| {| Secrets = new System.Collections.Generic.List<Entities.ApiResourceSecret>| {| new Entities.ApiResourceSecret| {| }| }| };| var def = new ApiResource| {| ApiSecrets = { new Models.Secret(\"foo\") }| };| var model = entity.ToModel();| model.ApiSecrets.First().Type.Should().Be(def.ApiSecrets.First().Type);| }"
      }
    ]
  },
  {
    "file": "ClientMappersTests.cs",
    "methods": [
      {
        "name": "AutomapperConfigurationIsValid",
        "body": "{| ClientMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ClientMapperProfile>();| }"
      },
      {
        "name": "Can_Map",
        "body": "{| var model = new Client();| var mappedEntity = model.ToEntity();| var mappedModel = mappedEntity.ToModel();| Assert.NotNull(mappedModel);| Assert.NotNull(mappedEntity);| }"
      },
      {
        "name": "Properties_Map",
        "body": "{| var model = new Client()| {| Properties =| {| {\"foo1\", \"bar1\"},| {\"foo2\", \"bar2\"},| }| };| var mappedEntity = model.ToEntity();| mappedEntity.Properties.Count.Should().Be(2);| var foo1 = mappedEntity.Properties.FirstOrDefault(x => x.Key == \"foo1\");| foo1.Should().NotBeNull();| foo1.Value.Should().Be(\"bar1\");| var foo2 = mappedEntity.Properties.FirstOrDefault(x => x.Key == \"foo2\");| foo2.Should().NotBeNull();| foo2.Value.Should().Be(\"bar2\");| var mappedModel = mappedEntity.ToModel();| mappedModel.Properties.Count.Should().Be(2);| mappedModel.Properties.ContainsKey(\"foo1\").Should().BeTrue();| mappedModel.Properties.ContainsKey(\"foo2\").Should().BeTrue();| mappedModel.Properties[\"foo1\"].Should().Be(\"bar1\");| mappedModel.Properties[\"foo2\"].Should().Be(\"bar2\");| }"
      },
      {
        "name": "duplicates_properties_in_db_map",
        "body": "{| var entity = new IdentityServer4.EntityFramework.Entities.Client| {| Properties = new System.Collections.Generic.List<Entities.ClientProperty>()| {| new Entities.ClientProperty{Key = \"foo1\", Value = \"bar1\"},| new Entities.ClientProperty{Key = \"foo1\", Value = \"bar2\"},| }| };| Action modelAction = () => entity.ToModel();| modelAction.Should().Throw<Exception>();| }"
      },
      {
        "name": "missing_values_should_use_defaults",
        "body": "{| var entity = new IdentityServer4.EntityFramework.Entities.Client| {| ClientSecrets = new System.Collections.Generic.List<Entities.ClientSecret>| {| new Entities.ClientSecret| {| }| }| };| var def = new Client| {| ClientSecrets = { new Models.Secret(\"foo\") }| };| var model = entity.ToModel();| model.ProtocolType.Should().Be(def.ProtocolType);| model.ClientSecrets.First().Type.Should().Be(def.ClientSecrets.First().Type);| }"
      }
    ]
  },
  {
    "file": "IdentityResourcesMappersTests.cs",
    "methods": [
      {
        "name": "IdentityResourceAutomapperConfigurationIsValid",
        "body": "{| IdentityResourceMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<IdentityResourceMapperProfile>();| }"
      },
      {
        "name": "CanMapIdentityResources",
        "body": "{| var model = new IdentityResource();| var mappedEntity = model.ToEntity();| var mappedModel = mappedEntity.ToModel();| Assert.NotNull(mappedModel);| Assert.NotNull(mappedEntity);| }"
      }
    ]
  },
  {
    "file": "PersistedGrantMappersTests.cs",
    "methods": [
      {
        "name": "PersistedGrantAutomapperConfigurationIsValid",
        "body": "{| PersistedGrantMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<PersistedGrantMapperProfile>();| }"
      },
      {
        "name": "CanMap",
        "body": "{| var model = new PersistedGrant()| {| ConsumedTime = new System.DateTime(2020, 02, 03, 4, 5, 6)| };| | var mappedEntity = model.ToEntity();| mappedEntity.ConsumedTime.Value.Should().Be(new System.DateTime(2020, 02, 03, 4, 5, 6));| | var mappedModel = mappedEntity.ToModel();| mappedModel.ConsumedTime.Value.Should().Be(new System.DateTime(2020, 02, 03, 4, 5, 6));| Assert.NotNull(mappedModel);| Assert.NotNull(mappedEntity);| }"
      }
    ]
  },
  {
    "file": "ScopeMappersTests.cs",
    "methods": [
      {
        "name": "ScopeAutomapperConfigurationIsValid",
        "body": "{| ScopeMappers.Mapper.ConfigurationProvider.AssertConfigurationIsValid<ScopeMapperProfile>();| }"
      },
      {
        "name": "CanMapScope",
        "body": "{| var model = new ApiScope();| var mappedEntity = model.ToEntity();| var mappedModel = mappedEntity.ToModel();| Assert.NotNull(mappedModel);| Assert.NotNull(mappedEntity);| }"
      },
      {
        "name": "Properties_Map",
        "body": "{| var model = new ApiScope()| {| Description = \"description\",| DisplayName = \"displayname\",| Name = \"foo\",| UserClaims = { \"c1\", \"c2\" },| Properties = {| { \"x\", \"xx\" },| { \"y\", \"yy\" },| },| Enabled = false| };| var mappedEntity = model.ToEntity();| mappedEntity.Description.Should().Be(\"description\");| mappedEntity.DisplayName.Should().Be(\"displayname\");| mappedEntity.Name.Should().Be(\"foo\");| mappedEntity.UserClaims.Count.Should().Be(2);| mappedEntity.UserClaims.Select(x => x.Type).Should().BeEquivalentTo(new[] { \"c1\", \"c2\" });| mappedEntity.Properties.Count.Should().Be(2);| mappedEntity.Properties.Should().Contain(x => x.Key == \"x\" && x.Value == \"xx\");| mappedEntity.Properties.Should().Contain(x => x.Key == \"y\" && x.Value == \"yy\");| var mappedModel = mappedEntity.ToModel();| mappedModel.Description.Should().Be(\"description\");| mappedModel.DisplayName.Should().Be(\"displayname\");| mappedModel.Enabled.Should().BeFalse();| mappedModel.Name.Should().Be(\"foo\");| mappedModel.UserClaims.Count.Should().Be(2);| mappedModel.UserClaims.Should().BeEquivalentTo(new[] { \"c1\", \"c2\" });| mappedModel.Properties.Count.Should().Be(2);| mappedModel.Properties[\"x\"].Should().Be(\"xx\");| mappedModel.Properties[\"y\"].Should().Be(\"yy\");| }"
      }
    ]
  },
  {
    "file": "ClientAuthenticationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| _pipeline.BrowserClient.AllowAutoRedirect = false;| var url = _pipeline.CreateAuthorizeUrl(| clientId: \"code_pipeline.Client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",| nonce: nonce);| var response = await _pipeline.BrowserClient.GetAsync(url);| var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());| authorization.Code.Should().NotBeNull();| var code = authorization.Code;| // backchannel client| var wrapper = new MessageHandlerWrapper(_pipeline.Handler);| var tokenClient = new HttpClient(wrapper);| var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest| {| Address = IdentityServerPipeline.TokenEndpoint,| ClientId = \"code_pipeline.Client\",| ClientSecret = \"secret\",| Code = code,| RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"| });| tokenResult.IsError.Should().BeFalse();| tokenResult.HttpErrorReason.Should().Be(\"OK\");| tokenResult.TokenType.Should().Be(\"Bearer\");| tokenResult.AccessToken.Should().NotBeNull();| tokenResult.ExpiresIn.Should().BeGreaterThan(0);| tokenResult.IdentityToken.Should().NotBeNull();| wrapper.Response.Headers.CacheControl.NoCache.Should().BeTrue();| wrapper.Response.Headers.CacheControl.NoStore.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| _pipeline.BrowserClient.AllowAutoRedirect = false;| var url = _pipeline.CreateAuthorizeUrl(| clientId: \"code_pipeline.Client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",| nonce: nonce);| var response = await _pipeline.BrowserClient.GetAsync(url);| var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());| authorization.Code.Should().NotBeNull();| var code = authorization.Code;| // backchannel client| var wrapper = new MessageHandlerWrapper(_pipeline.Handler);| var tokenClient = new HttpClient(wrapper);| var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest| {| Address = IdentityServerPipeline.TokenEndpoint,| ClientId = \"code_pipeline.Client\",| ClientSecret = \"secret\",| ClientCredentialStyle = ClientCredentialStyle.PostBody,| Code = code,| RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"| });| tokenResult.IsError.Should().BeFalse();| tokenResult.HttpErrorReason.Should().Be(\"OK\");| tokenResult.TokenType.Should().Be(\"Bearer\");| tokenResult.AccessToken.Should().NotBeNull();| tokenResult.ExpiresIn.Should().BeGreaterThan(0);| tokenResult.IdentityToken.Should().NotBeNull();| }"
      }
    ]
  },
  {
    "file": "CodeFlowTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| _pipeline.BrowserClient.AllowAutoRedirect = false;| var url = _pipeline.CreateAuthorizeUrl(| clientId: \"code_pipeline.Client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",| nonce: nonce);| var response = await _pipeline.BrowserClient.GetAsync(url);| var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());| authorization.Code.Should().NotBeNull();| var code = authorization.Code;| // backchannel client| var wrapper = new MessageHandlerWrapper(_pipeline.Handler);| var tokenClient = new HttpClient(wrapper);| var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest| {| Address = IdentityServerPipeline.TokenEndpoint,| ClientId = \"code_pipeline.Client\",| ClientSecret = \"secret\",| Code = code,| RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"| });| tokenResult.IsError.Should().BeFalse();| tokenResult.HttpErrorReason.Should().Be(\"OK\");| tokenResult.TokenType.Should().Be(\"Bearer\");| tokenResult.AccessToken.Should().NotBeNull();| tokenResult.ExpiresIn.Should().BeGreaterThan(0);| tokenResult.IdentityToken.Should().NotBeNull();| var token = new JwtSecurityToken(tokenResult.IdentityToken);| | var s_hash = token.Claims.FirstOrDefault(c => c.Type == \"s_hash\");| s_hash.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| _pipeline.BrowserClient.AllowAutoRedirect = false;| var url = _pipeline.CreateAuthorizeUrl(| clientId: \"code_pipeline.Client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_pipeline.Client/callback?foo=bar&baz=quux\",| state: \"state\",| nonce: nonce);| var response = await _pipeline.BrowserClient.GetAsync(url);| var authorization = _pipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());| authorization.Code.Should().NotBeNull();| var code = authorization.Code;| // backchannel client| var wrapper = new MessageHandlerWrapper(_pipeline.Handler);| var tokenClient = new HttpClient(wrapper);| var tokenResult = await tokenClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest| {| Address = IdentityServerPipeline.TokenEndpoint,| ClientId = \"code_pipeline.Client\",| ClientSecret = \"secret\",| Code = code,| RedirectUri = \"https://code_pipeline.Client/callback?foo=bar&baz=quux\"| });| tokenResult.IsError.Should().BeFalse();| tokenResult.HttpErrorReason.Should().Be(\"OK\");| tokenResult.TokenType.Should().Be(\"Bearer\");| tokenResult.AccessToken.Should().NotBeNull();| tokenResult.ExpiresIn.Should().BeGreaterThan(0);| tokenResult.IdentityToken.Should().NotBeNull();| var token = new JwtSecurityToken(tokenResult.IdentityToken);| | var s_hash = token.Claims.FirstOrDefault(c => c.Type == \"s_hash\");| s_hash.Should().NotBeNull();| s_hash.Value.Should().Be(CryptoHelper.CreateHashClaimValue(\"state\", \"RS256\"));| }"
      }
    ]
  },
  {
    "file": "RedirectUriTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| var state = Guid.NewGuid().ToString();| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://bad\",| state: state,| nonce: nonce);| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorWasCalled.Should().BeTrue();| _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| var state = Guid.NewGuid().ToString();| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: \"code\",| scope: \"openid\",| // redirectUri deliberately absent | redirectUri: null,| state: state,| nonce: nonce);| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorWasCalled.Should().BeTrue();| _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| var state = Guid.NewGuid().ToString();| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_client/callback?foo=bar&baz=quux\",| state: state,| nonce: nonce);| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://code_client/callback?\");| var authorization = _mockPipeline.ParseAuthorizationResponseUrl(response.Headers.Location.ToString());| authorization.Code.Should().NotBeNull();| authorization.State.Should().Be(state);| var query = Microsoft.AspNetCore.WebUtilities.QueryHelpers.ParseQuery(response.Headers.Location.Query);| query[\"foo\"].ToString().Should().Be(\"bar\");| query[\"baz\"].ToString().Should().Be(\"quux\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| var state = Guid.NewGuid().ToString();| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_client/callback?baz=quux&foo=bar\",| state: state,| nonce: nonce);| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorWasCalled.Should().BeTrue();| _mockPipeline.ErrorMessage.Error.Should().Be(\"invalid_request\");| }"
      }
    ]
  },
  {
    "file": "ResponseTypeResponseModeTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var metadata = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.DiscoveryEndpoint);| metadata.StatusCode.Should().Be(HttpStatusCode.OK);| var state = Guid.NewGuid().ToString();| var nonce = Guid.NewGuid().ToString();| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: \"code\",| scope: \"openid\",| redirectUri: \"https://code_client/callback\",| state: state,| nonce: nonce);| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IsError.Should().BeFalse();| authorization.Code.Should().NotBeNull();| authorization.State.Should().Be(state);| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var state = Guid.NewGuid().ToString();| var nonce = Guid.NewGuid().ToString();| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"code_client\",| responseType: null, // missing| scope: \"openid\",| redirectUri: \"https://code_client/callback\",| state: state,| nonce: nonce);| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorMessage.Error.Should().Be(\"unsupported_response_type\");| }"
      }
    ]
  },
  {
    "file": "PkceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(\"bob\");| var nonce = Guid.NewGuid().ToString();| var authorizeResponse = await _pipeline.RequestAuthorizationEndpointAsync(client_id_optional,| response_type,| IdentityServerConstants.StandardScopes.OpenId,| redirect_uri,| nonce: nonce);| authorizeResponse.IsError.Should().BeFalse();| var code = authorizeResponse.Code;| var tokenResponse = await _pipeline.BackChannelClient.RequestAuthorizationCodeTokenAsync(new AuthorizationCodeTokenRequest| {| Address = IdentityServerPipeline.TokenEndpoint,| ClientId = client_id_optional,| ClientSecret = client_secret,| Code = code,| RedirectUri = redirect_uri,| CodeVerifier = code_verifier| });| tokenResponse.IsError.Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "ConsentTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\"| );| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ConsentWasCalled.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| _mockPipeline.ConsentResponse = new ConsentResponse()| {| ScopesValuesConsented = new string[] { \"openid\", \"api2\" }| };| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client2\",| responseType: \"id_token token\",| scope: \"openid profile api2\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://server/consent\");| response = await _mockPipeline.BrowserClient.GetAsync(response.Headers.Location.ToString());| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"/connect/authorize/callback\");| var modifiedAuthorizeCallback = \"https://server\" + response.Headers.Location.ToString();| modifiedAuthorizeCallback = modifiedAuthorizeCallback.Replace(\"api2\", \"api1%20api2\");| response = await _mockPipeline.BrowserClient.GetAsync(modifiedAuthorizeCallback);| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://server/consent\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| _mockPipeline.ConsentResponse = new ConsentResponse()| {| ScopesValuesConsented = new string[] { \"api2\" }| };| _mockPipeline.BrowserClient.StopRedirectingAfter = 2;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client2\",| responseType: \"id_token token\",| scope: \"openid profile api1 api2\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://client2/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IsError.Should().BeTrue();| authorization.Error.Should().Be(\"access_denied\");| authorization.State.Should().Be(\"123_state\");| }"
      }
    ]
  },
  {
    "file": "RestrictAccessTokenViaBrowserTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client1\",| \"id_token\", \"openid\", \"https://client1/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client1/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client1\",| \"id_token token\", \"openid\", \"https://client1/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client1/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client2\",| \"id_token\", \"openid\", \"https://client2/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client2/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client2\",| \"id_token token\", \"openid\", \"https://client2/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorWasCalled.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client3\",| \"code id_token\", \"openid\", \"https://client3/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client3/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().BeNull();| authorization.Code.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client3\",| \"code id_token token\", \"openid\", \"https://client3/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client3/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().NotBeNull();| authorization.Code.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client4\",| \"code id_token\", \"openid\", \"https://client4/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Found);| response.Headers.Location.AbsoluteUri.Should().StartWith(\"https://client4/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IdentityToken.Should().NotBeNull();| authorization.AccessToken.Should().BeNull();| authorization.Code.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(_user);| var url = _mockPipeline.CreateAuthorizeUrl(\"client4\",| \"code id_token token\", \"openid\", \"https://client4/callback\", \"state\", \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.ErrorWasCalled.Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "SessionIdTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var sid1 = _mockPipeline.GetSessionCookie().Value;| sid1.Should().NotBeNull();| _mockPipeline.RemoveSessionCookie();| await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.DiscoveryEndpoint);| var sid2 = _mockPipeline.GetSessionCookie().Value;| sid2.Should().Be(sid1);| }"
      }
    ]
  },
  {
    "file": "CheckSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.CheckSessionEndpoint);| response.StatusCode.Should().NotBe(HttpStatusCode.NotFound);| }"
      }
    ]
  },
  {
    "file": "DeviceAuthorizationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.DeviceAuthorization);| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());| resultDto.Should().NotBeNull();| resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidRequest);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>| {| {\"client_id\", Guid.NewGuid().ToString()}| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization,| new StringContent(@\"{\"\"client_id\"\": \"\"client1\"\"}\", Encoding.UTF8, \"application/json\"));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());| resultDto.Should().NotBeNull();| resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidRequest);| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization,| new FormUrlEncodedContent(new Dictionary<string, string>()));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());| resultDto.Should().NotBeNull();| resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidClient);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>| {| {\"client_id\", \"client1\"}| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var resultDto = ParseJsonBody<ErrorResultDto>(await response.Content.ReadAsStreamAsync());| resultDto.Should().NotBeNull();| resultDto.error.Should().Be(OidcConstants.TokenErrors.InvalidClient);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>| {| {\"client_id\", \"client1\"},| {\"client_secret\", \"secret\" }| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.DeviceAuthorization, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.MediaType.Should().Be(\"application/json\");| | var resultDto = ParseJsonBody<ResultDto>(await response.Content.ReadAsStreamAsync());| resultDto.Should().NotBeNull();| resultDto.Should().NotBeNull();| resultDto.device_code.Should().NotBeNull();| resultDto.user_code.Should().NotBeNull();| resultDto.verification_uri.Should().NotBeNull();| resultDto.verification_uri_complete.Should().NotBeNull();| resultDto.expires_in.Should().BeGreaterThan(0);| resultDto.interval.Should().BeGreaterThan(0);| }"
      }
    ]
  },
  {
    "file": "DiscoveryEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| IdentityServerPipeline pipeline = new IdentityServerPipeline();| pipeline.Initialize(\"/ROOT\");| var result = await pipeline.BackChannelClient.GetAsync(\"HTTPS://SERVER/ROOT/.WELL-KNOWN/OPENID-CONFIGURATION\");| var json = await result.Content.ReadAsStringAsync();| var data = JObject.Parse(json);| var issuer = data[\"issuer\"].ToString();| issuer.Should().Be(\"https://server/root\");| }"
      },
      {
        "name": "Task",
        "body": "{| IdentityServerPipeline pipeline = new IdentityServerPipeline();| pipeline.Initialize(\"/ROOT\");| pipeline.Options.LowerCaseIssuerUri = false;| var result = await pipeline.BackChannelClient.GetAsync(\"HTTPS://SERVER/ROOT/.WELL-KNOWN/OPENID-CONFIGURATION\");| var json = await result.Content.ReadAsStringAsync();| var data = JObject.Parse(json);| var issuer = data[\"issuer\"].ToString();| issuer.Should().Be(\"https://server/ROOT\");| }"
      },
      {
        "name": "Task",
        "body": "{| var key = CryptoHelper.CreateECDsaSecurityKey(JsonWebKeyECTypes.P256);| var expectedAlgorithm = SecurityAlgorithms.EcdsaSha256;| IdentityServerPipeline pipeline = new IdentityServerPipeline();| pipeline.OnPostConfigureServices += services =>| {| // add key to standard RSA key| services.AddIdentityServerBuilder()| .AddSigningCredential(key, expectedAlgorithm);| };| pipeline.Initialize(\"/ROOT\");| var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration\");| var json = await result.Content.ReadAsStringAsync();| var data = JObject.Parse(json);| var algorithmsSupported = data[\"id_token_signing_alg_values_supported\"];| algorithmsSupported.Count().Should().Be(2);| algorithmsSupported.Values().Should().Contain(SecurityAlgorithms.RsaSha256);| algorithmsSupported.Values().Should().Contain(SecurityAlgorithms.EcdsaSha256);| }"
      },
      {
        "name": "Task",
        "body": "{| var ecdsaKey = CryptoHelper.CreateECDsaSecurityKey(JsonWebKeyECTypes.P256);| var parameters = ecdsaKey.ECDsa.ExportParameters(true);| IdentityServerPipeline pipeline = new IdentityServerPipeline();| var jsonWebKeyFromECDsa = new JsonWebKey()| {| Kty = JsonWebAlgorithmsKeyTypes.EllipticCurve,| Use = \"sig\",| Kid = ecdsaKey.KeyId,| KeyId = ecdsaKey.KeyId,| X = Base64UrlEncoder.Encode(parameters.Q.X),| Y = Base64UrlEncoder.Encode(parameters.Q.Y),| D = Base64UrlEncoder.Encode(parameters.D),| Crv = JsonWebKeyECTypes.P256,| Alg = SecurityAlgorithms.EcdsaSha256| };| pipeline.OnPostConfigureServices += services =>| {| // add ECDsa as JsonWebKey| services.AddIdentityServerBuilder()| .AddSigningCredential(jsonWebKeyFromECDsa, SecurityAlgorithms.EcdsaSha256);| };| pipeline.Initialize(\"/ROOT\");| var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");| var json = await result.Content.ReadAsStringAsync();| var data = JObject.Parse(json);| var keys = data[\"keys\"];| keys.Should().NotBeNull();| var key = keys[1];| key.Should().NotBeNull();| var crv = key[\"crv\"];| crv.Should().NotBeNull();| crv.Value<string>().Should().Be(JsonWebKeyECTypes.P256);| }"
      },
      {
        "name": "Task",
        "body": "{| IdentityServerPipeline pipeline = new IdentityServerPipeline();| pipeline.Initialize(\"/ROOT\");| var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");| var json = await result.Content.ReadAsStringAsync();| var data = JObject.Parse(json);| var keys = data[\"keys\"];| keys.Should().NotBeNull();| var key = keys[0];| key.Should().NotBeNull();| var alg = key[\"alg\"];| alg.Should().NotBeNull();| alg.Value<string>().Should().Be(Constants.SigningAlgorithms.RSA_SHA_256);| }"
      },
      {
        "name": "Task",
        "body": "{| var ecdsaKey = CryptoHelper.CreateECDsaSecurityKey();| var rsaKey = CryptoHelper.CreateRsaSecurityKey();| IdentityServerPipeline pipeline = new IdentityServerPipeline();| pipeline.OnPostConfigureServices += services =>| {| services.AddIdentityServerBuilder()| .AddSigningCredential(ecdsaKey, \"ES256\")| .AddValidationKey(new SecurityKeyInfo { Key = rsaKey, SigningAlgorithm = \"RS256\" });| };| pipeline.Initialize(\"/ROOT\");| var result = await pipeline.BackChannelClient.GetAsync(\"https://server/root/.well-known/openid-configuration/jwks\");| var json = await result.Content.ReadAsStringAsync();| var jwks = new JsonWebKeySet(json);| jwks.Keys.Should().Contain(x => x.KeyId == ecdsaKey.KeyId && x.Alg == \"ES256\");| jwks.Keys.Should().Contain(x => x.KeyId == rsaKey.KeyId && x.Alg == \"RS256\");| }"
      },
      {
        "name": "Task",
        "body": "{| var pipeline = new IdentityServerPipeline();| pipeline.Initialize();| var result = await pipeline.BackChannelClient.GetDiscoveryDocumentAsync(new DiscoveryDocumentRequest| {| Address = \"https://грант.рф\",| Policy =| {| ValidateIssuerName = false,| ValidateEndpoints = false,| RequireHttps = false,| RequireKeySet = false| }| });| result.Issuer.Should().Be(\"https://грант.рф\");| }"
      }
    ]
  },
  {
    "file": "EndSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| response.StatusCode.Should().NotBe(HttpStatusCode.NotFound);| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| _mockPipeline.LogoutWasCalled.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockPipeline.Options.UserInteraction.LogoutUrl = \"/logout\";| _mockPipeline.Options.UserInteraction.LogoutIdParameter = \"id\";| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token +| \"&post_logout_redirect_uri=https://client1/signout-callback\");| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://server/logout?id=\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var authorization = await _mockPipeline.RequestAuthorizationEndpointAsync(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var id_token = authorization.IdentityToken;| var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token +| \"&post_logout_redirect_uri=https://client2/signout-callback2\");| _mockPipeline.LogoutWasCalled.Should().BeTrue();| _mockPipeline.LogoutRequest.Should().NotBeNull();| _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client2\");| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client2/signout-callback2\");| var parts = _mockPipeline.LogoutRequest.SignOutIFrameUrl.Split('?');| parts[0].Should().Be(IdentityServerPipeline.EndSessionCallbackEndpoint);| var iframeUrl = QueryHelpers.ParseNullableQuery(parts[1]);| iframeUrl[\"endSessionId\"].FirstOrDefault().Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var authorization = await _mockPipeline.RequestAuthorizationEndpointAsync(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var id_token = authorization.IdentityToken;| _mockPipeline.RemoveLoginCookie();| var response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token +| \"&post_logout_redirect_uri=https://client2/signout-callback2\");| _mockPipeline.LogoutWasCalled.Should().BeTrue();| _mockPipeline.LogoutRequest.Should().NotBeNull();| _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client2\");| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client2/signout-callback2\");| _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| var values = new List<KeyValuePair<string, string>>();| values.Add(new KeyValuePair<string, string>(\"id_token_hint\", id_token));| values.Add(new KeyValuePair<string, string>(\"post_logout_redirect_uri\", \"https://client1/signout-callback\"));| var content = new FormUrlEncodedContent(values);| response = await _mockPipeline.BrowserClient.PostAsync(IdentityServerPipeline.EndSessionEndpoint, content);| _mockPipeline.LogoutWasCalled.Should().BeTrue();| _mockPipeline.LogoutRequest.Should().NotBeNull();| _mockPipeline.LogoutRequest.ClientId.Should().Be(\"client1\");| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().Be(\"https://client1/signout-callback\");| var parts = _mockPipeline.LogoutRequest.SignOutIFrameUrl.Split('?');| parts[0].Should().Be(IdentityServerPipeline.EndSessionCallbackEndpoint);| var iframeUrl = QueryHelpers.ParseNullableQuery(parts[1]);| iframeUrl[\"endSessionId\"].FirstOrDefault().Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.EndSessionCallbackEndpoint);| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token +| \"&post_logout_redirect_uri=https://client1/signout-callback-not-valid\");| var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;| response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);| _mockPipeline.LogoutRequest.ClientId.Should().NotBeNull();| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| await _mockPipeline.LoginAsync(\"alice\");| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token +| \"&post_logout_redirect_uri=https://client1/signout-callback\");| _mockPipeline.LogoutRequest.ClientId.Should().BeNull();| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;| response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var sid = _mockPipeline.GetSessionCookie().Value;| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var url2 = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response2 = await _mockPipeline.BrowserClient.GetAsync(url2);| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;| response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);| var html = await response.Content.ReadAsStringAsync();| html.Should().Contain(HtmlEncoder.Default.Encode(\"https://client1/signout?sid=\" + sid + \"&iss=\" + UrlEncoder.Default.Encode(\"https://server\")));| html.Should().Contain(HtmlEncoder.Default.Encode(\"https://client2/signout?sid=\" + sid + \"&iss=\" + UrlEncoder.Default.Encode(\"https://server\")));| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var sid = _mockPipeline.GetSessionCookie().Value;| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client4\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client4/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| var signoutFrameUrl = _mockPipeline.LogoutRequest.SignOutIFrameUrl;| // since we don't have real ws-fed, we used OIDC to signin, but fooling this| // at signout to use ws-fed so we can test the iframe params| _wsfedClient.ProtocolType = ProtocolTypes.WsFederation;| response = await _mockPipeline.BrowserClient.GetAsync(signoutFrameUrl);| var html = await response.Content.ReadAsStringAsync();| html.Should().Contain(\"https://client4/signout?wa=wsignoutcleanup1.0\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint + | \"?id_token_hint=\" + id_token);| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _mockPipeline.BrowserClient.GetAsync(url);| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| var id_token = authorization.IdentityToken;| _mockPipeline.BrowserClient.AllowAutoRedirect = true;| response = await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint +| \"?id_token_hint=\" + id_token);| _mockPipeline.LogoutRequest.PostLogoutRedirectUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var response = await _mockPipeline.RequestAuthorizationEndpointAsync(| clientId: \"client2\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client2/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| response.Should().NotBeNull();| await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| _mockPipeline.LogoutWasCalled.Should().BeTrue();| _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| _mockPipeline.LogoutWasCalled.Should().BeTrue();| _mockPipeline.LogoutRequest.SignOutIFrameUrl.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockPipeline.BackChannelMessageHandler.OnInvoke = async req =>| {| req.RequestUri.ToString().Should().StartWith(\"https://client3/signout\");| var form = await req.Content.ReadAsStringAsync();| form.Should().Contain(OidcConstants.BackChannelLogoutRequest.LogoutToken);| var token = form.Split('=')[1];| var parts = token.Split('.');| parts.Length.Should().Be(3);| var bytes = Base64Url.Decode(parts[1]);| var json = Encoding.UTF8.GetString(bytes);| var payload = JObject.Parse(json);| payload[\"iss\"].ToString().Should().Be(\"https://server\");| payload[\"sub\"].ToString().Should().Be(\"bob\");| payload[\"aud\"].ToString().Should().Be(\"client3\");| payload[\"iat\"].Should().NotBeNull();| payload[\"jti\"].Should().NotBeNull();| payload[\"sid\"].Should().NotBeNull();| payload[\"events\"].Type.Should().Be(JTokenType.Object);| var events = (JObject)payload[\"events\"];| events.Count.Should().Be(1);| events[\"http://schemas.openid.net/event/backchannel-logout\"].Should().NotBeNull();| events[\"http://schemas.openid.net/event/backchannel-logout\"].Type.Should().Be(JTokenType.Object);| var evt = (JObject)events[\"http://schemas.openid.net/event/backchannel-logout\"];| evt.Count.Should().Be(0);| };| await _mockPipeline.LoginAsync(\"bob\");| var response = await _mockPipeline.RequestAuthorizationEndpointAsync(| clientId: \"client3\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client3/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| response.Should().NotBeNull();| await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| _mockPipeline.BackChannelMessageHandler.InvokeWasCalled.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockPipeline.BackChannelMessageHandler.OnInvoke = req => throw new Exception(\"boom!\");| await _mockPipeline.LoginAsync(\"bob\");| var response = await _mockPipeline.RequestAuthorizationEndpointAsync(| clientId: \"client3\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client3/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| response.Should().NotBeNull();| await _mockPipeline.BrowserClient.GetAsync(IdentityServerPipeline.EndSessionEndpoint);| _mockPipeline.BackChannelMessageHandler.InvokeWasCalled.Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "IntrospectionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>();| var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>();| _client.SetBasicAuthentication(\"unknown\", \"invalid\");| var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>();| _client.SetBasicAuthentication(\"api1\", \"invalid\");| var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.Unauthorized);| }"
      },
      {
        "name": "Task",
        "body": "{| var form = new Dictionary<string, string>();| _client.SetBasicAuthentication(\"api1\", \"secret\");| var response = await _client.PostAsync(IntrospectionEndpoint, new FormUrlEncodedContent(form));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| }"
      },
      {
        "name": "Task",
        "body": "{| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api1\",| ClientSecret = \"secret\",| Token = \"invalid\"| });| introspectionResponse.IsActive.Should().Be(false);| introspectionResponse.IsError.Should().Be(false);| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api1\"| });| var data = new| {| client_id = \"api1\",| client_secret = \"secret\",| token = tokenResponse.AccessToken| };| var json = JsonConvert.SerializeObject(data);| var client = new HttpClient(_handler);| var response = await client.PostAsync(IntrospectionEndpoint, new StringContent(json, Encoding.UTF8, \"application/json\"));| response.StatusCode.Should().Be(HttpStatusCode.UnsupportedMediaType);| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api1\"| });| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api1\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| introspectionResponse.IsActive.Should().Be(true);| introspectionResponse.IsError.Should().Be(false);| var scopes = from c in introspectionResponse.Claims| where c.Type == \"scope\"| select c;| scopes.Count().Should().Be(1);| scopes.First().Value.Should().Be(\"api1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api1\"| });| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api1\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();| values[\"aud\"].GetType().Name.Should().Be(\"String\");| values[\"iss\"].GetType().Name.Should().Be(\"String\");| values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");| values[\"exp\"].GetType().Name.Should().Be(\"Int64\");| values[\"client_id\"].GetType().Name.Should().Be(\"String\");| values[\"active\"].GetType().Name.Should().Be(\"Boolean\");| values[\"scope\"].GetType().Name.Should().Be(\"String\");| values[\"scope\"].ToString().Should().Be(\"api1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestPasswordTokenAsync(new PasswordTokenRequest| {| Address = TokenEndpoint,| ClientId = \"ro.client\",| ClientSecret = \"secret\",| UserName = \"bob\",| Password = \"bob\",| Scope = \"api1\",| });| tokenResponse.IsError.Should().BeFalse();| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api1\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();| values[\"aud\"].GetType().Name.Should().Be(\"String\");| values[\"iss\"].GetType().Name.Should().Be(\"String\");| values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");| values[\"exp\"].GetType().Name.Should().Be(\"Int64\");| values[\"auth_time\"].GetType().Name.Should().Be(\"Int64\");| values[\"client_id\"].GetType().Name.Should().Be(\"String\");| values[\"sub\"].GetType().Name.Should().Be(\"String\");| values[\"active\"].GetType().Name.Should().Be(\"Boolean\");| values[\"scope\"].GetType().Name.Should().Be(\"String\");| values[\"scope\"].ToString().Should().Be(\"api1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api2 api3-a api3-b\",| });| tokenResponse.IsError.Should().BeFalse();| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api3\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();| values[\"aud\"].GetType().Name.Should().Be(\"JArray\");| var audiences = ((JArray)values[\"aud\"]);| foreach (var aud in audiences)| {| aud.Type.Should().Be(JTokenType.String);| }| values[\"iss\"].GetType().Name.Should().Be(\"String\");| values[\"nbf\"].GetType().Name.Should().Be(\"Int64\");| values[\"exp\"].GetType().Name.Should().Be(\"Int64\");| values[\"client_id\"].GetType().Name.Should().Be(\"String\");| values[\"active\"].GetType().Name.Should().Be(\"Boolean\");| values[\"scope\"].GetType().Name.Should().Be(\"String\");| var scopes = values[\"scope\"].ToString();| scopes.Should().Be(\"api3-a api3-b\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api3-a api3-b\",| });| tokenResponse.IsError.Should().BeFalse();| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api3\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| var values = introspectionResponse.Json.ToObject<Dictionary<string, object>>();| values[\"aud\"].GetType().Name.Should().Be(\"String\");| values[\"iss\"].GetType().Name.Should().Be(\"String\"); | values[\"nbf\"].GetType().Name.Should().Be(\"Int64\"); | values[\"exp\"].GetType().Name.Should().Be(\"Int64\"); | values[\"client_id\"].GetType().Name.Should().Be(\"String\"); | values[\"active\"].GetType().Name.Should().Be(\"Boolean\"); | values[\"scope\"].GetType().Name.Should().Be(\"String\");| var scopes = values[\"scope\"].ToString();| scopes.Should().Be(\"api3-a api3-b\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client3\",| ClientSecret = \"secret\",| Scope = \"api1 api2 api3-a\",| });| tokenResponse.IsError.Should().BeFalse();| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api3\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| introspectionResponse.IsActive.Should().BeTrue();| introspectionResponse.IsError.Should().BeFalse();| var scopes = from c in introspectionResponse.Claims| where c.Type == \"scope\"| select c.Value;| scopes.Count().Should().Be(1);| scopes.First().Should().Be(\"api3-a\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api1 api2\",| });| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api1\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| introspectionResponse.IsActive.Should().Be(true);| introspectionResponse.IsError.Should().Be(false);| var scopes = from c in introspectionResponse.Claims| where c.Type == \"scope\"| select c;| scopes.Count().Should().Be(1);| scopes.First().Value.Should().Be(\"api1\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokenResponse = await _client.RequestClientCredentialsTokenAsync(new ClientCredentialsTokenRequest| {| Address = TokenEndpoint,| ClientId = \"client1\",| ClientSecret = \"secret\",| Scope = \"api1\",| });| var introspectionResponse = await _client.IntrospectTokenAsync(new TokenIntrospectionRequest| {| Address = IntrospectionEndpoint,| ClientId = \"api2\",| ClientSecret = \"secret\",| Token = tokenResponse.AccessToken| });| introspectionResponse.IsActive.Should().Be(false);| introspectionResponse.IsError.Should().Be(false);| }"
      }
    ]
  },
  {
    "file": "RevocationTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.GetAsync(IdentityServerPipeline.RevocationEndpoint);| response.StatusCode.Should().Be(HttpStatusCode.MethodNotAllowed);| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, null);| response.StatusCode.Should().Be(HttpStatusCode.UnsupportedMediaType);| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.AccessToken| });| result.IsError.Should().BeFalse();| (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = \"implicit\",| ClientSecret = client_secret,| Token = tokens.AccessToken| });| result.IsError.Should().BeFalse();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await UseRefreshTokenAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.RefreshToken| });| result.IsError.Should().BeFalse();| (await UseRefreshTokenAsync(tokens)).Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await UseRefreshTokenAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = \"implicit\",| ClientSecret = client_secret,| Token = tokens.RefreshToken| });| result.IsError.Should().BeFalse();| (await UseRefreshTokenAsync(tokens)).Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.AccessToken| });| result.IsError.Should().BeFalse();| (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();| result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.AccessToken| });| result.IsError.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await UseRefreshTokenAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.RefreshToken| });| result.IsError.Should().BeFalse();| (await UseRefreshTokenAsync(tokens)).Should().BeFalse();| result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = client_secret,| Token = tokens.RefreshToken| });| result.IsError.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = \"not_valid\",| ClientSecret = client_secret,| Token = tokens.AccessToken| });| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"invalid_client\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var result = await _mockPipeline.BackChannelClient.RevokeTokenAsync(new TokenRevocationRequest| {| Address = IdentityServerPipeline.RevocationEndpoint,| ClientId = client_id,| ClientSecret = \"not_valid\",| Token = tokens.AccessToken| });| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"invalid_client\");| }"
      },
      {
        "name": "Task",
        "body": "{| var data = new Dictionary<string, string>| {| { \"client_id\", client_id },| { \"client_secret\", client_secret }| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var result = await ProtocolResponse.FromHttpResponseAsync<TokenRevocationResponse>(response);| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"invalid_request\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var data = new Dictionary<string, string>| {| { \"client_id\", client_id },| { \"client_secret\", client_secret },| { \"token\", tokens.AccessToken },| { \"token_type_hint\", \"not_valid\" }| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| var result = await ProtocolResponse.FromHttpResponseAsync<TokenRevocationResponse>(response);| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"unsupported_token_type\");| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await IsAccessTokenValidAsync(tokens)).Should().BeTrue();| var data = new Dictionary<string, string>| {| { \"client_id\", client_id },| { \"client_secret\", client_secret },| { \"token\", tokens.AccessToken }| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.OK);| (await IsAccessTokenValidAsync(tokens)).Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var tokens = await GetTokensAsync();| (await UseRefreshTokenAsync(tokens)).Should().BeTrue();| var data = new Dictionary<string, string>| {| { \"client_id\", client_id },| { \"client_secret\", client_secret },| { \"token\", tokens.RefreshToken }| };| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.OK);| (await UseRefreshTokenAsync(tokens)).Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var token = await GetAccessTokenForImplicitClientAsync(\"implicit\");| var data = new Dictionary<string, string>| {| { \"client_id\", \"implicit\" },| { \"token\", token }| };| (await IsAccessTokenValidAsync(token)).Should().BeTrue();| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.OK);| (await IsAccessTokenValidAsync(token)).Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var token = await GetAccessTokenForImplicitClientAsync(\"implicit_and_client_creds\");| var data = new Dictionary<string, string>| {| { \"client_id\", \"implicit_and_client_creds\" },| { \"token\", token }| };| (await IsAccessTokenValidAsync(token)).Should().BeTrue();| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.RevocationEndpoint, new FormUrlEncodedContent(data));| response.StatusCode.Should().Be(HttpStatusCode.BadRequest);| (await IsAccessTokenValidAsync(token)).Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "TokenEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var data = new Dictionary<string, string>| {| { \"grant_type\", \"client_credentials\" },| { \"client_id\", client_id },| { \"client_secret\", client_secret },| { \"scope\", scope_name },| };| var form = new FormUrlEncodedContent(data);| _mockPipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Referer\", \"http://127.0.0.1:33086/appservice/appservice?t=1564165664142?load\");| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.TokenEndpoint, form);| response.StatusCode.Should().Be(HttpStatusCode.OK);| var json = await response.Content.ReadAsStringAsync();| var result = JObject.Parse(json);| result.ContainsKey(\"error\").Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var data = new Dictionary<string, string>| {| { \"grant_type\", \"password\" },| { \"username\", \"bob\" },| { \"password\", \"password\" },| { \"client_id\", client_id },| { \"client_secret\", client_secret },| { \"scope\", scope_name },| };| var form = new FormUrlEncodedContent(data);| _mockPipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Referer\", \"http://127.0.0.1:33086/appservice/appservice?t=1564165664142?load\");| var response = await _mockPipeline.BackChannelClient.PostAsync(IdentityServerPipeline.TokenEndpoint, form);| response.StatusCode.Should().Be(HttpStatusCode.OK);| var json = await response.Content.ReadAsStringAsync();| var result = JObject.Parse(json);| result.ContainsKey(\"error\").Should().BeFalse();| }"
      }
    ]
  },
  {
    "file": "CustomProfileServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _mockPipeline.LoginAsync(\"bob\");| var url = _mockPipeline.CreateAuthorizeUrl(| clientId: \"implicit\",| responseType: \"id_token\",| scope: \"openid custom_identity\",| redirectUri: \"https://client/callback\",| state: \"state\",| nonce: \"nonce\");| _mockPipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _mockPipeline.BrowserClient.GetAsync(url);| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Headers.Location.ToString().Should().StartWith(\"https://client/callback\");| var authorization = new IdentityModel.Client.AuthorizeResponse(response.Headers.Location.ToString());| authorization.IsError.Should().BeFalse();| authorization.IdentityToken.Should().NotBeNull();| var payload = authorization.IdentityToken.Split('.')[1];| var json = Encoding.UTF8.GetString(Base64Url.Decode(payload));| var obj = JObject.Parse(json);| obj.GetValue(\"foo\").Should().NotBeNull();| obj[\"foo\"].ToString().Should().Be(\"bar\");| }"
      }
    ]
  },
  {
    "file": "CorsTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var policy = new StubCorePolicyProvider();| _pipeline.OnPreConfigureServices += services =>| {| services.AddSingleton<ICorsPolicyService>(policy);| };| _pipeline.Initialize();| _pipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Origin\", \"https://client\");| _pipeline.BackChannelClient.DefaultRequestHeaders.Add(\"Access-Control-Request-Method\", \"GET\");| var message = new HttpRequestMessage(HttpMethod.Options, IdentityServerPipeline.DiscoveryEndpoint);| var response = await _pipeline.BackChannelClient.SendAsync(message);| policy.WasCalled.Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "FederatedSignoutTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(_user);| await _pipeline.RequestAuthorizationEndpointAsync(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");| var html = await response.Content.ReadAsStringAsync();| html.Should().Contain(\"https://server/connect/endsession/callback?endSessionId=\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(_user);| await _pipeline.RequestAuthorizationEndpointAsync(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _pipeline.BrowserClient.PostAsync(IdentityServerPipeline.FederatedSignOutUrl, new FormUrlEncodedContent(new Dictionary<string, string> { { \"sid\", \"123\" } }));| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.MediaType.Should().Be(\"text/html\");| var html = await response.Content.ReadAsStringAsync();| html.Should().Contain(\"https://server/connect/endsession/callback?endSessionId=\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _pipeline.LoginAsync(_user);| var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.Should().BeNull();| var html = await response.Content.ReadAsStringAsync();| html.Should().Be(String.Empty);| }"
      },
      {
        "name": "Task",
        "body": "{| var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.Should().BeNull();| var html = await response.Content.ReadAsStringAsync();| html.Should().Be(String.Empty);| }"
      },
      {
        "name": "Task",
        "body": "{| _pipeline.OnFederatedSignout = ctx =>| {| return Task.FromResult(true);| };| await _pipeline.LoginAsync(_user);| await _pipeline.RequestAuthorizationEndpointAsync(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");| response.StatusCode.Should().Be(HttpStatusCode.OK);| response.Content.Headers.ContentType.Should().BeNull();| var html = await response.Content.ReadAsStringAsync();| html.Should().Be(String.Empty);| }"
      },
      {
        "name": "Task",
        "body": "{| _pipeline.OnFederatedSignout = async ctx =>| {| await ctx.SignOutAsync(); // even if we signout, we should not see iframes| ctx.Response.Redirect(\"http://foo\");| return true;| };| await _pipeline.LoginAsync(_user);| await _pipeline.RequestAuthorizationEndpointAsync(| clientId: \"client1\",| responseType: \"id_token\",| scope: \"openid\",| redirectUri: \"https://client1/callback\",| state: \"123_state\",| nonce: \"123_nonce\");| _pipeline.BrowserClient.AllowAutoRedirect = false;| var response = await _pipeline.BrowserClient.GetAsync(IdentityServerPipeline.FederatedSignOutUrl + \"?sid=123\");| response.StatusCode.Should().Be(HttpStatusCode.Redirect);| response.Content.Headers.ContentType.Should().BeNull();| var html = await response.Content.ReadAsStringAsync();| html.Should().Be(String.Empty);| }"
      }
    ]
  },
  {
    "file": "PolicyProviderTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _allowedPaths.AddRange(new string[] {| \"/foo\",| \"/bar\",| \"/baz/quux\"| });| Init();| var ctx = new DefaultHttpContext();| ctx.Request.Scheme = \"https\";| ctx.Request.Host = new HostString(\"server\");| ctx.Request.Path = new PathString(\"/foo\");| ctx.Request.Headers.Add(\"Origin\", \"http://notserver\");| var response = await _subject.GetPolicyAsync(ctx, \"wrong_name\");| _mockPolicy.WasCalled.Should().BeFalse();| _mockInner.WasCalled.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _allowedPaths.AddRange(new string[] {| \"/foo\"| });| Init();| var ctx = new DefaultHttpContext();| ctx.Request.Scheme = \"https\";| ctx.Request.Host = new HostString(\"server\");| ctx.Request.Path = new PathString(\"/foo\");| ctx.Request.Headers.Add(\"Origin\", \"https://server\");| var response = await _subject.GetPolicyAsync(ctx, _options.Cors.CorsPolicyName);| _mockPolicy.WasCalled.Should().BeFalse();| _mockInner.WasCalled.Should().BeFalse();| }"
      }
    ]
  },
  {
    "file": "AuthorizeCallbackEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var parameters = new NameValueCollection()| {| { \"client_id\", \"client\" },| { \"nonce\", \"some_nonce\" },| { \"scope\", \"api1 api2\" }| };| var request = new ConsentRequest(parameters, _user.GetSubjectId());| _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse()));| _mockUserSession.User = _user;| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<AuthorizeResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _mockUserSession.User = _user;| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<AuthorizeResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| var parameters = new NameValueCollection()| {| { \"client_id\", \"client\" },| { \"nonce\", \"some_nonce\" },| { \"scope\", \"api1 api2\" }| };| var request = new ConsentRequest(parameters, _user.GetSubjectId());| _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(null));| _mockUserSession.User = _user;| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<AuthorizeResult>();| ((AuthorizeResult)result).Response.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubInteractionGenerator.Response.IsConsent = true;| var parameters = new NameValueCollection()| {| { \"client_id\", \"client\" },| { \"nonce\", \"some_nonce\" },| { \"scope\", \"api1 api2\" }| };| var request = new ConsentRequest(parameters, _user.GetSubjectId());| _mockUserConsentResponseMessageStore.Messages.Add(request.Id, null);| _mockUserSession.User = _user;| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<ConsentPageResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| _context.Request.Method = \"POST\";| var result = await _subject.ProcessAsync(_context);| var statusCode = result as StatusCodeResult;| statusCode.Should().NotBeNull();| statusCode.StatusCode.Should().Be(405);| }"
      },
      {
        "name": "Task",
        "body": "{| var parameters = new NameValueCollection()| {| { \"client_id\", \"client\" },| { \"nonce\", \"some_nonce\" },| { \"scope\", \"api1 api2\" }| };| var request = new ConsentRequest(parameters, _user.GetSubjectId());| _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse() { ScopesValuesConsented = new string[] { \"api1\", \"api2\" } }));| _mockUserSession.User = _user;| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());| var result = await _subject.ProcessAsync(_context);| _mockUserConsentResponseMessageStore.Messages.Count.Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var parameters = new NameValueCollection()| {| { \"client_id\", \"client\" },| { \"nonce\", \"some_nonce\" },| { \"scope\", \"api1 api2\" }| };| var request = new ConsentRequest(parameters, _user.GetSubjectId());| _mockUserConsentResponseMessageStore.Messages.Add(request.Id, new Message<ConsentResponse>(new ConsentResponse() { ScopesValuesConsented = new string[] { \"api1\", \"api2\" } }));| _mockUserSession.User = _user;| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize/callback\");| _context.Request.QueryString = new QueryString(\"?\" + parameters.ToQueryString());| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<AuthorizeResult>();| }"
      }
    ]
  },
  {
    "file": "AuthorizeEndpointBaseTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _params.Add(\"prompt\", \"none\");| _stubAuthorizeRequestValidator.Result.ValidatedRequest.IsOpenIdRequest = true;| _stubAuthorizeRequestValidator.Result.ValidatedRequest.ClientId = \"client\";| _stubAuthorizeRequestValidator.Result.ValidatedRequest.SessionId = \"some_session\";| _stubAuthorizeRequestValidator.Result.ValidatedRequest.RedirectUri = \"http://redirect\";| _stubAuthorizeRequestValidator.Result.IsError = true;| _stubAuthorizeRequestValidator.Result.Error = \"login_required\";| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<AuthorizeResult>();| ((AuthorizeResult)result).Response.IsError.Should().BeTrue();| ((AuthorizeResult)result).Response.SessionState.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubAuthorizeRequestValidator.Result.IsError = true;| _stubAuthorizeRequestValidator.Result.Error = \"some_error\";| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<AuthorizeResult>();| ((AuthorizeResult)result).Response.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubInteractionGenerator.Response.IsConsent = true;| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<ConsentPageResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubInteractionGenerator.Response.Error = \"error\";| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<AuthorizeResult>();| ((AuthorizeResult)result).Response.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var errorDescription = \"some error description\";| _stubInteractionGenerator.Response.Error = \"error\";| _stubInteractionGenerator.Response.ErrorDescription = errorDescription;| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<AuthorizeResult>();| var authorizeResult = ((AuthorizeResult)result);| authorizeResult.Response.IsError.Should().BeTrue();| authorizeResult.Response.ErrorDescription.Should().Be(errorDescription);| }"
      },
      {
        "name": "Task",
        "body": "{| _stubInteractionGenerator.Response.IsLogin = true;| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<LoginPageResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockUserSession.User = _user;| _stubInteractionGenerator.Response.RedirectUrl = \"http://foo.com\";| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<CustomRedirectResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await _subject.ProcessAuthorizeRequestAsync(_params, _user, null);| result.Should().BeOfType<AuthorizeResult>();| }"
      }
    ]
  },
  {
    "file": "AuthorizeEndpointTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _context.Request.Method = \"GET\";| _context.Request.Path = new PathString(\"/connect/authorize\");| _mockUserSession.User = _user;| var result = await _subject.ProcessAsync(_context);| result.Should().BeOfType<AuthorizeResult>();| }"
      },
      {
        "name": "Task",
        "body": "{| _context.Request.Method = \"POST\";| var result = await _subject.ProcessAsync(_context);| var statusCode = result as StatusCodeResult;| statusCode.Should().NotBeNull();| statusCode.StatusCode.Should().Be(415);| }"
      }
    ]
  },
  {
    "file": "EndSessionCallbackResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };| var ctx = new DefaultHttpContext();| ctx.Request.Method = \"GET\";| await _subject.ExecuteAsync(ctx);| ctx.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"frame-src http://foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _options.Authentication.RequireCspFrameSrcForSignout = false;| _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };| var ctx = new DefaultHttpContext();| ctx.Request.Method = \"GET\";| await _subject.ExecuteAsync(ctx);| ctx.Response.Headers[\"Content-Security-Policy\"].FirstOrDefault().Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "AuthorizeResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _response.Error = \"some_error\";| await _subject.ExecuteAsync(_context);| _mockErrorMessageStore.Messages.Count.Should().Be(1);| _context.Response.StatusCode.Should().Be(302);| var location = _context.Response.Headers[\"Location\"].First();| location.Should().StartWith(\"https://server/error\");| var query = QueryHelpers.ParseQuery(new Uri(location).Query);| query[\"errorId\"].First().Should().Be(_mockErrorMessageStore.Messages.First().Key);| }"
      },
      {
        "name": "Task",
        "body": "{| const string errorDescription = \"some error description\";| _response.Error = OidcConstants.AuthorizeErrors.AccessDenied;| _response.ErrorDescription = errorDescription;| _response.Request = new ValidatedAuthorizeRequest| {| ResponseMode = OidcConstants.ResponseModes.Query,| RedirectUri = \"http://client/callback\"| };| await _subject.ExecuteAsync(_context);| _mockUserSession.Clients.Count.Should().Be(0);| _context.Response.StatusCode.Should().Be(302);| var location = _context.Response.Headers[\"Location\"].First();| location.Should().StartWith(\"http://client/callback\");| var queryString = new Uri(location).Query;| var queryParams = QueryHelpers.ParseQuery(queryString);| queryParams[\"error\"].Should().Equal(OidcConstants.AuthorizeErrors.AccessDenied);| queryParams[\"error_description\"].Should().Equal(errorDescription);| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.Query,| RedirectUri = \"http://client/callback\"| };| await _subject.ExecuteAsync(_context);| _mockUserSession.Clients.Should().Contain(\"client\");| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.Query,| RedirectUri = \"http://client/callback\",| State = \"state\"| };| await _subject.ExecuteAsync(_context);| _context.Response.StatusCode.Should().Be(302);| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");| var location = _context.Response.Headers[\"Location\"].First();| location.Should().StartWith(\"http://client/callback\");| location.Should().Contain(\"?state=state\");| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.Fragment,| RedirectUri = \"http://client/callback\",| State = \"state\"| };| await _subject.ExecuteAsync(_context);| _context.Response.StatusCode.Should().Be(302);| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");| var location = _context.Response.Headers[\"Location\"].First();| location.Should().StartWith(\"http://client/callback\");| location.Should().Contain(\"#state=state\");| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.FormPost,| RedirectUri = \"http://client/callback\",| State = \"state\"| };| await _subject.ExecuteAsync(_context);| _context.Response.StatusCode.Should().Be(200);| _context.Response.ContentType.Should().StartWith(\"text/html\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-store\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"no-cache\");| _context.Response.Headers[\"Cache-Control\"].First().Should().Contain(\"max-age=0\");| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");| _context.Response.Body.Seek(0, SeekOrigin.Begin);| using (var rdr = new StreamReader(_context.Response.Body))| {| var html = rdr.ReadToEnd();| html.Should().Contain(\"<base target='_self'/>\");| html.Should().Contain(\"<form method='post' action='http://client/callback'>\");| html.Should().Contain(\"<input type='hidden' name='state' value='state' />\");| }| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.FormPost,| RedirectUri = \"http://client/callback\",| State = \"state\"| };| _options.Csp.Level = CspLevel.One;| await _subject.ExecuteAsync(_context);| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");| }"
      },
      {
        "name": "Task",
        "body": "{| _response.Request = new ValidatedAuthorizeRequest| {| ClientId = \"client\",| ResponseMode = OidcConstants.ResponseModes.FormPost,| RedirectUri = \"http://client/callback\",| State = \"state\"| };| _options.Csp.AddDeprecatedHeader = false;| await _subject.ExecuteAsync(_context);| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-orD0/VhH8hLqrLxKHD/HUEMdwqX6/0ve7c5hspX5VJ8='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].Should().BeEmpty();| }"
      }
    ]
  },
  {
    "file": "CheckSessionResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _subject.ExecuteAsync(_context);| _context.Response.StatusCode.Should().Be(200);| _context.Response.ContentType.Should().StartWith(\"text/html\");| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"default-src 'none';\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");| _context.Response.Body.Seek(0, SeekOrigin.Begin);| using (var rdr = new StreamReader(_context.Response.Body))| {| var html = rdr.ReadToEnd();| html.Should().Contain(\"<script id='cookie-name' type='application/json'>foobar</script>\");| }| }"
      },
      {
        "name": "Task",
        "body": "{| _options.Csp.Level = CspLevel.One;| await _subject.ExecuteAsync(_context);| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].First().Should().Contain(\"script-src 'unsafe-inline' 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");| }"
      },
      {
        "name": "Task",
        "body": "{| _options.Csp.AddDeprecatedHeader = false;| await _subject.ExecuteAsync(_context);| _context.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"script-src 'sha256-fa5rxHhZ799izGRP38+h4ud5QXNT0SFaFlh4eqDumBI='\");| _context.Response.Headers[\"X-Content-Security-Policy\"].Should().BeEmpty();| }"
      }
    ]
  },
  {
    "file": "EndSessionCallbackResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };| var ctx = new DefaultHttpContext();| ctx.Request.Method = \"GET\";| await _subject.ExecuteAsync(ctx);| ctx.Response.Headers[\"Content-Security-Policy\"].First().Should().Contain(\"frame-src http://foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _options.Authentication.RequireCspFrameSrcForSignout = false;| _validationResult.FrontChannelLogoutUrls = new[] { \"http://foo\" };| var ctx = new DefaultHttpContext();| ctx.Request.Method = \"GET\";| await _subject.ExecuteAsync(ctx);| ctx.Response.Headers[\"Content-Security-Policy\"].FirstOrDefault().Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "EndSessionResultTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _result.IsError = false;| _result.ValidatedRequest = new ValidatedEndSessionRequest| {| Client = new Client| {| ClientId = \"client\"| },| PostLogOutUri = \"http://client/post-logout-callback\"| };| await _subject.ExecuteAsync(_context);| _mockLogoutMessageStore.Messages.Count.Should().Be(1);| var location = _context.Response.Headers[\"Location\"].Single();| var query = QueryHelpers.ParseQuery(new Uri(location).Query);| location.Should().StartWith(\"https://server/logout\");| query[\"logoutId\"].First().Should().Be(_mockLogoutMessageStore.Messages.First().Key);| }"
      },
      {
        "name": "Task",
        "body": "{| _result.IsError = false;| await _subject.ExecuteAsync(_context);| _mockLogoutMessageStore.Messages.Count.Should().Be(0);| var location = _context.Response.Headers[\"Location\"].Single();| var query = QueryHelpers.ParseQuery(new Uri(location).Query);| location.Should().StartWith(\"https://server/logout\");| query.Count.Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| _result.IsError = true;| _result.ValidatedRequest = new ValidatedEndSessionRequest| {| Client = new Client| {| ClientId = \"client\"| },| PostLogOutUri = \"http://client/post-logout-callback\"| };| await _subject.ExecuteAsync(_context);| _mockLogoutMessageStore.Messages.Count.Should().Be(0);| var location = _context.Response.Headers[\"Location\"].Single();| var query = QueryHelpers.ParseQuery(new Uri(location).Query);| location.Should().StartWith(\"https://server/logout\");| query.Count.Should().Be(0);| }"
      }
    ]
  },
  {
    "file": "ApiResourceSigningAlgorithmSelectionTests.cs",
    "methods": [
      {
        "name": "Single_resource_no_allowed_algorithms_set_should_return_empty_list",
        "body": "{| var resource = new ApiResource();| var allowedAlgorithms = new List<ApiResource> { resource }.FindMatchingSigningAlgorithms();| allowedAlgorithms.Count().Should().Be(0);| }"
      },
      {
        "name": "Two_resources_no_allowed_algorithms_set_should_return_empty_list",
        "body": "{| var resource1 = new ApiResource();| var resource2 = new ApiResource();| var allowedAlgorithms = new List<ApiResource> { resource1, resource2 }.FindMatchingSigningAlgorithms();| allowedAlgorithms.Count().Should().Be(0);| }"
      }
    ]
  },
  {
    "file": "HttpRequestExtensionsTests.cs",
    "methods": [
      {
        "name": "GetCorsOrigin_valid_cors_request_should_return_cors_origin",
        "body": "{| var ctx = new DefaultHttpContext();| ctx.Request.Scheme = \"http\";| ctx.Request.Host = new HostString(\"foo\");| ctx.Request.Headers.Add(\"Origin\", \"http://bar\");| ctx.Request.GetCorsOrigin().Should().Be(\"http://bar\");| }"
      },
      {
        "name": "GetCorsOrigin_origin_from_same_host_should_not_return_cors_origin",
        "body": "{| var ctx = new DefaultHttpContext();| ctx.Request.Scheme = \"http\";| ctx.Request.Host = new HostString(\"foo\");| ctx.Request.Headers.Add(\"Origin\", \"http://foo\");| ctx.Request.GetCorsOrigin().Should().BeNull();| }"
      },
      {
        "name": "GetCorsOrigin_no_origin_should_not_return_cors_origin",
        "body": "{| var ctx = new DefaultHttpContext();| ctx.Request.Scheme = \"http\";| ctx.Request.Host = new HostString(\"foo\");| ctx.Request.GetCorsOrigin().Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "IResourceStoreExtensionsTests.cs",
    "methods": [
      {
        "name": "GetAllEnabledResourcesAsync_on_duplicate_identity_scopes_should_fail",
        "body": "{| var store = new MockResourceStore()| {| IdentityResources = {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"A\" } }| };| Func<Task> a = () => store.GetAllEnabledResourcesAsync();| a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"identity scopes\");| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| IdentityResources = {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"B\" } }| };| await store.GetAllEnabledResourcesAsync();| }"
      },
      {
        "name": "GetAllEnabledResourcesAsync_on_duplicate_api_resources_should_fail",
        "body": "{| var store = new MockResourceStore()| {| ApiResources = { new ApiResource { Name = \"a\" }, new ApiResource { Name = \"a\" } }| };| Func<Task> a = () => store.GetAllEnabledResourcesAsync();| a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"api resources\");| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| ApiResources = { new ApiResource(\"A\"), new ApiResource(\"B\") }| };| await store.GetAllEnabledResourcesAsync();| }"
      },
      {
        "name": "FindResourcesByScopeAsync_on_duplicate_identity_scopes_should_fail",
        "body": "{| var store = new MockResourceStore()| {| IdentityResources = {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"A\" } }| };| Func<Task> a = () => store.FindResourcesByScopeAsync(new string[] { \"A\" });| a.Should().Throw<Exception>().And.Message.ToLowerInvariant().Should().Contain(\"duplicate\").And.Contain(\"identity scopes\");| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| IdentityResources = {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"B\" } }| };| await store.FindResourcesByScopeAsync(new string[] { \"A\" });| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| ApiResources = { | new ApiResource { Name = \"api1\", Scopes = { \"a\" } },| new ApiResource() { Name = \"api2\", Scopes = { \"a\" } },| },| ApiScopes = { | new ApiScope(\"a\") | } | };| var result = await store.FindResourcesByScopeAsync(new string[] { \"a\" });| result.ApiResources.Count.Should().Be(2);| result.ApiScopes.Count.Should().Be(1);| result.ApiResources.Select(x => x.Name).Should().BeEquivalentTo(new[] { \"api1\", \"api2\" });| result.ApiScopes.Select(x => x.Name).Should().BeEquivalentTo(new[] { \"a\" });| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| ApiResources = { new ApiResource(\"A\"), new ApiResource(\"B\") }| };| await store.FindResourcesByScopeAsync(new string[] { \"A\" });| }"
      },
      {
        "name": "Task",
        "body": "{| var store = new MockResourceStore()| {| ApiResources = { | new ApiResource { | Name = \"api1\", Scopes = { \"a\", \"a\" }| }| },| ApiScopes = {| new ApiScope(\"a\"),| }| };| var result = await store.FindResourcesByScopeAsync(new string[] { \"a\" });| result.ApiResources.Count.Should().Be(1);| }"
      }
    ]
  },
  {
    "file": "IdentityServerBuilderExtensionsCacheStoreTests.cs",
    "methods": [
      {
        "name": "AddClientStoreCache_should_add_concrete_iclientstore_implementation",
        "body": "{| var services = new ServiceCollection();| var identityServerBuilder = new IdentityServerBuilder(services);| identityServerBuilder.AddClientStoreCache<CustomClientStore>();| services.Any(x => x.ImplementationType == typeof(CustomClientStore)).Should().BeTrue();| }"
      },
      {
        "name": "AddResourceStoreCache_should_attempt_to_register_iresourcestore_implementation",
        "body": "{| var services = new ServiceCollection();| var identityServerBuilder = new IdentityServerBuilder(services);| identityServerBuilder.AddResourceStoreCache<CustomResourceStore>();| services.Any(x => x.ImplementationType == typeof(CustomResourceStore)).Should().BeTrue();| }"
      }
    ]
  },
  {
    "file": "IdentityServerBuilderExtensionsCryptoTests.cs",
    "methods": [
      {
        "name": "AddSigningCredential_with_json_web_key_containing_asymmetric_key_should_succeed",
        "body": "{| IServiceCollection services = new ServiceCollection();| IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);| String json =| @\"{| \"\"alg\"\" : \"\"RS256\"\",| \"\"kty\"\" : \"\"RSA\"\",| \"\"use\"\" : \"\"sig\"\",| \"\"d\"\" : \"\"KGGNkbbgm2hNMqW6fP1fmcWwEBy77WOJIPAXnDJ0KxNTtqDF8K5ULj7EElHO1A8ZnNl1Ey/x//G9lJCOQUU9wmj010dOSsW0NBbR5NtRtLLuVbkVdyft53PGeTQs+1S3c51fz9jojtNqmlfXSANPFOH6QhxmzpTx3KLsf/TpCzblkSrEGOOqCCvVdl7ybTcB230jNhh3JoL7po1rvxKtoOM4a/Bs0NtKj7e+VaHcf0GLnBPJYetsHu43ZfNejJeDoouaXZzeVEklY3B0pe10OTCIOu0JUKGZxNekklRIo1WSEYdL+CJfrSKWIv8bLj6xSr5zrASvWODyH443LN6ZvQ==\"\",| \"\"e\"\" : \"\"AQAB\"\",| \"\"n\"\" : \"\"q7mZfquRq8tzg/5slbNdQmrosNN/mFXS25dbSPm11qEDCgZa452KkO8+hvMtqa92QaqdlmalSF8+FRDOz3grDR5NtmnXZxuKnp+raKfzpC6hCvh2JSIe/J9enmsMM4YeI4d1FOSDwhJlZIYMdMnqG/VJtO1LSHjOaF3XN31ANKF0nPAsmr2/WysiQlxnxxiikLEnsFuNdS615ODDXFGTQ1E+zc4zVur4/Ox0cllPwHPA4PqoIgdPJPL+xM9IOIXuAGtsp4CYoxT6VWaRrALIZXXDY806WGTuctq4KKot6FGL9HQte2hRLl4E/r8SzIK86U3wRwrBe7saK+XUXoP0gQ=\"\",| \"\"p\"\" :|\"\"25dkucyCSqxRcJpRrhl7PXqw7wqBZeLQgYlZLpK493PdM8pFfq+/LK1hFtxIjdFKqXS/TOikB4YCBMEH0Im3HZ8Lo0dub3SWNhdegJyRjMbcoO+A9YSODEj7DFaNpZtdmtDi1n6etJm66ctPSR20NNpzoYZuaJ92fVQiKiOh6Qs=\"\",| \"\"q\"\" : \"\"yDKBrS8l1DOx4dwP9hdwhqZJ3XahidiIZSL7m46I/6+cjaki/1mtNiA60MOgqTKegP7Fo7jAYvliqQwnvVGmQvLv19cfKywlIuKN9DdkLHnKh75hfo7aakEbO7GJ5zVgsNnKOdf8wvpclfvIuRDEVva4cksPzsJy6K7C8ENCSCM=\"\",| \"\"dp\"\" : \"\"GlYJ6o6wgawxCEQ5z5uWwETau5CS/Fk7kI2ceI14SZVHzlJQC2WglAcnQcqhmQCk57Xsy5iLM6vKyi8sdMJPh+nvR2HlyNA+w7YBy4L7odqn01VmLgv7zVVjZpNq4ZXEoDC1Q+xjtF1LoYaUt7wsRLp+a7znuPyHBXj1sAAeBwk=\"\",| \"\"dq\"\" : \"\"W8OK3S83T8VCTBzq1Ap6cb3XLcQq11yBaJpYaj0zXr/IKsbUW+dnFeBAFWEWS3gAX3Bod1tAFB3rs0D3FjhO1XE1ruHUT520iAEAwGiDaj+JLh994NzqELo3GW2PoIM/BtFNeKYgHd9UgQsgPnQJCzOb6Aev/z3yHeW9RRQPVbE=\"\",| \"\"qi\"\" : \"\"w4KdmiDN1GtK71JxaasqmEKPNfV3v2KZDXKnfyhUsdx/idKbdTVjvMOkxFPJ4FqV4yIVn06f3QHTm4NEG18Diqxsrzd6kXQIHOa858tLsCcmt9FoGfrgCFgVceh3K/Zah/r8rl9Y61u0Z1kZumwMvFpFE+mVU01t9HgTEAVkHTc=\"\",| }\";| JsonWebKey jsonWebKey = new JsonWebKey(json);| SigningCredentials credentials = new SigningCredentials(jsonWebKey, jsonWebKey.Alg);| identityServerBuilder.AddSigningCredential(credentials);| }"
      },
      {
        "name": "AddSigningCredential_with_json_web_key_containing_symmetric_key_should_throw_exception",
        "body": "{| IServiceCollection services = new ServiceCollection();| IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);| String json =| @\"{| \"\"alg\"\" : \"\"HS256\"\",| \"\"kty\"\" : \"\"oct\"\",| \"\"use\"\" : \"\"sig\"\",| \"\"k\"\" : \"\"y5FHaQFtC294HLAtPXAcMkxZ5gHzCq24223vSYQUrDuu-3CUw7UzPru-AX30ubeB2IM_gUsNQ80bX22wwSk_3LC6XxYxqeGJZSeoQqHG0VNbaWCVkqeuB_HOiL1-ksPfGT-o8_A_Uv-6zi2NaEOYpnIyff5LpdW__LhiE-bhIenaw7GhoXSAfsGEZfNZpUUOU35NAiN2dv0T5vptb87wkL1I2zLhV0pdLvWsDWgQPINEa8bbCA_mseBYpB1eioZvt0TZbp6CL9tiEoiikYV_F3IutrJ2SOWYtDNFeQ3sbyYP7zTzh9a2eyaM8ca5_q3qosI92AbZ7WpEFLa9cZ_O7g\"\"| }\";| JsonWebKey jsonWebKey = new JsonWebKey(json);| SigningCredentials credentials = new SigningCredentials(jsonWebKey, jsonWebKey.Alg);| Assert.Throws<InvalidOperationException>(() => identityServerBuilder.AddSigningCredential(credentials));| }"
      },
      {
        "name": "AddDeveloperSigningCredential_should_succeed",
        "body": "{| IServiceCollection services = new ServiceCollection();| IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);| identityServerBuilder.AddDeveloperSigningCredential();| //clean up... delete stored rsa key| var filename = Path.Combine(Directory.GetCurrentDirectory(), \"tempkey.rsa\");| if (File.Exists(filename))| File.Delete(filename);| }"
      },
      {
        "name": "AddDeveloperSigningCredential_should_succeed_when_called_multiple_times",
        "body": "{| IServiceCollection services = new ServiceCollection();| IIdentityServerBuilder identityServerBuilder = new IdentityServerBuilder(services);| try| {| identityServerBuilder.AddDeveloperSigningCredential();| //calling a second time will try to load the saved rsa key from disk. An exception will be throw if the private key is not serialized properly.| identityServerBuilder.AddDeveloperSigningCredential();| }| finally| {| //clean up... delete stored rsa key| var filename = Path.Combine(Directory.GetCurrentDirectory(), \"tempkey.rsa\");| if (File.Exists(filename))| File.Delete(filename);| }| }"
      }
    ]
  },
  {
    "file": "JwtPayloadCreationTests.cs",
    "methods": [
      {
        "name": "Should_create_scopes_as_array_by_default",
        "body": "{| var options = new IdentityServerOptions();| var payload = _token.CreateJwtPayload(new SystemClock(), options, TestLogger.Create<JwtPayloadCreationTests>());| payload.Should().NotBeNull();| var scopes = payload.Claims.Where(c => c.Type == JwtClaimTypes.Scope).ToArray();| scopes.Count().Should().Be(3);| scopes[0].Value.Should().Be(\"scope1\");| scopes[1].Value.Should().Be(\"scope2\");| scopes[2].Value.Should().Be(\"scope3\");| }"
      },
      {
        "name": "Should_create_scopes_as_string",
        "body": "{| var options = new IdentityServerOptions| {| EmitScopesAsSpaceDelimitedStringInJwt = true| };| | var payload = _token.CreateJwtPayload(new SystemClock(), options, TestLogger.Create<JwtPayloadCreationTests>());| payload.Should().NotBeNull();| var scopes = payload.Claims.Where(c => c.Type == JwtClaimTypes.Scope).ToList();| scopes.Count().Should().Be(1);| scopes.First().Value.Should().Be(\"scope1 scope2 scope3\");| }"
      }
    ]
  },
  {
    "file": "StringExtensionsTests.cs",
    "methods": [
      {
        "name": "TestGetOrigin",
        "body": "{| CheckOrigin(\"http://idsvr.com\", \"http://idsvr.com\");| CheckOrigin(\"http://idsvr.com/\", \"http://idsvr.com\");| CheckOrigin(\"http://idsvr.com/test\", \"http://idsvr.com\");| CheckOrigin(\"http://idsvr.com/test/resource\", \"http://idsvr.com\");| CheckOrigin(\"http://idsvr.com:8080\", \"http://idsvr.com:8080\");| CheckOrigin(\"http://idsvr.com:8080/\", \"http://idsvr.com:8080\");| CheckOrigin(\"http://idsvr.com:8080/test\", \"http://idsvr.com:8080\");| CheckOrigin(\"http://idsvr.com:8080/test/resource\", \"http://idsvr.com:8080\");| CheckOrigin(\"http://127.0.0.1\", \"http://127.0.0.1\");| CheckOrigin(\"http://127.0.0.1/\", \"http://127.0.0.1\");| CheckOrigin(\"http://127.0.0.1/test\", \"http://127.0.0.1\");| CheckOrigin(\"http://127.0.0.1/test/resource\", \"http://127.0.0.1\");| CheckOrigin(\"http://127.0.0.1:8080\", \"http://127.0.0.1:8080\");| CheckOrigin(\"http://127.0.0.1:8080/\", \"http://127.0.0.1:8080\");| CheckOrigin(\"http://127.0.0.1:8080/test\", \"http://127.0.0.1:8080\");| CheckOrigin(\"http://127.0.0.1:8080/test/resource\", \"http://127.0.0.1:8080\");| CheckOrigin(\"http://localhost\", \"http://localhost\");| CheckOrigin(\"http://localhost/\", \"http://localhost\");| CheckOrigin(\"http://localhost/test\", \"http://localhost\");| CheckOrigin(\"http://localhost/test/resource\", \"http://localhost\");| CheckOrigin(\"http://localhost:8080\", \"http://localhost:8080\");| CheckOrigin(\"http://localhost:8080/\", \"http://localhost:8080\");| CheckOrigin(\"http://localhost:8080/test\", \"http://localhost:8080\");| CheckOrigin(\"http://localhost:8080/test/resource\", \"http://localhost:8080\");| CheckOrigin(\"https://idsvr.com\", \"https://idsvr.com\");| CheckOrigin(\"https://idsvr.com/\", \"https://idsvr.com\");| CheckOrigin(\"https://idsvr.com/test\", \"https://idsvr.com\");| CheckOrigin(\"https://idsvr.com/test/resource\", \"https://idsvr.com\");| CheckOrigin(\"https://idsvr.com:8080\", \"https://idsvr.com:8080\");| CheckOrigin(\"https://idsvr.com:8080/\", \"https://idsvr.com:8080\");| CheckOrigin(\"https://idsvr.com:8080/test\", \"https://idsvr.com:8080\");| CheckOrigin(\"https://idsvr.com:8080/test/resource\", \"https://idsvr.com:8080\");| CheckOrigin(\"https://127.0.0.1\", \"https://127.0.0.1\");| CheckOrigin(\"https://127.0.0.1/\", \"https://127.0.0.1\");| CheckOrigin(\"https://127.0.0.1/test\", \"https://127.0.0.1\");| CheckOrigin(\"https://127.0.0.1/test/resource\", \"https://127.0.0.1\");| CheckOrigin(\"https://127.0.0.1:8080\", \"https://127.0.0.1:8080\");| CheckOrigin(\"https://127.0.0.1:8080/\", \"https://127.0.0.1:8080\");| CheckOrigin(\"https://127.0.0.1:8080/test\", \"https://127.0.0.1:8080\");| CheckOrigin(\"https://127.0.0.1:8080/test/resource\", \"https://127.0.0.1:8080\");| CheckOrigin(\"https://localhost\", \"https://localhost\");| CheckOrigin(\"https://localhost/\", \"https://localhost\");| CheckOrigin(\"https://localhost/test\", \"https://localhost\");| CheckOrigin(\"https://localhost/test/resource\", \"https://localhost\");| CheckOrigin(\"https://localhost:8080\", \"https://localhost:8080\");| CheckOrigin(\"https://localhost:8080/\", \"https://localhost:8080\");| CheckOrigin(\"https://localhost:8080/test\", \"https://localhost:8080\");| CheckOrigin(\"https://localhost:8080/test/resource\", \"https://localhost:8080\");| CheckOrigin(\"test://idsvr.com\", null);| CheckOrigin(\"test://idsvr.com/\", null);| CheckOrigin(\"test://idsvr.com/test\", null);| CheckOrigin(\"test://idsvr.com/test/resource\", null);| CheckOrigin(\"test://idsvr.com:8080\", null);| CheckOrigin(\"test://idsvr.com:8080/\", null);| CheckOrigin(\"test://idsvr.com:8080/test\", null);| CheckOrigin(\"test://idsvr.com:8080/test/resource\", null);| CheckOrigin(\"test://127.0.0.1\", null);| CheckOrigin(\"test://127.0.0.1/\", null);| CheckOrigin(\"test://127.0.0.1/test\", null);| CheckOrigin(\"test://127.0.0.1/test/resource\", null);| CheckOrigin(\"test://127.0.0.1:8080\", null);| CheckOrigin(\"test://127.0.0.1:8080/\", null);| CheckOrigin(\"test://127.0.0.1:8080/test\", null);| CheckOrigin(\"test://127.0.0.1:8080/test/resource\", null);| CheckOrigin(\"test://localhost\", null);| CheckOrigin(\"test://localhost/\", null);| CheckOrigin(\"test://localhost/test\", null);| CheckOrigin(\"test://localhost/test/resource\", null);| CheckOrigin(\"test://localhost:8080\", null);| CheckOrigin(\"test://localhost:8080/\", null);| CheckOrigin(\"test://localhost:8080/test\", null);| CheckOrigin(\"test://localhost:8080/test/resource\", null);| }"
      }
    ]
  },
  {
    "file": "ValidatedAuthorizeRequestExtensionsTests.cs",
    "methods": [
      {
        "name": "GetAcrValues_should_return_snapshot_of_values",
        "body": "{| var request = new ValidatedAuthorizeRequest()| {| Raw = new System.Collections.Specialized.NameValueCollection()| };| request.AuthenticationContextReferenceClasses.Add(\"a\");| request.AuthenticationContextReferenceClasses.Add(\"b\");| request.AuthenticationContextReferenceClasses.Add(\"c\");| var acrs = request.GetAcrValues();| foreach(var acr in acrs)| {| request.RemoveAcrValue(acr);| }| }"
      }
    ]
  },
  {
    "file": "EndpointRouterTests.cs",
    "methods": [
      {
        "name": "Endpoint_ctor_requires_path_to_start_with_slash",
        "body": "{| Action a = () => new IdentityServer4.Hosting.Endpoint(\"ep1\", \"ep1\", typeof(MyEndpointHandler));| a.Should().Throw<ArgumentException>();| }"
      },
      {
        "name": "Find_should_return_null_for_incorrect_path",
        "body": "{| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));| var ctx = new DefaultHttpContext();| ctx.Request.Path = new PathString(\"/wrong\");| ctx.RequestServices = new StubServiceProvider();| var result = _subject.Find(ctx);| result.Should().BeNull();| }"
      },
      {
        "name": "Find_should_find_path",
        "body": "{| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));| var ctx = new DefaultHttpContext();| ctx.Request.Path = new PathString(\"/ep1\");| ctx.RequestServices = new StubServiceProvider();| var result = _subject.Find(ctx);| result.Should().BeOfType<MyEndpointHandler>();| }"
      },
      {
        "name": "Find_should_not_find_nested_paths",
        "body": "{| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));| var ctx = new DefaultHttpContext();| ctx.Request.Path = new PathString(\"/ep1/subpath\");| ctx.RequestServices = new StubServiceProvider();| var result = _subject.Find(ctx);| result.Should().BeNull();| }"
      },
      {
        "name": "Find_should_find_first_registered_mapping",
        "body": "{| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyEndpointHandler)));| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep1\", \"/ep1\", typeof(MyOtherEndpointHandler)));| var ctx = new DefaultHttpContext();| ctx.Request.Path = new PathString(\"/ep1\");| ctx.RequestServices = new StubServiceProvider();| var result = _subject.Find(ctx);| result.Should().BeOfType<MyEndpointHandler>();| }"
      },
      {
        "name": "Find_should_return_null_for_disabled_endpoint",
        "body": "{| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(EndpointNames.Authorize, \"/ep1\", typeof(MyEndpointHandler)));| _endpoints.Add(new IdentityServer4.Hosting.Endpoint(\"ep2\", \"/ep2\", typeof(MyOtherEndpointHandler)));| _options.Endpoints.EnableAuthorizeEndpoint = false;| var ctx = new DefaultHttpContext();| ctx.Request.Path = new PathString(\"/ep1\");| ctx.RequestServices = new StubServiceProvider();| var result = _subject.Find(ctx);| result.Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "ObjectSerializerTests.cs",
    "methods": [
      {
        "name": "Can_be_deserialize_message",
        "body": "{| Action a = () => IdentityServer4.ObjectSerializer.FromString<Message<ErrorMessage>>(\"{\\\"created\\\":0, \\\"data\\\": {\\\"error\\\": \\\"error\\\"}}\");| a.Should().NotThrow();| }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| EnableLocalLogin = false,| IdentityProviderRestrictions = new List<string>| {| \"some_idp\"| }| },| PromptModes = new[] { PromptModes.None },| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| _clock.UtcNowFunc = () => new DateTime(2020, 02, 03, 9, 0, 0);| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| AuthenticationTime = new DateTime(2020, 02, 01, 9, 0, 0),| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| EnableLocalLogin = true,| },| PromptModes = new[] { PromptModes.None },| MaxAge = 3600| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client(),| AuthenticationContextReferenceClasses = new List<string>{| \"idp:some_idp\"| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| PromptModes = new[] { PromptModes.None }| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client()| {| UserSsoLifetime = 3600 // 1h| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = \"local\",| AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(3700))| }.CreatePrincipal(),| PromptModes = new[] { PromptModes.None }| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client()| {| EnableLocalLogin = false| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| PromptModes = new[] { PromptModes.None }| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.IsLogin.Should().BeFalse();| }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Consent.cs",
    "methods": [
      {
        "name": "ProcessConsentAsync_NullRequest_Throws",
        "body": "{| Func<Task> act = () => _subject.ProcessConsentAsync(null, new ConsentResponse());| act.Should().Throw<ArgumentNullException>()| .And.ParamName.Should().Be(\"request\");| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.Consent },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| await _subject.ProcessConsentAsync(request, null);| }"
      },
      {
        "name": "ProcessConsentAsync_PromptModeIsLogin_Throws",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.Login },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| Func<Task> act = () => _subject.ProcessConsentAsync(request);| act.Should().Throw<ArgumentException>()| .And.Message.Should().Contain(\"PromptMode\");| }"
      },
      {
        "name": "ProcessConsentAsync_PromptModeIsSelectAccount_Throws",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.SelectAccount },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| Func<Task> act = () => _subject.ProcessConsentAsync(request);| act.Should().Throw<ArgumentException>()| .And.Message.Should().Contain(\"PromptMode\");| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.None },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var result = await _subject.ProcessConsentAsync(request);| request.WasConsentShown.Should().BeFalse();| result.IsError.Should().BeTrue();| result.Error.Should().Be(OidcConstants.AuthorizeErrors.ConsentRequired);| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.Consent },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var result = await _subject.ProcessConsentAsync(request);| request.WasConsentShown.Should().BeFalse();| result.IsConsent.Should().BeTrue();| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.Consent },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var result = await _subject.ProcessConsentAsync(request);| request.WasConsentShown.Should().BeFalse();| result.IsConsent.Should().BeTrue();| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| PromptModes = new[] { OidcConstants.PromptModes.Consent },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] {}| };| var result = await _subject.ProcessConsentAsync(request, consent);| request.WasConsentShown.Should().BeTrue();| result.IsError.Should().BeTrue();| result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] {}| };| var result = await _subject.ProcessConsentAsync(request, consent);| request.WasConsentShown.Should().BeTrue();| result.IsError.Should().BeTrue();| result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var client = new Client {};| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| Client = client| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] { \"read\" }| };| var result = await _subject.ProcessConsentAsync(request, consent);| result.IsError.Should().BeTrue();| result.Error.Should().Be(OidcConstants.AuthorizeErrors.AccessDenied);| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| Client = new Client {| AllowRememberConsent = false| },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] { \"openid\", \"read\" }| };| var result = await _subject.ProcessConsentAsync(request, consent);| request.ValidatedResources.Resources.IdentityResources.Count().Should().Be(1);| request.ValidatedResources.Resources.ApiScopes.Count().Should().Be(1);| \"openid\".Should().Be(request.ValidatedResources.Resources.IdentityResources.Select(x => x.Name).First());| \"read\".Should().Be(request.ValidatedResources.Resources.ApiScopes.First().Name);| request.WasConsentShown.Should().BeTrue();| result.IsConsent.Should().BeFalse();| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| Client = new Client {| AllowRememberConsent = false| },| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] { \"openid\", \"read\" }| };| var result = await _subject.ProcessConsentAsync(request, consent);| request.ValidatedResources.Resources.IdentityResources.Count().Should().Be(1);| request.ValidatedResources.Resources.ApiScopes.Count().Should().Be(1);| \"read\".Should().Be(request.ValidatedResources.Resources.ApiScopes.First().Name);| request.WasConsentShown.Should().BeTrue();| result.IsConsent.Should().BeFalse();| AssertUpdateConsentNotCalled();| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var client = new Client { AllowRememberConsent = true };| var user = new ClaimsPrincipal();| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| Client = client,| Subject = user,| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = true,| ScopesValuesConsented = new string[] { \"openid\", \"read\" }| };| var result = await _subject.ProcessConsentAsync(request, consent);| AssertUpdateConsentCalled(client, user, \"openid\", \"read\");| }"
      },
      {
        "name": "Task",
        "body": "{| RequiresConsent(true);| var client = new Client { AllowRememberConsent = true };| var user = new ClaimsPrincipal();| var request = new ValidatedAuthorizeRequest()| {| ResponseMode = OidcConstants.ResponseModes.Fragment,| State = \"12345\",| RedirectUri = \"https://client.com/callback\",| Client = client,| Subject = user,| RequestedScopes = new List<string> { \"openid\", \"read\", \"write\" },| ValidatedResources = GetValidatedResources(\"openid\", \"read\", \"write\"),| };| var consent = new ConsentResponse| {| RememberConsent = false,| ScopesValuesConsented = new string[] { \"openid\", \"read\" }| };| var result = await _subject.ProcessConsentAsync(request, consent);| AssertUpdateConsentCalled(client, user);| }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Custom.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| },| };| _subject.ProcessLoginResponse = new InteractionResponse| {| RedirectUrl = \"/custom\"| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsRedirect.Should().BeTrue();| result.RedirectUrl.Should().Be(\"/custom\");| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| },| PromptModes = new[] { PromptModes.None },| };| _subject.ProcessLoginResponse = new InteractionResponse| {| IsLogin = true| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"login_required\");| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| },| PromptModes = new[] { PromptModes.None },| };| _subject.ProcessLoginResponse = new InteractionResponse| {| RedirectUrl = \"/custom\"| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"interaction_required\");| result.RedirectUrl.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| },| PromptModes = new[] { PromptModes.None },| };| _subject.ProcessConsentResponse = new InteractionResponse| {| IsConsent = true| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsError.Should().BeTrue();| result.Error.Should().Be(\"consent_required\");| }"
      }
    ]
  },
  {
    "file": "AuthorizeInteractionResponseGeneratorTests_Login.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = Principal.Anonymous| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client(),| ValidatedResources = new ResourceValidationResult(),| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal()| };| var result = await _subject.ProcessInteractionAsync(request);| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\") {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client | {| IdentityProviderRestrictions = new List<string> | {| IdentityServerConstants.LocalIdentityProvider| }| }| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal(),| Client = new Client| {| EnableLocalLogin = false,| IdentityProviderRestrictions = new List<string> | {| \"some_idp\"| }| }| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client(),| AuthenticationContextReferenceClasses = new List<string>{| \"idp:\" + IdentityServerConstants.LocalIdentityProvider| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client(),| AuthenticationContextReferenceClasses = new List<string>{| \"idp:some_idp\"| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client() {| UserSsoLifetime = 3600 // 1h| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = \"local\",| AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(10))| }.CreatePrincipal()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client()| {| UserSsoLifetime = 3600 // 1h| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = \"local\",| AuthenticationTime = _clock.UtcNow.UtcDateTime.Subtract(TimeSpan.FromSeconds(3700))| }.CreatePrincipal()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Client = new Client()| {| EnableLocalLogin = false| },| Subject = new IdentityServerUser(\"123\")| {| IdentityProvider = IdentityServerConstants.LocalIdentityProvider| }.CreatePrincipal()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\").CreatePrincipal(),| PromptModes = new[] { OidcConstants.PromptModes.Login },| Raw = new NameValueCollection()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\").CreatePrincipal(),| PromptModes = new[] { OidcConstants.PromptModes.SelectAccount },| Raw = new NameValueCollection()| };| var result = await _subject.ProcessLoginAsync(request);| result.IsLogin.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new ValidatedAuthorizeRequest| {| ClientId = \"foo\",| Subject = new IdentityServerUser(\"123\").CreatePrincipal(),| PromptModes = new[] { OidcConstants.PromptModes.Login },| Raw = new NameValueCollection| {| { OidcConstants.AuthorizeRequest.Prompt, OidcConstants.PromptModes.Login }| }| };| var result = await _subject.ProcessLoginAsync(request);| request.Raw.AllKeys.Should().NotContain(OidcConstants.AuthorizeRequest.Prompt);| }"
      }
    ]
  },
  {
    "file": "DeviceAuthorizationResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "ProcessAsync_when_valiationresult_null_exect_exception",
        "body": "{| Func<Task> act = () => generator.ProcessAsync(null, TestBaseUrl);| act.Should().Throw<ArgumentNullException>();| }"
      },
      {
        "name": "ProcessAsync_when_valiationresult_client_null_exect_exception",
        "body": "{| var validationResult = new DeviceAuthorizationRequestValidationResult(new ValidatedDeviceAuthorizationRequest());| Func <Task> act = () => generator.ProcessAsync(validationResult, TestBaseUrl);| act.Should().Throw<ArgumentNullException>();| }"
      },
      {
        "name": "ProcessAsync_when_baseurl_null_exect_exception",
        "body": "{| Func<Task> act = () => generator.ProcessAsync(testResult, null);| act.Should().Throw<ArgumentException>();| }"
      },
      {
        "name": "Task",
        "body": "{| var creationTime = DateTime.UtcNow;| clock.UtcNowFunc = () => creationTime;| testResult.ValidatedRequest.Client.UserCodeType = FakeUserCodeGenerator.UserCodeTypeValue;| await deviceFlowCodeService.StoreDeviceAuthorizationAsync(FakeUserCodeGenerator.TestCollisionUserCode, new DeviceCode());| var response = await generator.ProcessAsync(testResult, TestBaseUrl);| response.UserCode.Should().Be(FakeUserCodeGenerator.TestUniqueUserCode);| }"
      },
      {
        "name": "Task",
        "body": "{| var creationTime = DateTime.UtcNow;| clock.UtcNowFunc = () => creationTime;| fakeUserCodeGenerator.RetryLimit = 1;| testResult.ValidatedRequest.Client.UserCodeType = FakeUserCodeGenerator.UserCodeTypeValue;| await deviceFlowCodeService.StoreDeviceAuthorizationAsync(FakeUserCodeGenerator.TestCollisionUserCode, new DeviceCode());| await Assert.ThrowsAsync<InvalidOperationException>(() => generator.ProcessAsync(testResult, TestBaseUrl));| }"
      },
      {
        "name": "Task",
        "body": "{| var creationTime = DateTime.UtcNow;| clock.UtcNowFunc = () => creationTime;| testResult.ValidatedRequest.RequestedScopes = new List<string> { \"openid\", \"api1\" };| testResult.ValidatedRequest.ValidatedResources = new ResourceValidationResult(new Resources(| identityResources.Where(x=>x.Name == \"openid\"), | apiResources.Where(x=>x.Name == \"resource\"), | scopes.Where(x=>x.Name == \"api1\")));| var response = await generator.ProcessAsync(testResult, TestBaseUrl);| response.UserCode.Should().NotBeNullOrWhiteSpace();| var userCode = await deviceFlowCodeService.FindByUserCodeAsync(response.UserCode);| userCode.Should().NotBeNull();| userCode.ClientId.Should().Be(testResult.ValidatedRequest.Client.ClientId);| userCode.Lifetime.Should().Be(testResult.ValidatedRequest.Client.DeviceCodeLifetime);| userCode.CreationTime.Should().Be(creationTime);| userCode.Subject.Should().BeNull();| userCode.AuthorizedScopes.Should().BeNull();| userCode.RequestedScopes.Should().Contain(testResult.ValidatedRequest.RequestedScopes);| }"
      },
      {
        "name": "Task",
        "body": "{| var creationTime = DateTime.UtcNow;| clock.UtcNowFunc = () => creationTime;| var response = await generator.ProcessAsync(testResult, TestBaseUrl);| response.DeviceCode.Should().NotBeNullOrWhiteSpace();| response.Interval.Should().Be(options.DeviceFlow.Interval);| | var deviceCode = await deviceFlowCodeService.FindByDeviceCodeAsync(response.DeviceCode);| deviceCode.Should().NotBeNull();| deviceCode.ClientId.Should().Be(testResult.ValidatedRequest.Client.ClientId);| deviceCode.IsOpenId.Should().Be(testResult.ValidatedRequest.IsOpenIdRequest);| deviceCode.Lifetime.Should().Be(testResult.ValidatedRequest.Client.DeviceCodeLifetime);| deviceCode.CreationTime.Should().Be(creationTime);| deviceCode.Subject.Should().BeNull();| deviceCode.AuthorizedScopes.Should().BeNull();| | response.DeviceCodeLifetime.Should().Be(deviceCode.Lifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| const string baseUrl = \"http://localhost:5000/\";| options.UserInteraction.DeviceVerificationUrl = \"/device\";| options.UserInteraction.DeviceVerificationUserCodeParameter = \"userCode\";| var response = await generator.ProcessAsync(testResult, baseUrl);| response.VerificationUri.Should().Be(\"http://localhost:5000/device\");| response.VerificationUriComplete.Should().StartWith(\"http://localhost:5000/device?userCode=\");| }"
      },
      {
        "name": "Task",
        "body": "{| const string baseUrl = \"http://localhost:5000/\";| options.UserInteraction.DeviceVerificationUrl = \"http://short/device\";| options.UserInteraction.DeviceVerificationUserCodeParameter = \"userCode\";| var response = await generator.ProcessAsync(testResult, baseUrl);| response.VerificationUri.Should().Be(\"http://short/device\");| response.VerificationUriComplete.Should().StartWith(\"http://short/device?userCode=\");| }"
      }
    ]
  },
  {
    "file": "UserInfoResponseGeneratorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var resources = await _subject.GetRequestedResourcesAsync(null);| var claims = await _subject.GetRequestedClaimTypesAsync(resources);| claims.Should().BeEquivalentTo(new string[] { });| }"
      },
      {
        "name": "Task",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"c1\", \"c2\" }));| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"c2\", \"c3\" }));| var resources = await _subject.GetRequestedResourcesAsync(new[] { \"id1\", \"id2\", \"id3\" });| var claims = await _subject.GetRequestedClaimTypesAsync(resources);| claims.Should().BeEquivalentTo(new string[] { \"c1\", \"c2\", \"c3\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"c1\", \"c2\" }) { Enabled = false });| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"c2\", \"c3\" }));| var resources = await _subject.GetRequestedResourcesAsync(new[] { \"id1\", \"id2\", \"id3\" });| var claims = await _subject.GetRequestedClaimTypesAsync(resources);| claims.Should().BeEquivalentTo(new string[] { \"c2\", \"c3\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| var result = new UserInfoRequestValidationResult| {| Subject = _user,| TokenValidationResult = new TokenValidationResult| {| Claims = new List<Claim>| {| { new Claim(\"scope\", \"id1\") },| { new Claim(\"scope\", \"id2\") },| { new Claim(\"scope\", \"id3\") }| },| Client = _client| }| };| var claims = await _subject.ProcessAsync(result);| _mockProfileService.GetProfileWasCalled.Should().BeTrue();| _mockProfileService.ProfileContext.RequestedClaimTypes.Should().BeEquivalentTo(new[] { \"foo\", \"bar\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| | var address = new| {| street_address = \"One Hacker Way\",| locality = \"Heidelberg\",| postal_code = 69118,| country = \"Germany\"| };| | _mockProfileService.ProfileClaims = new[]| {| new Claim(\"email\", \"fred@gmail.com\"),| new Claim(\"name\", \"fred jones\"),| new Claim(\"address\", @\"{ 'street_address': 'One Hacker Way', 'locality': 'Heidelberg', 'postal_code': 69118, 'country': 'Germany' }\", IdentityServerConstants.ClaimValueTypes.Json),| new Claim(\"address2\", JsonSerializer.Serialize(address), IdentityServerConstants.ClaimValueTypes.Json)| };| var result = new UserInfoRequestValidationResult| {| Subject = _user,| TokenValidationResult = new TokenValidationResult| {| Claims = new List<Claim>| {| { new Claim(\"scope\", \"id1\") },| { new Claim(\"scope\", \"id2\") },| { new Claim(\"scope\", \"id3\") }| },| Client = _client| }| };| var claims = await _subject.ProcessAsync(result);| claims.Should().ContainKey(\"email\");| claims[\"email\"].Should().Be(\"fred@gmail.com\");| claims.Should().ContainKey(\"name\");| claims[\"name\"].Should().Be(\"fred jones\");| | // this will be treated as a string because this is not valid JSON from the System.Text library point of view| claims.Should().ContainKey(\"address\");| claims[\"address\"].Should().Be(\"{ 'street_address': 'One Hacker Way', 'locality': 'Heidelberg', 'postal_code': 69118, 'country': 'Germany' }\");| | // this is a JsonElement| claims.Should().ContainKey(\"address2\");| claims[\"address2\"].ToString().Should().Be(\"{\\\"street_address\\\":\\\"One Hacker Way\\\",\\\"locality\\\":\\\"Heidelberg\\\",\\\"postal_code\\\":69118,\\\"country\\\":\\\"Germany\\\"}\");| }"
      },
      {
        "name": "Task",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| var result = new UserInfoRequestValidationResult| {| Subject = _user,| TokenValidationResult = new TokenValidationResult| {| Claims = new List<Claim>| {| { new Claim(\"scope\", \"id1\") },| { new Claim(\"scope\", \"id2\") },| { new Claim(\"scope\", \"id3\") }| },| Client = _client| }| };| var claims = await _subject.ProcessAsync(result);| claims.Should().ContainKey(\"sub\");| claims[\"sub\"].Should().Be(\"bob\");| }"
      },
      {
        "name": "ProcessAsync_should_throw_if_incorrect_sub_issued_by_profile_service",
        "body": "{| _identityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _identityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| _mockProfileService.ProfileClaims = new[]| {| new Claim(\"sub\", \"fred\")| };| var result = new UserInfoRequestValidationResult| {| Subject = _user,| TokenValidationResult = new TokenValidationResult| {| Claims = new List<Claim>| {| { new Claim(\"scope\", \"id1\") },| { new Claim(\"scope\", \"id2\") },| { new Claim(\"scope\", \"id3\") }| },| Client = _client| }| };| Func<Task> act = () => _subject.ProcessAsync(result);| act.Should().Throw<InvalidOperationException>()| .And.Message.Should().Contain(\"subject\");| }"
      }
    ]
  },
  {
    "file": "DefaultClaimsServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);| var types = claims.Select(x => x.Type);| types.Should().Contain(JwtClaimTypes.Subject);| types.Should().Contain(JwtClaimTypes.AuthenticationTime);| types.Should().Contain(JwtClaimTypes.IdentityProvider);| types.Should().Contain(JwtClaimTypes.AuthenticationMethod);| types.Should().Contain(JwtClaimTypes.AuthenticationContextClassReference);| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));| var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);| _mockMockProfileService.GetProfileWasCalled.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));| _mockMockProfileService.ProfileClaims.Add(new Claim(\"foo\", \"foo1\"));| var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, true, _validatedRequest);| _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _client.AlwaysIncludeUserClaimsInIdToken = true;| _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));| _mockMockProfileService.ProfileClaims.Add(new Claim(\"foo\", \"foo1\"));| var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, false, _validatedRequest);| _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id_scope\", new[] { \"foo\" }));| _mockMockProfileService.ProfileClaims.Add(new Claim(\"aud\", \"bar\"));| var claims = await _subject.GetIdentityTokenClaimsAsync(_user, ResourceValidationResult, true, _validatedRequest);| claims.Count(x => x.Type == \"aud\" && x.Value == \"bar\").Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == JwtClaimTypes.ClientId && x.Value == _client.ClientId).Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == \"client_some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| _validatedRequest.Client.ClientClaimsPrefix = \"custom_prefix_\";| var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == \"custom_prefix_some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| _validatedRequest.Client.ClientClaimsPrefix = null;| var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == \"some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| _validatedRequest.Client.ClientClaimsPrefix = null;| _validatedRequest.Client.AlwaysSendClientClaims = true;| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == \"some_claim\" && x.Value == \"some_claim_value\").Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| _resources.ApiScopes.Add(new ApiScope(\"api1\"));| _resources.ApiScopes.Add(new ApiScope(\"api2\"));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Count().Should().Be(4);| scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api1\", \"api2\", \"id1\", \"id2\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiScopes.Add(new ApiScope(\"api\"));| var resourceResult = new ResourceValidationResult()| {| Resources = _resources,| ParsedScopes = { new ParsedScopeValue(\"api:123\", \"api\", \"123\") }| };| var claims = await _subject.GetAccessTokenClaimsAsync(_user, resourceResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Count().Should().Be(1);| scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api:123\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiResources.Add(new ApiResource(\"api1\"));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Count().Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| // arguably, if this situation arises, then the ResourceValidationResult was not populated properly| // with ParsedScopes matching ApiScopes| _resources.ApiScopes.Add(new ApiScope(\"api1\"));| var resourceResult = new ResourceValidationResult()| {| Resources = _resources,| ParsedScopes = { new ParsedScopeValue(\"api2\") }| };| var claims = await _subject.GetAccessTokenClaimsAsync(_user, resourceResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Count().Should().Be(1);| scopes.ToArray().Should().BeEquivalentTo(new string[] { \"api2\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.OfflineAccess = false;| _resources.IdentityResources.Clear();| _resources.ApiResources.Clear();| _resources.ApiScopes.Clear();| _resources.ApiResources.Add(new ApiResource { Name = \"api1\", Scopes = { \"resource\" } });| _resources.ApiResources.Add(new ApiResource { Name = \"api2\", Scopes = { \"resource\" } });| _resources.ApiResources.Add(new ApiResource { Name = \"api3\", Scopes = { \"resource\" } });| _resources.ApiScopes.Add(new ApiScope(\"resource\"));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Count().Should().Be(1);| scopes.ToArray().Should().BeEquivalentTo(new string[] { \"resource\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| _resources.ApiResources.Add(new ApiResource(\"api1\"));| _resources.ApiResources.Add(new ApiResource(\"api2\"));| _resources.OfflineAccess = true;| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Should().Contain(IdentityServerConstants.StandardScopes.OfflineAccess);| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _resources.IdentityResources.Add(new IdentityResource(\"id2\", new[] { \"bar\" }));| _resources.ApiResources.Add(new ApiResource(\"api1\"));| _resources.ApiResources.Add(new ApiResource(\"api2\"));| _resources.OfflineAccess = true;| var claims = await _subject.GetAccessTokenClaimsAsync(null, ResourceValidationResult, _validatedRequest);| var scopes = claims.Where(x => x.Type == JwtClaimTypes.Scope).Select(x => x.Value);| scopes.Should().NotContain(IdentityServerConstants.StandardScopes.OfflineAccess);| }"
      },
      {
        "name": "Task",
        "body": "{| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| var types = claims.Select(x => x.Type);| types.Should().Contain(JwtClaimTypes.Subject);| types.Should().Contain(JwtClaimTypes.AuthenticationTime);| types.Should().Contain(JwtClaimTypes.IdentityProvider);| types.Should().Contain(JwtClaimTypes.AuthenticationMethod);| types.Should().Contain(JwtClaimTypes.AuthenticationContextClassReference);| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.IdentityResources.Add(new IdentityResource(\"id1\", new[] { \"foo\" }));| _resources.ApiResources.Add(new ApiResource(\"api1\", new string[] { \"bar\" }));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| _mockMockProfileService.GetProfileWasCalled.Should().BeTrue();| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().NotContain(\"foo\");| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"bar\");| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiResources.Add(new ApiResource(\"api1\", new[] { \"foo\" }));| _mockMockProfileService.ProfileClaims.Add(new Claim(\"aud\", \"bar\"));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| claims.Count(x => x.Type == \"aud\" && x.Value == \"bar\").Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiResources.Add(new ApiResource(\"api1\", new[] { \"foo\" }));| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiResources.Add(| new ApiResource(\"api\")| {| Scopes = { \"api1\" }| }| );| _resources.ApiScopes.Add(| new ApiScope(\"api1\")| {| UserClaims = { \"foo\" }| }| );| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");| }"
      },
      {
        "name": "Task",
        "body": "{| _resources.ApiResources.Add(| new ApiResource(\"api\")| {| UserClaims = { \"foo\" },| Scopes = { \"api1\" } | }| );| _resources.ApiScopes.Add(| new ApiScope(\"api1\")| {| UserClaims = { \"bar\" }| }| );| var claims = await _subject.GetAccessTokenClaimsAsync(_user, ResourceValidationResult, _validatedRequest);| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"foo\");| _mockMockProfileService.ProfileContext.RequestedClaimTypes.Should().Contain(\"bar\");| }"
      }
    ]
  },
  {
    "file": "DefaultConsentServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _client.AllowRememberConsent = false;| await _subject.UpdateConsentAsync(_user, _client, new [] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);| consent.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);| consent.Scopes.Count().Should().Be(2);| consent.Scopes.Should().Contain(\"scope1\");| consent.Scopes.Should().Contain(\"scope2\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| await _subject.UpdateConsentAsync(_user, _client, new ParsedScopeValue[] { });| var consent = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);| consent.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _client.RequireConsent = false;| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| result.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| _client.AllowRememberConsent = false;| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| result.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await _subject.RequiresConsentAsync(_user, _client, new ParsedScopeValue[] { });| result.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"offline_access\") });| result.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| result.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| result.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\"), new ParsedScopeValue(\"scope3\") });| var result = await _subject.RequiresConsentAsync(_user, _client, new [] { new ParsedScopeValue(\"scope2\") });| result.Should().BeFalse();| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.UpdateConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope2\"), new ParsedScopeValue(\"scope3\") });| var result = await _subject.RequiresConsentAsync(_user, _client, new[] { new ParsedScopeValue(\"scope1\"), new ParsedScopeValue(\"scope2\") });| result.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| now = DateTime.UtcNow;| var scopes = new[] { new ParsedScopeValue(\"foo\"), new ParsedScopeValue(\"bar\") };| _client.ConsentLifetime = 2;| await _subject.UpdateConsentAsync(_user, _client, scopes);| now = now.AddSeconds(3);| var result = await _subject.RequiresConsentAsync(_user, _client, scopes);| result.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| now = DateTime.UtcNow;| var scopes = new[] { new ParsedScopeValue(\"foo\"), new ParsedScopeValue(\"bar\") };| _client.ConsentLifetime = 2;| await _subject.UpdateConsentAsync(_user, _client, scopes);| now = now.AddSeconds(3);| await _subject.RequiresConsentAsync(_user, _client, scopes);| var result = await _userConsentStore.GetUserConsentAsync(_user.GetSubjectId(), _client.ClientId);| result.Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "DefaultCorsPolicyServiceTests.cs",
    "methods": [
      {
        "name": "IsOriginAllowed_null_param_ReturnsFalse",
        "body": "{| subject.IsOriginAllowedAsync(null).Result.Should().Be(false);| subject.IsOriginAllowedAsync(String.Empty).Result.Should().Be(false);| subject.IsOriginAllowedAsync(\" \").Result.Should().Be(false);| }"
      },
      {
        "name": "IsOriginAllowed_OriginIsAllowed_ReturnsTrue",
        "body": "{| subject.AllowedOrigins.Add(\"http://foo\");| subject.IsOriginAllowedAsync(\"http://foo\").Result.Should().Be(true);| }"
      },
      {
        "name": "IsOriginAllowed_OriginIsNotAllowed_ReturnsFalse",
        "body": "{| subject.AllowedOrigins.Add(\"http://foo\");| subject.IsOriginAllowedAsync(\"http://bar\").Result.Should().Be(false);| }"
      },
      {
        "name": "IsOriginAllowed_OriginIsInAllowedList_ReturnsTrue",
        "body": "{| subject.AllowedOrigins.Add(\"http://foo\");| subject.AllowedOrigins.Add(\"http://bar\");| subject.AllowedOrigins.Add(\"http://baz\");| subject.IsOriginAllowedAsync(\"http://bar\").Result.Should().Be(true);| }"
      },
      {
        "name": "IsOriginAllowed_OriginIsNotInAllowedList_ReturnsFalse",
        "body": "{| subject.AllowedOrigins.Add(\"http://foo\");| subject.AllowedOrigins.Add(\"http://bar\");| subject.AllowedOrigins.Add(\"http://baz\");| subject.IsOriginAllowedAsync(\"http://quux\").Result.Should().Be(false);| }"
      },
      {
        "name": "IsOriginAllowed_AllowAllTrue_ReturnsTrue",
        "body": "{| subject.AllowAll = true;| subject.IsOriginAllowedAsync(\"http://foo\").Result.Should().Be(true);| }"
      }
    ]
  },
  {
    "file": "DefaultIdentityServerInteractionServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| // for this, we're just confirming that since the session has changed, there's not use in doing the iframe and thsu SLO| _mockUserSession.SessionId = null;| _mockLogoutMessageStore.Messages.Add(\"id\", new Message<LogoutMessage>(new LogoutMessage() { SessionId = \"session\" }));| var context = await _subject.GetLogoutContextAsync(\"id\");| context.SignOutIFrameUrl.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockUserSession.Clients.Add(\"foo\");| _mockUserSession.SessionId = \"session\";| _mockUserSession.User = new IdentityServerUser(\"123\").CreatePrincipal();| var context = await _subject.GetLogoutContextAsync(null);| context.SignOutIFrameUrl.Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockUserSession.SessionId = null;| _mockLogoutMessageStore.Messages.Add(\"id\", new Message<LogoutMessage>(new LogoutMessage()));| var context = await _subject.GetLogoutContextAsync(\"id\");| context.SignOutIFrameUrl.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var context = await _subject.CreateLogoutContextAsync();| context.Should().BeNull();| _mockLogoutMessageStore.Messages.Should().BeEmpty();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockUserSession.Clients.Add(\"foo\");| _mockUserSession.User = new IdentityServerUser(\"123\").CreatePrincipal();| _mockUserSession.SessionId = \"session\";| var context = await _subject.CreateLogoutContextAsync();| context.Should().NotBeNull();| _mockLogoutMessageStore.Messages.Should().NotBeEmpty();| }"
      },
      {
        "name": "GrantConsentAsync_should_throw_if_granted_and_no_subject",
        "body": "{| Func<Task> act = () => _subject.GrantConsentAsync(| new AuthorizationRequest(), | new ConsentResponse() { ScopesValuesConsented = new[] { \"openid\" } }, | null);| act.Should().Throw<ArgumentNullException>()| .And.Message.Should().Contain(\"subject\");| }"
      },
      {
        "name": "Task",
        "body": "{| var req = new AuthorizationRequest()| {| Client = new Client { ClientId = \"client\" },| ValidatedResources = _resourceValidationResult| };| await _subject.GrantConsentAsync(req, new ConsentResponse { Error = AuthorizationError.AccessDenied }, null);| }"
      },
      {
        "name": "Task",
        "body": "{| _mockUserSession.User = new IdentityServerUser(\"bob\").CreatePrincipal();| var req = new AuthorizationRequest() { | Client = new Client { ClientId = \"client\" },| ValidatedResources = _resourceValidationResult| };| await _subject.GrantConsentAsync(req, new ConsentResponse(), null);| _mockConsentStore.Messages.Should().NotBeEmpty();| var consentRequest = new ConsentRequest(req, \"bob\");| _mockConsentStore.Messages.First().Key.Should().Be(consentRequest.Id);| }"
      }
    ]
  },
  {
    "file": "DefaultPersistedGrantServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _userConsent.StoreUserConsentAsync(new Consent()| {| CreationTime = DateTime.UtcNow,| ClientId = \"client1\",| SubjectId = \"123\",| Scopes = new string[] { \"foo1\", \"foo2\" }| });| await _userConsent.StoreUserConsentAsync(new Consent()| {| CreationTime = DateTime.UtcNow,| ClientId = \"client2\",| SubjectId = \"123\",| Scopes = new string[] { \"foo3\" }| });| await _userConsent.StoreUserConsentAsync(new Consent()| {| CreationTime = DateTime.UtcNow,| ClientId = \"client1\",| SubjectId = \"456\",| Scopes = new string[] { \"foo3\" }| });| var handle1 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"bar1\"),| new Claim(\"scope\", \"bar2\")| }| });| var handle2 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"bar3\")| }| });| var handle3 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"456\"),| new Claim(\"scope\", \"bar3\")| }| });| var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"baz1\"),| new Claim(\"scope\", \"baz2\")| }| },| Version = 1| });| var handle5 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"456\"),| new Claim(\"scope\", \"baz3\")| }| },| Version = 1| });| var handle6 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"baz3\")| }| },| Version = 1| });| var handle7 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux1\", \"quux2\" }| });| var handle8 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client2\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux3\" }| });| var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = new IdentityServerUser(\"456\").CreatePrincipal(),| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux3\" }| });| var grants = await _subject.GetAllGrantsAsync(\"123\");| grants.Count().Should().Be(2);| var grant1 = grants.First(x => x.ClientId == \"client1\");| grant1.SubjectId.Should().Be(\"123\");| grant1.ClientId.Should().Be(\"client1\");| grant1.Scopes.Should().BeEquivalentTo(new string[] { \"foo1\", \"foo2\", \"bar1\", \"bar2\", \"baz1\", \"baz2\", \"quux1\", \"quux2\" });| var grant2 = grants.First(x => x.ClientId == \"client2\");| grant2.SubjectId.Should().Be(\"123\");| grant2.ClientId.Should().Be(\"client2\");| grant2.Scopes.Should().BeEquivalentTo(new string[] { \"foo3\", \"bar3\", \"baz3\", \"quux3\" });| }"
      },
      {
        "name": "Task",
        "body": "{| await _userConsent.StoreUserConsentAsync(new Consent()| {| ClientId = \"client1\",| SubjectId = \"123\",| Scopes = new string[] { \"foo1\", \"foo2\" }| });| await _userConsent.StoreUserConsentAsync(new Consent()| {| ClientId = \"client2\",| SubjectId = \"123\",| Scopes = new string[] { \"foo3\" }| });| await _userConsent.StoreUserConsentAsync(new Consent()| {| ClientId = \"client1\",| SubjectId = \"456\",| Scopes = new string[] { \"foo3\" }| });| var handle1 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"bar1\"),| new Claim(\"scope\", \"bar2\")| }| });| var handle2 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"bar3\")| }| });| var handle3 = await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"456\"),| new Claim(\"scope\", \"bar3\")| }| });| var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"baz1\"),| new Claim(\"scope\", \"baz2\")| }| },| Version = 1| });| var handle5 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"456\"),| new Claim(\"scope\", \"baz3\")| }| },| Version = 1| });| var handle6 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"baz3\")| }| },| Version = 1| });| var handle7 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux1\", \"quux2\" }| });| var handle8 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client2\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux3\" }| });| var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = new IdentityServerUser(\"456\").CreatePrincipal(),| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux3\" }| });| await _subject.RemoveAllGrantsAsync(\"123\", \"client1\");| (await _referenceTokens.GetReferenceTokenAsync(handle1)).Should().BeNull();| (await _referenceTokens.GetReferenceTokenAsync(handle2)).Should().NotBeNull();| (await _referenceTokens.GetReferenceTokenAsync(handle3)).Should().NotBeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle5)).Should().NotBeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle6)).Should().NotBeNull();| (await _codes.GetAuthorizationCodeAsync(handle7)).Should().BeNull();| (await _codes.GetAuthorizationCodeAsync(handle8)).Should().NotBeNull();| (await _codes.GetAuthorizationCodeAsync(handle9)).Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| {| var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client3\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session3\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| await _subject.RemoveAllGrantsAsync(\"123\");| (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().BeNull();| await _refreshTokens.RemoveRefreshTokenAsync(handle1);| await _refreshTokens.RemoveRefreshTokenAsync(handle2);| await _refreshTokens.RemoveRefreshTokenAsync(handle3);| }| {| var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client3\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session3\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| await _subject.RemoveAllGrantsAsync(\"123\", \"client1\");| (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().NotBeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().NotBeNull();| await _refreshTokens.RemoveRefreshTokenAsync(handle1);| await _refreshTokens.RemoveRefreshTokenAsync(handle2);| await _refreshTokens.RemoveRefreshTokenAsync(handle3);| }| {| var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client3\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session2\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| await _subject.RemoveAllGrantsAsync(\"123\", \"client1\", \"session1\");| (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().NotBeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().NotBeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().NotBeNull();| await _refreshTokens.RemoveRefreshTokenAsync(handle1);| await _refreshTokens.RemoveRefreshTokenAsync(handle2);| await _refreshTokens.RemoveRefreshTokenAsync(handle3);| await _refreshTokens.RemoveRefreshTokenAsync(handle4);| }| {| var handle1 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle2 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle3 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client3\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session1\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| var handle4 = await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"sid\", \"session2\"),| new Claim(\"scope\", \"baz\")| }| },| Version = 1| });| await _subject.RemoveAllGrantsAsync(\"123\", sessionId:\"session1\");| (await _refreshTokens.GetRefreshTokenAsync(handle1)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle2)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle3)).Should().BeNull();| (await _refreshTokens.GetRefreshTokenAsync(handle4)).Should().NotBeNull();| await _refreshTokens.RemoveRefreshTokenAsync(handle1);| await _refreshTokens.RemoveRefreshTokenAsync(handle2);| await _refreshTokens.RemoveRefreshTokenAsync(handle3);| await _refreshTokens.RemoveRefreshTokenAsync(handle4);| }| }"
      },
      {
        "name": "Task",
        "body": "{| await _userConsent.StoreUserConsentAsync(new Consent()| {| ClientId = \"client1\",| SubjectId = \"123\",| Scopes = new string[] { \"foo1\", \"foo2\" }| });| var grants = await _subject.GetAllGrantsAsync(\"123\");| grants.Count().Should().Be(1);| grants.First().Scopes.Should().Contain(new string[] { \"foo1\", \"foo2\" });| var handle9 = await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = new IdentityServerUser(\"123\").CreatePrincipal(),| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux3\" }| });| grants = await _subject.GetAllGrantsAsync(\"123\");| grants.Count().Should().Be(1);| grants.First().Scopes.Should().Contain(new string[] { \"foo1\", \"foo2\", \"quux3\" });| }"
      }
    ]
  },
  {
    "file": "DefaultRefreshTokenServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var client = new Client();| var accessToken = new Token();| var handle = await _subject.CreateRefreshTokenAsync(_user, accessToken, client);| (await _store.GetRefreshTokenAsync(handle)).Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Absolute,| AbsoluteRefreshTokenLifetime = 10| };| var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);| var refreshToken = (await _store.GetRefreshTokenAsync(handle));| refreshToken.Should().NotBeNull();| refreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 100,| AbsoluteRefreshTokenLifetime = 10| };| var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);| var refreshToken = (await _store.GetRefreshTokenAsync(handle));| refreshToken.Should().NotBeNull();| refreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 10| };| var handle = await _subject.CreateRefreshTokenAsync(_user, new Token(), client);| var refreshToken = (await _store.GetRefreshTokenAsync(handle));| refreshToken.Should().NotBeNull();| refreshToken.Lifetime.Should().Be(client.SlidingRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| (await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client))| .Should().NotBeNull()| .And| .NotBe(handle);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 10,| AbsoluteRefreshTokenLifetime = 100| };| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var handle = await _store.StoreRefreshTokenAsync(new RefreshToken| {| CreationTime = now.AddSeconds(-10),| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| });| var refreshToken = await _store.GetRefreshTokenAsync(handle);| var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);| newHandle.Should().NotBeNull().And.Be(handle);| var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);| newRefreshToken.Should().NotBeNull();| newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 10,| AbsoluteRefreshTokenLifetime = 1000| };| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var handle = await _store.StoreRefreshTokenAsync(new RefreshToken| {| CreationTime = now.AddSeconds(-1000),| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| });| var refreshToken = await _store.GetRefreshTokenAsync(handle);| var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);| newHandle.Should().NotBeNull().And.Be(handle);| var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);| newRefreshToken.Should().NotBeNull();| newRefreshToken.Lifetime.Should().Be(client.AbsoluteRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.ReUse,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 10,| AbsoluteRefreshTokenLifetime = 0| };| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var handle = await _store.StoreRefreshTokenAsync(new RefreshToken| {| CreationTime = now.AddSeconds(-1000),| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| });| var refreshToken = await _store.GetRefreshTokenAsync(handle);| var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);| newHandle.Should().NotBeNull().And.Be(handle);| var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);| newRefreshToken.Should().NotBeNull();| newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.OneTimeOnly,| RefreshTokenExpiration = TokenExpiration.Sliding,| SlidingRefreshTokenLifetime = 10,| AbsoluteRefreshTokenLifetime = 0| };| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var handle = await _store.StoreRefreshTokenAsync(new RefreshToken| {| CreationTime = now.AddSeconds(-1000),| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| });| var refreshToken = await _store.GetRefreshTokenAsync(handle);| var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);| newHandle.Should().NotBeNull().And.NotBe(handle);| var newRefreshToken = await _store.GetRefreshTokenAsync(newHandle);| newRefreshToken.Should().NotBeNull();| newRefreshToken.Lifetime.Should().Be((int)(now - newRefreshToken.CreationTime).TotalSeconds + client.SlidingRefreshTokenLifetime);| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var newHandle = await _subject.UpdateRefreshTokenAsync(handle, refreshToken, client);| var oldToken = await _store.GetRefreshTokenAsync(handle);| var newToken = await _store.GetRefreshTokenAsync(newHandle);| oldToken.ConsumedTime.Should().Be(now);| newToken.ConsumedTime.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var result = await _subject.ValidateRefreshTokenAsync(\"invalid\", client);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var result = await _subject.ValidateRefreshTokenAsync(handle, client);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| AllowOfflineAccess = true,| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client2\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var result = await _subject.ValidateRefreshTokenAsync(handle, client);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| AllowOfflineAccess = true,| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow.AddSeconds(20);| _clock.UtcNowFunc = () => now;| var result = await _subject.ValidateRefreshTokenAsync(handle, client);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| AllowOfflineAccess = true,| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| ConsumedTime = DateTime.UtcNow,| | AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var result = await _subject.ValidateRefreshTokenAsync(handle, client);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var client = new Client| {| ClientId = \"client1\",| AllowOfflineAccess = true,| RefreshTokenUsage = TokenUsage.OneTimeOnly| };| var refreshToken = new RefreshToken| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = client.ClientId,| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Claims = new List<Claim>()| {| new Claim(\"sub\", \"123\")| }| }| };| var handle = await _store.StoreRefreshTokenAsync(refreshToken);| var now = DateTime.UtcNow;| _clock.UtcNowFunc = () => now;| var result = await _subject.ValidateRefreshTokenAsync(handle, client);| result.IsError.Should().BeFalse();| }"
      }
    ]
  },
  {
    "file": "DefaultTokenServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var request = new TokenCreationRequest { | ValidatedResources = new ResourceValidationResult()| {| Resources = new Resources()| {| ApiResources = | {| new ApiResource(\"api1\"){ Scopes = { \"scope1\" } },| new ApiResource(\"api2\"){ Scopes = { \"scope2\" } },| new ApiResource(\"api3\"){ Scopes = { \"scope3\" } },| },| },| ParsedScopes =| {| new ParsedScopeValue(\"scope1\"),| new ParsedScopeValue(\"scope2\"),| new ParsedScopeValue(\"scope3\"),| }| },| ValidatedRequest = new ValidatedRequest()| {| Client = new Client { }| }| };| var result = await _subject.CreateAccessTokenAsync(request);| result.Audiences.Count.Should().Be(3);| result.Audiences.Should().BeEquivalentTo(new[] { \"api1\", \"api2\", \"api3\" });| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new TokenCreationRequest| {| ValidatedResources = new ResourceValidationResult()| {| Resources = new Resources()| {| ApiScopes =| {| new ApiScope(\"scope1\"),| new ApiScope(\"scope2\"),| new ApiScope(\"scope3\"),| },| },| ParsedScopes =| {| new ParsedScopeValue(\"scope1\"),| new ParsedScopeValue(\"scope2\"),| new ParsedScopeValue(\"scope3\"),| }| },| ValidatedRequest = new ValidatedRequest()| {| Client = new Client { }| }| };| var result = await _subject.CreateAccessTokenAsync(request);| result.Audiences.Count.Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new TokenCreationRequest| {| ValidatedResources = new ResourceValidationResult(),| ValidatedRequest = new ValidatedRequest()| {| Client = new Client { },| SessionId = null| }| };| var result = await _subject.CreateAccessTokenAsync(request);| result.Claims.SingleOrDefault(x => x.Type == JwtClaimTypes.SessionId).Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var request = new TokenCreationRequest| {| ValidatedResources = new ResourceValidationResult(),| ValidatedRequest = new ValidatedRequest()| {| Client = new Client { },| SessionId = \"123\"| }| };| var result = await _subject.CreateAccessTokenAsync(request);| result.Claims.SingleOrDefault(x => x.Type == JwtClaimTypes.SessionId).Value.Should().Be(\"123\");| }"
      }
    ]
  },
  {
    "file": "DefaultUserSessionTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| await _subject.CreateSessionIdAsync(_user, _props);| _props.GetSessionId().Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| // this test is needed to allow same session id when cookie is slid| // IOW, if UI layer passes in same properties dictionary, then we assume it's the same user| _props.SetSessionId(\"999\");| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.CreateSessionIdAsync(_user, _props);| _props.GetSessionId().Should().NotBeNull();| _props.GetSessionId().Should().Be(\"999\");| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| _props.GetSessionId().Should().BeNull();| await _subject.CreateSessionIdAsync(_user, _props);| _props.GetSessionId().Should().NotBeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _props.SetSessionId(\"999\");| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.CreateSessionIdAsync(new IdentityServerUser(\"alice\").CreatePrincipal(), _props);| _props.GetSessionId().Should().NotBeNull();| _props.GetSessionId().Should().NotBe(\"999\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.CreateSessionIdAsync(_user, _props);| var cookieContainer = new CookieContainer();| var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);| cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));| _mockHttpContext.HttpContext.Response.Headers.Clear();| var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();| cookie.Value.Should().Be(_props.GetSessionId());| }"
      },
      {
        "name": "Task",
        "body": "{| _props.SetSessionId(\"999\");| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.EnsureSessionIdCookieAsync();| var cookieContainer = new CookieContainer();| var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);| cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));| _mockHttpContext.HttpContext.Response.Headers.Clear();| var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();| cookie.Value.Should().Be(\"999\");| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.EnsureSessionIdCookieAsync();| var cookieContainer = new CookieContainer();| var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);| cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));| _mockHttpContext.HttpContext.Response.Headers.Clear();| var cookie = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName).FirstOrDefault();| cookie.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _props.SetSessionId(\"999\");| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.EnsureSessionIdCookieAsync();| var cookieContainer = new CookieContainer();| var cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);| cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));| _mockHttpContext.HttpContext.Response.Headers.Clear();| string cookie = cookieContainer.GetCookieHeader(new Uri(\"http://server\"));| _mockHttpContext.HttpContext.Request.Headers.Add(\"Cookie\", cookie);| await _subject.RemoveSessionIdCookieAsync();| cookies = _mockHttpContext.HttpContext.Response.Headers.Where(x => x.Key.Equals(\"Set-Cookie\", StringComparison.OrdinalIgnoreCase)).Select(x => x.Value);| cookieContainer.SetCookies(new Uri(\"http://server\"), string.Join(\",\", cookies));| var query = cookieContainer.GetCookies(new Uri(\"http://server\")).Cast<Cookie>().Where(x => x.Name == _options.Authentication.CheckSessionCookieName);| query.Count().Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| _props.SetSessionId(\"999\");| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| var sid = await _subject.GetSessionIdAsync();| sid.Should().Be(\"999\");| }"
      },
      {
        "name": "Task",
        "body": "{| var sid = await _subject.GetSessionIdAsync();| sid.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| _props.Items.Count.Should().Be(0);| await _subject.AddClientIdAsync(\"client\");| _props.Items.Count.Should().Be(1);| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| var user = await _subject.GetUserAsync();| user.GetSubjectId().Should().Be(\"123\");| }"
      },
      {
        "name": "Task",
        "body": "{| var user = await _subject.GetUserAsync();| user.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.AddClientIdAsync(\"client\");| var item = _props.Items.First();| _props.Items[item.Key] = \"junk\";| var clients = await _subject.GetClientListAsync();| clients.Should().BeEmpty();| _props.Items.Count.Should().Be(0);| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.AddClientIdAsync(\"client\");| var clients = await _subject.GetClientListAsync();| clients.Should().Contain(new string[] { \"client\" });| }"
      },
      {
        "name": "Task",
        "body": "{| _mockAuthenticationHandler.Result = AuthenticateResult.Success(new AuthenticationTicket(_user, _props, \"scheme\"));| await _subject.AddClientIdAsync(\"client1\");| await _subject.AddClientIdAsync(\"client2\");| var clients = await _subject.GetClientListAsync();| clients.Should().Contain(new string[] { \"client2\", \"client1\" });| }"
      }
    ]
  },
  {
    "file": "DistributedDeviceFlowThrottlingServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var handle = Guid.NewGuid().ToString();| var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock {UtcNowFunc = () => testDate}, options);| var result = await service.ShouldSlowDown(handle, deviceCode);| result.Should().BeFalse();| CheckCacheEntry(handle);| }"
      },
      {
        "name": "Task",
        "body": "{| var handle = Guid.NewGuid().ToString();| var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);| cache.Set(CacheKey + handle, Encoding.UTF8.GetBytes(testDate.AddSeconds(-1).ToString(\"O\")));| var result = await service.ShouldSlowDown(handle, deviceCode);| result.Should().BeTrue();| | CheckCacheEntry(handle);| }"
      },
      {
        "name": "Task",
        "body": "{| var handle = Guid.NewGuid().ToString();| | var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);| cache.Set($\"devicecode_{handle}\", Encoding.UTF8.GetBytes(testDate.AddSeconds(-deviceCode.Lifetime - 1).ToString(\"O\")));| var result = await service.ShouldSlowDown(handle, deviceCode);| result.Should().BeFalse();| CheckCacheEntry(handle);| }"
      },
      {
        "name": "Task",
        "body": "{| var handle = Guid.NewGuid().ToString();| deviceCode.CreationTime = testDate.AddSeconds(-deviceCode.Lifetime * 2);| var service = new DistributedDeviceFlowThrottlingService(cache, new StubClock { UtcNowFunc = () => testDate }, options);| var result = await service.ShouldSlowDown(handle, deviceCode);| | result.Should().BeFalse();| cache.Items.TryGetValue(CacheKey + handle, out var values).Should().BeTrue();| values?.Item2.AbsoluteExpiration.Should().BeOnOrAfter(testDate);| }"
      }
    ]
  },
  {
    "file": "NumericUserCodeServiceTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var sut = new NumericUserCodeGenerator();| var userCode = await sut.GenerateAsync();| var userCodeInt = int.Parse(userCode);| userCodeInt.Should().BeGreaterOrEqualTo(100000000);| userCodeInt.Should().BeLessOrEqualTo(999999999);| }"
      }
    ]
  },
  {
    "file": "DefaultPersistedGrantStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var code1 = new AuthorizationCode()| {| ClientId = \"test\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"scope1\", \"scope2\" }| };| var handle = await _codes.StoreAuthorizationCodeAsync(code1);| var code2 = await _codes.GetAuthorizationCodeAsync(handle);| code1.ClientId.Should().Be(code2.ClientId);| code1.CreationTime.Should().Be(code2.CreationTime);| code1.Lifetime.Should().Be(code2.Lifetime);| code1.Subject.GetSubjectId().Should().Be(code2.Subject.GetSubjectId());| code1.CodeChallenge.Should().Be(code2.CodeChallenge);| code1.RedirectUri.Should().Be(code2.RedirectUri);| code1.Nonce.Should().Be(code2.Nonce);| code1.RequestedScopes.Should().BeEquivalentTo(code2.RequestedScopes);| }"
      },
      {
        "name": "Task",
        "body": "{| var code1 = new AuthorizationCode()| {| ClientId = \"test\",| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"scope1\", \"scope2\" }| };| var handle = await _codes.StoreAuthorizationCodeAsync(code1);| await _codes.RemoveAuthorizationCodeAsync(handle);| var code2 = await _codes.GetAuthorizationCodeAsync(handle);| code2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| }| },| Version = 1| };| var handle = await _refreshTokens.StoreRefreshTokenAsync(token1);| var token2 = await _refreshTokens.GetRefreshTokenAsync(handle);| token1.ClientId.Should().Be(token2.ClientId);| token1.CreationTime.Should().Be(token2.CreationTime);| token1.Lifetime.Should().Be(token2.Lifetime);| token1.Subject.GetSubjectId().Should().Be(token2.Subject.GetSubjectId());| token1.Version.Should().Be(token2.Version);| token1.AccessToken.Audiences.Count.Should().Be(1);| token1.AccessToken.Audiences.First().Should().Be(\"aud\");| token1.AccessToken.ClientId.Should().Be(token2.AccessToken.ClientId);| token1.AccessToken.CreationTime.Should().Be(token2.AccessToken.CreationTime);| token1.AccessToken.Type.Should().Be(token2.AccessToken.Type);| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| }| },| Version = 1| };| var handle = await _refreshTokens.StoreRefreshTokenAsync(token1);| await _refreshTokens.RemoveRefreshTokenAsync(handle);| var token2 = await _refreshTokens.GetRefreshTokenAsync(handle);| token2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 10,| AccessToken = new Token| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| }| },| Version = 1| };| var handle1 = await _refreshTokens.StoreRefreshTokenAsync(token1);| var handle2 = await _refreshTokens.StoreRefreshTokenAsync(token1);| await _refreshTokens.RemoveRefreshTokensAsync(\"123\", \"client\");| var token2 = await _refreshTokens.GetRefreshTokenAsync(handle1);| token2.Should().BeNull();| token2 = await _refreshTokens.GetRefreshTokenAsync(handle2);| token2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new Token()| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| },| Version = 1| };| var handle = await _referenceTokens.StoreReferenceTokenAsync(token1);| var token2 = await _referenceTokens.GetReferenceTokenAsync(handle);| token1.ClientId.Should().Be(token2.ClientId);| token1.Audiences.Count.Should().Be(1);| token1.Audiences.First().Should().Be(\"aud\");| token1.CreationTime.Should().Be(token2.CreationTime);| token1.Type.Should().Be(token2.Type);| token1.Lifetime.Should().Be(token2.Lifetime);| token1.Version.Should().Be(token2.Version);| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new Token()| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| },| Version = 1| };| var handle = await _referenceTokens.StoreReferenceTokenAsync(token1);| await _referenceTokens.RemoveReferenceTokenAsync(handle);| var token2 = await _referenceTokens.GetReferenceTokenAsync(handle);| token2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var token1 = new Token()| {| ClientId = \"client\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"foo\")| },| Version = 1| };| var handle1 = await _referenceTokens.StoreReferenceTokenAsync(token1);| var handle2 = await _referenceTokens.StoreReferenceTokenAsync(token1);| await _referenceTokens.RemoveReferenceTokensAsync(\"123\", \"client\");| var token2 = await _referenceTokens.GetReferenceTokenAsync(handle1);| token2.Should().BeNull();| token2 = await _referenceTokens.GetReferenceTokenAsync(handle2);| token2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var consent1 = new Consent()| {| CreationTime = DateTime.UtcNow,| ClientId = \"client\",| SubjectId = \"123\",| Scopes = new string[] { \"foo\", \"bar\" }| };| await _userConsent.StoreUserConsentAsync(consent1);| var consent2 = await _userConsent.GetUserConsentAsync(\"123\", \"client\");| consent2.ClientId.Should().Be(consent1.ClientId);| consent2.SubjectId.Should().Be(consent1.SubjectId);| consent2.Scopes.Should().BeEquivalentTo(new string[] { \"bar\", \"foo\" });| }"
      },
      {
        "name": "Task",
        "body": "{| var consent1 = new Consent()| {| CreationTime = DateTime.UtcNow,| ClientId = \"client\",| SubjectId = \"123\",| Scopes = new string[] { \"foo\", \"bar\" }| };| await _userConsent.StoreUserConsentAsync(consent1);| await _userConsent.RemoveUserConsentAsync(\"123\", \"client\");| var consent2 = await _userConsent.GetUserConsentAsync(\"123\", \"client\");| consent2.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubHandleGenerationService.Handle = \"key\";| await _referenceTokens.StoreReferenceTokenAsync(new Token()| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Lifetime = 10,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"bar1\"),| new Claim(\"scope\", \"bar2\")| }| });| await _refreshTokens.StoreRefreshTokenAsync(new RefreshToken()| {| CreationTime = DateTime.UtcNow,| Lifetime = 20,| AccessToken = new Token| {| ClientId = \"client1\",| Audiences = { \"aud\" },| CreationTime = DateTime.UtcNow,| Type = \"type\",| Claims = new List<Claim>| {| new Claim(\"sub\", \"123\"),| new Claim(\"scope\", \"baz1\"),| new Claim(\"scope\", \"baz2\")| }| },| Version = 1| });| await _codes.StoreAuthorizationCodeAsync(new AuthorizationCode()| {| ClientId = \"client1\",| CreationTime = DateTime.UtcNow,| Lifetime = 30,| Subject = _user,| CodeChallenge = \"challenge\",| RedirectUri = \"http://client/cb\",| Nonce = \"nonce\",| RequestedScopes = new string[] { \"quux1\", \"quux2\" }| });| (await _codes.GetAuthorizationCodeAsync(\"key\")).Lifetime.Should().Be(30);| (await _refreshTokens.GetRefreshTokenAsync(\"key\")).Lifetime.Should().Be(20);| (await _referenceTokens.GetReferenceTokenAsync(\"key\")).Lifetime.Should().Be(10);| }"
      }
    ]
  },
  {
    "file": "InMemoryClientStoreTests.cs",
    "methods": [
      {
        "name": "InMemoryClient_should_throw_if_contain_duplicate_client_ids",
        "body": "{| List<Client> clients = new List<Client>| {| new Client { ClientId = \"1\"},| new Client { ClientId = \"1\"},| new Client { ClientId = \"3\"}| };| Action act = () => new InMemoryClientStore(clients);| act.Should().Throw<ArgumentException>();| }"
      },
      {
        "name": "InMemoryClient_should_not_throw_if_does_not_contain_duplicate_client_ids",
        "body": "{| List<Client> clients = new List<Client>| {| new Client { ClientId = \"1\"},| new Client { ClientId = \"2\"},| new Client { ClientId = \"3\"}| };| new InMemoryClientStore(clients);| }"
      }
    ]
  },
  {
    "file": "InMemoryDeviceFlowStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var deviceCode = Guid.NewGuid().ToString();| var userCode = Guid.NewGuid().ToString();| var data = new DeviceCode| {| ClientId = Guid.NewGuid().ToString(),| CreationTime = DateTime.UtcNow,| Lifetime = 300,| IsAuthorized = false,| IsOpenId = true,| Subject = null,| RequestedScopes = new[] {\"scope1\", \"scope2\"}| };| await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);| var foundData = await _store.FindByUserCodeAsync(userCode);| foundData.ClientId.Should().Be(data.ClientId);| foundData.CreationTime.Should().Be(data.CreationTime);| foundData.Lifetime.Should().Be(data.Lifetime);| foundData.IsAuthorized.Should().Be(data.IsAuthorized);| foundData.IsOpenId.Should().Be(data.IsOpenId);| foundData.Subject.Should().Be(data.Subject);| foundData.RequestedScopes.Should().BeEquivalentTo(data.RequestedScopes);| }"
      },
      {
        "name": "Task",
        "body": "{| var deviceCode = Guid.NewGuid().ToString();| var userCode = Guid.NewGuid().ToString();| var data = new DeviceCode| {| ClientId = Guid.NewGuid().ToString(),| CreationTime = DateTime.UtcNow,| Lifetime = 300,| IsAuthorized = false,| IsOpenId = true,| Subject = null,| RequestedScopes = new[] {\"scope1\", \"scope2\"}| };| await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);| var foundData = await _store.FindByDeviceCodeAsync(deviceCode);| foundData.ClientId.Should().Be(data.ClientId);| foundData.CreationTime.Should().Be(data.CreationTime);| foundData.Lifetime.Should().Be(data.Lifetime);| foundData.IsAuthorized.Should().Be(data.IsAuthorized);| foundData.IsOpenId.Should().Be(data.IsOpenId);| foundData.Subject.Should().Be(data.Subject);| foundData.RequestedScopes.Should().BeEquivalentTo(data.RequestedScopes);| }"
      },
      {
        "name": "Task",
        "body": "{| var deviceCode = Guid.NewGuid().ToString();| var userCode = Guid.NewGuid().ToString();| var initialData = new DeviceCode| {| ClientId = Guid.NewGuid().ToString(),| CreationTime = DateTime.UtcNow,| Lifetime = 300,| IsAuthorized = false,| IsOpenId = true,| Subject = null,| RequestedScopes = new[] {\"scope1\", \"scope2\"}| };| await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, initialData);| var updatedData = new DeviceCode| {| ClientId = Guid.NewGuid().ToString(),| CreationTime = initialData.CreationTime.AddHours(2),| Lifetime = initialData.Lifetime + 600,| IsAuthorized = !initialData.IsAuthorized,| IsOpenId = !initialData.IsOpenId,| Subject = new ClaimsPrincipal(new ClaimsIdentity(new List<Claim> {new Claim(\"sub\", \"123\")})),| RequestedScopes = new[] {\"api1\", \"api2\"}| };| await _store.UpdateByUserCodeAsync(userCode, updatedData);| var foundData = await _store.FindByUserCodeAsync(userCode);| foundData.ClientId.Should().Be(updatedData.ClientId);| foundData.CreationTime.Should().Be(updatedData.CreationTime);| foundData.Lifetime.Should().Be(updatedData.Lifetime);| foundData.IsAuthorized.Should().Be(updatedData.IsAuthorized);| foundData.IsOpenId.Should().Be(updatedData.IsOpenId);| foundData.Subject.Should().BeEquivalentTo(updatedData.Subject);| foundData.RequestedScopes.Should().BeEquivalentTo(updatedData.RequestedScopes);| }"
      },
      {
        "name": "Task",
        "body": "{| var deviceCode = Guid.NewGuid().ToString();| var userCode = Guid.NewGuid().ToString();| var data = new DeviceCode| {| ClientId = Guid.NewGuid().ToString(),| CreationTime = DateTime.UtcNow,| Lifetime = 300,| IsAuthorized = false,| IsOpenId = true,| Subject = null,| RequestedScopes = new[] { \"scope1\", \"scope2\" }| };| await _store.StoreDeviceAuthorizationAsync(deviceCode, userCode, data);| await _store.RemoveByDeviceCodeAsync(deviceCode);| var foundData = await _store.FindByUserCodeAsync(userCode);| foundData.Should().BeNull();| }"
      }
    ]
  },
  {
    "file": "InMemoryPersistedGrantStoreTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| {| var item = await _subject.GetAsync(\"key1\");| item.Should().BeNull();| }| await _subject.StoreAsync(new PersistedGrant() { Key = \"key1\" });| {| var item = await _subject.GetAsync(\"key1\");| item.Should().NotBeNull();| }| }"
      },
      {
        "name": "Task",
        "body": "{| await _subject.StoreAsync(new PersistedGrant() { Key = \"key1\", SubjectId = \"sub1\", ClientId = \"client1\", SessionId = \"session1\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key2\", SubjectId = \"sub1\", ClientId = \"client2\", SessionId = \"session1\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key3\", SubjectId = \"sub1\", ClientId = \"client1\", SessionId = \"session2\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key4\", SubjectId = \"sub1\", ClientId = \"client3\", SessionId = \"session2\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key5\", SubjectId = \"sub1\", ClientId = \"client4\", SessionId = \"session3\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key6\", SubjectId = \"sub1\", ClientId = \"client4\", SessionId = \"session4\" });| await _subject.StoreAsync(new PersistedGrant() { Key = \"key7\", SubjectId = \"sub2\", ClientId = \"client4\", SessionId = \"session4\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\", \"key2\", \"key3\", \"key4\", \"key5\", \"key6\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub3\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\", \"key3\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key2\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client3\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key4\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client4\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key5\", \"key6\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client5\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client1\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub3\",| ClientId = \"client1\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session1\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key1\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session2\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key3\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session3\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\",| SessionId = \"session1\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key2\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\",| SessionId = \"session2\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client4\",| SessionId = \"session4\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key6\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session4\"| }))| .Select(x => x.Key).Should().BeEquivalentTo(new[] { \"key7\" });| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session1\"| }))| .Select(x => x.Key).Should().BeEmpty();| (await _subject.GetAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session5\"| }))| .Select(x => x.Key).Should().BeEmpty();| }"
      },
      {
        "name": "Task",
        "body": "{| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\"| });| (await _subject.GetAsync(\"key1\")).Should().BeNull();| (await _subject.GetAsync(\"key2\")).Should().BeNull();| (await _subject.GetAsync(\"key3\")).Should().BeNull();| (await _subject.GetAsync(\"key4\")).Should().BeNull();| (await _subject.GetAsync(\"key5\")).Should().BeNull();| (await _subject.GetAsync(\"key6\")).Should().BeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().BeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub3\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\"| });| (await _subject.GetAsync(\"key1\")).Should().BeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().BeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().BeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client3\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().BeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client4\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().BeNull();| (await _subject.GetAsync(\"key6\")).Should().BeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client5\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client1\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client4\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().BeNull();| (await _subject.GetAsync(\"key6\")).Should().BeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub3\",| ClientId = \"client1\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session1\"| });| (await _subject.GetAsync(\"key1\")).Should().BeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session2\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().BeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client1\",| SessionId = \"session3\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\",| SessionId = \"session1\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().BeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client2\",| SessionId = \"session2\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub1\",| ClientId = \"client4\",| SessionId = \"session4\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().BeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session4\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().BeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session1\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub2\",| ClientId = \"client4\",| SessionId = \"session5\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| {| await Populate();| await _subject.RemoveAllAsync(new PersistedGrantFilter| {| SubjectId = \"sub3\",| ClientId = \"client1\",| SessionId = \"session1\"| });| (await _subject.GetAsync(\"key1\")).Should().NotBeNull();| (await _subject.GetAsync(\"key2\")).Should().NotBeNull();| (await _subject.GetAsync(\"key3\")).Should().NotBeNull();| (await _subject.GetAsync(\"key4\")).Should().NotBeNull();| (await _subject.GetAsync(\"key5\")).Should().NotBeNull();| (await _subject.GetAsync(\"key6\")).Should().NotBeNull();| (await _subject.GetAsync(\"key7\")).Should().NotBeNull();| }| }"
      }
    ]
  },
  {
    "file": "InMemoryResourcesStoreTests.cs",
    "methods": [
      {
        "name": "InMemoryResourcesStore_should_throw_if_contains_duplicate_names",
        "body": "{| List<IdentityResource> identityResources = new List<IdentityResource>| {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"C\" }| };| List<ApiResource> apiResources = new List<ApiResource>| {| new ApiResource { Name = \"B\" },| new ApiResource { Name = \"B\" },| new ApiResource { Name = \"C\" }| };| List<ApiScope> scopes = new List<ApiScope>| {| new ApiScope { Name = \"B\" },| new ApiScope { Name = \"C\" },| new ApiScope { Name = \"C\" },| };| Action act = () => new InMemoryResourcesStore(identityResources, null, null);| act.Should().Throw<ArgumentException>();| act = () => new InMemoryResourcesStore(null, apiResources, null);| act.Should().Throw<ArgumentException>();| | act = () => new InMemoryResourcesStore(null, null, scopes);| act.Should().Throw<ArgumentException>();| }"
      },
      {
        "name": "InMemoryResourcesStore_should_not_throw_if_does_not_contains_duplicate_names",
        "body": "{| List<IdentityResource> identityResources = new List<IdentityResource>| {| new IdentityResource { Name = \"A\" },| new IdentityResource { Name = \"B\" },| new IdentityResource { Name = \"C\" }| };| List<ApiResource> apiResources = new List<ApiResource>| {| new ApiResource { Name = \"A\" },| new ApiResource { Name = \"B\" },| new ApiResource { Name = \"C\" }| };| List<ApiScope> apiScopes = new List<ApiScope>| {| new ApiScope { Name = \"A\" },| new ApiScope { Name = \"B\" },| new ApiScope { Name = \"C\" },| };| | new InMemoryResourcesStore(identityResources, null, null);| new InMemoryResourcesStore(null, apiResources, null);| new InMemoryResourcesStore(null, null, apiScopes);| }"
      }
    ]
  },
  {
    "file": "EndSessionRequestValidatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| _options.Authentication.RequireAuthenticatedUserForSignOutMessage = true;| var parameters = new NameValueCollection();| var result = await _subject.ValidateAsync(parameters, null);| result.IsError.Should().BeTrue();| result = await _subject.ValidateAsync(parameters, new ClaimsPrincipal());| result.IsError.Should().BeTrue();| result = await _subject.ValidateAsync(parameters, new ClaimsPrincipal(new ClaimsIdentity()));| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()| {| IsError = false,| Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },| Client = new Client() { ClientId = \"client\"}| };| _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;| var parameters = new NameValueCollection();| parameters.Add(\"id_token_hint\", \"id_token\");| parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");| parameters.Add(\"client_id\", \"client1\");| parameters.Add(\"state\", \"foo\");| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeFalse();| result.ValidatedRequest.Client.ClientId.Should().Be(\"client\");| result.ValidatedRequest.PostLogOutUri.Should().Be(\"http://client/signout-cb\");| result.ValidatedRequest.State.Should().Be(\"foo\");| result.ValidatedRequest.Subject.GetSubjectId().Should().Be(_user.GetSubjectId());| }"
      },
      {
        "name": "Task",
        "body": "{| _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()| {| IsError = false,| Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },| Client = new Client() { ClientId = \"client1\", PostLogoutRedirectUris = new List<string> { \"foo\" } }| };| _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;| var parameters = new NameValueCollection();| parameters.Add(\"id_token_hint\", \"id_token\");| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeFalse();| result.ValidatedRequest.PostLogOutUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()| {| IsError = false,| Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },| Client = new Client() { ClientId = \"client1\", PostLogoutRedirectUris = new List<string> { \"foo\", \"bar\" } }| };| _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;| var parameters = new NameValueCollection();| parameters.Add(\"id_token_hint\", \"id_token\");| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeFalse();| result.ValidatedRequest.PostLogOutUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()| {| IsError = false,| Claims = new Claim[] { new Claim(\"sub\", _user.GetSubjectId()) },| Client = new Client() { ClientId = \"client\" }| };| _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = false;| var parameters = new NameValueCollection();| parameters.Add(\"id_token_hint\", \"id_token\");| parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");| parameters.Add(\"client_id\", \"client1\");| parameters.Add(\"state\", \"foo\");| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeFalse();| result.ValidatedRequest.Client.ClientId.Should().Be(\"client\");| result.ValidatedRequest.Subject.GetSubjectId().Should().Be(_user.GetSubjectId());| | result.ValidatedRequest.State.Should().BeNull();| result.ValidatedRequest.PostLogOutUri.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| _stubTokenValidator.IdentityTokenValidationResult = new TokenValidationResult()| {| IsError = false,| Claims = new Claim[] { new Claim(\"sub\", \"xoxo\") },| Client = new Client() { ClientId = \"client\" }| };| _stubRedirectUriValidator.IsPostLogoutRedirectUriValid = true;| var parameters = new NameValueCollection();| parameters.Add(\"id_token_hint\", \"id_token\");| parameters.Add(\"post_logout_redirect_uri\", \"http://client/signout-cb\");| parameters.Add(\"client_id\", \"client1\");| parameters.Add(\"state\", \"foo\");| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeTrue();| }"
      },
      {
        "name": "Task",
        "body": "{| var parameters = new NameValueCollection();| var result = await _subject.ValidateAsync(parameters, _user);| result.IsError.Should().BeFalse();| result.ValidatedRequest.Raw.Should().BeSameAs(parameters);| }"
      }
    ]
  },
  {
    "file": "IntrospectionRequestValidatorTests.cs",
    "methods": [
      {
        "name": "Task",
        "body": "{| var token = new Token {| CreationTime = DateTime.UtcNow,| Issuer = \"http://op\",| ClientId = \"codeclient\",| Lifetime = 1000,| Claims =| {| new System.Security.Claims.Claim(\"scope\", \"a\"),| new System.Security.Claims.Claim(\"scope\", \"b\")| }| };| var handle = await _referenceTokenStore.StoreReferenceTokenAsync(token);| | var param = new NameValueCollection()| {| { \"token\", handle}| };| var result = await _subject.ValidateAsync(param, null);| result.IsError.Should().Be(false);| result.IsActive.Should().Be(true);| result.Claims.Count().Should().Be(5);| result.Token.Should().Be(handle);| }"
      },
      {
        "name": "Task",
        "body": "{| var param = new NameValueCollection();| | var result = await _subject.ValidateAsync(param, null);| result.IsError.Should().Be(true);| result.Error.Should().Be(\"missing_token\");| result.IsActive.Should().Be(false);| result.Claims.Should().BeNull();| result.Token.Should().BeNull();| }"
      },
      {
        "name": "Task",
        "body": "{| var param = new NameValueCollection()| {| { \"token\", \"invalid\" }| };| var result = await _subject.ValidateAsync(param, null);| result.IsError.Should().Be(false);| result.IsActive.Should().Be(false);| result.Claims.Should().BeNull();| result.Token.Should().Be(\"invalid\");| }"
      }
    ]
  }
]